(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("prettier"));
	else if(typeof define === 'function' && define.amd)
		define(["prettier/standalone"], factory);
	else if(typeof exports === 'object')
		exports["prettierPluginLiquid"] = factory(require("prettier"));
	else
		root["prettierPluginLiquid"] = factory(root["prettier"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_prettier__) {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/shims/liquid-html-ohm.js":
/*!****************************************!*\
  !*** ./build/shims/liquid-html-ohm.js ***!
  \****************************************/
/***/ ((module) => {

module.exports = String.raw`LiquidHTML {
  Node
    = yamlFrontmatter? (HtmlNode | liquidNode | TextNode)*

  yamlFrontmatter =
    "---" newline anyExceptStar<"---"> "---" newline

  HtmlNode =
    | HtmlComment
    | HtmlRawTag
    | HtmlVoidElement
    | HtmlSelfClosingElement
    | HtmlTagClose
    | HtmlTagOpen

  HtmlComment = "<!--" #(anyExceptStar<"-->"> "-->")

  // These are black holes, we'll ignore what's in them
  HtmlRawTag =
    | HtmlRawTagImpl<"script">
    | HtmlRawTagImpl<"style">
    | HtmlRawTagImpl<"svg">

  HtmlRawTagImpl<name> =
    #("<" name) AttrList ">" #(anyExceptStar<endTag<name>> endTag<name>)

  endTag<name> =
    "</" name space* ">"

  HtmlVoidElement =
    #("<" voidElementName &(space | "/" | ">")) AttrList "/"? ">"

  HtmlSelfClosingElement =
    #("<" tagNameOrLiquidDrop) AttrList "/>"

  HtmlTagOpen =
    #("<" tagNameOrLiquidDrop) AttrList ">"

  HtmlTagClose =
    #("</" tagNameOrLiquidDrop) ">"

  tagNameOrLiquidDrop =
    | tagName
    | liquidDrop

  tagName =
    letter (alnum | "-" | ":")*

  liquidTagName =
    letter (alnum | "_")*

  AttrList = Attr*

  Attr =
    liquidNode | AttrSingleQuoted | AttrDoubleQuoted | AttrUnquoted | attrEmpty

  attrEmpty = attrName

  AttrUnquoted = attrName "=" attrUnquotedValue
  AttrSingleQuoted = attrName "=" "'" #(attrSingleQuotedValue "'")
  AttrDoubleQuoted = attrName "=" "\"" #(attrDoubleQuotedValue "\"")

  // https://html.spec.whatwg.org/#attributes-2
  attrName = anyExceptPlus<(space | quotes | "=" | ">" | "/" | "{{" | "{%" | controls | noncharacters)>
  attrUnquotedValue = (attrUnquotedTextNode)*
  attrSingleQuotedValue = (liquidNode | attrSingleQuotedTextNode)*
  attrDoubleQuotedValue = (liquidNode | attrDoubleQuotedTextNode)*

  attrUnquotedTextNode = anyExceptPlus<(space | quotes | "=" | "<" | ">" | "${"`"}" | "{{" | "{%")>
  attrSingleQuotedTextNode = anyExceptPlus<("'" | "{{" | "{%")>
  attrDoubleQuotedTextNode = anyExceptPlus<("\""| "{{" | "{%")>

  quotes =  "'" | "\""

  LiquidNode = liquidNode
  liquidNode = liquidRawTag | liquidDrop | liquidTagClose | liquidTagOpen | liquidTag | liquidInlineComment

  liquidTagOpen = "{%" "-"? space* blockName space* tagMarkup "-"? "%}"
  liquidTagClose = "{%" "-"? space* "end" blockName space* tagMarkup "-"? "%}"
  liquidTag = "{%" "-"? space* liquidTagName space? tagMarkup "-"? "%}"
  liquidDrop = "{{" "-"? space* liquidDropCases "-"? "}}"
  liquidDropCases = liquidVariable | liquidDropBaseCase
  liquidDropBaseCase = anyExceptStar<("-}}" | "}}")>
  liquidInlineComment = "{%" "-"? space* "#" space? tagMarkup "-"? "%}"

  liquidRawTag =
    | liquidRawTagImpl<"raw">
    | liquidRawTagImpl<"comment">
    | liquidRawTagImpl<"javascript">
    | liquidRawTagImpl<"schema">
    | liquidRawTagImpl<"style">
  liquidRawTagImpl<name> =
    "{%" "-"? space* name space* "-"? "%}"
    anyExceptStar<liquidRawTagClose<name>>
    "{%" "-"? space* "end" name space* "-"? "%}"
  liquidRawTagClose<name> =
    "{%" "-"? space* "end" name space* "-"? "%}"

  // In order for the grammar to "fallback" to the base case, this
  // rule must pass if and only if we support what we parse. This
  // implies that—since we don't support filters yet—we have a
  // positive lookahead on "-}}" or "}}" in the rule. We do this
  // because we'd otherwise positively match the following string
  // instead of falling back to the other rule:
  // {{ 'string' | some_filter }}
  liquidVariable = liquidExpression liquidFilter* space* &("-}}" | "}}")

  liquidExpression =
    | liquidString
    | liquidNumber
    | liquidLiteral
    | liquidRange
    | liquidVariableLookup

  liquidString = liquidSingleQuotedString | liquidDoubleQuotedString
  liquidSingleQuotedString = "'" anyExceptStar<("'"| "%}" | "}}")> "'"
  liquidDoubleQuotedString = "\"" anyExceptStar<("\""| "%}" | "}}")> "\""

  liquidNumber = liquidFloat | liquidInteger
  liquidInteger = "-"? digit+
  liquidFloat = "-"? digit+ "." digit+

  liquidLiteral =
    ( "true"
    | "false"
    | "blank"
    | "empty"
    | "nil"
    | "null"
    ) ~identifierCharacter

  liquidRange =
    "(" space* liquidExpression space* ".." space* liquidExpression space* ")"

  liquidVariableLookup = variableSegment? lookup*
  lookup =
    | indexLookup
    | dotLookup
  indexLookup = space* "[" space* liquidExpression space* "]"
  dotLookup = space* "." space* identifier

  liquidFilter = space* "|" space* identifier (space* ":" space* filterArguments)?
  filterSeparator = space* "," space*
  filterArguments = listOf<filterArgument, filterSeparator>
  filterArgument = namedArgument | positionalArgument
  positionalArgument = liquidExpression
  namedArgument = variableSegment space* ":" space* liquidExpression

  variableSegment = (letter | "_") identifierCharacter*
  identifier = variableSegment "?"?

  // https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#void-element
  // Cheating a bit with by stretching it to the doctype
  voidElementName =
    ( caseInsensitive<"!doctype">
    | caseInsensitive<"area">
    | caseInsensitive<"base">
    | caseInsensitive<"br">
    | caseInsensitive<"col">
    | caseInsensitive<"command">
    | caseInsensitive<"embed">
    | caseInsensitive<"hr">
    | caseInsensitive<"img">
    | caseInsensitive<"input">
    | caseInsensitive<"keygen">
    | caseInsensitive<"link">
    | caseInsensitive<"meta">
    | caseInsensitive<"param">
    | caseInsensitive<"source">
    | caseInsensitive<"track">
    | caseInsensitive<"wbr">
    ) ~identifierCharacter

  blockName =
    // Shopify blocks
    ( "style"
    | "form"
    | "paginate"
    // Base blocks
    | "capture"
    | "case"
    | "for"
    | "ifchanged"
    | "if"
    | "unless"
    | "raw"
    | "tablerow"
    ) ~identifierCharacter

  tagMarkup = anyExceptStar<("-%}"| "%}")>

  anyExcept<lit> = (~ lit any)
  anyExceptStar<lit> = (~ lit any)*
  anyExceptPlus<lit> = (~ lit any)+
  AnyExcept<lit> = (~ lit any)
  AnyExceptPlus<lit> = (~ lit any)+
  AnyExceptStar<lit> = (~ lit any)*
  identifierCharacter = alnum | "_" | "-"

  TextNode = AnyExceptPlus<openControl>
  openControl = "<" | "{{" | "{%"
  controls = "\u{007F}".."\u{009F}"
  noncharacters = "\u{FDD0}".."\u{FDEF}"
  newline = "\r"? "\n"
}
`;

/***/ }),

/***/ "./dist/constants.evaluate.js":
/*!************************************!*\
  !*** ./dist/constants.evaluate.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CSS_WHITE_SPACE_DEFAULT = exports.CSS_WHITE_SPACE_TAGS = exports.CSS_DISPLAY_DEFAULT = exports.CSS_DISPLAY_LIQUID_DEFAULT = exports.CSS_DISPLAY_LIQUID_TAGS = exports.CSS_DISPLAY_TAGS = void 0;
const htmlStyles = __webpack_require__(/*! html-styles */ "./node_modules/html-styles/index.js");
const getCssStyleTags = (property) => Object.fromEntries(htmlStyles
    .filter((htmlStyle) => htmlStyle.style[property])
    .flatMap((htmlStyle) => htmlStyle.selectorText
    .split(',')
    .map((selector) => selector.trim())
    .filter((selector) => /^[\dA-Za-z]+$/.test(selector))
    .map((tagName) => [tagName, htmlStyle.style[property]])));
exports.CSS_DISPLAY_TAGS = Object.assign(Object.assign({}, getCssStyleTags('display')), { button: 'inline-block', template: 'inline', source: 'block', track: 'block', script: 'block', param: 'block', details: 'block', summary: 'block', dialog: 'block', meter: 'inline-block', progress: 'inline-block', object: 'inline-block', video: 'inline-block', audio: 'inline-block', select: 'inline-block', option: 'block', optgroup: 'block' });
exports.CSS_DISPLAY_LIQUID_TAGS = {
    if: 'inline',
    unless: 'inline',
    else: 'inline',
    elsif: 'inline',
    case: 'inline',
    when: 'inline',
    for: 'inline',
    cycle: 'inline',
    tablerow: 'block',
    break: 'none',
    continue: 'none',
    comment: 'none',
    echo: 'inline',
    form: 'block',
    layout: 'none',
    liquid: 'inline',
    paginate: 'inline',
    raw: 'inline',
    render: 'inline',
    include: 'inline',
    section: 'block',
    style: 'none',
    assign: 'none',
    capture: 'inline',
    increment: 'inline',
    decrement: 'inline',
};
exports.CSS_DISPLAY_LIQUID_DEFAULT = 'inline';
exports.CSS_DISPLAY_DEFAULT = 'inline';
exports.CSS_WHITE_SPACE_TAGS = getCssStyleTags('white-space');
exports.CSS_WHITE_SPACE_DEFAULT = 'normal';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmV2YWx1YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0YW50cy5ldmFsdWF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxNQUFNLFVBQVUsR0FBUSxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFL0MsTUFBTSxlQUFlLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUUsQ0FDM0MsTUFBTSxDQUFDLFdBQVcsQ0FDaEIsVUFBVTtLQUNQLE1BQU0sQ0FBQyxDQUFDLFNBQWMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNyRCxPQUFPLENBQUMsQ0FBQyxTQUFjLEVBQUUsRUFBRSxDQUMxQixTQUFTLENBQUMsWUFBWTtLQUNuQixLQUFLLENBQUMsR0FBRyxDQUFDO0tBQ1YsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDdkMsTUFBTSxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pELEdBQUcsQ0FBQyxDQUFDLE9BQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQy9ELENBQ0osQ0FBQztBQUVTLFFBQUEsZ0JBQWdCLG1DQUN4QixlQUFlLENBQUMsU0FBUyxDQUFDLEtBRzdCLE1BQU0sRUFBRSxjQUFjLEVBR3RCLFFBQVEsRUFBRSxRQUFRLEVBQ2xCLE1BQU0sRUFBRSxPQUFPLEVBQ2YsS0FBSyxFQUFFLE9BQU8sRUFDZCxNQUFNLEVBQUUsT0FBTyxFQUNmLEtBQUssRUFBRSxPQUFPLEVBTWQsT0FBTyxFQUFFLE9BQU8sRUFDaEIsT0FBTyxFQUFFLE9BQU8sRUFDaEIsTUFBTSxFQUFFLE9BQU8sRUFDZixLQUFLLEVBQUUsY0FBYyxFQUNyQixRQUFRLEVBQUUsY0FBYyxFQUN4QixNQUFNLEVBQUUsY0FBYyxFQUN0QixLQUFLLEVBQUUsY0FBYyxFQUNyQixLQUFLLEVBQUUsY0FBYyxFQUNyQixNQUFNLEVBQUUsY0FBYyxFQUN0QixNQUFNLEVBQUUsT0FBTyxFQUNmLFFBQVEsRUFBRSxPQUFPLElBQ2pCO0FBRVcsUUFBQSx1QkFBdUIsR0FBMkI7SUFFN0QsRUFBRSxFQUFFLFFBQVE7SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRSxRQUFRO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsUUFBUTtJQUdkLEdBQUcsRUFBRSxRQUFRO0lBQ2IsS0FBSyxFQUFFLFFBQVE7SUFDZixRQUFRLEVBQUUsT0FBTztJQUNqQixLQUFLLEVBQUUsTUFBTTtJQUNiLFFBQVEsRUFBRSxNQUFNO0lBR2hCLE9BQU8sRUFBRSxNQUFNO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsT0FBTztJQUNiLE1BQU0sRUFBRSxNQUFNO0lBQ2QsTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsR0FBRyxFQUFFLFFBQVE7SUFDYixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsUUFBUTtJQUNqQixPQUFPLEVBQUUsT0FBTztJQUNoQixLQUFLLEVBQUUsTUFBTTtJQUdiLE1BQU0sRUFBRSxNQUFNO0lBQ2QsT0FBTyxFQUFFLFFBQVE7SUFDakIsU0FBUyxFQUFFLFFBQVE7SUFDbkIsU0FBUyxFQUFFLFFBQVE7Q0FDcEIsQ0FBQztBQUVXLFFBQUEsMEJBQTBCLEdBQUcsUUFBUSxDQUFDO0FBRXRDLFFBQUEsbUJBQW1CLEdBQUcsUUFBUSxDQUFDO0FBQy9CLFFBQUEsb0JBQW9CLEdBQy9CLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNwQixRQUFBLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyJ9

/***/ }),

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const parser_1 = __webpack_require__(/*! ./parser */ "./dist/parser/index.js");
const printer_1 = __webpack_require__(/*! ./printer */ "./dist/printer/index.js");
const languages = [
    {
        name: 'LiquidHTML',
        parsers: [parser_1.liquidHtmlLanguageName],
        extensions: ['.liquid'],
        vscodeLanguageIds: ['liquid', 'Liquid'],
    },
];
const options = {
    liquidSingleQuote: {
        type: 'boolean',
        category: 'LIQUID',
        default: true,
        description: 'Use single quotes instead of double quotes in Liquid tags and objects.',
        since: '0.2.0',
    },
    singleLineLinkTags: {
        type: 'boolean',
        category: 'HTML',
        default: false,
        description: 'Always print link tags on a single line to remove clutter',
        since: '0.1.0',
    },
    indentSchema: {
        type: 'boolean',
        category: 'LIQUID',
        default: false,
        description: 'Indent the contents of the {% schema %} tag',
        since: '0.1.0',
    },
};
const defaultOptions = {
    printWidth: 120,
};
const plugin = {
    languages,
    parsers: parser_1.parsers,
    printers: printer_1.printers,
    options,
    defaultOptions,
};
module.exports = plugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQU1BLHFDQUEyRDtBQUMzRCx1Q0FBcUM7QUFHckMsTUFBTSxTQUFTLEdBQXNCO0lBQ25DO1FBQ0UsSUFBSSxFQUFFLFlBQVk7UUFDbEIsT0FBTyxFQUFFLENBQUMsK0JBQXNCLENBQUM7UUFDakMsVUFBVSxFQUFFLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLGlCQUFpQixFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztLQUN4QztDQUNGLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBbUI7SUFDOUIsaUJBQWlCLEVBQUU7UUFDakIsSUFBSSxFQUFFLFNBQVM7UUFDZixRQUFRLEVBQUUsUUFBUTtRQUNsQixPQUFPLEVBQUUsSUFBSTtRQUNiLFdBQVcsRUFDVCx3RUFBd0U7UUFDMUUsS0FBSyxFQUFFLE9BQU87S0FDZjtJQUNELGtCQUFrQixFQUFFO1FBQ2xCLElBQUksRUFBRSxTQUFTO1FBQ2YsUUFBUSxFQUFFLE1BQU07UUFDaEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxXQUFXLEVBQUUsMkRBQTJEO1FBQ3hFLEtBQUssRUFBRSxPQUFPO0tBQ2Y7SUFDRCxZQUFZLEVBQUU7UUFDWixJQUFJLEVBQUUsU0FBUztRQUNmLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLE9BQU8sRUFBRSxLQUFLO1FBQ2QsV0FBVyxFQUFFLDZDQUE2QztRQUMxRCxLQUFLLEVBQUUsT0FBTztLQUNmO0NBQ0YsQ0FBQztBQUVGLE1BQU0sY0FBYyxHQUE2QjtJQUMvQyxVQUFVLEVBQUUsR0FBRztDQUNoQixDQUFDO0FBRUYsTUFBTSxNQUFNLEdBQTJCO0lBQ3JDLFNBQVM7SUFDVCxPQUFPLEVBQVAsZ0JBQU87SUFDUCxRQUFRLEVBQVIsa0JBQVE7SUFDUixPQUFPO0lBQ1AsY0FBYztDQUNmLENBQUM7QUFFRixpQkFBUyxNQUFNLENBQUMifQ==

/***/ }),

/***/ "./dist/parser/ast.js":
/*!****************************!*\
  !*** ./dist/parser/ast.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.walk = exports.cstToAst = exports.toLiquidHtmlAST = exports.isBranchedTag = void 0;
const cst_1 = __webpack_require__(/*! ../parser/cst */ "./dist/parser/cst.js");
const types_1 = __webpack_require__(/*! ../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const errors_1 = __webpack_require__(/*! ../parser/errors */ "./dist/parser/errors.js");
function isBranchedTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['if', 'for', 'unless', 'case'].includes(node.name));
}
exports.isBranchedTag = isBranchedTag;
function isBranchTag(node) {
    return (node.type === types_1.NodeTypes.LiquidTag &&
        ['else', 'elsif', 'when'].includes(node.name));
}
function toLiquidHtmlAST(text) {
    const cst = (0, cst_1.toLiquidHtmlCST)(text);
    const root = {
        type: types_1.NodeTypes.Document,
        source: text,
        children: cstToAst(cst, text),
        name: '#document',
        position: {
            start: 0,
            end: text.length,
        },
    };
    return root;
}
exports.toLiquidHtmlAST = toLiquidHtmlAST;
class ASTBuilder {
    constructor(source) {
        this.ast = [];
        this.cursor = [];
        this.source = source;
    }
    get current() {
        return (0, utils_1.deepGet)(this.cursor, this.ast);
    }
    get currentPosition() {
        return (this.current || []).length - 1;
    }
    get parent() {
        if (this.cursor.length == 0)
            return undefined;
        return (0, utils_1.deepGet)((0, utils_1.dropLast)(1, this.cursor), this.ast);
    }
    open(node) {
        this.current.push(node);
        this.cursor.push(this.currentPosition);
        this.cursor.push('children');
        if (isBranchedTag(node)) {
            this.open({
                type: types_1.NodeTypes.LiquidBranch,
                name: null,
                markup: '',
                position: {
                    start: node.position.end,
                    end: node.position.end,
                },
                blockStartPosition: {
                    start: node.position.end,
                    end: node.position.end,
                },
                children: [],
                whitespaceStart: '',
                whitespaceEnd: '',
                source: this.source,
            });
        }
    }
    push(node) {
        var _a;
        if (node.type === types_1.NodeTypes.LiquidTag && isBranchTag(node)) {
            this.cursor.pop();
            this.cursor.pop();
            this.open({
                name: node.name,
                type: types_1.NodeTypes.LiquidBranch,
                markup: node.markup,
                position: Object.assign({}, node.position),
                children: [],
                blockStartPosition: Object.assign({}, node.position),
                whitespaceStart: node.whitespaceStart,
                whitespaceEnd: node.whitespaceEnd,
                source: this.source,
            });
        }
        else {
            if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
                this.parent.position.end = node.position.end;
            }
            this.current.push(node);
        }
    }
    close(node, nodeType) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (((_a = this.parent) === null || _a === void 0 ? void 0 : _a.type) === types_1.NodeTypes.LiquidBranch) {
            this.parent.position.end = node.locStart;
            this.cursor.pop();
            this.cursor.pop();
        }
        if (getName(this.parent) !== getName(node) ||
            ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.type) !== nodeType) {
            throw new errors_1.LiquidHTMLASTParsingError(`Attempting to close ${nodeType} '${node.name}' before ${(_c = this.parent) === null || _c === void 0 ? void 0 : _c.type} '${(_d = this.parent) === null || _d === void 0 ? void 0 : _d.name}' was closed`, this.source, ((_f = (_e = this.parent) === null || _e === void 0 ? void 0 : _e.position) === null || _f === void 0 ? void 0 : _f.start) || 0, node.locEnd);
        }
        this.parent.position.end = node.locEnd;
        this.parent.blockEndPosition = position(node);
        if (this.parent.type == types_1.NodeTypes.LiquidTag &&
            node.type == cst_1.ConcreteNodeTypes.LiquidTagClose) {
            this.parent.delimiterWhitespaceStart = (_g = node.whitespaceStart) !== null && _g !== void 0 ? _g : '';
            this.parent.delimiterWhitespaceEnd = (_h = node.whitespaceEnd) !== null && _h !== void 0 ? _h : '';
        }
        this.cursor.pop();
        this.cursor.pop();
    }
}
function getName(node) {
    if (!node)
        return null;
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case cst_1.ConcreteNodeTypes.HtmlTagClose:
            if (typeof node.name === 'string') {
                return node.name;
            }
            else if (typeof node.name.markup === 'string') {
                return `{{${node.name.markup.trim()}}}`;
            }
            else {
                return `{{${node.name.markup.rawSource}}}`;
            }
        default:
            return node.name;
    }
}
function cstToAst(cst, source) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const builder = new ASTBuilder(source);
    for (const node of cst) {
        switch (node.type) {
            case cst_1.ConcreteNodeTypes.TextNode: {
                builder.push({
                    type: types_1.NodeTypes.TextNode,
                    value: node.value,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidDrop: {
                builder.push(toLiquidDrop(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagOpen: {
                builder.open({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    children: [],
                    name: node.name,
                    whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
                    whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTagClose: {
                builder.close(node, types_1.NodeTypes.LiquidTag);
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidTag,
                    markup: node.markup,
                    position: position(node),
                    name: node.name,
                    whitespaceStart: (_c = node.whitespaceStart) !== null && _c !== void 0 ? _c : '',
                    whitespaceEnd: (_d = node.whitespaceEnd) !== null && _d !== void 0 ? _d : '',
                    blockStartPosition: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.LiquidRawTag: {
                builder.push({
                    type: types_1.NodeTypes.LiquidRawTag,
                    name: node.name,
                    body: node.body,
                    whitespaceStart: (_e = node.whitespaceStart) !== null && _e !== void 0 ? _e : '',
                    whitespaceEnd: (_f = node.whitespaceEnd) !== null && _f !== void 0 ? _f : '',
                    delimiterWhitespaceStart: (_g = node.delimiterWhitespaceStart) !== null && _g !== void 0 ? _g : '',
                    delimiterWhitespaceEnd: (_h = node.delimiterWhitespaceEnd) !== null && _h !== void 0 ? _h : '',
                    position: position(node),
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagOpen: {
                builder.open(toHtmlElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlTagClose: {
                builder.close(node, types_1.NodeTypes.HtmlElement);
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlVoidElement: {
                builder.push(toHtmlVoidElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlSelfClosingElement: {
                builder.push(toHtmlSelfClosingElement(node, source));
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlComment: {
                builder.push({
                    type: types_1.NodeTypes.HtmlComment,
                    body: node.body,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.HtmlRawTag: {
                builder.push({
                    type: types_1.NodeTypes.HtmlRawNode,
                    name: node.name,
                    body: node.body,
                    attributes: toAttributes(node.attrList || [], source),
                    position: position(node),
                    source,
                    blockStartPosition: {
                        start: node.blockStartLocStart,
                        end: node.blockStartLocEnd,
                    },
                    blockEndPosition: {
                        start: node.blockEndLocStart,
                        end: node.blockEndLocEnd,
                    },
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrEmpty: {
                builder.push({
                    type: types_1.NodeTypes.AttrEmpty,
                    name: node.name,
                    position: position(node),
                    source,
                });
                break;
            }
            case cst_1.ConcreteNodeTypes.AttrSingleQuoted:
            case cst_1.ConcreteNodeTypes.AttrDoubleQuoted:
            case cst_1.ConcreteNodeTypes.AttrUnquoted: {
                const abstractNode = {
                    type: node.type,
                    name: node.name,
                    position: position(node),
                    source,
                    attributePosition: { start: -1, end: -1 },
                    value: [],
                };
                const value = toAttributeValue(node.value, source);
                abstractNode.value = value;
                abstractNode.attributePosition = toAttributePosition(node, value);
                builder.push(abstractNode);
                break;
            }
            case cst_1.ConcreteNodeTypes.YAMLFrontmatter: {
                builder.push({
                    type: types_1.NodeTypes.YAMLFrontmatter,
                    body: node.body,
                    position: position(node),
                    source,
                });
                break;
            }
            default: {
                (0, utils_1.assertNever)(node);
            }
        }
    }
    return builder.ast;
}
exports.cstToAst = cstToAst;
function toAttributePosition(node, value) {
    if (value.length === 0) {
        return {
            start: node.locStart + node.name.length + '='.length + '"'.length,
            end: node.locStart + node.name.length + '='.length + '"'.length,
        };
    }
    return {
        start: value[0].position.start,
        end: value[value.length - 1].position.end,
    };
}
function toAttributeValue(value, source) {
    return cstToAst(value, source);
}
function toAttributes(attrList, source) {
    return cstToAst(attrList, source);
}
function toName(name, source) {
    if (typeof name === 'string')
        return name;
    return toLiquidDrop(name, source);
}
function toLiquidDrop(node, source) {
    var _a, _b;
    return {
        type: types_1.NodeTypes.LiquidDrop,
        markup: typeof node.markup === 'string'
            ? node.markup
            : toLiquidVariable(node.markup, source),
        whitespaceStart: (_a = node.whitespaceStart) !== null && _a !== void 0 ? _a : '',
        whitespaceEnd: (_b = node.whitespaceEnd) !== null && _b !== void 0 ? _b : '',
        position: position(node),
        source,
    };
}
function toLiquidVariable(node, source) {
    return {
        type: types_1.NodeTypes.LiquidVariable,
        expression: toExpression(node.expression, source),
        filters: node.filters.map((filter) => toFilter(filter, source)),
        position: position(node),
        rawSource: node.rawSource,
        source,
    };
}
function toExpression(node, source) {
    switch (node.type) {
        case cst_1.ConcreteNodeTypes.String: {
            return {
                type: types_1.NodeTypes.String,
                position: position(node),
                single: node.single,
                value: node.value,
                source,
            };
        }
        case cst_1.ConcreteNodeTypes.Number: {
            return {
                type: types_1.NodeTypes.Number,
                position: position(node),
                value: node.value,
                source,
            };
        }
        case cst_1.ConcreteNodeTypes.LiquidLiteral: {
            return {
                type: types_1.NodeTypes.LiquidLiteral,
                position: position(node),
                value: node.value,
                keyword: node.keyword,
                source,
            };
        }
        case cst_1.ConcreteNodeTypes.Range: {
            return {
                type: types_1.NodeTypes.Range,
                start: toExpression(node.start, source),
                end: toExpression(node.end, source),
                position: position(node),
                source,
            };
        }
        case cst_1.ConcreteNodeTypes.VariableLookup: {
            return {
                type: types_1.NodeTypes.VariableLookup,
                name: node.name,
                lookups: node.lookups.map((lookup) => toExpression(lookup, source)),
                position: position(node),
                source,
            };
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function toFilter(node, source) {
    return {
        type: types_1.NodeTypes.LiquidFilter,
        name: node.name,
        args: node.args.map((arg) => {
            switch (arg.type) {
                case cst_1.ConcreteNodeTypes.NamedArgument: {
                    return toNamedArgument(arg, source);
                }
                default: {
                    return toExpression(arg, source);
                }
            }
        }),
        position: position(node),
        source,
    };
}
function toNamedArgument(node, source) {
    return {
        type: types_1.NodeTypes.NamedArgument,
        name: node.name,
        value: toExpression(node.value, source),
        position: position(node),
        source,
    };
}
function toHtmlElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        blockEndPosition: { start: -1, end: -1 },
        children: [],
        source,
    };
}
function toHtmlVoidElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlVoidElement,
        name: node.name,
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function toHtmlSelfClosingElement(node, source) {
    return {
        type: types_1.NodeTypes.HtmlSelfClosingElement,
        name: toName(node.name, source),
        attributes: toAttributes(node.attrList || [], source),
        position: position(node),
        blockStartPosition: position(node),
        source,
    };
}
function position(node) {
    return {
        start: node.locStart,
        end: node.locEnd,
    };
}
function walk(ast, fn, parentNode) {
    for (const key of ['children', 'attributes']) {
        if (key in ast) {
            ast[key].forEach((node) => walk(node, fn, ast));
        }
    }
    if ('value' in ast) {
        if (Array.isArray(ast.value)) {
            ast.value.forEach((node) => walk(node, fn, ast));
        }
    }
    if ('name' in ast) {
        if (ast.name && typeof ast.name !== 'string' && ast.name.type) {
            fn(ast.name, ast);
        }
    }
    fn(ast, parentNode);
}
exports.walk = walk;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/parser/cst.js":
/*!****************************!*\
  !*** ./dist/parser/cst.js ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toLiquidHtmlCST = exports.LiquidLiteralValues = exports.ConcreteNodeTypes = void 0;
const extras_1 = __webpack_require__(/*! ohm-js/extras */ "./node_modules/ohm-js/extras/index.js");
const grammar_1 = __webpack_require__(/*! ../parser/grammar */ "./dist/parser/grammar.js");
const errors_1 = __webpack_require__(/*! ../parser/errors */ "./dist/parser/errors.js");
var ConcreteNodeTypes;
(function (ConcreteNodeTypes) {
    ConcreteNodeTypes["HtmlComment"] = "HtmlComment";
    ConcreteNodeTypes["HtmlRawTag"] = "HtmlRawTag";
    ConcreteNodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    ConcreteNodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    ConcreteNodeTypes["HtmlTagOpen"] = "HtmlTagOpen";
    ConcreteNodeTypes["HtmlTagClose"] = "HtmlTagClose";
    ConcreteNodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    ConcreteNodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    ConcreteNodeTypes["AttrUnquoted"] = "AttrUnquoted";
    ConcreteNodeTypes["AttrEmpty"] = "AttrEmpty";
    ConcreteNodeTypes["LiquidDrop"] = "LiquidDrop";
    ConcreteNodeTypes["LiquidRawTag"] = "LiquidRawTag";
    ConcreteNodeTypes["LiquidTag"] = "LiquidTag";
    ConcreteNodeTypes["LiquidTagOpen"] = "LiquidTagOpen";
    ConcreteNodeTypes["LiquidTagClose"] = "LiquidTagClose";
    ConcreteNodeTypes["TextNode"] = "TextNode";
    ConcreteNodeTypes["YAMLFrontmatter"] = "YAMLFrontmatter";
    ConcreteNodeTypes["LiquidVariable"] = "LiquidVariable";
    ConcreteNodeTypes["LiquidFilter"] = "LiquidFilter";
    ConcreteNodeTypes["NamedArgument"] = "NamedArgument";
    ConcreteNodeTypes["LiquidLiteral"] = "LiquidLiteral";
    ConcreteNodeTypes["VariableLookup"] = "VariableLookup";
    ConcreteNodeTypes["String"] = "String";
    ConcreteNodeTypes["Number"] = "Number";
    ConcreteNodeTypes["Range"] = "Range";
})(ConcreteNodeTypes = exports.ConcreteNodeTypes || (exports.ConcreteNodeTypes = {}));
exports.LiquidLiteralValues = {
    nil: null,
    null: null,
    true: true,
    false: false,
    blank: '',
    empty: '',
};
const markup = (i) => (tokens) => tokens[i].sourceString.trim();
function toLiquidHtmlCST(text) {
    const locStart = (tokens) => tokens[0].source.startIdx;
    const locEnd = (tokens) => tokens[tokens.length - 1].source.endIdx;
    const textNode = {
        type: ConcreteNodeTypes.TextNode,
        value: function () {
            return this.sourceString;
        },
        locStart,
        locEnd,
    };
    const res = grammar_1.liquidHtmlGrammar.match(text);
    if (res.failed()) {
        throw new errors_1.LiquidHTMLCSTParsingError(res);
    }
    const ohmAST = (0, extras_1.toAST)(res, {
        HtmlComment: {
            body: markup(1),
            locStart,
            locEnd,
        },
        HtmlRawTagImpl: {
            type: 'HtmlRawTag',
            name: 1,
            attrList: 2,
            body: 4,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[3].source.endIdx,
            blockEndLocStart: (tokens) => tokens[5].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[5].source.endIdx,
        },
        HtmlVoidElement: {
            name: 1,
            attrList: 3,
            locStart,
            locEnd,
        },
        HtmlSelfClosingElement: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagOpen: {
            name: 1,
            attrList: 2,
            locStart,
            locEnd,
        },
        HtmlTagClose: {
            name: 1,
            locStart,
            locEnd,
        },
        tagNameOrLiquidDrop: 0,
        AttrUnquoted: {
            name: 0,
            value: 2,
            locStart,
            locEnd,
        },
        AttrSingleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        AttrDoubleQuoted: {
            name: 0,
            value: 3,
            locStart,
            locEnd,
        },
        attrEmpty: {
            type: ConcreteNodeTypes.AttrEmpty,
            name: 0,
            locStart,
            locEnd,
        },
        attrDoubleQuotedValue: 0,
        attrSingleQuotedValue: 0,
        attrUnquotedValue: 0,
        attrDoubleQuotedTextNode: textNode,
        attrSingleQuotedTextNode: textNode,
        attrUnquotedTextNode: textNode,
        liquidNode: 0,
        liquidRawTag: 0,
        liquidRawTagImpl: {
            type: ConcreteNodeTypes.LiquidRawTag,
            name: 3,
            body: 7,
            whitespaceStart: 1,
            whitespaceEnd: 5,
            delimiterWhitespaceStart: 9,
            delimiterWhitespaceEnd: 14,
            locStart,
            locEnd,
            blockStartLocStart: (tokens) => tokens[0].source.startIdx,
            blockStartLocEnd: (tokens) => tokens[6].source.endIdx,
            blockEndLocStart: (tokens) => tokens[8].source.startIdx,
            blockEndLocEnd: (tokens) => tokens[15].source.endIdx,
        },
        liquidTagOpen: {
            type: ConcreteNodeTypes.LiquidTagOpen,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidTagClose: {
            type: ConcreteNodeTypes.LiquidTagClose,
            name: 4,
            whitespaceStart: 1,
            whitespaceEnd: 7,
            locStart,
            locEnd,
        },
        liquidTag: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        liquidDrop: {
            type: ConcreteNodeTypes.LiquidDrop,
            markup: 3,
            whitespaceStart: 1,
            whitespaceEnd: 4,
            locStart,
            locEnd,
        },
        liquidDropCases: 0,
        liquidExpression: 0,
        liquidDropBaseCase: (sw) => sw.sourceString.trimEnd(),
        liquidVariable: {
            type: ConcreteNodeTypes.LiquidVariable,
            expression: 0,
            filters: 1,
            rawSource: (tokens) => text
                .slice(locStart(tokens), tokens[tokens.length - 2].source.endIdx)
                .trimEnd(),
            locStart,
            locEnd: (tokens) => tokens[tokens.length - 2].source.endIdx,
        },
        liquidFilter: {
            type: ConcreteNodeTypes.LiquidFilter,
            name: 3,
            args(nodes) {
                if (nodes[7].sourceString === '') {
                    return [];
                }
                else {
                    return nodes[7].toAST(this.args.mapping);
                }
            },
        },
        filterArguments: 0,
        filterArgument: 0,
        positionalArgument: 0,
        namedArgument: {
            type: ConcreteNodeTypes.NamedArgument,
            name: 0,
            value: 4,
        },
        liquidString: 0,
        liquidDoubleQuotedString: {
            type: ConcreteNodeTypes.String,
            single: () => false,
            value: 1,
            locStart,
            locEnd,
        },
        liquidSingleQuotedString: {
            type: ConcreteNodeTypes.String,
            single: () => true,
            value: 1,
            locStart,
            locEnd,
        },
        liquidNumber: {
            type: ConcreteNodeTypes.Number,
            value: 0,
            locStart,
            locEnd,
        },
        liquidLiteral: {
            type: ConcreteNodeTypes.LiquidLiteral,
            value: (tokens) => {
                const keyword = tokens[0]
                    .sourceString;
                return exports.LiquidLiteralValues[keyword];
            },
            keyword: 0,
            locStart,
            locEnd,
        },
        liquidRange: {
            type: ConcreteNodeTypes.Range,
            start: 2,
            end: 6,
            locStart,
            locEnd,
        },
        liquidVariableLookup: {
            type: ConcreteNodeTypes.VariableLookup,
            name: 0,
            lookups: 1,
            locStart,
            locEnd,
        },
        lookup: 0,
        indexLookup: 3,
        dotLookup: {
            type: ConcreteNodeTypes.String,
            value: 3,
            locStart: (nodes) => nodes[2].source.startIdx,
            locEnd: (nodes) => nodes[nodes.length - 1].source.endIdx,
        },
        liquidInlineComment: {
            type: ConcreteNodeTypes.LiquidTag,
            name: 3,
            markup: markup(5),
            whitespaceStart: 1,
            whitespaceEnd: 6,
            locStart,
            locEnd,
        },
        TextNode: textNode,
        yamlFrontmatter: {
            type: ConcreteNodeTypes.YAMLFrontmatter,
            body: 2,
            locStart,
            locEnd,
        },
        Node(frontmatter, nodes) {
            const self = this;
            const frontmatterNode = frontmatter.sourceString.length === 0
                ? []
                : [frontmatter.toAST(self.args.mapping)];
            return frontmatterNode.concat(nodes.toAST(self.args.mapping));
        },
        listOf: 0,
        nonemptyListOf(first, _sep, rest) {
            const self = this;
            return [first.toAST(self.args.mapping)].concat(rest.toAST(self.args.mapping));
        },
        emptyListOf() {
            return [];
        },
    });
    return ohmAST;
}
exports.toLiquidHtmlCST = toLiquidHtmlCST;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9jc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMENBQXNDO0FBQ3RDLDhDQUFxRDtBQUNyRCw0Q0FBNEQ7QUFFNUQsSUFBWSxpQkEyQlg7QUEzQkQsV0FBWSxpQkFBaUI7SUFDM0IsZ0RBQTJCLENBQUE7SUFDM0IsOENBQXlCLENBQUE7SUFDekIsd0RBQW1DLENBQUE7SUFDbkMsc0VBQWlELENBQUE7SUFDakQsZ0RBQTJCLENBQUE7SUFDM0Isa0RBQTZCLENBQUE7SUFDN0IsMERBQXFDLENBQUE7SUFDckMsMERBQXFDLENBQUE7SUFDckMsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsOENBQXlCLENBQUE7SUFDekIsa0RBQTZCLENBQUE7SUFDN0IsNENBQXVCLENBQUE7SUFDdkIsb0RBQStCLENBQUE7SUFDL0Isc0RBQWlDLENBQUE7SUFDakMsMENBQXFCLENBQUE7SUFDckIsd0RBQW1DLENBQUE7SUFFbkMsc0RBQWlDLENBQUE7SUFDakMsa0RBQTZCLENBQUE7SUFDN0Isb0RBQStCLENBQUE7SUFDL0Isb0RBQStCLENBQUE7SUFDL0Isc0RBQWlDLENBQUE7SUFDakMsc0NBQWlCLENBQUE7SUFDakIsc0NBQWlCLENBQUE7SUFDakIsb0NBQWUsQ0FBQTtBQUNqQixDQUFDLEVBM0JXLGlCQUFpQixHQUFqQix5QkFBaUIsS0FBakIseUJBQWlCLFFBMkI1QjtBQUVZLFFBQUEsbUJBQW1CLEdBQUc7SUFDakMsR0FBRyxFQUFFLElBQUk7SUFDVCxJQUFJLEVBQUUsSUFBSTtJQUNWLElBQUksRUFBRSxJQUFZO0lBQ2xCLEtBQUssRUFBRSxLQUFjO0lBQ3JCLEtBQUssRUFBRSxFQUFRO0lBQ2YsS0FBSyxFQUFFLEVBQVE7Q0FDaEIsQ0FBQztBQXFNRixNQUFNLE1BQU0sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFj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

/***/ }),

/***/ "./dist/parser/errors.js":
/*!*******************************!*\
  !*** ./dist/parser/errors.js ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidHTMLASTParsingError = exports.LiquidHTMLCSTParsingError = void 0;
const line_column_1 = __importDefault(__webpack_require__(/*! line-column */ "./node_modules/line-column/lib/line-column.js"));
class LiquidHTMLCSTParsingError extends SyntaxError {
    constructor(ohm) {
        super(ohm.shortMessage);
        this.name = 'LiquidHTMLParsingError';
        const input = ohm.input;
        const errorPos = ohm._rightmostFailurePosition;
        const lineCol = (0, line_column_1.default)(input).fromIndex(Math.min(errorPos, input.length - 1));
        if (lineCol) {
            this.loc = {
                start: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
                end: {
                    line: lineCol.line,
                    column: lineCol.col,
                },
            };
        }
    }
}
exports.LiquidHTMLCSTParsingError = LiquidHTMLCSTParsingError;
class LiquidHTMLASTParsingError extends SyntaxError {
    constructor(message, source, startIndex, endIndex) {
        super(message);
        this.name = 'LiquidHTMLParsingError';
        const lc = (0, line_column_1.default)(source);
        const start = lc.fromIndex(startIndex);
        const end = lc.fromIndex(Math.min(endIndex, source.length - 1));
        this.loc = {
            start: {
                line: start.line,
                column: start.col,
            },
            end: {
                line: end.line,
                column: end.col,
            },
        };
    }
}
exports.LiquidHTMLASTParsingError = LiquidHTMLASTParsingError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsOERBQXFDO0FBT3JDLE1BQWEseUJBQTBCLFNBQVEsV0FBVztJQUd4RCxZQUFZLEdBQWdCO1FBQzFCLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyx3QkFBd0IsQ0FBQztRQUVyQyxNQUFNLEtBQUssR0FBSSxHQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2pDLE1BQU0sUUFBUSxHQUFJLEdBQVcsQ0FBQyx5QkFBeUIsQ0FBQztRQUN4RCxNQUFNLE9BQU8sR0FBRyxJQUFBLHFCQUFVLEVBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUNyQyxDQUFDO1FBS0YsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsR0FBRyxHQUFHO2dCQUNULEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7b0JBQ2xCLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRztpQkFDcEI7Z0JBQ0QsR0FBRyxFQUFFO29CQUNILElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtvQkFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHO2lCQUNwQjthQUNGLENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRjtBQTdCRCw4REE2QkM7QUFFRCxNQUFhLHlCQUEwQixTQUFRLFdBQVc7SUFHeEQsWUFDRSxPQUFlLEVBQ2YsTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLFFBQWdCO1FBRWhCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsd0JBQXdCLENBQUM7UUFFckMsTUFBTSxFQUFFLEdBQUcsSUFBQSxxQkFBVSxFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFLaEUsSUFBSSxDQUFDLEdBQUcsR0FBRztZQUNULEtBQUssRUFBRTtnQkFDTCxJQUFJLEVBQUUsS0FBTSxDQUFDLElBQUk7Z0JBQ2pCLE1BQU0sRUFBRSxLQUFNLENBQUMsR0FBRzthQUNuQjtZQUNELEdBQUcsRUFBRTtnQkFDSCxJQUFJLEVBQUUsR0FBSSxDQUFDLElBQUk7Z0JBQ2YsTUFBTSxFQUFFLEdBQUksQ0FBQyxHQUFHO2FBQ2pCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTlCRCw4REE4QkMifQ==

/***/ }),

/***/ "./dist/parser/grammar.js":
/*!********************************!*\
  !*** ./dist/parser/grammar.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VOID_ELEMENTS = exports.BLOCKS = exports.liquidHtmlGrammar = void 0;
const ohm_js_1 = __importDefault(__webpack_require__(/*! ohm-js */ "./node_modules/ohm-js/dist/ohm.esm.js"));
exports.liquidHtmlGrammar = ohm_js_1.default.grammar(__webpack_require__(/*! ../../grammar/liquid-html.ohm.js */ "./build/shims/liquid-html-ohm.js"));
exports.BLOCKS = exports.liquidHtmlGrammar.rules.blockName.body.factors[0].terms.map((x) => x.obj);
exports.VOID_ELEMENTS = exports.liquidHtmlGrammar.rules.voidElementName.body.factors[0].terms.map((x) => x.args[0].obj);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhbW1hci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvZ3JhbW1hci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvREFBeUI7QUFFWixRQUFBLGlCQUFpQixHQUFHLGdCQUFHLENBQUMsT0FBTyxDQUMxQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsQ0FDNUMsQ0FBQztBQUdXLFFBQUEsTUFBTSxHQUNqQix5QkFBaUIsQ0FBQyxLQUNuQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQWEsQ0FBQztBQUd4RCxRQUFBLGFBQWEsR0FDeEIseUJBQWlCLENBQUMsS0FDbkIsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUN6QyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQ2QsQ0FBQyJ9

/***/ }),

/***/ "./dist/parser/index.js":
/*!******************************!*\
  !*** ./dist/parser/index.js ***!
  \******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parsers = exports.liquidHtmlAstFormat = exports.liquidHtmlLanguageName = void 0;
const parser_1 = __webpack_require__(/*! ../parser/parser */ "./dist/parser/parser.js");
Object.defineProperty(exports, "liquidHtmlAstFormat", ({ enumerable: true, get: function () { return parser_1.liquidHtmlAstFormat; } }));
Object.defineProperty(exports, "liquidHtmlLanguageName", ({ enumerable: true, get: function () { return parser_1.liquidHtmlLanguageName; } }));
__exportStar(__webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js"), exports);
exports.parsers = {
    [parser_1.liquidHtmlLanguageName]: parser_1.liquidHtmlParser,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFyc2VyL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSw0Q0FLeUI7QUFJUSxvR0FOL0IsNEJBQW1CLE9BTStCO0FBQTNDLHVHQUxQLCtCQUFzQixPQUtPO0FBRi9CLCtDQUE2QjtBQUloQixRQUFBLE9BQU8sR0FBWTtJQUM5QixDQUFDLCtCQUFzQixDQUFDLEVBQUUseUJBQWdCO0NBQzNDLENBQUMifQ==

/***/ }),

/***/ "./dist/parser/parser.js":
/*!*******************************!*\
  !*** ./dist/parser/parser.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.liquidHtmlParser = exports.liquidHtmlLanguageName = exports.liquidHtmlAstFormat = void 0;
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const ast_1 = __webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js");
function parse(text, _parsers, _opts) {
    return (0, ast_1.toLiquidHtmlAST)(text);
}
exports.liquidHtmlAstFormat = 'liquid-html-ast';
exports.liquidHtmlLanguageName = 'liquid-html';
exports.liquidHtmlParser = {
    parse,
    astFormat: exports.liquidHtmlAstFormat,
    locStart: utils_1.locStart,
    locEnd: utils_1.locEnd,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhcnNlci9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQTJDO0FBQzNDLHNDQUErRDtBQUUvRCxTQUFTLEtBQUssQ0FDWixJQUFZLEVBQ1osUUFBaUIsRUFDakIsS0FBb0M7SUFFcEMsT0FBTyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQztBQUVZLFFBQUEsbUJBQW1CLEdBQUcsaUJBQWlCLENBQUM7QUFFeEMsUUFBQSxzQkFBc0IsR0FBRyxhQUFhLENBQUM7QUFFdkMsUUFBQSxnQkFBZ0IsR0FBMkI7SUFDdEQsS0FBSztJQUNMLFNBQVMsRUFBRSwyQkFBbUI7SUFDOUIsUUFBUSxFQUFSLGdCQUFRO0lBQ1IsTUFBTSxFQUFOLGNBQU07Q0FDUCxDQUFDIn0=

/***/ }),

/***/ "./dist/printer/index.js":
/*!*******************************!*\
  !*** ./dist/printer/index.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printers = void 0;
const printer_liquid_html_1 = __webpack_require__(/*! ../printer/printer-liquid-html */ "./dist/printer/printer-liquid-html.js");
const parser_1 = __webpack_require__(/*! ../parser */ "./dist/parser/index.js");
exports.printers = {
    [parser_1.liquidHtmlAstFormat]: printer_liquid_html_1.printerLiquidHtml,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJpbnRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1RUFBa0U7QUFDbEUscUNBQStDO0FBRWxDLFFBQUEsUUFBUSxHQUFHO0lBQ3RCLENBQUMsNEJBQW1CLENBQUMsRUFBRSx1Q0FBaUI7Q0FDekMsQ0FBQyJ9

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-css-properties.js":
/*!****************************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-css-properties.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithCSSProperties = void 0;
const constants_evaluate_1 = __webpack_require__(/*! ../../constants.evaluate */ "./dist/constants.evaluate.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
function getCssDisplay(node, options) {
    if (node.prev && node.prev.type === types_1.NodeTypes.HtmlComment) {
        const match = node.prev.body.match(/^\s*display:\s*([a-z]+)\s*$/);
        if (match) {
            return match[1];
        }
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlRawNode: {
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return ((typeof node.name === 'string' && constants_evaluate_1.CSS_DISPLAY_TAGS[node.name]) ||
                        constants_evaluate_1.CSS_DISPLAY_DEFAULT);
                }
            }
        }
        case types_1.NodeTypes.TextNode:
            return 'inline';
        case types_1.NodeTypes.LiquidTag:
        case types_1.NodeTypes.LiquidRawTag:
            switch (options.htmlWhitespaceSensitivity) {
                case 'strict':
                    return 'inline';
                case 'ignore':
                    return 'block';
                default: {
                    return (constants_evaluate_1.CSS_DISPLAY_LIQUID_TAGS[node.name] || constants_evaluate_1.CSS_DISPLAY_LIQUID_DEFAULT);
                }
            }
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return 'inline';
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return 'inline';
        case types_1.NodeTypes.HtmlComment:
            return 'block';
        case types_1.NodeTypes.Document:
            return 'block';
        case types_1.NodeTypes.YAMLFrontmatter:
            return 'block';
        case types_1.NodeTypes.LiquidVariable:
        case types_1.NodeTypes.LiquidFilter:
        case types_1.NodeTypes.NamedArgument:
        case types_1.NodeTypes.LiquidLiteral:
        case types_1.NodeTypes.String:
        case types_1.NodeTypes.Number:
        case types_1.NodeTypes.Range:
        case types_1.NodeTypes.VariableLookup:
            return 'should not be relevant';
        default:
            return (0, utils_1.assertNever)(node);
    }
}
function getNodeCssStyleWhiteSpace(node) {
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlRawNode: {
            return ((typeof node.name === 'string' && constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name]) ||
                constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT);
        }
        case types_1.NodeTypes.TextNode:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.YAMLFrontmatter:
        case types_1.NodeTypes.LiquidRawTag:
            return 'pre';
        case types_1.NodeTypes.LiquidTag:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.AttrDoubleQuoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrEmpty:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.HtmlComment:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.Document:
            return constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT;
        case types_1.NodeTypes.LiquidVariable:
        case types_1.NodeTypes.LiquidFilter:
        case types_1.NodeTypes.NamedArgument:
        case types_1.NodeTypes.LiquidLiteral:
        case types_1.NodeTypes.String:
        case types_1.NodeTypes.Number:
        case types_1.NodeTypes.Range:
        case types_1.NodeTypes.VariableLookup:
            return 'should not be relevant';
        default:
            return (0, utils_1.assertNever)(node);
    }
}
const augmentWithCSSProperties = (options, node) => {
    const augmentations = {
        cssDisplay: getCssDisplay(node, options),
        cssWhitespace: getNodeCssStyleWhiteSpace(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithCSSProperties = augmentWithCSSProperties;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLWNzcy1wcm9wZXJ0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtY3NzLXByb3BlcnRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkRBTzhCO0FBQzlCLG1DQU9pQjtBQUNqQixtQ0FBc0M7QUFFdEMsU0FBUyxhQUFhLENBQ3BCLElBQWlDLEVBQ2pDLE9BQTRCO0lBRTVCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFBRTtRQUV6RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNsRSxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0tBQ0Y7SUFFRCxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDakIsS0FBSyxpQkFBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQixLQUFLLGlCQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssaUJBQVMsQ0FBQyxzQkFBc0IsQ0FBQztRQUN0QyxLQUFLLGlCQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUIsUUFBUSxPQUFPLENBQUMseUJBQXlCLEVBQUU7Z0JBQ3pDLEtBQUssUUFBUTtvQkFDWCxPQUFPLFFBQVEsQ0FBQztnQkFDbEIsS0FBSyxRQUFRO29CQUNYLE9BQU8sT0FBTyxDQUFDO2dCQUNqQixPQUFPLENBQUMsQ0FBQztvQkFDUCxPQUFPLENBQ0wsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLHFDQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDOUQsd0NBQW1CLENBQ3BCLENBQUM7aUJBQ0g7YUFD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

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-family.js":
/*!********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-family.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithFamily = void 0;
const augmentWithFamily = (_options, node) => {
    const children = node.children || [];
    const augmentations = {
        firstChild: children[0],
        lastChild: children[children.length - 1],
    };
    Object.assign(node, augmentations);
};
exports.augmentWithFamily = augmentWithFamily;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLWZhbWlseS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLWZhbWlseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLGlCQUFpQixHQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUMvRCxNQUFNLFFBQVEsR0FBc0IsSUFBWSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUM7SUFDaEUsTUFBTSxhQUFhLEdBQWU7UUFDaEMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdkIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUN6QyxDQUFDO0lBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBUlcsUUFBQSxpQkFBaUIscUJBUTVCIn0=

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-parent.js":
/*!********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-parent.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithParent = void 0;
const augmentWithParent = (_options, node, parentNode) => {
    const augmentations = {
        parentNode: parentNode,
    };
    Object.assign(node, augmentations);
    Object.defineProperty(node, 'rawSource', {
        get() {
            return this.source.slice(this.position.start, this.position.end);
        },
    });
};
exports.augmentWithParent = augmentWithParent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLXBhcmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXBhcmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLGlCQUFpQixHQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUU7SUFDM0UsTUFBTSxhQUFhLEdBQWU7UUFDaEMsVUFBVSxFQUFFLFVBQW9DO0tBQ2pELENBQUM7SUFFRixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztJQUluQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7UUFDdkMsR0FBRztZQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRSxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBZFcsUUFBQSxpQkFBaUIscUJBYzVCIn0=

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-siblings.js":
/*!**********************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-siblings.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.augmentWithSiblings = exports.next = exports.prev = void 0;
const COLLECTION_KEYS = ['children', 'attributes', 'value'];
function prev(node) {
    if (!node.parentNode)
        return;
    const collection = parentCollection(node);
    return collection[collection.indexOf(node) - 1];
}
exports.prev = prev;
function next(node) {
    if (!node.parentNode)
        return;
    const collection = parentCollection(node);
    return collection[collection.indexOf(node) + 1];
}
exports.next = next;
function parentCollection(node) {
    if (!node.parentNode ||
        ('name' in node.parentNode && node.parentNode.name === node)) {
        return [];
    }
    for (const key of COLLECTION_KEYS) {
        if (key in node.parentNode &&
            Array.isArray(node.parentNode[key])) {
            if (node.parentNode[key].indexOf(node) !== -1) {
                return node.parentNode[key];
            }
        }
    }
    throw new Error('Could not find parent collection of node');
}
const augmentWithSiblings = (_options, node) => {
    const augmentations = {
        next: next(node),
        prev: prev(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithSiblings = augmentWithSiblings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVnbWVudC13aXRoLXNpYmxpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtc2libGluZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsTUFBTSxlQUFlLEdBQUcsQ0FBQyxVQUFVLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRTVELFNBQWdCLElBQUksQ0FBQyxJQUErQjtJQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7UUFBRSxPQUFPO0lBQzdCLE1BQU0sVUFBVSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUpELG9CQUlDO0FBRUQsU0FBZ0IsSUFBSSxDQUFDLElBQStCO0lBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtRQUFFLE9BQU87SUFDN0IsTUFBTSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBSkQsb0JBSUM7QUFFRCxTQUFTLGdCQUFnQixDQUN2QixJQUErQjtJQUUvQixJQUNFLENBQUMsSUFBSSxDQUFDLFVBQVU7UUFDaEIsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFDNUQ7UUFDQSxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsS0FBSyxNQUFNLEdBQUcsSUFBSSxlQUFlLEVBQUU7UUFFakMsSUFDRSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVU7WUFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBRSxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzVDO1lBQ0EsSUFBSyxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDdEQsT0FBUSxJQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0Y7S0FDRjtJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRU0sTUFBTSxtQkFBbUIsR0FBd0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDekUsTUFBTSxhQUFhLEdBQWlCO1FBQ2xDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUErQjtRQUM5QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBK0I7S0FDL0MsQ0FBQztJQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQVBXLFFBQUEsbUJBQW1CLHVCQU85QiJ9

/***/ }),

/***/ "./dist/printer/preprocess/augment-with-whitespace-helpers.js":
/*!********************************************************************!*\
  !*** ./dist/printer/preprocess/augment-with-whitespace-helpers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isTrimmingInnerRight = exports.isTrimmingInnerLeft = exports.isTrimmingOuterLeft = exports.isTrimmingOuterRight = exports.isParentNode = exports.isHtmlNode = exports.augmentWithWhitespaceHelpers = void 0;
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const constants_evaluate_1 = __webpack_require__(/*! ../../constants.evaluate */ "./dist/constants.evaluate.js");
const parser_1 = __webpack_require__(/*! ../../parser */ "./dist/parser/index.js");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const augmentWithWhitespaceHelpers = (_options, node) => {
    const augmentations = {
        isDanglingWhitespaceSensitive: isDanglingWhitespaceSensitiveNode(node),
        isIndentationSensitive: isIndentationSensitiveNode(node),
        isWhitespaceSensitive: isWhitespaceSensitiveNode(node),
        isLeadingWhitespaceSensitive: isLeadingWhitespaceSensitiveNode(node) &&
            (!node.prev || isTrailingWhitespaceSensitiveNode(node.prev)),
        isTrailingWhitespaceSensitive: isTrailingWhitespaceSensitiveNode(node) &&
            (!node.next || isLeadingWhitespaceSensitiveNode(node.next)),
        hasLeadingWhitespace: hasLeadingWhitespace(node),
        hasTrailingWhitespace: hasTrailingWhitespace(node),
        hasDanglingWhitespace: hasDanglingWhitespace(node),
    };
    Object.assign(node, augmentations);
};
exports.augmentWithWhitespaceHelpers = augmentWithWhitespaceHelpers;
function isDanglingWhitespaceSensitiveNode(node) {
    return (isDanglingSpaceSensitiveCssDisplay(node.cssDisplay) &&
        !(0, utils_1.isScriptLikeTag)(node) &&
        !isTrimmingInnerLeft(node) &&
        !isTrimmingInnerRight(node));
}
function isWhitespaceSensitiveNode(node) {
    return (isIndentationSensitiveNode(node));
}
function isIndentationSensitiveNode(node) {
    return getNodeCssStyleWhiteSpace(node).startsWith('pre');
}
function isLeadingWhitespaceSensitiveNode(node) {
    if (!node) {
        return false;
    }
    if (isTrimmingOuterLeft(node)) {
        return false;
    }
    if (node.prev && isTrimmingOuterRight(node.prev)) {
        return false;
    }
    if (!node.parentNode || node.parentNode.cssDisplay === 'none') {
        return false;
    }
    if ((0, utils_1.isPreLikeNode)(node.parentNode)) {
        return true;
    }
    if ((0, utils_1.isScriptLikeTag)(node)) {
        return false;
    }
    if (!node.prev && (node.parentNode.type === types_1.NodeTypes.Document
        || (0, utils_1.isPreLikeNode)(node)
        || (0, utils_1.isScriptLikeTag)(node.parentNode)
        || !isInnerLeftSpaceSensitiveCssDisplay(node.parentNode.cssDisplay)
        || isTrimmingInnerLeft(node.parentNode))) {
        return false;
    }
    if (node.prev &&
        !isOuterRightWhitespaceSensitiveCssDisplay(node.prev.cssDisplay)) {
        return false;
    }
    if (!isOuterLeftWhitespaceSensitiveCssDisplay(node.cssDisplay)) {
        return false;
    }
    return true;
}
function isTrailingWhitespaceSensitiveNode(node) {
    if (isTrimmingOuterRight(node)) {
        return false;
    }
    if (node.next && isTrimmingOuterLeft(node.next)) {
        return false;
    }
    if (!node.parentNode || node.parentNode.cssDisplay === 'none') {
        return false;
    }
    if ((0, utils_1.isPreLikeNode)(node.parentNode)) {
        return true;
    }
    if ((0, utils_1.isScriptLikeTag)(node)) {
        return false;
    }
    if (isHtmlNode(node) && typeof node.name === 'string' && node.name === 'br') {
        return false;
    }
    if (!node.next && (node.parentNode.type === types_1.NodeTypes.Document
        || (0, utils_1.isPreLikeNode)(node)
        || (0, utils_1.isScriptLikeTag)(node.parentNode)
        || !isInnerRightWhitespaceSensitiveCssDisplay(node.parentNode.cssDisplay)
        || isTrimmingInnerRight(node.parentNode))) {
        return false;
    }
    if (node.next &&
        !isOuterLeftWhitespaceSensitiveCssDisplay(node.next.cssDisplay)) {
        return false;
    }
    if (!isOuterRightWhitespaceSensitiveCssDisplay(node.cssDisplay)) {
        return false;
    }
    return true;
}
function hasDanglingWhitespace(node) {
    if (!isParentNode(node)) {
        return false;
    }
    else if (node.type === types_1.NodeTypes.Document) {
        return node.children.length === 0 && node.source.length > 0;
    }
    else if (!node.children) {
        return false;
    }
    else if (node.type === types_1.NodeTypes.LiquidTag &&
        (0, parser_1.isBranchedTag)(node) &&
        node.children.length === 1) {
        return hasDanglingWhitespace(node.firstChild);
    }
    else if (node.children.length > 0) {
        return false;
    }
    return (0, utils_1.isWhitespace)(node.source, node.blockStartPosition.end);
}
function hasLeadingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch && !node.prev) {
        return node.firstChild
            ? hasLeadingWhitespace(node.firstChild)
            : hasDanglingWhitespace(node);
    }
    return (0, utils_1.isWhitespace)(node.source, node.position.start - 1);
}
function hasTrailingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch) {
        return node.lastChild
            ? hasTrailingWhitespace(node.lastChild)
            : hasDanglingWhitespace(node);
    }
    return (0, utils_1.isWhitespace)(node.source, node.position.end);
}
function isHtmlNode(node) {
    return types_1.HtmlNodeTypes.includes(node.type);
}
exports.isHtmlNode = isHtmlNode;
function isParentNode(node) {
    return 'children' in node;
}
exports.isParentNode = isParentNode;
function isTrimmingOuterRight(node) {
    var _a;
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            return ((_a = node.delimiterWhitespaceEnd) !== null && _a !== void 0 ? _a : node.whitespaceEnd) === '-';
        case types_1.NodeTypes.LiquidBranch:
            return false;
        case types_1.NodeTypes.LiquidDrop:
            return node.whitespaceEnd === '-';
        default:
            return false;
    }
}
exports.isTrimmingOuterRight = isTrimmingOuterRight;
function isTrimmingOuterLeft(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
        case types_1.NodeTypes.LiquidBranch:
        case types_1.NodeTypes.LiquidDrop:
            return node.whitespaceStart === '-';
        default:
            return false;
    }
}
exports.isTrimmingOuterLeft = isTrimmingOuterLeft;
function isTrimmingInnerLeft(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            if (node.delimiterWhitespaceEnd === undefined)
                return false;
            return node.whitespaceEnd === '-';
        case types_1.NodeTypes.LiquidBranch:
            if (!node.parentNode || node.parentNode.type !== types_1.NodeTypes.LiquidTag) {
                return false;
            }
            if (!node.prev) {
                return isTrimmingInnerLeft(node.parentNode);
            }
            return node.whitespaceEnd === '-';
        case types_1.NodeTypes.LiquidDrop:
        default:
            return false;
    }
}
exports.isTrimmingInnerLeft = isTrimmingInnerLeft;
function isTrimmingInnerRight(node) {
    if (!node)
        return false;
    switch (node.type) {
        case types_1.NodeTypes.LiquidRawTag:
        case types_1.NodeTypes.LiquidTag:
            if (node.delimiterWhitespaceStart === undefined)
                return false;
            return node.delimiterWhitespaceStart === '-';
        case types_1.NodeTypes.LiquidBranch:
            if (!node.parentNode || node.parentNode.type !== types_1.NodeTypes.LiquidTag) {
                return false;
            }
            if (!node.next) {
                return isTrimmingInnerRight(node.parentNode);
            }
            return isTrimmingOuterLeft(node.next);
        case types_1.NodeTypes.LiquidDrop:
        default:
            return false;
    }
}
exports.isTrimmingInnerRight = isTrimmingInnerRight;
function isBlockLikeCssDisplay(cssDisplay) {
    return (cssDisplay === 'block' ||
        cssDisplay === 'list-item' ||
        cssDisplay.startsWith('table'));
}
function isInnerLeftSpaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function isInnerRightWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function isOuterLeftWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay);
}
function isOuterRightWhitespaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay);
}
function isDanglingSpaceSensitiveCssDisplay(cssDisplay) {
    return !isBlockLikeCssDisplay(cssDisplay) && cssDisplay !== 'inline-block';
}
function getNodeCssStyleWhiteSpace(node) {
    return ((isHtmlNode(node) &&
        typeof node.name === 'string' &&
        constants_evaluate_1.CSS_WHITE_SPACE_TAGS[node.name]) ||
        constants_evaluate_1.CSS_WHITE_SPACE_DEFAULT);
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/preprocess/index.js":
/*!******************************************!*\
  !*** ./dist/printer/preprocess/index.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AUGMENTATION_PIPELINE = void 0;
const augment_with_css_properties_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-css-properties */ "./dist/printer/preprocess/augment-with-css-properties.js");
const augment_with_parent_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-parent */ "./dist/printer/preprocess/augment-with-parent.js");
const augment_with_siblings_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-siblings */ "./dist/printer/preprocess/augment-with-siblings.js");
const augment_with_whitespace_helpers_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-whitespace-helpers */ "./dist/printer/preprocess/augment-with-whitespace-helpers.js");
const augment_with_family_1 = __webpack_require__(/*! ../../printer/preprocess/augment-with-family */ "./dist/printer/preprocess/augment-with-family.js");
exports.AUGMENTATION_PIPELINE = [
    augment_with_parent_1.augmentWithParent,
    augment_with_siblings_1.augmentWithSiblings,
    augment_with_family_1.augmentWithFamily,
    augment_with_css_properties_1.augmentWithCSSProperties,
    augment_with_whitespace_helpers_1.augmentWithWhitespaceHelpers,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci9wcmVwcm9jZXNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtHQUE0RjtBQUM1RixrRkFBNkU7QUFDN0Usc0ZBQWlGO0FBQ2pGLDBHQUFvRztBQUNwRyxrRkFBNkU7QUFFaEUsUUFBQSxxQkFBcUIsR0FBRztJQUNuQyx1Q0FBaUI7SUFDakIsMkNBQW1CO0lBQ25CLHVDQUFpQjtJQUNqQixzREFBd0I7SUFDeEIsOERBQTRCO0NBQzdCLENBQUMifQ==

/***/ }),

/***/ "./dist/printer/print-preprocess.js":
/*!******************************************!*\
  !*** ./dist/printer/print-preprocess.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.preprocess = void 0;
const AST = __importStar(__webpack_require__(/*! ../parser/ast */ "./dist/parser/ast.js"));
const preprocess_1 = __webpack_require__(/*! ../printer/preprocess */ "./dist/printer/preprocess/index.js");
function preprocess(ast, options) {
    const augmentationPipeline = preprocess_1.AUGMENTATION_PIPELINE.map((fn) => fn.bind(null, options));
    for (const augmentation of augmentationPipeline) {
        AST.walk(ast, augmentation);
    }
    return ast;
}
exports.preprocess = preprocess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtcHJlcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcmludGVyL3ByaW50LXByZXByb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGtEQUFvQztBQUVwQyxxREFBNkQ7QUFJN0QsU0FBZ0IsVUFBVSxDQUN4QixHQUFxQixFQUNyQixPQUE0QjtJQUU1QixNQUFNLG9CQUFvQixHQUFHLGtDQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQzVELEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUN2QixDQUFDO0lBRUYsS0FBSyxNQUFNLFlBQVksSUFBSSxvQkFBb0IsRUFBRTtRQUMvQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFtQixDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLEdBQW1CLENBQUM7QUFDN0IsQ0FBQztBQWJELGdDQWFDIn0=

/***/ }),

/***/ "./dist/printer/print/children.js":
/*!****************************************!*\
  !*** ./dist/printer/print/children.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printChildren = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_2 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const tag_1 = __webpack_require__(/*! ../../printer/print/tag */ "./dist/printer/print/tag.js");
const { builders: { breakParent, group, ifBreak, line, softline, hardline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printChild(childPath, options, print, args) {
    const child = childPath.getValue();
    if ((0, utils_2.hasPrettierIgnore)(child)) {
        return [
            (0, tag_1.printOpeningTagPrefix)(child, options),
            ...replaceTextEndOfLine(options.originalText.slice((0, utils_1.locStart)(child) +
                (child.prev && (0, tag_1.needsToBorrowNextOpeningTagStartMarker)(child.prev)
                    ? (0, tag_1.printOpeningTagStartMarker)(child).length
                    : 0), (0, utils_1.locEnd)(child) -
                (child.next && (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(child.next)
                    ? (0, tag_1.printClosingTagEndMarker)(child, options).length
                    : 0))),
            (0, tag_1.printClosingTagSuffix)(child, options),
        ];
    }
    return print(childPath, args);
}
function printBetweenLine(prevNode, nextNode) {
    if (!prevNode || !nextNode)
        return '';
    const spaceBetweenLinesIsHandledSomewhereElse = ((0, tag_1.needsToBorrowNextOpeningTagStartMarker)(prevNode) &&
        ((0, utils_2.hasPrettierIgnore)(nextNode) ||
            nextNode.firstChild ||
            (0, utils_2.hasNoCloseMarker)(nextNode) ||
            (nextNode.type === types_1.NodeTypes.HtmlElement &&
                nextNode.attributes.length > 0))) ||
        (prevNode.type === types_1.NodeTypes.HtmlElement &&
            (0, utils_2.hasNoCloseMarker)(prevNode) &&
            (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(nextNode));
    if (spaceBetweenLinesIsHandledSomewhereElse) {
        return '';
    }
    const shouldUseHardline = !nextNode.isLeadingWhitespaceSensitive ||
        (0, utils_2.preferHardlineAsLeadingSpaces)(nextNode) ||
        ((0, tag_1.needsToBorrowPrevClosingTagEndMarker)(nextNode) &&
            prevNode.lastChild &&
            (0, tag_1.needsToBorrowParentClosingTagStartMarker)(prevNode.lastChild) &&
            prevNode.lastChild.lastChild &&
            (0, tag_1.needsToBorrowParentClosingTagStartMarker)(prevNode.lastChild.lastChild));
    if (shouldUseHardline) {
        return hardline;
    }
    return nextNode.hasLeadingWhitespace ? line : softline;
}
function printChildren(path, options, print, args) {
    const node = path.getValue();
    if (!node.children) {
        throw new Error('attempting to use printChildren on something without children');
    }
    if ((0, utils_2.forceBreakChildren)(node)) {
        return [
            breakParent,
            ...path.map((childPath) => {
                const childNode = childPath.getValue();
                const prevBetweenLine = printBetweenLine(childNode.prev, childNode);
                return [
                    !prevBetweenLine
                        ? ''
                        : [
                            prevBetweenLine,
                            (0, utils_2.forceNextEmptyLine)(childNode.prev) ? hardline : '',
                        ],
                    printChild(childPath, options, print, {
                        leadingSpaceGroupId: utils_2.FORCE_BREAK_GROUP_ID,
                        trailingSpaceGroupId: utils_2.FORCE_BREAK_GROUP_ID,
                    }),
                ];
            }, 'children'),
        ];
    }
    const leadingSpaceGroupIds = node.children.map((_, i) => Symbol(`leading-${i}`));
    const trailingSpaceGroupIds = node.children.map((_, i) => Symbol(`trailing-${i}`));
    const whitespaceBetweenNode = path.map((childPath, childIndex) => {
        const childNode = childPath.getValue();
        const leadingHardlines = [];
        const leadingWhitespace = [];
        const leadingDependentWhitespace = [];
        const trailingWhitespace = [];
        const trailingHardlines = [];
        const prevBetweenLine = printBetweenLine(childNode.prev, childNode);
        const nextBetweenLine = printBetweenLine(childNode, childNode.next);
        if ((0, utils_2.isTextLikeNode)(childNode)) {
            return {
                leadingHardlines,
                leadingWhitespace,
                leadingDependentWhitespace,
                trailingWhitespace,
                trailingHardlines,
            };
        }
        if (prevBetweenLine) {
            if ((0, utils_2.forceNextEmptyLine)(childNode.prev)) {
                leadingHardlines.push(hardline, hardline);
            }
            else if (prevBetweenLine === hardline) {
                leadingHardlines.push(hardline);
            }
            else {
                if ((0, utils_2.isTextLikeNode)(childNode.prev)) {
                    if ((0, utils_2.isLiquidNode)(childNode) && prevBetweenLine === softline) {
                        leadingDependentWhitespace.push(prevBetweenLine);
                    }
                    else {
                        leadingWhitespace.push(prevBetweenLine);
                    }
                }
                else {
                    leadingWhitespace.push(ifBreak('', softline, {
                        groupId: trailingSpaceGroupIds[childIndex - 1],
                    }));
                }
            }
        }
        if (nextBetweenLine) {
            if ((0, utils_2.forceNextEmptyLine)(childNode)) {
                if ((0, utils_2.isTextLikeNode)(childNode.next)) {
                    trailingHardlines.push(hardline, hardline);
                }
            }
            else if (nextBetweenLine === hardline) {
                if ((0, utils_2.isTextLikeNode)(childNode.next)) {
                    trailingHardlines.push(hardline);
                }
            }
            else {
                trailingWhitespace.push(nextBetweenLine);
            }
        }
        return {
            leadingHardlines,
            leadingWhitespace,
            leadingDependentWhitespace,
            trailingWhitespace,
            trailingHardlines,
        };
    }, 'children');
    return path.map((childPath, childIndex) => {
        const { leadingHardlines, leadingWhitespace, leadingDependentWhitespace, trailingWhitespace, trailingHardlines, } = whitespaceBetweenNode[childIndex];
        return [
            ...leadingHardlines,
            group([
                ...leadingWhitespace,
                group([
                    ...leadingDependentWhitespace,
                    printChild(childPath, options, print, {
                        leadingSpaceGroupId: leadingSpaceGroupId(whitespaceBetweenNode, childIndex),
                        trailingSpaceGroupId: trailingSpaceGroupId(whitespaceBetweenNode, childIndex),
                    }),
                    ...trailingWhitespace,
                ], {
                    id: trailingSpaceGroupIds[childIndex],
                }),
            ], {
                id: leadingSpaceGroupIds[childIndex],
            }),
            ...trailingHardlines,
        ];
    }, 'children');
    function leadingSpaceGroupId(whitespaceBetweenNode, index) {
        if (index === 0) {
            return args.leadingSpaceGroupId;
        }
        const prev = whitespaceBetweenNode[index - 1];
        const curr = whitespaceBetweenNode[index];
        const groupIds = [];
        if (!(0, utils_2.isEmpty)(prev.trailingHardlines) || !(0, utils_2.isEmpty)(curr.leadingHardlines)) {
            return utils_2.FORCE_BREAK_GROUP_ID;
        }
        if (!(0, utils_2.isEmpty)(prev.trailingWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index - 1]);
        }
        if (!(0, utils_2.isEmpty)(curr.leadingWhitespace)) {
            groupIds.push(leadingSpaceGroupIds[index]);
        }
        if (!(0, utils_2.isEmpty)(curr.leadingDependentWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index]);
        }
        if ((0, utils_2.isEmpty)(groupIds)) {
            groupIds.push(utils_2.FORCE_FLAT_GROUP_ID);
        }
        return groupIds;
    }
    function trailingSpaceGroupId(whitespaceBetweenNode, index) {
        if (index === whitespaceBetweenNode.length - 1) {
            return args.trailingSpaceGroupId;
        }
        const curr = whitespaceBetweenNode[index];
        const next = whitespaceBetweenNode[index + 1];
        const groupIds = [];
        if (!(0, utils_2.isEmpty)(curr.trailingHardlines) || !(0, utils_2.isEmpty)(next.leadingHardlines)) {
            return utils_2.FORCE_BREAK_GROUP_ID;
        }
        if (!(0, utils_2.isEmpty)(curr.trailingWhitespace)) {
            groupIds.push(trailingSpaceGroupIds[index]);
        }
        if ((0, utils_2.isEmpty)(groupIds)) {
            groupIds.push(utils_2.FORCE_FLAT_GROUP_ID);
        }
        return groupIds;
    }
}
exports.printChildren = printChildren;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/print/element.js":
/*!***************************************!*\
  !*** ./dist/printer/print/element.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printElement = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const tag_1 = __webpack_require__(/*! ../../printer/print/tag */ "./dist/printer/print/tag.js");
const children_1 = __webpack_require__(/*! ../../printer/print/children */ "./dist/printer/print/children.js");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const { builders: { breakParent, dedentToRoot, group, indent, line, softline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printElement(path, options, print) {
    const node = path.getValue();
    if ((0, utils_1.hasNoCloseMarker)(node)) {
        return [
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    if ((0, utils_1.shouldPreserveContent)(node, options) ||
        node.type === types_1.NodeTypes.HtmlRawNode) {
        return [
            (0, tag_1.printOpeningTagPrefix)(node, options),
            group((0, tag_1.printOpeningTag)(path, options, print)),
            ...replaceTextEndOfLine((0, tag_1.getNodeContent)(node, options)),
            ...(0, tag_1.printClosingTag)(node, options),
            (0, tag_1.printClosingTagSuffix)(node, options),
        ];
    }
    const attrGroupId = Symbol('element-attr-group-id');
    const elementGroupId = Symbol('element-group-id');
    const printTag = (doc) => group([
        group((0, tag_1.printOpeningTag)(path, options, print), { id: attrGroupId }),
        doc,
        (0, tag_1.printClosingTag)(node, options),
    ], { id: elementGroupId });
    const printLineBeforeChildren = () => {
        if (node.firstChild.hasLeadingWhitespace &&
            node.firstChild.isLeadingWhitespaceSensitive) {
            return line;
        }
        if (node.firstChild.type === types_1.NodeTypes.TextNode &&
            node.isWhitespaceSensitive &&
            node.isIndentationSensitive) {
            return dedentToRoot(softline);
        }
        return softline;
    };
    const printLineAfterChildren = () => {
        const needsToBorrow = node.next
            ? (0, tag_1.needsToBorrowPrevClosingTagEndMarker)(node.next)
            : (0, tag_1.needsToBorrowLastChildClosingTagEndMarker)(node.parentNode);
        if (needsToBorrow) {
            if (node.lastChild.hasTrailingWhitespace &&
                node.lastChild.isTrailingWhitespaceSensitive) {
                return ' ';
            }
            return '';
        }
        if (node.lastChild.hasTrailingWhitespace &&
            node.lastChild.isTrailingWhitespaceSensitive) {
            return line;
        }
        return softline;
    };
    if (node.children.length === 0) {
        return printTag(node.hasDanglingWhitespace && node.isDanglingWhitespaceSensitive
            ? line
            : '');
    }
    return printTag([
        (0, utils_1.forceBreakContent)(node) ? breakParent : '',
        indent([
            printLineBeforeChildren(),
            (0, children_1.printChildren)(path, options, print, {
                leadingSpaceGroupId: elementGroupId,
                trailingSpaceGroupId: elementGroupId,
            }),
        ]),
        printLineAfterChildren(),
    ]);
}
exports.printElement = printElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcmludGVyL3ByaW50L2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYix1Q0FBNkM7QUFDN0MsMkNBSXlCO0FBQ3pCLDZDQVE2QjtBQUM3Qix1REFBeUQ7QUFDekQsbUNBTWlCO0FBRWpCLE1BQU0sRUFDSixRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUN2RSxHQUFHLGNBQUcsQ0FBQztBQUNSLE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxHQUFHLGNBQUcsQ0FBQyxLQUFZLENBQUM7QUFFbEQsU0FBZ0IsWUFBWSxDQUMxQixJQUE2QyxFQUM3QyxPQUE0QixFQUM1QixLQUFvQjtJQUVwQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxFQUFFO1FBRTFCLE9BQU87WUFDTCxLQUFLLENBQUMsSUFBQSxxQkFBZSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsR0FBRyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztZQUNqQyxJQUFBLDJCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7U0FDckMsQ0FBQztLQUNIO0lBRUQsSUFDRSxJQUFBLDZCQUFxQixFQUFDLElBQUksRUFBRSxPQUFPLENBQUM7UUFDcEMsSUFBSSxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLFdBQVcsRUFDbkM7UUFDQSxPQUFPO1lBQ0wsSUFBQSwyQkFBcUIsRUFBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1lBQ3BDLEtBQUssQ0FBQyxJQUFBLHFCQUFlLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENB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

/***/ }),

/***/ "./dist/printer/print/liquid.js":
/*!**************************************!*\
  !*** ./dist/printer/print/liquid.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printLiquidBranch = exports.printLiquidTag = exports.printLiquidBlockEnd = exports.printLiquidBlockStart = exports.printLiquidDrop = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const ast_1 = __webpack_require__(/*! ../../parser/ast */ "./dist/parser/ast.js");
const utils_1 = __webpack_require__(/*! ../../utils */ "./dist/utils.js");
const utils_2 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const children_1 = __webpack_require__(/*! ../../printer/print/children */ "./dist/printer/print/children.js");
const LIQUID_TAGS_THAT_ALWAYS_BREAK = ['for', 'case'];
const { builders } = prettier_1.doc;
const { group, hardline, ifBreak, indent, join, line, softline } = builders;
function printLiquidDrop(path, _options, print, { leadingSpaceGroupId, trailingSpaceGroupId }) {
    const node = path.getValue();
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    if (typeof node.markup !== 'string') {
        const whitespace = node.markup.filters.length > 0 ? line : ' ';
        return group([
            '{{',
            whitespaceStart,
            indent([whitespace, path.call(print, 'markup')]),
            whitespace,
            whitespaceEnd,
            '}}',
        ]);
    }
    const lines = (0, utils_2.markupLines)(node.markup);
    if (lines.length > 1) {
        return group([
            '{{',
            whitespaceStart,
            indent([hardline, join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '}}',
        ]);
    }
    return group([
        '{{',
        whitespaceStart,
        ' ',
        node.markup,
        ' ',
        whitespaceEnd,
        '}}',
    ]);
}
exports.printLiquidDrop = printLiquidDrop;
function printLiquidBlockStart(path, leadingSpaceGroupId, trailingSpaceGroupId) {
    const node = path.getValue();
    if (!node.name)
        return '';
    const lines = (0, utils_2.markupLines)(node.markup);
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)(node.whitespaceStart, needsBlockStartLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)(node.whitespaceEnd, needsBlockStartTrailingWhitespaceStrippingOnBreak(node), trailingSpaceGroupId);
    if (node.name === 'liquid') {
        return group([
            '{%',
            whitespaceStart,
            ' ',
            node.name,
            indent([hardline, join(hardline, (0, utils_2.reindent)(lines, true))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    if (lines.length > 1) {
        return group([
            '{%',
            whitespaceStart,
            indent([hardline, node.name, ' ', join(hardline, lines.map(utils_2.trim))]),
            hardline,
            whitespaceEnd,
            '%}',
        ]);
    }
    const markup = node.markup;
    return group([
        '{%',
        whitespaceStart,
        ' ',
        node.name,
        markup ? ` ${markup}` : '',
        ' ',
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockStart = printLiquidBlockStart;
function printLiquidBlockEnd(path, leadingSpaceGroupId, trailingSpaceGroupId) {
    var _a, _b;
    const node = path.getValue();
    if (!node.children || !node.blockEndPosition)
        return '';
    const whitespaceStart = (0, utils_2.getWhitespaceTrim)((_a = node.delimiterWhitespaceStart) !== null && _a !== void 0 ? _a : '', needsBlockEndLeadingWhitespaceStrippingOnBreak(node), leadingSpaceGroupId);
    const whitespaceEnd = (0, utils_2.getWhitespaceTrim)((_b = node.delimiterWhitespaceEnd) !== null && _b !== void 0 ? _b : '', (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node), trailingSpaceGroupId);
    return group([
        '{%',
        whitespaceStart,
        ` end${node.name} `,
        whitespaceEnd,
        '%}',
    ]);
}
exports.printLiquidBlockEnd = printLiquidBlockEnd;
function printLiquidTag(path, options, print, { leadingSpaceGroupId, trailingSpaceGroupId } = {}) {
    const node = path.getValue();
    if (!node.children || !node.blockEndPosition) {
        return printLiquidBlockStart(path, leadingSpaceGroupId, trailingSpaceGroupId);
    }
    const tagGroupId = Symbol('tag-group');
    const blockStart = printLiquidBlockStart(path, leadingSpaceGroupId, tagGroupId);
    const blockEnd = printLiquidBlockEnd(path, tagGroupId, trailingSpaceGroupId);
    let body = [];
    if ((0, ast_1.isBranchedTag)(node)) {
        body = cleanDoc(path.map((p) => print(p, {
            leadingSpaceGroupId: tagGroupId,
            trailingSpaceGroupId: tagGroupId,
        }), 'children'));
        if (node.name === 'case')
            body = indent(body);
    }
    else if (node.children.length > 0) {
        body = indent([
            innerLeadingWhitespace(node),
            (0, children_1.printChildren)(path, options, print, {
                leadingSpaceGroupId: tagGroupId,
                trailingSpaceGroupId: tagGroupId,
            }),
        ]);
    }
    return group([blockStart, body, innerTrailingWhitespace(node), blockEnd], {
        id: tagGroupId,
        shouldBreak: LIQUID_TAGS_THAT_ALWAYS_BREAK.includes(node.name) ||
            (0, utils_2.originallyHadLineBreaks)(path, options) ||
            isAttributeNode(node) ||
            (0, utils_2.isDeeplyNested)(node),
    });
}
exports.printLiquidTag = printLiquidTag;
function isAttributeNode(node) {
    return ((0, utils_2.isHtmlNode)(node.parentNode) &&
        node.parentNode.attributes.indexOf(node) !== -1);
}
function innerLeadingWhitespace(node) {
    if (!node.firstChild) {
        if (node.isDanglingWhitespaceSensitive && node.hasDanglingWhitespace) {
            return line;
        }
        else {
            return '';
        }
    }
    if (node.firstChild.hasLeadingWhitespace &&
        node.firstChild.isLeadingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function innerTrailingWhitespace(node) {
    if (node.type === types_1.NodeTypes.LiquidBranch ||
        !node.blockEndPosition ||
        !node.lastChild) {
        return '';
    }
    if (node.lastChild.hasTrailingWhitespace &&
        node.lastChild.isTrailingWhitespaceSensitive) {
        return line;
    }
    return softline;
}
function printLiquidDefaultBranch(path, options, print, args) {
    const branch = path.getValue();
    const parentNode = path.getParentNode();
    const shouldCollapseSpace = (0, utils_2.isEmpty)(branch.children) && parentNode.children.length === 1;
    if (shouldCollapseSpace)
        return '';
    const isBranchEmptyWithoutSpace = (0, utils_2.isEmpty)(branch.children) && !branch.hasDanglingWhitespace;
    if (isBranchEmptyWithoutSpace)
        return '';
    if (branch.hasDanglingWhitespace) {
        return ifBreak('', ' ');
    }
    return indent([
        innerLeadingWhitespace(parentNode),
        (0, children_1.printChildren)(path, options, print, args),
    ]);
}
function printLiquidBranch(path, options, print, args) {
    const branch = path.getValue();
    const isDefaultBranch = !branch.name;
    if (isDefaultBranch) {
        return printLiquidDefaultBranch(path, options, print, args);
    }
    const leftSibling = branch.prev;
    const shouldCollapseSpace = leftSibling && (0, utils_2.isEmpty)(leftSibling.children);
    const outerLeadingWhitespace = branch.hasLeadingWhitespace && !shouldCollapseSpace ? line : softline;
    return [
        outerLeadingWhitespace,
        printLiquidBlockStart(path, args.leadingSpaceGroupId, args.trailingSpaceGroupId),
        indent([
            innerLeadingWhitespace(branch),
            (0, children_1.printChildren)(path, options, print, args),
        ]),
    ];
}
exports.printLiquidBranch = printLiquidBranch;
function needsBlockStartLeadingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            return (!isAttributeNode(node) && (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (!isAttributeNode(node.parentNode) &&
                (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node));
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockStartTrailingWhitespaceStrippingOnBreak(node) {
    switch (node.type) {
        case types_1.NodeTypes.LiquidTag: {
            if ((0, ast_1.isBranchedTag)(node)) {
                return needsBlockStartLeadingWhitespaceStrippingOnBreak(node.firstChild);
            }
            if (!node.children) {
                return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node);
            }
            return (0, utils_2.isEmpty)(node.children)
                ? (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node)
                : (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild);
        }
        case types_1.NodeTypes.LiquidBranch: {
            if (isAttributeNode(node.parentNode)) {
                return false;
            }
            return node.firstChild
                ? (0, utils_2.hasMeaningfulLackOfLeadingWhitespace)(node.firstChild)
                : (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
function needsBlockEndLeadingWhitespaceStrippingOnBreak(node) {
    if (!node.children) {
        throw new Error('Should only call needsBlockEndLeadingWhitespaceStrippingOnBreak for tags that have closing tags');
    }
    else if (isAttributeNode(node)) {
        return false;
    }
    else if ((0, ast_1.isBranchedTag)(node)) {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
    else if ((0, utils_2.isEmpty)(node.children)) {
        return (0, utils_2.hasMeaningfulLackOfDanglingWhitespace)(node);
    }
    else {
        return (0, utils_2.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild);
    }
}
function cleanDoc(doc) {
    return doc.filter((x) => x !== '');
}
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/print/tag.js":
/*!***********************************!*\
  !*** ./dist/printer/print/tag.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getNodeContent = exports.printOpeningTagEndMarker = exports.printOpeningTagStartMarker = exports.printOpeningTagPrefix = exports.printOpeningTagStart = exports.printOpeningTag = exports.needsToBorrowParentOpeningTagEndMarker = exports.needsToBorrowNextOpeningTagStartMarker = exports.needsToBorrowParentClosingTagStartMarker = exports.needsToBorrowLastChildClosingTagEndMarker = exports.needsToBorrowPrevClosingTagEndMarker = exports.printClosingTagEndMarker = exports.printClosingTagStartMarker = exports.printClosingTagSuffix = exports.printClosingTagEnd = exports.printClosingTagStart = exports.printClosingTag = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../../printer/utils */ "./dist/printer/utils/index.js");
const { builders: { breakParent, indent, join, line, softline, hardline }, } = prettier_1.doc;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function printClosingTag(node, options) {
    return [
        (0, utils_1.hasNoCloseMarker)(node) ? '' : printClosingTagStart(node, options),
        printClosingTagEnd(node, options),
    ];
}
exports.printClosingTag = printClosingTag;
function printClosingTagStart(node, options) {
    return node.lastChild &&
        needsToBorrowParentClosingTagStartMarker(node.lastChild)
        ? ''
        : [
            printClosingTagPrefix(node, options),
            printClosingTagStartMarker(node, options),
        ];
}
exports.printClosingTagStart = printClosingTagStart;
function printClosingTagEnd(node, options) {
    return (node.next
        ? needsToBorrowPrevClosingTagEndMarker(node.next)
        : needsToBorrowLastChildClosingTagEndMarker(node.parentNode))
        ? ''
        : [
            printClosingTagEndMarker(node, options),
            printClosingTagSuffix(node, options),
        ];
}
exports.printClosingTagEnd = printClosingTagEnd;
function printClosingTagPrefix(node, options) {
    return needsToBorrowLastChildClosingTagEndMarker(node)
        ? printClosingTagEndMarker(node.lastChild, options)
        : '';
}
function printClosingTagSuffix(node, options) {
    return needsToBorrowParentClosingTagStartMarker(node)
        ? printClosingTagStartMarker(node.parentNode, options)
        : needsToBorrowNextOpeningTagStartMarker(node)
            ? printOpeningTagStartMarker(node.next)
            : '';
}
exports.printClosingTagSuffix = printClosingTagSuffix;
function printClosingTagStartMarker(node, options) {
    if (!node)
        return '';
    if (shouldNotPrintClosingTag(node, options)) {
        return '';
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlRawNode:
            if (typeof node.name === 'string') {
                return `</${node.name}`;
            }
            else if (typeof node.name.markup === 'string') {
                return `</{{ ${node.name.markup.trim()} }}`;
            }
            else {
                return `</{{ ${node.name.markup.rawSource} }}`;
            }
        default:
            return '';
    }
}
exports.printClosingTagStartMarker = printClosingTagStartMarker;
function printClosingTagEndMarker(node, options) {
    if (!node)
        return '';
    if (shouldNotPrintClosingTag(node, options)) {
        return '';
    }
    switch (node.type) {
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return '/>';
        }
        default:
            return '>';
    }
}
exports.printClosingTagEndMarker = printClosingTagEndMarker;
function shouldNotPrintClosingTag(node, options) {
    return (!(0, utils_1.hasNoCloseMarker)(node) &&
        !node.blockEndPosition &&
        ((0, utils_1.hasPrettierIgnore)(node) ||
            (0, utils_1.shouldPreserveContent)(node.parentNode, options)));
}
function needsToBorrowPrevClosingTagEndMarker(node) {
    return (!(0, utils_1.isLiquidNode)(node) &&
        node.prev &&
        (0, utils_1.isHtmlNode)(node.prev) &&
        (0, utils_1.hasMeaningfulLackOfLeadingWhitespace)(node));
}
exports.needsToBorrowPrevClosingTagEndMarker = needsToBorrowPrevClosingTagEndMarker;
function needsToBorrowLastChildClosingTagEndMarker(node) {
    return ((0, utils_1.isHtmlNode)(node) &&
        node.lastChild &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node.lastChild) &&
        (0, utils_1.isHtmlNode)((0, utils_1.getLastDescendant)(node.lastChild)) &&
        !(0, utils_1.isPreLikeNode)(node));
}
exports.needsToBorrowLastChildClosingTagEndMarker = needsToBorrowLastChildClosingTagEndMarker;
function needsToBorrowParentClosingTagStartMarker(node) {
    return ((0, utils_1.isHtmlNode)(node.parentNode) &&
        !node.next &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node) &&
        !(0, utils_1.isLiquidNode)(node) &&
        ((0, utils_1.isTextLikeNode)((0, utils_1.getLastDescendant)(node)) ||
            (0, utils_1.isLiquidNode)((0, utils_1.getLastDescendant)(node))));
}
exports.needsToBorrowParentClosingTagStartMarker = needsToBorrowParentClosingTagStartMarker;
function needsToBorrowNextOpeningTagStartMarker(node) {
    return (node.next &&
        (0, utils_1.isHtmlNode)(node.next) &&
        (0, utils_1.isTextLikeNode)(node) &&
        (0, utils_1.hasMeaningfulLackOfTrailingWhitespace)(node));
}
exports.needsToBorrowNextOpeningTagStartMarker = needsToBorrowNextOpeningTagStartMarker;
function getPrettierIgnoreAttributeCommentData(value) {
    const match = value.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/s);
    if (!match) {
        return false;
    }
    if (!match[1]) {
        return true;
    }
    return match[1].split(/\s+/);
}
function needsToBorrowParentOpeningTagEndMarker(node) {
    return ((0, utils_1.isHtmlNode)(node.parentNode) &&
        !node.prev &&
        (0, utils_1.hasMeaningfulLackOfLeadingWhitespace)(node) &&
        !(0, utils_1.isLiquidNode)(node));
}
exports.needsToBorrowParentOpeningTagEndMarker = needsToBorrowParentOpeningTagEndMarker;
function printAttributes(path, options, print) {
    const node = path.getValue();
    const { locStart, locEnd } = options;
    if ((0, utils_1.isHtmlComment)(node))
        return '';
    if (!(0, utils_1.isNonEmptyArray)(node.attributes)) {
        return (0, utils_1.isSelfClosing)(node)
            ?
                ' '
            : '';
    }
    const ignoreAttributeData = node.prev &&
        node.prev.type === types_1.NodeTypes.HtmlComment &&
        getPrettierIgnoreAttributeCommentData(node.prev.body);
    const hasPrettierIgnoreAttribute = typeof ignoreAttributeData === 'boolean'
        ? () => ignoreAttributeData
        : Array.isArray(ignoreAttributeData)
            ? (attribute) => ignoreAttributeData.includes(attribute.rawName)
            : () => false;
    const printedAttributes = path.map((attributePath) => {
        const attribute = attributePath.getValue();
        return hasPrettierIgnoreAttribute(attribute)
            ? replaceTextEndOfLine(options.originalText.slice(locStart(attribute), locEnd(attribute)))
            : print(attributePath);
    }, 'attributes');
    const forceNotToBreakAttrContent = (options.singleLineLinkTags &&
        typeof node.name === 'string' &&
        node.name === 'link') ||
        (((0, utils_1.isSelfClosing)(node) ||
            (0, utils_1.isVoidElement)(node) ||
            ((0, utils_1.isHtmlElement)(node) && node.children.length > 0)) &&
            node.attributes &&
            node.attributes.length === 1 &&
            !(0, utils_1.isMultilineLiquidTag)(node.attributes[0]));
    const forceBreakAttrContent = node.source
        .slice(node.blockStartPosition.start, node.blockStartPosition.end)
        .indexOf('\n') !== -1;
    const attributeLine = forceNotToBreakAttrContent
        ? ' '
        : options.singleAttributePerLine && node.attributes.length > 1
            ? hardline
            : line;
    const parts = [
        indent([
            forceNotToBreakAttrContent ? ' ' : line,
            forceBreakAttrContent ? breakParent : '',
            join(attributeLine, printedAttributes),
        ]),
    ];
    if ((node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)) ||
        ((0, utils_1.hasNoCloseMarker)(node) &&
            needsToBorrowLastChildClosingTagEndMarker(node.parentNode)) ||
        forceNotToBreakAttrContent) {
        parts.push((0, utils_1.isSelfClosing)(node) ? ' ' : '');
    }
    else {
        parts.push(options.bracketSameLine
            ? (0, utils_1.isSelfClosing)(node)
                ? ' '
                : ''
            : (0, utils_1.isSelfClosing)(node)
                ? line
                : softline);
    }
    return parts;
}
function printOpeningTagEnd(node) {
    return node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)
        ? ''
        : printOpeningTagEndMarker(node);
}
function printOpeningTag(path, options, print) {
    const node = path.getValue();
    return [
        printOpeningTagStart(node, options),
        printAttributes(path, options, print),
        (0, utils_1.hasNoCloseMarker)(node) ? '' : printOpeningTagEnd(node),
    ];
}
exports.printOpeningTag = printOpeningTag;
function printOpeningTagStart(node, options) {
    return node.prev && needsToBorrowNextOpeningTagStartMarker(node.prev)
        ? ''
        : [printOpeningTagPrefix(node, options), printOpeningTagStartMarker(node)];
}
exports.printOpeningTagStart = printOpeningTagStart;
function printOpeningTagPrefix(node, options) {
    return needsToBorrowParentOpeningTagEndMarker(node)
        ? printOpeningTagEndMarker(node.parentNode)
        : needsToBorrowPrevClosingTagEndMarker(node)
            ? printClosingTagEndMarker(node.prev, options)
            : '';
}
exports.printOpeningTagPrefix = printOpeningTagPrefix;
function printOpeningTagStartMarker(node) {
    if (!node)
        return '';
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return '<!--';
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlVoidElement:
        case types_1.NodeTypes.HtmlRawNode:
            if (typeof node.name === 'string') {
                return `<${node.name}`;
            }
            else if (typeof node.name.markup === 'string') {
                return `<{{ ${node.name.markup.trim()} }}`;
            }
            else {
                return `<{{ ${node.name.markup.rawSource} }}`;
            }
        default:
            return '';
    }
}
exports.printOpeningTagStartMarker = printOpeningTagStartMarker;
function printOpeningTagEndMarker(node) {
    if (!node)
        return '';
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return '-->';
        case types_1.NodeTypes.HtmlSelfClosingElement:
        case types_1.NodeTypes.HtmlVoidElement:
            return '';
        case types_1.NodeTypes.HtmlElement:
        case types_1.NodeTypes.HtmlRawNode:
            return '>';
        default:
            return '>';
    }
}
exports.printOpeningTagEndMarker = printOpeningTagEndMarker;
function getNodeContent(node, options) {
    let start = node.blockStartPosition.end;
    if (node.firstChild &&
        needsToBorrowParentOpeningTagEndMarker(node.firstChild)) {
        start -= printOpeningTagEndMarker(node).length;
    }
    let end = node.blockEndPosition.start;
    if (node.lastChild &&
        needsToBorrowParentClosingTagStartMarker(node.lastChild)) {
        end += printClosingTagStartMarker(node, options).length;
    }
    else if (node.lastChild &&
        needsToBorrowLastChildClosingTagEndMarker(node)) {
        end -= printClosingTagEndMarker(node.lastChild, options).length;
    }
    return options.originalText.slice(start, end);
}
exports.getNodeContent = getNodeContent;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/printer-liquid-html.js":
/*!*********************************************!*\
  !*** ./dist/printer/printer-liquid-html.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.printerLiquidHtml = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const types_1 = __webpack_require__(/*! ../types */ "./dist/types.js");
const utils_1 = __webpack_require__(/*! ../utils */ "./dist/utils.js");
const print_preprocess_1 = __webpack_require__(/*! ../printer/print-preprocess */ "./dist/printer/print-preprocess.js");
const utils_2 = __webpack_require__(/*! ../printer/utils */ "./dist/printer/utils/index.js");
const element_1 = __webpack_require__(/*! ../printer/print/element */ "./dist/printer/print/element.js");
const tag_1 = __webpack_require__(/*! ../printer/print/tag */ "./dist/printer/print/tag.js");
const liquid_1 = __webpack_require__(/*! ../printer/print/liquid */ "./dist/printer/print/liquid.js");
const children_1 = __webpack_require__(/*! ../printer/print/children */ "./dist/printer/print/children.js");
const { builders } = prettier_1.doc;
const { fill, group, hardline, indent, join, line, softline } = builders;
const { replaceTextEndOfLine } = prettier_1.doc.utils;
function getSchema(contents, options) {
    try {
        return [JSON.stringify(JSON.parse(contents), null, options.tabWidth), true];
    }
    catch (e) {
        return [contents, false];
    }
}
function printAttributes(path, _options, print) {
    const node = path.getValue();
    if ((0, utils_2.isEmpty)(node.attributes))
        return '';
    return group([
        indent([
            line,
            join(line, path.map((p) => print(p), 'attributes')),
        ]),
        softline,
    ], {
        shouldBreak: (0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.start, node.blockStartPosition.end),
    });
}
const oppositeQuotes = {
    '"': "'",
    "'": '"',
};
function printAttribute(path, options, _print) {
    const node = path.getValue();
    const attrGroupId = Symbol('attr-group-id');
    const value = node.source.slice(node.attributePosition.start, node.attributePosition.end);
    const preferredQuote = options.singleQuote ? `'` : `"`;
    const attributeValueContainsQuote = !!node.value.find((valueNode) => (0, utils_2.isTextLikeNode)(valueNode) && valueNode.value.includes(preferredQuote));
    const quote = attributeValueContainsQuote
        ? oppositeQuotes[preferredQuote]
        : preferredQuote;
    return [
        node.name,
        '=',
        quote,
        (0, utils_2.hasLineBreakInRange)(node.source, node.attributePosition.start, node.attributePosition.end)
            ? group([
                indent([
                    softline,
                    join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(value), true)),
                ]),
                softline,
            ], { id: attrGroupId })
            : value,
        quote,
    ];
}
function isYamlFrontMatter(node) {
    return (node.parentNode &&
        node.parentNode.type === types_1.NodeTypes.Document &&
        !node.prev &&
        /^---\r?\n/.test(node.value));
}
function printTextNode(path, options, _print) {
    const node = path.getValue();
    if (isYamlFrontMatter(node))
        return node.value;
    if (node.value.match(/^\s*$/))
        return '';
    const text = node.value;
    const paragraphs = text
        .split(/(\r?\n){2,}/)
        .filter(Boolean)
        .map((curr) => {
        let doc = [];
        const words = curr.trim().split(/\s+/g);
        let isFirst = true;
        for (let j = 0; j < words.length; j++) {
            const word = words[j];
            if (isFirst) {
                isFirst = false;
            }
            else {
                doc.push(line);
            }
            doc.push(word);
        }
        return fill(doc);
    });
    return [
        (0, tag_1.printOpeningTagPrefix)(node, options),
        join(hardline, paragraphs),
        (0, tag_1.printClosingTagSuffix)(node, options),
    ];
}
function printNode(path, options, print, args = {}) {
    const node = path.getValue();
    switch (node.type) {
        case types_1.NodeTypes.Document: {
            return [
                (0, children_1.printChildren)(path, options, print, args),
                hardline,
            ];
        }
        case types_1.NodeTypes.HtmlElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlVoidElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlSelfClosingElement: {
            return (0, element_1.printElement)(path, options, print);
        }
        case types_1.NodeTypes.HtmlRawNode: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = lines.length > 0 && lines[0] !== ''
                ? [
                    indent([
                        hardline,
                        join(hardline, (0, utils_2.reindent)(lines, shouldSkipFirstLine)),
                    ]),
                    hardline,
                ]
                : [softline];
            return group([
                group([
                    '<',
                    node.name,
                    printAttributes(path, options, print),
                    '>',
                ]),
                body,
                ['</', node.name, '>'],
            ]);
        }
        case types_1.NodeTypes.LiquidDrop: {
            return (0, liquid_1.printLiquidDrop)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidRawTag: {
            const lines = (0, utils_2.bodyLines)(node.body);
            const shouldSkipFirstLine = !node.source[node.blockStartPosition.end].match(/\r|\n/);
            const body = (0, utils_2.reindent)(lines, shouldSkipFirstLine);
            const blockStart = group([
                '{%',
                node.whitespaceStart,
                ' ',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ]);
            const blockEnd = [
                '{%',
                node.whitespaceStart,
                ' ',
                'end',
                node.name,
                ' ',
                node.whitespaceEnd,
                '%}',
            ];
            if (node.name === 'schema') {
                const [schema, isValid] = getSchema(node.body, options);
                if (!isValid) {
                    return [
                        blockStart,
                        ...replaceTextEndOfLine(schema, hardline),
                        blockEnd,
                    ];
                }
                const body = [hardline, ...replaceTextEndOfLine(schema, hardline)];
                return [
                    blockStart,
                    options.indentSchema ? indent(body) : body,
                    hardline,
                    blockEnd,
                ];
            }
            if (!(0, utils_2.hasLineBreakInRange)(node.source, node.blockStartPosition.end, node.blockEndPosition.start)) {
                return [
                    blockStart,
                    node.source.slice(node.blockStartPosition.end, node.blockEndPosition.start),
                    blockEnd,
                ];
            }
            return [
                blockStart,
                indent([hardline, join(hardline, body)]),
                hardline,
                blockEnd,
            ];
        }
        case types_1.NodeTypes.LiquidTag: {
            return (0, liquid_1.printLiquidTag)(path, options, print, args);
        }
        case types_1.NodeTypes.LiquidBranch: {
            return (0, liquid_1.printLiquidBranch)(path, options, print, args);
        }
        case types_1.NodeTypes.AttrEmpty: {
            return node.name;
        }
        case types_1.NodeTypes.AttrUnquoted:
        case types_1.NodeTypes.AttrSingleQuoted:
        case types_1.NodeTypes.AttrDoubleQuoted: {
            return printAttribute(path, options, print);
        }
        case types_1.NodeTypes.HtmlComment: {
            return [
                '<!--',
                group([
                    indent([line, join(hardline, (0, utils_2.reindent)((0, utils_2.bodyLines)(node.body), true))]),
                    line,
                ]),
                '-->',
            ];
        }
        case types_1.NodeTypes.LiquidVariable: {
            const name = path.call(print, 'expression');
            let filters = '';
            if (node.filters.length > 0) {
                filters = [
                    line,
                    join(line, path.map((p) => print(p), 'filters')),
                ];
            }
            return [name, filters];
        }
        case types_1.NodeTypes.LiquidFilter: {
            let args = [];
            if (node.args.length > 0) {
                const printed = path.map((p) => print(p), 'args');
                const shouldPrintFirstArgumentSameLine = node.args[0].type !== types_1.NodeTypes.NamedArgument;
                if (shouldPrintFirstArgumentSameLine) {
                    const [firstDoc, ...rest] = printed;
                    const restDoc = (0, utils_2.isEmpty)(rest)
                        ? ''
                        : indent([',', line, join([',', line], rest)]);
                    args = [': ', firstDoc, restDoc];
                }
                else {
                    args = [':', indent([line, join([',', line], printed)])];
                }
            }
            return group(['| ', node.name, ...args]);
        }
        case types_1.NodeTypes.NamedArgument: {
            return [node.name, ': ', path.call(print, 'value')];
        }
        case types_1.NodeTypes.TextNode: {
            return printTextNode(path, options, print);
        }
        case types_1.NodeTypes.YAMLFrontmatter: {
            return ['---', hardline, node.body, '---'];
        }
        case types_1.NodeTypes.String: {
            const preferredQuote = options.liquidSingleQuote ? `'` : `"`;
            const valueHasQuotes = node.value.includes(preferredQuote);
            const quote = valueHasQuotes
                ? oppositeQuotes[preferredQuote]
                : preferredQuote;
            return [quote, node.value, quote];
        }
        case types_1.NodeTypes.Number: {
            if (args.truncate) {
                return node.value.replace(/\.\d+$/, '');
            }
            else {
                return node.value;
            }
        }
        case types_1.NodeTypes.Range: {
            return [
                '(',
                path.call((p) => print(p, { truncate: true }), 'start'),
                '..',
                path.call((p) => print(p, { truncate: true }), 'end'),
                ')',
            ];
        }
        case types_1.NodeTypes.LiquidLiteral: {
            if (node.keyword === 'null') {
                return 'nil';
            }
            return node.keyword;
        }
        case types_1.NodeTypes.VariableLookup: {
            const doc = [];
            if (node.name) {
                doc.push(node.name);
            }
            const lookups = path.map((lookupPath, index) => {
                const lookup = lookupPath.getValue();
                switch (lookup.type) {
                    case types_1.NodeTypes.String: {
                        const value = lookup.value;
                        const isGlobalStringLookup = index === 0 && !node.name;
                        if (!isGlobalStringLookup && /^[a-z0-9_]+\??$/i.test(value)) {
                            return ['.', value];
                        }
                        return ['[', print(lookupPath), ']'];
                    }
                    default: {
                        return ['[', print(lookupPath), ']'];
                    }
                }
            }, 'lookups');
            return [...doc, ...lookups];
        }
        default: {
            return (0, utils_1.assertNever)(node);
        }
    }
}
exports.printerLiquidHtml = {
    print: printNode,
    preprocess: print_preprocess_1.preprocess,
};
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/utils/array.js":
/*!*************************************!*\
  !*** ./dist/printer/utils/array.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmpty = exports.intersperse = exports.first = exports.last = void 0;
function last(x) {
    return x[x.length - 1];
}
exports.last = last;
function first(x) {
    return x[0];
}
exports.first = first;
function intersperse(array, delim) {
    return array.flatMap((val) => [delim, val]).slice(1);
}
exports.intersperse = intersperse;
function isEmpty(col) {
    return col.length === 0;
}
exports.isEmpty = isEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci91dGlscy9hcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixJQUFJLENBQUksQ0FBTTtJQUM1QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFGRCxvQkFFQztBQUVELFNBQWdCLEtBQUssQ0FBSSxDQUFNO0lBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsQ0FBQztBQUZELHNCQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFJLEtBQVUsRUFBRSxLQUFRO0lBQ2pELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLEdBQVU7SUFDaEMsT0FBTyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRkQsMEJBRUMifQ==

/***/ }),

/***/ "./dist/printer/utils/index.js":
/*!*************************************!*\
  !*** ./dist/printer/utils/index.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isNonEmptyArray = exports.ifBreakChain = exports.FORCE_BREAK_GROUP_ID = exports.FORCE_FLAT_GROUP_ID = exports.getWhitespaceTrim = exports.isDeeplyNested = exports.getSource = void 0;
const prettier_1 = __webpack_require__(/*! prettier */ "prettier");
const parser_1 = __webpack_require__(/*! ../../parser */ "./dist/parser/index.js");
const array_1 = __webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js");
__exportStar(__webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js"), exports);
__exportStar(__webpack_require__(/*! ../../printer/utils/string */ "./dist/printer/utils/string.js"), exports);
__exportStar(__webpack_require__(/*! ../../printer/utils/node */ "./dist/printer/utils/node.js"), exports);
const { builders } = prettier_1.doc;
const { ifBreak } = builders;
function getSource(path) {
    return path.getValue().source;
}
exports.getSource = getSource;
function isDeeplyNested(node) {
    if (!node.children)
        return false;
    if ((0, parser_1.isBranchedTag)(node)) {
        return !!node.children.find((child) => isDeeplyNested(child));
    }
    return !!node.children.find((child) => !(0, array_1.isEmpty)(child.children || []));
}
exports.isDeeplyNested = isDeeplyNested;
function getWhitespaceTrim(currWhitespaceTrim, needsWhitespaceStrippingOnBreak, groupIds) {
    return ifBreakChain(needsWhitespaceStrippingOnBreak ? '-' : currWhitespaceTrim, currWhitespaceTrim, Array.isArray(groupIds) ? groupIds : [groupIds]);
}
exports.getWhitespaceTrim = getWhitespaceTrim;
exports.FORCE_FLAT_GROUP_ID = Symbol('force-no-break');
exports.FORCE_BREAK_GROUP_ID = Symbol('force-break');
function ifBreakChain(breaksContent, flatContent, groupIds) {
    if (groupIds.includes(exports.FORCE_BREAK_GROUP_ID))
        return breaksContent;
    if (groupIds.includes(exports.FORCE_FLAT_GROUP_ID))
        return flatContent;
    return groupIds.reduce((currFlatContent, groupId) => ifBreak(breaksContent, currFlatContent, { groupId }), flatContent);
}
exports.ifBreakChain = ifBreakChain;
function isNonEmptyArray(object) {
    return Array.isArray(object) && object.length > 0;
}
exports.isNonEmptyArray = isNonEmptyArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJpbnRlci91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsdUNBQW9DO0FBRXBDLHFDQUF5QztBQUN6QyxpREFBZ0Q7QUFFaEQsd0RBQXNDO0FBQ3RDLHlEQUF1QztBQUN2Qyx1REFBcUM7QUFFckMsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGNBQUcsQ0FBQztBQUN6QixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDO0FBRTdCLFNBQWdCLFNBQVMsQ0FBQyxJQUFtQjtJQUMzQyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUM7QUFDaEMsQ0FBQztBQUZELDhCQUVDO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixJQUE4RDtJQUU5RCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUNqQyxJQUFJLElBQUEsc0JBQWEsRUFBQyxJQUFJLENBQUMsRUFBRTtRQUN2QixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ3BDLGNBQWMsQ0FBQyxLQUFxQixDQUFDLENBQ3RDLENBQUM7S0FDSDtJQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUN6QixDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFBLGVBQU8sRUFBRSxLQUFhLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO0FBQ0osQ0FBQztBQVpELHdDQVlDO0FBR0QsU0FBZ0IsaUJBQWlCLENBQy9CLGtCQUEwQixFQUMxQiwrQkFBb0QsRUFDcEQsUUFBNEI7SUFFNUIsT0FBTyxZQUFZLENBQ2pCLCtCQUErQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixFQUMxRCxrQkFBa0IsRUFDbEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUNoRCxDQUFDO0FBQ0osQ0FBQztBQVZELDhDQVVDO0FBR1ksUUFBQSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUMvQyxRQUFBLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUUxRCxTQUFnQixZQUFZLENBQzFCLGFBQWtCLEVBQ2xCLFdBQWdCLEVBQ2hCLFFBQWdDO0lBRWhDLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyw0QkFBb0IsQ0FBQztRQUFFLE9BQU8sYUFBYSxDQUFDO0lBQ2xFLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQywyQkFBbUIsQ0FBQztRQUFFLE9BQU8sV0FBVyxDQUFDO0lBQy9ELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FDcEIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FDM0IsT0FBTyxDQUFDLGFBQWEsRUFBRSxlQUFlLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUN0RCxXQUFXLENBQ1osQ0FBQztBQUNKLENBQUM7QUFaRCxvQ0FZQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxNQUFXO0lBQ3pDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRkQsMENBRUMifQ==

/***/ }),

/***/ "./dist/printer/utils/node.js":
/*!************************************!*\
  !*** ./dist/printer/utils/node.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getLastDescendant = exports.hasMeaningfulLackOfDanglingWhitespace = exports.hasMeaningfulLackOfTrailingWhitespace = exports.hasMeaningfulLackOfLeadingWhitespace = exports.preferHardlineAsTrailingSpaces = exports.preferHardlineAsLeadingSpaces = exports.preferHardlineAsSurroundingSpaces = exports.forceBreakChildren = exports.forceBreakContent = exports.forceNextEmptyLine = exports.hasPrettierIgnore = exports.isPrettierIgnoreNode = exports.shouldPreserveContent = exports.hasNonTextChild = exports.isHtmlNode = exports.isMultilineLiquidTag = exports.isLiquidNode = exports.isTextLikeNode = exports.isHtmlElement = exports.isVoidElement = exports.isSelfClosing = exports.isHtmlComment = exports.hasNoCloseMarker = exports.isPreLikeNode = exports.isScriptLikeTag = void 0;
const types_1 = __webpack_require__(/*! ../../types */ "./dist/types.js");
const array_1 = __webpack_require__(/*! ../../printer/utils/array */ "./dist/printer/utils/array.js");
function isScriptLikeTag(node) {
    return node.type === types_1.NodeTypes.HtmlRawNode;
}
exports.isScriptLikeTag = isScriptLikeTag;
function isPreLikeNode(node) {
    return node.cssWhitespace.startsWith('pre');
}
exports.isPreLikeNode = isPreLikeNode;
function hasNoCloseMarker(node) {
    return isSelfClosing(node) || isVoidElement(node) || isHtmlComment(node);
}
exports.hasNoCloseMarker = hasNoCloseMarker;
function isHtmlComment(node) {
    return node.type === types_1.NodeTypes.HtmlComment;
}
exports.isHtmlComment = isHtmlComment;
function isSelfClosing(node) {
    return node.type === types_1.NodeTypes.HtmlSelfClosingElement;
}
exports.isSelfClosing = isSelfClosing;
function isVoidElement(node) {
    return node.type === types_1.NodeTypes.HtmlVoidElement;
}
exports.isVoidElement = isVoidElement;
function isHtmlElement(node) {
    return node.type === types_1.NodeTypes.HtmlElement;
}
exports.isHtmlElement = isHtmlElement;
function isTextLikeNode(node) {
    return !!node && node.type === types_1.NodeTypes.TextNode;
}
exports.isTextLikeNode = isTextLikeNode;
function isLiquidNode(node) {
    return !!node && types_1.LiquidNodeTypes.includes(node.type);
}
exports.isLiquidNode = isLiquidNode;
function isMultilineLiquidTag(node) {
    return (!!node &&
        node.type === types_1.NodeTypes.LiquidTag &&
        !!node.children &&
        !(0, array_1.isEmpty)(node.children));
}
exports.isMultilineLiquidTag = isMultilineLiquidTag;
function isHtmlNode(node) {
    return !!node && types_1.HtmlNodeTypes.includes(node.type);
}
exports.isHtmlNode = isHtmlNode;
function hasNonTextChild(node) {
    return (node.children &&
        node.children.some((child) => child.type !== types_1.NodeTypes.TextNode));
}
exports.hasNonTextChild = hasNonTextChild;
function shouldPreserveContent(node, _options) {
    if (isPreLikeNode(node) &&
        node.children &&
        node.children.some((child) => !isTextLikeNode(child))) {
        return true;
    }
    return false;
}
exports.shouldPreserveContent = shouldPreserveContent;
function isPrettierIgnoreNode(node) {
    return (node &&
        node.type === types_1.NodeTypes.HtmlComment &&
        /^\s*prettier-ignore/m.test(node.body));
}
exports.isPrettierIgnoreNode = isPrettierIgnoreNode;
function hasPrettierIgnore(node) {
    return isPrettierIgnoreNode(node) || isPrettierIgnoreNode(node.prev);
}
exports.hasPrettierIgnore = hasPrettierIgnore;
function forceNextEmptyLine(node) {
    if (!node)
        return false;
    if (!node.next)
        return false;
    const source = node.source;
    let tmp;
    tmp = source.indexOf('\n', node.position.end);
    if (tmp === -1)
        return false;
    tmp = source.indexOf('\n', tmp + 1);
    if (tmp === -1)
        return false;
    return tmp < node.next.position.start;
}
exports.forceNextEmptyLine = forceNextEmptyLine;
function forceBreakContent(node) {
    return (forceBreakChildren(node) ||
        (node.type === types_1.NodeTypes.HtmlElement &&
            node.children.length > 0 &&
            typeof node.name === 'string' &&
            (['body', 'script', 'style'].includes(node.name) ||
                node.children.some((child) => hasNonTextChild(child)))) ||
        (node.firstChild &&
            node.firstChild === node.lastChild &&
            node.firstChild.type !== types_1.NodeTypes.TextNode &&
            hasLeadingLineBreak(node.firstChild) &&
            (!node.lastChild.isTrailingWhitespaceSensitive ||
                hasTrailingLineBreak(node.lastChild))));
}
exports.forceBreakContent = forceBreakContent;
function forceBreakChildren(node) {
    return (node.type === types_1.NodeTypes.HtmlElement &&
        node.children.length > 0 &&
        typeof node.name === 'string' &&
        (['html', 'head', 'ul', 'ol', 'select'].includes(node.name) ||
            (node.cssDisplay.startsWith('table') && node.cssDisplay !== 'table-cell')));
}
exports.forceBreakChildren = forceBreakChildren;
function preferHardlineAsSurroundingSpaces(node) {
    switch (node.type) {
        case types_1.NodeTypes.HtmlComment:
            return true;
        case types_1.NodeTypes.HtmlElement:
            return (typeof node.name === 'string' &&
                ['script', 'select'].includes(node.name));
        case types_1.NodeTypes.LiquidTag:
            if ((node.prev && isTextLikeNode(node.prev)) ||
                (node.next && isTextLikeNode(node.next))) {
                return false;
            }
            return node.children && node.children.length > 0;
    }
    return false;
}
exports.preferHardlineAsSurroundingSpaces = preferHardlineAsSurroundingSpaces;
function preferHardlineAsLeadingSpaces(node) {
    return (preferHardlineAsSurroundingSpaces(node) ||
        (isLiquidNode(node) && node.prev && isLiquidNode(node.prev)) ||
        (node.prev && preferHardlineAsTrailingSpaces(node.prev)) ||
        hasSurroundingLineBreak(node));
}
exports.preferHardlineAsLeadingSpaces = preferHardlineAsLeadingSpaces;
function preferHardlineAsTrailingSpaces(node) {
    return (preferHardlineAsSurroundingSpaces(node) ||
        (isLiquidNode(node) &&
            node.next &&
            (isLiquidNode(node.next) || isHtmlNode(node.next))) ||
        (node.type === types_1.NodeTypes.HtmlElement && node.name === 'br') ||
        hasSurroundingLineBreak(node));
}
exports.preferHardlineAsTrailingSpaces = preferHardlineAsTrailingSpaces;
function hasMeaningfulLackOfLeadingWhitespace(node) {
    return node.isLeadingWhitespaceSensitive && !node.hasLeadingWhitespace;
}
exports.hasMeaningfulLackOfLeadingWhitespace = hasMeaningfulLackOfLeadingWhitespace;
function hasMeaningfulLackOfTrailingWhitespace(node) {
    return node.isTrailingWhitespaceSensitive && !node.hasTrailingWhitespace;
}
exports.hasMeaningfulLackOfTrailingWhitespace = hasMeaningfulLackOfTrailingWhitespace;
function hasMeaningfulLackOfDanglingWhitespace(node) {
    return node.isDanglingWhitespaceSensitive && !node.hasDanglingWhitespace;
}
exports.hasMeaningfulLackOfDanglingWhitespace = hasMeaningfulLackOfDanglingWhitespace;
function hasSurroundingLineBreak(node) {
    return hasLeadingLineBreak(node) && hasTrailingLineBreak(node);
}
function hasLeadingLineBreak(node) {
    if (node.type === types_1.NodeTypes.Document)
        return false;
    return (node.hasLeadingWhitespace &&
        hasLineBreakInRange(node.source, node.prev
            ? node.prev.position.end
            : node.parentNode.blockStartPosition
                ? node.parentNode.blockStartPosition.end
                : node.parentNode.position.start, node.position.start));
}
function hasTrailingLineBreak(node) {
    if (node.type === types_1.NodeTypes.Document)
        return false;
    return (node.hasTrailingWhitespace &&
        hasLineBreakInRange(node.source, node.position.end, node.next
            ? node.next.position.start
            : node.parentNode.blockEndPosition
                ? node.parentNode.blockEndPosition.start
                : node.parentNode.position.end));
}
function hasLineBreakInRange(source, start, end) {
    const index = source.indexOf('\n', start);
    return index !== -1 && index < end;
}
function getLastDescendant(node) {
    return node.lastChild ? getLastDescendant(node.lastChild) : node;
}
exports.getLastDescendant = getLastDescendant;
//# sourceMappingURL=data:application/json;base64,

/***/ }),

/***/ "./dist/printer/utils/string.js":
/*!**************************************!*\
  !*** ./dist/printer/utils/string.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.hasLineBreakInRange = exports.originallyHadLineBreaks = exports.reindent = exports.markupLines = exports.bodyLines = exports.trimEnd = exports.trim = exports.isWhitespace = void 0;
function isWhitespace(source, loc) {
    if (loc < 0 || loc >= source.length)
        return false;
    return !!source[loc].match(/\s/);
}
exports.isWhitespace = isWhitespace;
const trim = (x) => x.trim();
exports.trim = trim;
const trimEnd = (x) => x.trimEnd();
exports.trimEnd = trimEnd;
function bodyLines(str) {
    return str
        .replace(/^\n*|\s*$/g, '')
        .split(/\r?\n/);
}
exports.bodyLines = bodyLines;
function markupLines(markup) {
    return markup.trim().split('\n');
}
exports.markupLines = markupLines;
function reindent(lines, skipFirst = false) {
    const minIndentLevel = lines
        .filter((_, i) => (skipFirst ? i > 0 : true))
        .filter((line) => line.trim().length > 0)
        .map((line) => line.match(/^\s*/)[0].length)
        .reduce((a, b) => Math.min(a, b), Infinity);
    if (minIndentLevel === Infinity) {
        return lines;
    }
    const indentStrip = new RegExp('^' + ' '.repeat(minIndentLevel));
    return lines.map((line) => line.replace(indentStrip, '')).map(exports.trimEnd);
}
exports.reindent = reindent;
function originallyHadLineBreaks(path, { locStart, locEnd }) {
    const node = path.getValue();
    return hasLineBreakInRange(node.source, locStart(node), locEnd(node));
}
exports.originallyHadLineBreaks = originallyHadLineBreaks;
function hasLineBreakInRange(source, locStart, locEnd) {
    const indexOfNewLine = source.indexOf('\n', locStart);
    return 0 <= indexOfNewLine && indexOfNewLine < locEnd;
}
exports.hasLineBreakInRange = hasLineBreakInRange;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3ByaW50ZXIvdXRpbHMvc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLFNBQWdCLFlBQVksQ0FBQyxNQUFjLEVBQUUsR0FBVztJQUN0RCxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1FBQUUsT0FBTyxLQUFLLENBQUM7SUFDbEQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBSEQsb0NBR0M7QUFFTSxNQUFNLElBQUksR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQS9CLFFBQUEsSUFBSSxRQUEyQjtBQUNyQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQXJDLFFBQUEsT0FBTyxXQUE4QjtBQUVsRCxTQUFnQixTQUFTLENBQUMsR0FBVztJQUNuQyxPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztTQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQUpELDhCQUlDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLE1BQWM7SUFDeEMsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxLQUFlLEVBQUUsU0FBUyxHQUFHLEtBQUs7SUFDekQsTUFBTSxjQUFjLEdBQUcsS0FBSztTQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDNUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUN4QyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1NBQ3BELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTlDLElBQUksY0FBYyxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNqRSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQU8sQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFiRCw0QkFhQztBQUVELFNBQWdCLHVCQUF1QixDQUNyQyxJQUFtQixFQUNuQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQXVCO0lBRXpDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixPQUFPLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFORCwwREFNQztBQUVELFNBQWdCLG1CQUFtQixDQUNqQyxNQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsTUFBYztJQUVkLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELE9BQU8sQ0FBQyxJQUFJLGNBQWMsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDO0FBQ3hELENBQUM7QUFQRCxrREFPQyJ9

/***/ }),

/***/ "./dist/types.js":
/*!***********************!*\
  !*** ./dist/types.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LiquidNodeTypes = exports.HtmlNodeTypes = exports.NodeTypes = void 0;
var NodeTypes;
(function (NodeTypes) {
    NodeTypes["Document"] = "Document";
    NodeTypes["LiquidRawTag"] = "LiquidRawTag";
    NodeTypes["LiquidTag"] = "LiquidTag";
    NodeTypes["LiquidBranch"] = "LiquidBranch";
    NodeTypes["LiquidDrop"] = "LiquidDrop";
    NodeTypes["HtmlSelfClosingElement"] = "HtmlSelfClosingElement";
    NodeTypes["HtmlVoidElement"] = "HtmlVoidElement";
    NodeTypes["HtmlComment"] = "HtmlComment";
    NodeTypes["HtmlElement"] = "HtmlElement";
    NodeTypes["HtmlRawNode"] = "HtmlRawNode";
    NodeTypes["AttrSingleQuoted"] = "AttrSingleQuoted";
    NodeTypes["AttrDoubleQuoted"] = "AttrDoubleQuoted";
    NodeTypes["AttrUnquoted"] = "AttrUnquoted";
    NodeTypes["AttrEmpty"] = "AttrEmpty";
    NodeTypes["TextNode"] = "TextNode";
    NodeTypes["YAMLFrontmatter"] = "YAMLFrontmatter";
    NodeTypes["LiquidVariable"] = "LiquidVariable";
    NodeTypes["LiquidFilter"] = "LiquidFilter";
    NodeTypes["NamedArgument"] = "NamedArgument";
    NodeTypes["LiquidLiteral"] = "LiquidLiteral";
    NodeTypes["String"] = "String";
    NodeTypes["Number"] = "Number";
    NodeTypes["Range"] = "Range";
    NodeTypes["VariableLookup"] = "VariableLookup";
})(NodeTypes = exports.NodeTypes || (exports.NodeTypes = {}));
exports.HtmlNodeTypes = [
    NodeTypes.HtmlElement,
    NodeTypes.HtmlRawNode,
    NodeTypes.HtmlVoidElement,
    NodeTypes.HtmlSelfClosingElement,
];
exports.LiquidNodeTypes = [
    NodeTypes.LiquidTag,
    NodeTypes.LiquidDrop,
    NodeTypes.LiquidBranch,
    NodeTypes.LiquidRawTag,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUUEsSUFBWSxTQTBCWDtBQTFCRCxXQUFZLFNBQVM7SUFDbkIsa0NBQXFCLENBQUE7SUFDckIsMENBQTZCLENBQUE7SUFDN0Isb0NBQXVCLENBQUE7SUFDdkIsMENBQTZCLENBQUE7SUFDN0Isc0NBQXlCLENBQUE7SUFDekIsOERBQWlELENBQUE7SUFDakQsZ0RBQW1DLENBQUE7SUFDbkMsd0NBQTJCLENBQUE7SUFDM0Isd0NBQTJCLENBQUE7SUFDM0Isd0NBQTJCLENBQUE7SUFDM0Isa0RBQXFDLENBQUE7SUFDckMsa0RBQXFDLENBQUE7SUFDckMsMENBQTZCLENBQUE7SUFDN0Isb0NBQXVCLENBQUE7SUFDdkIsa0NBQXFCLENBQUE7SUFDckIsZ0RBQW1DLENBQUE7SUFFbkMsOENBQWlDLENBQUE7SUFDakMsMENBQTZCLENBQUE7SUFDN0IsNENBQStCLENBQUE7SUFDL0IsNENBQStCLENBQUE7SUFDL0IsOEJBQWlCLENBQUE7SUFDakIsOEJBQWlCLENBQUE7SUFDakIsNEJBQWUsQ0FBQTtJQUNmLDhDQUFpQyxDQUFBO0FBQ25DLENBQUMsRUExQlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUEwQnBCO0FBRVksUUFBQSxhQUFhLEdBQUc7SUFDM0IsU0FBUyxDQUFDLFdBQVc7SUFDckIsU0FBUyxDQUFDLFdBQVc7SUFDckIsU0FBUyxDQUFDLGVBQWU7SUFDekIsU0FBUyxDQUFDLHNCQUFzQjtDQUN4QixDQUFDO0FBRUUsUUFBQSxlQUFlLEdBQUc7SUFDN0IsU0FBUyxDQUFDLFNBQVM7SUFDbkIsU0FBUyxDQUFDLFVBQVU7SUFDcEIsU0FBUyxDQUFDLFlBQVk7SUFDdEIsU0FBUyxDQUFDLFlBQVk7Q0FDZCxDQUFDIn0=

/***/ }),

/***/ "./dist/utils.js":
/*!***********************!*\
  !*** ./dist/utils.js ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.dropLast = exports.deepGet = exports.locEnd = exports.locStart = exports.assertNever = void 0;
function assertNever(x) {
    throw new Error(`Unexpected object: ${x.type}`);
}
exports.assertNever = assertNever;
function locStart(node) {
    return node.position.start;
}
exports.locStart = locStart;
function locEnd(node) {
    return node.position.end;
}
exports.locEnd = locEnd;
function deepGet(path, obj) {
    return path.reduce((curr, k) => {
        if (curr && curr[k] !== undefined)
            return curr[k];
        return undefined;
    }, obj);
}
exports.deepGet = deepGet;
function dropLast(n, xs) {
    const result = [...xs];
    for (let i = 0; i < n; i++) {
        result.pop();
    }
    return result;
}
exports.dropLast = dropLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsU0FBZ0IsV0FBVyxDQUFDLENBQVE7SUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBdUIsQ0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLElBQTRCO0lBQ25ELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDN0IsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLElBQTRCO0lBQ2pELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7QUFDM0IsQ0FBQztBQUZELHdCQUVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFVLElBQXlCLEVBQUUsR0FBUTtJQUNsRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsQ0FBa0IsRUFBRSxFQUFFO1FBQ25ELElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTO1lBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1YsQ0FBQztBQUxELDBCQUtDO0FBRUQsU0FBZ0IsUUFBUSxDQUFJLENBQVMsRUFBRSxFQUFnQjtJQUNyRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMxQixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDZDtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFORCw0QkFNQyJ9

/***/ }),

/***/ "./node_modules/html-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/html-styles/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./index.json */ "./node_modules/html-styles/index.json");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ ((module) => {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/isobject/index.js":
/*!****************************************!*\
  !*** ./node_modules/isobject/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */



var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

module.exports = function isObject(val) {
  return val != null && typeof val === 'object' && isArray(val) === false;
};


/***/ }),

/***/ "./node_modules/line-column/lib/line-column.js":
/*!*****************************************************!*\
  !*** ./node_modules/line-column/lib/line-column.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * line-column - Convert efficiently index to/from line-column in a string
 * @module  lineColumn
 * @license MIT
 */


var isArray  = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
var isObject = __webpack_require__(/*! isobject */ "./node_modules/isobject/index.js");
var slice = Array.prototype.slice;

module.exports = LineColumnFinder;

/**
 * Finder for index and line-column from given string.
 *
 * You can call this without `new` operator as it returns an instance anyway.
 *
 * @class
 * @param {string} str - A string to be parsed.
 * @param {Object|number} [options] - Options.
 *     This can be an index in the string for shorthand of `lineColumn(str, index)`.
 * @param {number} [options.origin=1] - The origin value of line and column.
 */
function LineColumnFinder(str, options) {
  if (!(this instanceof LineColumnFinder)) {
    if (typeof options === "number") {
      return (new LineColumnFinder(str)).fromIndex(options);
    }
    return new LineColumnFinder(str, options);
  }

  this.str = str || "";
  this.lineToIndex = buildLineToIndex(this.str);

  options = options || {};
  this.origin = typeof options.origin === "undefined" ? 1 : options.origin;
}

/**
 * Find line and column from index in the string.
 *
 * @param  {number} index - Index in the string. (0-origin)
 * @return {Object|null}
 *     Found line number and column number in object `{ line: X, col: Y }`.
 *     If the given index is out of range, it returns `null`.
 */
LineColumnFinder.prototype.fromIndex = function (index) {
  if (index < 0 || index >= this.str.length || isNaN(index)) {
    return null;
  }

  var line = findLowerIndexInRangeArray(index, this.lineToIndex);
  return {
    line: line + this.origin,
    col:  index - this.lineToIndex[line] + this.origin
  };
}

/**
 * Find index from line and column in the string.
 *
 * @param  {number|Object|Array} line - Line number in the string.
 *     This can be an Object of `{ line: X, col: Y }`, or
 *     an Array of `[line, col]`.
 * @param  {number} [column] - Column number in the string.
 *     This must be omitted or undefined when Object or Array is given
 *     to the first argument.
 * @return {number}
 *     Found index in the string. (always 0-origin)
 *     If the given line or column is out of range, it returns `-1`.
 */
LineColumnFinder.prototype.toIndex = function (line, column) {
  if (typeof column === "undefined") {
    if (isArray(line) && line.length >= 2) {
      return this.toIndex(line[0], line[1]);
    }
    if (isObject(line) && "line" in line && ("col" in line || "column" in line)) {
      return this.toIndex(line.line, ("col" in line ? line.col : line.column));
    }
    return -1;
  }
  if (isNaN(line) || isNaN(column)) {
    return -1;
  }

  line -= this.origin;
  column -= this.origin;

  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {
    var lineIndex = this.lineToIndex[line];
    var nextIndex = (
      line === this.lineToIndex.length - 1
        ? this.str.length
        : this.lineToIndex[line + 1]
    );

    if (column < nextIndex - lineIndex) {
      return lineIndex + column;
    }
  }
  return -1;
}

/**
 * Build an array of indexes of each line from a string.
 *
 * @private
 * @param   str {string}  An input string.
 * @return  {number[]}    Built array of indexes. The key is line number.
 */
function buildLineToIndex(str) {
  var lines = str.split("\n"),
      lineToIndex = new Array(lines.length),
      index = 0;

  for (var i = 0, l = lines.length; i < l; i++) {
    lineToIndex[i] = index;
    index += lines[i].length + /* "\n".length */ 1;
  }
  return lineToIndex;
}

/**
 * Find a lower-bound index of a value in a sorted array of ranges.
 *
 * Assume `arr = [0, 5, 10, 15, 20]` and
 * this returns `1` for `value = 7` (5 <= value < 10),
 * and returns `3` for `value = 18` (15 <= value < 20).
 *
 * @private
 * @param  arr   {number[]} An array of values representing ranges.
 * @param  value {number}   A value to be searched.
 * @return {number} Found index. If not found `-1`.
 */
function findLowerIndexInRangeArray(value, arr) {
  if (value >= arr[arr.length - 1]) {
    return arr.length - 1;
  }

  var min = 0, max = arr.length - 2, mid;
  while (min < max) {
    mid = min + ((max - min) >> 1);

    if (value < arr[mid]) {
      max = mid - 1;
    } else if (value >= arr[mid + 1]) {
      min = mid + 1;
    } else { // value >= arr[mid] && value < arr[mid + 1]
      min = mid;
      break;
    }
  }
  return min;
}


/***/ }),

/***/ "./node_modules/ohm-js/dist/ohm.esm.js":
/*!*********************************************!*\
  !*** ./node_modules/ohm-js/dist/ohm.esm.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ohm),
/* harmony export */   "extras": () => (/* binding */ extras)
/* harmony export */ });
/// <reference types="../index.d.ts" />
var main$1 = {exports: {}};

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

/*
  `Failure`s represent expressions that weren't matched while parsing. They are used to generate
  error messages automatically. The interface of `Failure`s includes the collowing methods:

  - getText() : String
  - getType() : String  (one of {"description", "string", "code"})
  - isDescription() : bool
  - isStringTerminal() : bool
  - isCode() : bool
  - isFluffy() : bool
  - makeFluffy() : void
  - subsumes(Failure) : bool
*/

function isValidType(type) {
  return type === 'description' || type === 'string' || type === 'code';
}

function Failure$2(pexpr, text, type) {
  if (!isValidType(type)) {
    throw new Error('invalid Failure type: ' + type);
  }
  this.pexpr = pexpr;
  this.text = text;
  this.type = type;
  this.fluffy = false;
}

Failure$2.prototype.getPExpr = function() {
  return this.pexpr;
};

Failure$2.prototype.getText = function() {
  return this.text;
};

Failure$2.prototype.getType = function() {
  return this.type;
};

Failure$2.prototype.isDescription = function() {
  return this.type === 'description';
};

Failure$2.prototype.isStringTerminal = function() {
  return this.type === 'string';
};

Failure$2.prototype.isCode = function() {
  return this.type === 'code';
};

Failure$2.prototype.isFluffy = function() {
  return this.fluffy;
};

Failure$2.prototype.makeFluffy = function() {
  this.fluffy = true;
};

Failure$2.prototype.clearFluffy = function() {
  this.fluffy = false;
};

Failure$2.prototype.subsumes = function(that) {
  return (
    this.getText() === that.getText() &&
    this.type === that.type &&
    (!this.isFluffy() || (this.isFluffy() && that.isFluffy()))
  );
};

Failure$2.prototype.toString = function() {
  return this.type === 'string' ? JSON.stringify(this.getText()) : this.getText();
};

Failure$2.prototype.clone = function() {
  const failure = new Failure$2(this.pexpr, this.text, this.type);
  if (this.isFluffy()) {
    failure.makeFluffy();
  }
  return failure;
};

Failure$2.prototype.toKey = function() {
  return this.toString() + '#' + this.type;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Failure_1 = Failure$2;

var common$l = {};

(function (exports) {

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};
}(common$l));

const common$k = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

class Node {
  constructor(matchLength) {
    this.matchLength = matchLength;
  }

  get ctorName() {
    throw new Error('subclass responsibility');
  }

  numChildren() {
    return this.children ? this.children.length : 0;
  }

  childAt(idx) {
    if (this.children) {
      return this.children[idx];
    }
  }

  indexOfChild(arg) {
    return this.children.indexOf(arg);
  }

  hasChildren() {
    return this.numChildren() > 0;
  }

  hasNoChildren() {
    return !this.hasChildren();
  }

  onlyChild() {
    if (this.numChildren() !== 1) {
      throw new Error(
          'cannot get only child of a node of type ' +
          this.ctorName +
          ' (it has ' +
          this.numChildren() +
          ' children)'
      );
    } else {
      return this.firstChild();
    }
  }

  firstChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get first child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(0);
    }
  }

  lastChild() {
    if (this.hasNoChildren()) {
      throw new Error(
          'cannot get last child of a ' + this.ctorName + ' node, which has no children'
      );
    } else {
      return this.childAt(this.numChildren() - 1);
    }
  }

  childBefore(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childBefore() called w/ an argument that is not a child');
    } else if (childIdx === 0) {
      throw new Error('cannot get child before first child');
    } else {
      return this.childAt(childIdx - 1);
    }
  }

  childAfter(child) {
    const childIdx = this.indexOfChild(child);
    if (childIdx < 0) {
      throw new Error('Node.childAfter() called w/ an argument that is not a child');
    } else if (childIdx === this.numChildren() - 1) {
      throw new Error('cannot get child after last child');
    } else {
      return this.childAt(childIdx + 1);
    }
  }

  isTerminal() {
    return false;
  }

  isNonterminal() {
    return false;
  }

  isIteration() {
    return false;
  }

  isOptional() {
    return false;
  }
}

// Terminals

class TerminalNode$2 extends Node {
  get ctorName() {
    return '_terminal';
  }

  isTerminal() {
    return true;
  }

  get primitiveValue() {
    throw new Error('The `primitiveValue` property was removed in Ohm v17.');
  }
}

// Nonterminals

class NonterminalNode$1 extends Node {
  constructor(ruleName, children, childOffsets, matchLength) {
    super(matchLength);
    this.ruleName = ruleName;
    this.children = children;
    this.childOffsets = childOffsets;
  }

  get ctorName() {
    return this.ruleName;
  }

  isNonterminal() {
    return true;
  }

  isLexical() {
    return common$k.isLexical(this.ctorName);
  }

  isSyntactic() {
    return common$k.isSyntactic(this.ctorName);
  }
}

// Iterations

class IterationNode$2 extends Node {
  constructor(children, childOffsets, matchLength, isOptional) {
    super(matchLength);
    this.children = children;
    this.childOffsets = childOffsets;
    this.optional = isOptional;
  }

  get ctorName() {
    return '_iter';
  }

  isIteration() {
    return true;
  }

  isOptional() {
    return this.optional;
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var nodes$1 = {
  Node,
  TerminalNode: TerminalNode$2,
  NonterminalNode: NonterminalNode$1,
  IterationNode: IterationNode$2,
};

var pexprsMain = {};

// Based on https://github.com/mathiasbynens/unicode-9.0.0.
// These are just categories that are used in ES5/ES2015.
// The full list of Unicode categories is here: http://www.fileformat.info/info/unicode/category/index.htm.
var UnicodeCategories$1 = {
  // Letters
  Lu: /[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]/,
  Ll: /[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]/,
  Lt: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
  Lm: /[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]/,
  Lo: /[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,

  // Numbers
  Nl: /[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]|\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]/,
  Nd: /[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]|\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|[\uD805\uD807][\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]/,

  // Marks
  Mn: /[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]/,
  Mc: /[\u0903-\u0903]|[\u093E-\u0940]|[\u0949-\u094C]|[\u0982-\u0983]|[\u09BE-\u09C0]|[\u09C7-\u09C8]|[\u09CB-\u09CC]|[\u09D7-\u09D7]|[\u0A3E-\u0A40]|[\u0A83-\u0A83]|[\u0ABE-\u0AC0]|[\u0AC9-\u0AC9]|[\u0ACB-\u0ACC]|[\u0B02-\u0B03]|[\u0B3E-\u0B3E]|[\u0B40-\u0B40]|[\u0B47-\u0B48]|[\u0B4B-\u0B4C]|[\u0B57-\u0B57]|[\u0B83-\u0B83]|[\u0BBE-\u0BBF]|[\u0BC1-\u0BC2]|[\u0BC6-\u0BC8]|[\u0BCA-\u0BCC]|[\u0BD7-\u0BD7]|[\u0C01-\u0C03]|[\u0C41-\u0C44]|[\u0C82-\u0C83]|[\u0CBE-\u0CBE]|[\u0CC0-\u0CC4]|[\u0CC7-\u0CC8]|[\u0CCA-\u0CCB]|[\u0CD5-\u0CD6]|[\u0D02-\u0D03]|[\u0D3E-\u0D40]|[\u0D46-\u0D48]|[\u0D4A-\u0D4C]|[\u0D57-\u0D57]|[\u0F3E-\u0F3F]|[\u0F7F-\u0F7F]/,

  // Punctuation, Connector
  Pc: /[_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F]/,

  // Separator, Space
  Zs: /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,

  // These two are not real Unicode categories, but our useful for Ohm.
  // L is a combination of all the letter categories.
  // Ltmo is a combination of Lt, Lm, and Lo.
  L: /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
  Ltmo: /[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]|[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0]|[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const UnicodeCategories = UnicodeCategories$1;
const common$j = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// General stuff

class PExpr$1 {
  constructor() {
    if (this.constructor === PExpr$1) {
      throw new Error("PExpr cannot be instantiated -- it's abstract");
    }
  }

  // Set the `source` property to the interval containing the source for this expression.
  withSource(interval) {
    if (interval) {
      this.source = interval.trimmed();
    }
    return this;
  }
}

// Any

const any = Object.create(PExpr$1.prototype);

// End

const end = Object.create(PExpr$1.prototype);

// Terminals

class Terminal$1 extends PExpr$1 {
  constructor(obj) {
    super();
    this.obj = obj;
  }
}

// Ranges

class Range extends PExpr$1 {
  constructor(from, to) {
    super();
    this.from = from;
    this.to = to;
    // If either `from` or `to` is made up of multiple code units, then
    // the range should consume a full code point, not a single code unit.
    this.matchCodePoint = from.length > 1 || to.length > 1;
  }
}

// Parameters

class Param extends PExpr$1 {
  constructor(index) {
    super();
    this.index = index;
  }
}

// Alternation

class Alt extends PExpr$1 {
  constructor(terms) {
    super();
    this.terms = terms;
  }
}

// Extend is an implementation detail of rule extension

class Extend extends Alt {
  constructor(superGrammar, name, body) {
    const origBody = superGrammar.rules[name].body;
    super([body, origBody]);

    this.superGrammar = superGrammar;
    this.name = name;
    this.body = body;
  }
}

// Splice is an implementation detail of rule overriding with the `...` operator.
class Splice extends Alt {
  constructor(superGrammar, ruleName, beforeTerms, afterTerms) {
    const origBody = superGrammar.rules[ruleName].body;
    super([...beforeTerms, origBody, ...afterTerms]);

    this.superGrammar = superGrammar;
    this.ruleName = ruleName;
    this.expansionPos = beforeTerms.length;
  }
}

// Sequences

class Seq extends PExpr$1 {
  constructor(factors) {
    super();
    this.factors = factors;
  }
}

// Iterators and optionals

class Iter extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Star extends Iter {}
class Plus extends Iter {}
class Opt extends Iter {}

Star.prototype.operator = '*';
Plus.prototype.operator = '+';
Opt.prototype.operator = '?';

Star.prototype.minNumMatches = 0;
Plus.prototype.minNumMatches = 1;
Opt.prototype.minNumMatches = 0;

Star.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Plus.prototype.maxNumMatches = Number.POSITIVE_INFINITY;
Opt.prototype.maxNumMatches = 1;

// Predicates

class Not extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

class Lookahead extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// "Lexification"

class Lex extends PExpr$1 {
  constructor(expr) {
    super();
    this.expr = expr;
  }
}

// Rule application

class Apply extends PExpr$1 {
  constructor(ruleName, args = []) {
    super();
    this.ruleName = ruleName;
    this.args = args;
  }

  isSyntactic() {
    return common$j.isSyntactic(this.ruleName);
  }

  // This method just caches the result of `this.toString()` in a non-enumerable property.
  toMemoKey() {
    if (!this._memoKey) {
      Object.defineProperty(this, '_memoKey', {value: this.toString()});
    }
    return this._memoKey;
  }
}

// Unicode character

class UnicodeChar extends PExpr$1 {
  constructor(category) {
    super();
    this.category = category;
    this.pattern = UnicodeCategories[category];
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

pexprsMain.PExpr = PExpr$1;
pexprsMain.any = any;
pexprsMain.end = end;
pexprsMain.Terminal = Terminal$1;
pexprsMain.Range = Range;
pexprsMain.Param = Param;
pexprsMain.Alt = Alt;
pexprsMain.Extend = Extend;
pexprsMain.Splice = Splice;
pexprsMain.Seq = Seq;
pexprsMain.Iter = Iter;
pexprsMain.Star = Star;
pexprsMain.Plus = Plus;
pexprsMain.Opt = Opt;
pexprsMain.Not = Not;
pexprsMain.Lookahead = Lookahead;
pexprsMain.Lex = Lex;
pexprsMain.Apply = Apply;
pexprsMain.UnicodeChar = UnicodeChar;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$i = common$l;
const pexprs$l = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Return true if we should skip spaces preceding this expression in a syntactic context.
*/
pexprs$l.PExpr.prototype.allowsSkippingPrecedingSpace = common$i.abstract(
    'allowsSkippingPrecedingSpace'
);

/*
  Generally, these are all first-order expressions and (with the exception of Apply)
  directly read from the input stream.
*/
pexprs$l.any.allowsSkippingPrecedingSpace =
  pexprs$l.end.allowsSkippingPrecedingSpace =
  pexprs$l.Apply.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Terminal.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Range.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.UnicodeChar.prototype.allowsSkippingPrecedingSpace =
    function() {
      return true;
    };

/*
  Higher-order expressions that don't directly consume input.
*/
pexprs$l.Alt.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Iter.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lex.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Lookahead.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Not.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Param.prototype.allowsSkippingPrecedingSpace =
  pexprs$l.Seq.prototype.allowsSkippingPrecedingSpace =
    function() {
      return false;
    };

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Namespace$2() {}
Namespace$2.prototype = Object.create(null);

Namespace$2.asNamespace = function(objOrNamespace) {
  if (objOrNamespace instanceof Namespace$2) {
    return objOrNamespace;
  }
  return Namespace$2.createNamespace(objOrNamespace);
};

// Create a new namespace. If `optProps` is specified, all of its properties
// will be copied to the new namespace.
Namespace$2.createNamespace = function(optProps) {
  return Namespace$2.extend(Namespace$2.prototype, optProps);
};

// Create a new namespace which extends another namespace. If `optProps` is
// specified, all of its properties will be copied to the new namespace.
Namespace$2.extend = function(namespace, optProps) {
  if (namespace !== Namespace$2.prototype && !(namespace instanceof Namespace$2)) {
    throw new TypeError('not a Namespace object: ' + namespace);
  }
  const ns = Object.create(namespace, {
    constructor: {
      value: Namespace$2,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  });
  return Object.assign(ns, optProps);
};

// TODO: Should this be a regular method?
Namespace$2.toString = function(ns) {
  return Object.prototype.toString.call(ns);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Namespace_1 = Namespace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$3} = common$l;
const Namespace$1 = Namespace_1;
const pexprs$k = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function createError(message, optInterval) {
  let e;
  if (optInterval) {
    e = new Error(optInterval.getLineAndColumnMessage() + message);
    e.shortMessage = message;
    e.interval = optInterval;
  } else {
    e = new Error(message);
  }
  return e;
}

// ----------------- errors about intervals -----------------

function intervalSourcesDontMatch() {
  return createError("Interval sources don't match");
}

// ----------------- errors about grammars -----------------

// Grammar syntax error

function grammarSyntaxError(matchFailure) {
  const e = new Error();
  Object.defineProperty(e, 'message', {
    enumerable: true,
    get() {
      return matchFailure.message;
    },
  });
  Object.defineProperty(e, 'shortMessage', {
    enumerable: true,
    get() {
      return 'Expected ' + matchFailure.getExpectedText();
    },
  });
  e.interval = matchFailure.getInterval();
  return e;
}

// Undeclared grammar

function undeclaredGrammar(grammarName, namespace, interval) {
  const message = namespace ?
    'Grammar ' +
      grammarName +
      ' is not declared in namespace ' +
      Namespace$1.toString(namespace) :
    'Undeclared grammar ' + grammarName;
  return createError(message, interval);
}

// Duplicate grammar declaration

function duplicateGrammarDeclaration(grammar, namespace) {
  return createError('Grammar ' + grammar.name + ' is already declared in this namespace');
}

// ----------------- rules -----------------

// Undeclared rule

function undeclaredRule(ruleName, grammarName, optInterval) {
  return createError(
      'Rule ' + ruleName + ' is not declared in grammar ' + grammarName,
      optInterval
  );
}

// Cannot override undeclared rule

function cannotOverrideUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot override rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Cannot extend undeclared rule

function cannotExtendUndeclaredRule(ruleName, grammarName, optSource) {
  return createError(
      'Cannot extend rule ' + ruleName + ' because it is not declared in ' + grammarName,
      optSource
  );
}

// Duplicate rule declaration

function duplicateRuleDeclaration(ruleName, grammarName, declGrammarName, optSource) {
  let message =
    "Duplicate declaration for rule '" + ruleName + "' in grammar '" + grammarName + "'";
  if (grammarName !== declGrammarName) {
    message += " (originally declared in '" + declGrammarName + "')";
  }
  return createError(message, optSource);
}

// Wrong number of parameters

function wrongNumberOfParameters(ruleName, expected, actual, source) {
  return createError(
      'Wrong number of parameters for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      source
  );
}

// Wrong number of arguments

function wrongNumberOfArguments(ruleName, expected, actual, expr) {
  return createError(
      'Wrong number of arguments for rule ' +
      ruleName +
      ' (expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr
  );
}

// Duplicate parameter names

function duplicateParameterNames(ruleName, duplicates, source) {
  return createError(
      'Duplicate parameter names in rule ' + ruleName + ': ' + duplicates.join(', '),
      source
  );
}

// Invalid parameter expression

function invalidParameter(ruleName, expr) {
  return createError(
      'Invalid parameter to rule ' +
      ruleName +
      ': ' +
      expr +
      ' has arity ' +
      expr.getArity() +
      ', but parameter expressions must have arity 1',
      expr.source
  );
}

// Application of syntactic rule from lexical rule

const syntacticVsLexicalNote =
  'NOTE: A _syntactic rule_ is a rule whose name begins with a capital letter. ' +
  'See https://ohmjs.org/d/svl for more details.';

function applicationOfSyntacticRuleFromLexicalContext(ruleName, applyExpr) {
  return createError(
      'Cannot apply syntactic rule ' + ruleName + ' from here (inside a lexical context)',
      applyExpr.source
  );
}

// Lexical rule application used with applySyntactic

function applySyntacticWithLexicalRuleApplication(applyExpr) {
  const {ruleName} = applyExpr;
  return createError(
      `applySyntactic is for syntactic rules, but '${ruleName}' is a lexical rule. ` +
      syntacticVsLexicalNote,
      applyExpr.source
  );
}

// Application of applySyntactic in a syntactic context

function unnecessaryExperimentalApplySyntactic(applyExpr) {
  return createError(
      'applySyntactic is not required here (in a syntactic context)',
      applyExpr.source
  );
}

// Incorrect argument type

function incorrectArgumentType(expectedType, expr) {
  return createError('Incorrect argument type: expected ' + expectedType, expr.source);
}

// Multiple instances of the super-splice operator (`...`) in the rule body.

function multipleSuperSplices(expr) {
  return createError("'...' can appear at most once in a rule body", expr.source);
}

// Unicode code point escapes

function invalidCodePoint(applyWrapper) {
  const node = applyWrapper._node;
  assert$3(node && node.isNonterminal() && node.ctorName === 'escapeChar_unicodeCodePoint');

  // Get an interval that covers all of the hex digits.
  const digitIntervals = applyWrapper.children.slice(1, -1).map(d => d.source);
  const fullInterval = digitIntervals[0].coverageWith(...digitIntervals.slice(1));
  return createError(
      `U+${fullInterval.contents} is not a valid Unicode code point`,
      fullInterval
  );
}

// ----------------- Kleene operators -----------------

function kleeneExprHasNullableOperand(kleeneExpr, applicationStack) {
  const actuals =
    applicationStack.length > 0 ? applicationStack[applicationStack.length - 1].args : [];
  const expr = kleeneExpr.expr.substituteParams(actuals);
  let message =
    'Nullable expression ' +
    expr +
    " is not allowed inside '" +
    kleeneExpr.operator +
    "' (possible infinite loop)";
  if (applicationStack.length > 0) {
    const stackTrace = applicationStack
        .map(app => new pexprs$k.Apply(app.ruleName, app.args))
        .join('\n');
    message += '\nApplication stack (most recent application last):\n' + stackTrace;
  }
  return createError(message, kleeneExpr.expr.source);
}

// ----------------- arity -----------------

function inconsistentArity(ruleName, expected, actual, expr) {
  return createError(
      'Rule ' +
      ruleName +
      ' involves an alternation which has inconsistent arity ' +
      '(expected ' +
      expected +
      ', got ' +
      actual +
      ')',
      expr.source
  );
}

// ----------------- properties -----------------

function duplicatePropertyNames(duplicates) {
  return createError('Object pattern has duplicate property names: ' + duplicates.join(', '));
}

// ----------------- constructors -----------------

function invalidConstructorCall(grammar, ctorName, children) {
  return createError(
      'Attempt to invoke constructor ' + ctorName + ' with invalid or unexpected arguments'
  );
}

// ----------------- convenience -----------------

function multipleErrors(errors) {
  const messages = errors.map(e => e.message);
  return createError(['Errors:'].concat(messages).join('\n- '), errors[0].interval);
}

// ----------------- semantic -----------------

function missingSemanticAction(ctorName, name, type, stack) {
  let stackTrace = stack
      .slice(0, -1)
      .map(info => {
        const ans = '  ' + info[0].name + ' > ' + info[1];
        return info.length === 3 ? ans + " for '" + info[2] + "'" : ans;
      })
      .join('\n');
  stackTrace += '\n  ' + name + ' > ' + ctorName;

  let moreInfo = '';
  if (ctorName === '_iter') {
    moreInfo = [
      '\nNOTE: as of Ohm v16, there is no default action for iteration nodes — see ',
      '  https://ohmjs.org/d/dsa for details.',
    ].join('\n');
  }

  const message = [
    `Missing semantic action for '${ctorName}' in ${type} '${name}'.${moreInfo}`,
    'Action stack (most recent call last):',
    stackTrace,
  ].join('\n');

  const e = createError(message);
  e.name = 'missingSemanticAction';
  return e;
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var errors$9 = {
  applicationOfSyntacticRuleFromLexicalContext,
  applySyntacticWithLexicalRuleApplication,
  cannotExtendUndeclaredRule,
  cannotOverrideUndeclaredRule,
  duplicateGrammarDeclaration,
  duplicateParameterNames,
  duplicatePropertyNames,
  duplicateRuleDeclaration,
  inconsistentArity,
  incorrectArgumentType,
  intervalSourcesDontMatch,
  invalidCodePoint,
  invalidConstructorCall,
  invalidParameter,
  grammarSyntaxError,
  kleeneExprHasNullableOperand,
  missingSemanticAction,
  multipleSuperSplices,
  undeclaredGrammar,
  undeclaredRule,
  unnecessaryExperimentalApplySyntactic,
  wrongNumberOfArguments,
  wrongNumberOfParameters,

  throwErrors(errors) {
    if (errors.length === 1) {
      throw errors[0];
    }
    if (errors.length > 1) {
      throw multipleErrors(errors);
    }
  },
};

var util$7 = {};

(function (exports) {

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Given an array of numbers `arr`, return an array of the numbers as strings,
// right-justified and padded to the same length.
function padNumbersToEqualLength(arr) {
  let maxLen = 0;
  const strings = arr.map(n => {
    const str = n.toString();
    maxLen = Math.max(maxLen, str.length);
    return str;
  });
  return strings.map(s => common.padLeft(s, maxLen));
}

// Produce a new string that would be the result of copying the contents
// of the string `src` onto `dest` at offset `offest`.
function strcpy(dest, src, offset) {
  const origDestLen = dest.length;
  const start = dest.slice(0, offset);
  const end = dest.slice(offset + src.length);
  return (start + src + end).substr(0, origDestLen);
}

// Casts the underlying lineAndCol object to a formatted message string,
// highlighting `ranges`.
function lineAndColumnToMessage(...ranges) {
  const lineAndCol = this;
  const {offset} = lineAndCol;
  const {repeatStr} = common;

  const sb = new common.StringBuffer();
  sb.append('Line ' + lineAndCol.lineNum + ', col ' + lineAndCol.colNum + ':\n');

  // An array of the previous, current, and next line numbers as strings of equal length.
  const lineNumbers = padNumbersToEqualLength([
    lineAndCol.prevLine == null ? 0 : lineAndCol.lineNum - 1,
    lineAndCol.lineNum,
    lineAndCol.nextLine == null ? 0 : lineAndCol.lineNum + 1,
  ]);

  // Helper for appending formatting input lines to the buffer.
  const appendLine = (num, content, prefix) => {
    sb.append(prefix + lineNumbers[num] + ' | ' + content + '\n');
  };

  // Include the previous line for context if possible.
  if (lineAndCol.prevLine != null) {
    appendLine(0, lineAndCol.prevLine, '  ');
  }
  // Line that the error occurred on.
  appendLine(1, lineAndCol.line, '> ');

  // Build up the line that points to the offset and possible indicates one or more ranges.
  // Start with a blank line, and indicate each range by overlaying a string of `~` chars.
  const lineLen = lineAndCol.line.length;
  let indicationLine = repeatStr(' ', lineLen + 1);
  for (let i = 0; i < ranges.length; ++i) {
    let startIdx = ranges[i][0];
    let endIdx = ranges[i][1];
    common.assert(startIdx >= 0 && startIdx <= endIdx, 'range start must be >= 0 and <= end');

    const lineStartOffset = offset - lineAndCol.colNum + 1;
    startIdx = Math.max(0, startIdx - lineStartOffset);
    endIdx = Math.min(endIdx - lineStartOffset, lineLen);

    indicationLine = strcpy(indicationLine, repeatStr('~', endIdx - startIdx), startIdx);
  }
  const gutterWidth = 2 + lineNumbers[1].length + 3;
  sb.append(repeatStr(' ', gutterWidth));
  indicationLine = strcpy(indicationLine, '^', lineAndCol.colNum - 1);
  sb.append(indicationLine.replace(/ +$/, '') + '\n');

  // Include the next line for context if possible.
  if (lineAndCol.nextLine != null) {
    appendLine(2, lineAndCol.nextLine, '  ');
  }
  return sb.contents();
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

let builtInRulesCallbacks = [];

// Since Grammar.BuiltInRules is bootstrapped, most of Ohm can't directly depend it.
// This function allows modules that do depend on the built-in rules to register a callback
// that will be called later in the initialization process.
exports.awaitBuiltInRules = cb => {
  builtInRulesCallbacks.push(cb);
};

exports.announceBuiltInRules = grammar => {
  builtInRulesCallbacks.forEach(cb => {
    cb(grammar);
  });
  builtInRulesCallbacks = null;
};

// Return an object with the line and column information for the given
// offset in `str`.
exports.getLineAndColumn = (str, offset) => {
  let lineNum = 1;
  let colNum = 1;

  let currOffset = 0;
  let lineStartOffset = 0;

  let nextLine = null;
  let prevLine = null;
  let prevLineStartOffset = -1;

  while (currOffset < offset) {
    const c = str.charAt(currOffset++);
    if (c === '\n') {
      lineNum++;
      colNum = 1;
      prevLineStartOffset = lineStartOffset;
      lineStartOffset = currOffset;
    } else if (c !== '\r') {
      colNum++;
    }
  }

  // Find the end of the target line.
  let lineEndOffset = str.indexOf('\n', lineStartOffset);
  if (lineEndOffset === -1) {
    lineEndOffset = str.length;
  } else {
    // Get the next line.
    const nextLineEndOffset = str.indexOf('\n', lineEndOffset + 1);
    nextLine =
      nextLineEndOffset === -1 ?
        str.slice(lineEndOffset) :
        str.slice(lineEndOffset, nextLineEndOffset);
    // Strip leading and trailing EOL char(s).
    nextLine = nextLine.replace(/^\r?\n/, '').replace(/\r$/, '');
  }

  // Get the previous line.
  if (prevLineStartOffset >= 0) {
    // Strip trailing EOL char(s).
    prevLine = str.slice(prevLineStartOffset, lineStartOffset).replace(/\r?\n$/, '');
  }

  // Get the target line, stripping a trailing carriage return if necessary.
  const line = str.slice(lineStartOffset, lineEndOffset).replace(/\r$/, '');

  return {
    offset,
    lineNum,
    colNum,
    line,
    prevLine,
    nextLine,
    toString: lineAndColumnToMessage,
  };
};

// Return a nicely-formatted string describing the line and column for the
// given offset in `str` highlighting `ranges`.
exports.getLineAndColumnMessage = function(str, offset, ...ranges) {
  return exports.getLineAndColumn(str, offset).toString(...ranges);
};

exports.uniqueId = (() => {
  let idCounter = 0;
  return prefix => '' + prefix + idCounter++;
})();
}(util$7));

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {abstract, isSyntactic} = common$l;
const errors$8 = errors$9;
const pexprs$j = pexprsMain;
const util$6 = util$7;

let BuiltInRules;

util$6.awaitBuiltInRules(g => {
  BuiltInRules = g;
});

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

let lexifyCount;

pexprs$j.PExpr.prototype.assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount = 0;
  this._assertAllApplicationsAreValid(ruleName, grammar);
};

pexprs$j.PExpr.prototype._assertAllApplicationsAreValid = abstract(
    '_assertAllApplicationsAreValid'
);

pexprs$j.any._assertAllApplicationsAreValid =
  pexprs$j.end._assertAllApplicationsAreValid =
  pexprs$j.Terminal.prototype._assertAllApplicationsAreValid =
  pexprs$j.Range.prototype._assertAllApplicationsAreValid =
  pexprs$j.Param.prototype._assertAllApplicationsAreValid =
  pexprs$j.UnicodeChar.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      // no-op
    };

pexprs$j.Lex.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  lexifyCount++;
  this.expr._assertAllApplicationsAreValid(ruleName, grammar);
  lexifyCount--;
};

pexprs$j.Alt.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Seq.prototype._assertAllApplicationsAreValid = function(ruleName, grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx]._assertAllApplicationsAreValid(ruleName, grammar);
  }
};

pexprs$j.Iter.prototype._assertAllApplicationsAreValid =
  pexprs$j.Not.prototype._assertAllApplicationsAreValid =
  pexprs$j.Lookahead.prototype._assertAllApplicationsAreValid =
    function(ruleName, grammar) {
      this.expr._assertAllApplicationsAreValid(ruleName, grammar);
    };

pexprs$j.Apply.prototype._assertAllApplicationsAreValid = function(
    ruleName,
    grammar,
    skipSyntacticCheck = false
) {
  const ruleInfo = grammar.rules[this.ruleName];
  const isContextSyntactic = isSyntactic(ruleName) && lexifyCount === 0;

  // Make sure that the rule exists...
  if (!ruleInfo) {
    throw errors$8.undeclaredRule(this.ruleName, grammar.name, this.source);
  }

  // ...and that this application is allowed
  if (!skipSyntacticCheck && isSyntactic(this.ruleName) && !isContextSyntactic) {
    throw errors$8.applicationOfSyntacticRuleFromLexicalContext(this.ruleName, this);
  }

  // ...and that this application has the correct number of arguments.
  const actual = this.args.length;
  const expected = ruleInfo.formals.length;
  if (actual !== expected) {
    throw errors$8.wrongNumberOfArguments(this.ruleName, expected, actual, this.source);
  }

  const isBuiltInApplySyntactic =
    BuiltInRules && ruleInfo === BuiltInRules.rules.applySyntactic;
  const isBuiltInCaseInsensitive =
    BuiltInRules && ruleInfo === BuiltInRules.rules.caseInsensitive;

  // If it's an application of 'caseInsensitive', ensure that the argument is a Terminal.
  if (isBuiltInCaseInsensitive) {
    if (!(this.args[0] instanceof pexprs$j.Terminal)) {
      throw errors$8.incorrectArgumentType('a Terminal (e.g. "abc")', this.args[0]);
    }
  }

  if (isBuiltInApplySyntactic) {
    const arg = this.args[0];
    if (!(arg instanceof pexprs$j.Apply)) {
      throw errors$8.incorrectArgumentType('a syntactic rule application', arg);
    }
    if (!isSyntactic(arg.ruleName)) {
      throw errors$8.applySyntacticWithLexicalRuleApplication(arg);
    }
    if (isContextSyntactic) {
      throw errors$8.unnecessaryExperimentalApplySyntactic(this);
    }
  }

  // ...and that all of the argument expressions only have valid applications and have arity 1.
  // If `this` is an application of the built-in applySyntactic rule, then its arg is
  // allowed (and expected) to be a syntactic rule, even if we're in a lexical context.
  this.args.forEach(arg => {
    arg._assertAllApplicationsAreValid(ruleName, grammar, isBuiltInApplySyntactic);
    if (arg.getArity() !== 1) {
      throw errors$8.invalidParameter(this.ruleName, arg);
    }
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$h = common$l;
const errors$7 = errors$9;
const pexprs$i = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$i.PExpr.prototype.assertChoicesHaveUniformArity = common$h.abstract(
    'assertChoicesHaveUniformArity'
);

pexprs$i.any.assertChoicesHaveUniformArity =
  pexprs$i.end.assertChoicesHaveUniformArity =
  pexprs$i.Terminal.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Range.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Param.prototype.assertChoicesHaveUniformArity =
  pexprs$i.Lex.prototype.assertChoicesHaveUniformArity =
  pexprs$i.UnicodeChar.prototype.assertChoicesHaveUniformArity =
    function(ruleName) {
      // no-op
    };

pexprs$i.Alt.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  if (this.terms.length === 0) {
    return;
  }
  const arity = this.terms[0].getArity();
  for (let idx = 0; idx < this.terms.length; idx++) {
    const term = this.terms[idx];
    term.assertChoicesHaveUniformArity();
    const otherArity = term.getArity();
    if (arity !== otherArity) {
      throw errors$7.inconsistentArity(ruleName, arity, otherArity, term);
    }
  }
};

pexprs$i.Extend.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // Extend is a special case of Alt that's guaranteed to have exactly two
  // cases: [extensions, origBody].
  const actualArity = this.terms[0].getArity();
  const expectedArity = this.terms[1].getArity();
  if (actualArity !== expectedArity) {
    throw errors$7.inconsistentArity(ruleName, expectedArity, actualArity, this.terms[0]);
  }
};

pexprs$i.Seq.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertChoicesHaveUniformArity(ruleName);
  }
};

pexprs$i.Iter.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Not.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // no-op (not required b/c the nested expr doesn't show up in the CST)
};

pexprs$i.Lookahead.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  this.expr.assertChoicesHaveUniformArity(ruleName);
};

pexprs$i.Apply.prototype.assertChoicesHaveUniformArity = function(ruleName) {
  // The arities of the parameter expressions is required to be 1 by
  // `assertAllApplicationsAreValid()`.
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$g = common$l;
const errors$6 = errors$9;
const pexprs$h = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$h.PExpr.prototype.assertIteratedExprsAreNotNullable = common$g.abstract(
    'assertIteratedExprsAreNotNullable'
);

pexprs$h.any.assertIteratedExprsAreNotNullable =
  pexprs$h.end.assertIteratedExprsAreNotNullable =
  pexprs$h.Terminal.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Range.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Param.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.UnicodeChar.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      // no-op
    };

pexprs$h.Alt.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    this.terms[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Seq.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    this.factors[idx].assertIteratedExprsAreNotNullable(grammar);
  }
};

pexprs$h.Iter.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  // Note: this is the implementation of this method for `Star` and `Plus` expressions.
  // It is overridden for `Opt` below.
  this.expr.assertIteratedExprsAreNotNullable(grammar);
  if (this.expr.isNullable(grammar)) {
    throw errors$6.kleeneExprHasNullableOperand(this, []);
  }
};

pexprs$h.Opt.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Not.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lookahead.prototype.assertIteratedExprsAreNotNullable =
  pexprs$h.Lex.prototype.assertIteratedExprsAreNotNullable =
    function(grammar) {
      this.expr.assertIteratedExprsAreNotNullable(grammar);
    };

pexprs$h.Apply.prototype.assertIteratedExprsAreNotNullable = function(grammar) {
  this.args.forEach(arg => {
    arg.assertIteratedExprsAreNotNullable(grammar);
  });
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert: assert$2} = common$l;
const errors$5 = errors$9;
const util$5 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Interval$3(sourceString, startIdx, endIdx) {
  this.sourceString = sourceString;
  this.startIdx = startIdx;
  this.endIdx = endIdx;
}

Interval$3.coverage = function(firstInterval, ...intervals) {
  let {startIdx, endIdx} = firstInterval;
  for (const interval of intervals) {
    if (interval.sourceString !== firstInterval.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else {
      startIdx = Math.min(startIdx, interval.startIdx);
      endIdx = Math.max(endIdx, interval.endIdx);
    }
  }
  return new Interval$3(firstInterval.sourceString, startIdx, endIdx);
};

Interval$3.prototype = {
  coverageWith(...intervals) {
    return Interval$3.coverage(...intervals, this);
  },

  collapsedLeft() {
    return new Interval$3(this.sourceString, this.startIdx, this.startIdx);
  },

  collapsedRight() {
    return new Interval$3(this.sourceString, this.endIdx, this.endIdx);
  },

  getLineAndColumn() {
    return util$5.getLineAndColumn(this.sourceString, this.startIdx);
  },

  getLineAndColumnMessage() {
    const range = [this.startIdx, this.endIdx];
    return util$5.getLineAndColumnMessage(this.sourceString, this.startIdx, range);
  },

  // Returns an array of 0, 1, or 2 intervals that represents the result of the
  // interval difference operation.
  minus(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    } else if (this.startIdx === that.startIdx && this.endIdx === that.endIdx) {
      // `this` and `that` are the same interval!
      return [];
    } else if (this.startIdx < that.startIdx && that.endIdx < this.endIdx) {
      // `that` splits `this` into two intervals
      return [
        new Interval$3(this.sourceString, this.startIdx, that.startIdx),
        new Interval$3(this.sourceString, that.endIdx, this.endIdx),
      ];
    } else if (this.startIdx < that.endIdx && that.endIdx < this.endIdx) {
      // `that` contains a prefix of `this`
      return [new Interval$3(this.sourceString, that.endIdx, this.endIdx)];
    } else if (this.startIdx < that.startIdx && that.startIdx < this.endIdx) {
      // `that` contains a suffix of `this`
      return [new Interval$3(this.sourceString, this.startIdx, that.startIdx)];
    } else {
      // `that` and `this` do not overlap
      return [this];
    }
  },

  // Returns a new Interval that has the same extent as this one, but which is relative
  // to `that`, an Interval that fully covers this one.
  relativeTo(that) {
    if (this.sourceString !== that.sourceString) {
      throw errors$5.intervalSourcesDontMatch();
    }
    assert$2(
        this.startIdx >= that.startIdx && this.endIdx <= that.endIdx,
        'other interval does not cover this one'
    );
    return new Interval$3(
        this.sourceString,
        this.startIdx - that.startIdx,
        this.endIdx - that.startIdx
    );
  },

  // Returns a new Interval which contains the same contents as this one,
  // but with whitespace trimmed from both ends. (This only makes sense when
  // the input stream is a string.)
  trimmed() {
    const {contents} = this;
    const startIdx = this.startIdx + contents.match(/^\s*/)[0].length;
    const endIdx = this.endIdx - contents.match(/\s*$/)[0].length;
    return new Interval$3(this.sourceString, startIdx, endIdx);
  },

  subInterval(offset, len) {
    const newStartIdx = this.startIdx + offset;
    return new Interval$3(this.sourceString, newStartIdx, newStartIdx + len);
  },
};

Object.defineProperties(Interval$3.prototype, {
  contents: {
    get() {
      if (this._contents === undefined) {
        this._contents = this.sourceString.slice(this.startIdx, this.endIdx);
      }
      return this._contents;
    },
    enumerable: true,
  },
  length: {
    get() {
      return this.endIdx - this.startIdx;
    },
    enumerable: true,
  },
});

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Interval_1 = Interval$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$2 = Interval_1;
const common$f = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Unicode characters that are used in the `toString` output.
const BALLOT_X = '\u2717';
const CHECK_MARK = '\u2713';
const DOT_OPERATOR = '\u22C5';
const RIGHTWARDS_DOUBLE_ARROW = '\u21D2';
const SYMBOL_FOR_HORIZONTAL_TABULATION = '\u2409';
const SYMBOL_FOR_LINE_FEED = '\u240A';
const SYMBOL_FOR_CARRIAGE_RETURN = '\u240D';

const Flags = {
  succeeded: 1 << 0,
  isRootNode: 1 << 1,
  isImplicitSpaces: 1 << 2,
  isMemoized: 1 << 3,
  isHeadOfLeftRecursion: 1 << 4,
  terminatesLR: 1 << 5,
};

function spaces(n) {
  return common$f.repeat(' ', n).join('');
}

// Return a string representation of a portion of `input` at offset `pos`.
// The result will contain exactly `len` characters.
function getInputExcerpt(input, pos, len) {
  const excerpt = asEscapedString(input.slice(pos, pos + len));

  // Pad the output if necessary.
  if (excerpt.length < len) {
    return excerpt + common$f.repeat(' ', len - excerpt.length).join('');
  }
  return excerpt;
}

function asEscapedString(obj) {
  if (typeof obj === 'string') {
    // Replace non-printable characters with visible symbols.
    return obj
        .replace(/ /g, DOT_OPERATOR)
        .replace(/\t/g, SYMBOL_FOR_HORIZONTAL_TABULATION)
        .replace(/\n/g, SYMBOL_FOR_LINE_FEED)
        .replace(/\r/g, SYMBOL_FOR_CARRIAGE_RETURN);
  }
  return String(obj);
}

// ----------------- Trace -----------------

function Trace$2(input, pos1, pos2, expr, succeeded, bindings, optChildren) {
  this.input = input;
  this.pos = this.pos1 = pos1;
  this.pos2 = pos2;
  this.source = new Interval$2(input, pos1, pos2);
  this.expr = expr;
  this.bindings = bindings;
  this.children = optChildren || [];
  this.terminatingLREntry = null;

  this._flags = succeeded ? Flags.succeeded : 0;
}

// A value that can be returned from visitor functions to indicate that a
// node should not be recursed into.
Trace$2.prototype.SKIP = {};

Object.defineProperty(Trace$2.prototype, 'displayString', {
  get() {
    return this.expr.toDisplayString();
  },
});

// For convenience, create a getter and setter for the boolean flags in `Flags`.
Object.keys(Flags).forEach(name => {
  const mask = Flags[name];
  Object.defineProperty(Trace$2.prototype, name, {
    get() {
      return (this._flags & mask) !== 0;
    },
    set(val) {
      if (val) {
        this._flags |= mask;
      } else {
        this._flags &= ~mask;
      }
    },
  });
});

Trace$2.prototype.clone = function() {
  return this.cloneWithExpr(this.expr);
};

Trace$2.prototype.cloneWithExpr = function(expr) {
  const ans = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      expr,
      this.succeeded,
      this.bindings,
      this.children
  );

  ans.isHeadOfLeftRecursion = this.isHeadOfLeftRecursion;
  ans.isImplicitSpaces = this.isImplicitSpaces;
  ans.isMemoized = this.isMemoized;
  ans.isRootNode = this.isRootNode;
  ans.terminatesLR = this.terminatesLR;
  ans.terminatingLREntry = this.terminatingLREntry;
  return ans;
};

// Record the trace information for the terminating condition of the LR loop.
Trace$2.prototype.recordLRTermination = function(ruleBodyTrace, value) {
  this.terminatingLREntry = new Trace$2(
      this.input,
      this.pos,
      this.pos2,
      this.expr,
      false,
      [value],
      [ruleBodyTrace]
  );
  this.terminatingLREntry.terminatesLR = true;
};

// Recursively traverse this trace node and all its descendents, calling a visitor function
// for each node that is visited. If `vistorObjOrFn` is an object, then its 'enter' property
// is a function to call before visiting the children of a node, and its 'exit' property is
// a function to call afterwards. If `visitorObjOrFn` is a function, it represents the 'enter'
// function.
//
// The functions are called with three arguments: the Trace node, its parent Trace, and a number
// representing the depth of the node in the tree. (The root node has depth 0.) `optThisArg`, if
// specified, is the value to use for `this` when executing the visitor functions.
Trace$2.prototype.walk = function(visitorObjOrFn, optThisArg) {
  let visitor = visitorObjOrFn;
  if (typeof visitor === 'function') {
    visitor = {enter: visitor};
  }

  function _walk(node, parent, depth) {
    let recurse = true;
    if (visitor.enter) {
      if (visitor.enter.call(optThisArg, node, parent, depth) === Trace$2.prototype.SKIP) {
        recurse = false;
      }
    }
    if (recurse) {
      node.children.forEach(child => {
        _walk(child, node, depth + 1);
      });
      if (visitor.exit) {
        visitor.exit.call(optThisArg, node, parent, depth);
      }
    }
  }
  if (this.isRootNode) {
    // Don't visit the root node itself, only its children.
    this.children.forEach(c => {
      _walk(c, null, 0);
    });
  } else {
    _walk(this, null, 0);
  }
};

// Return a string representation of the trace.
// Sample:
//     12⋅+⋅2⋅*⋅3 ✓ exp ⇒  "12"
//     12⋅+⋅2⋅*⋅3   ✓ addExp (LR) ⇒  "12"
//     12⋅+⋅2⋅*⋅3       ✗ addExp_plus
Trace$2.prototype.toString = function() {
  const sb = new common$f.StringBuffer();
  this.walk((node, parent, depth) => {
    if (!node) {
      return this.SKIP;
    }
    const ctorName = node.expr.constructor.name;
    // Don't print anything for Alt nodes.
    if (ctorName === 'Alt') {
      return; // eslint-disable-line consistent-return
    }
    sb.append(getInputExcerpt(node.input, node.pos, 10) + spaces(depth * 2 + 1));
    sb.append((node.succeeded ? CHECK_MARK : BALLOT_X) + ' ' + node.displayString);
    if (node.isHeadOfLeftRecursion) {
      sb.append(' (LR)');
    }
    if (node.succeeded) {
      const contents = asEscapedString(node.source.contents);
      sb.append(' ' + RIGHTWARDS_DOUBLE_ARROW + '  ');
      sb.append(typeof contents === 'string' ? '"' + contents + '"' : contents);
    }
    sb.append('\n');
  });
  return sb.contents();
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Trace_1 = Trace$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Trace$1 = Trace_1;
const common$e = common$l;
const errors$4 = errors$9;
const nodes = nodes$1;
const pexprs$g = pexprsMain;

const {TerminalNode: TerminalNode$1} = nodes;
const {NonterminalNode} = nodes;
const {IterationNode: IterationNode$1} = nodes;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Evaluate the expression and return `true` if it succeeds, `false` otherwise. This method should
  only be called directly by `State.prototype.eval(expr)`, which also updates the data structures
  that are used for tracing. (Making those updates in a method of `State` enables the trace-specific
  data structures to be "secrets" of that class, which is good for modularity.)

  The contract of this method is as follows:
  * When the return value is `true`,
    - the state object will have `expr.getArity()` more bindings than it did before the call.
  * When the return value is `false`,
    - the state object may have more bindings than it did before the call, and
    - its input stream's position may be anywhere.

  Note that `State.prototype.eval(expr)`, unlike this method, guarantees that neither the state
  object's bindings nor its input stream's position will change if the expression fails to match.
*/
pexprs$g.PExpr.prototype.eval = common$e.abstract('eval'); // function(state) { ... }

pexprs$g.any.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.end.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (inputStream.atEnd()) {
    state.pushBinding(new TerminalNode$1(0), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Terminal.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (!inputStream.matchString(this.obj)) {
    state.processFailure(origPos, this);
    return false;
  } else {
    state.pushBinding(new TerminalNode$1(this.obj.length), origPos);
    return true;
  }
};

pexprs$g.Range.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  // A range can operate in one of two modes: matching a single, 16-bit _code unit_,
  // or matching a _code point_. (Code points over 0xFFFF take up two 16-bit code units.)
  const cp = this.matchCodePoint ? inputStream.nextCodePoint() : inputStream.nextCharCode();

  // Always compare by code point value to get the correct result in all scenarios.
  // Note that for strings of length 1, codePointAt(0) and charPointAt(0) are equivalent.
  if (cp !== undefined && this.from.codePointAt(0) <= cp && cp <= this.to.codePointAt(0)) {
    state.pushBinding(new TerminalNode$1(String.fromCodePoint(cp).length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

pexprs$g.Param.prototype.eval = function(state) {
  return state.eval(state.currentApplication().args[this.index]);
};

pexprs$g.Lex.prototype.eval = function(state) {
  state.enterLexifiedContext();
  const ans = state.eval(this.expr);
  state.exitLexifiedContext();
  return ans;
};

pexprs$g.Alt.prototype.eval = function(state) {
  for (let idx = 0; idx < this.terms.length; idx++) {
    if (state.eval(this.terms[idx])) {
      return true;
    }
  }
  return false;
};

pexprs$g.Seq.prototype.eval = function(state) {
  for (let idx = 0; idx < this.factors.length; idx++) {
    const factor = this.factors[idx];
    if (!state.eval(factor)) {
      return false;
    }
  }
  return true;
};

pexprs$g.Iter.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const arity = this.getArity();
  const cols = [];
  const colOffsets = [];
  while (cols.length < arity) {
    cols.push([]);
    colOffsets.push([]);
  }

  let numMatches = 0;
  let prevPos = origPos;
  let idx;
  while (numMatches < this.maxNumMatches && state.eval(this.expr)) {
    if (inputStream.pos === prevPos) {
      throw errors$4.kleeneExprHasNullableOperand(this, state._applicationStack);
    }
    prevPos = inputStream.pos;
    numMatches++;
    const row = state._bindings.splice(state._bindings.length - arity, arity);
    const rowOffsets = state._bindingOffsets.splice(
        state._bindingOffsets.length - arity,
        arity
    );
    for (idx = 0; idx < row.length; idx++) {
      cols[idx].push(row[idx]);
      colOffsets[idx].push(rowOffsets[idx]);
    }
  }
  if (numMatches < this.minNumMatches) {
    return false;
  }
  let offset = state.posToOffset(origPos);
  let matchLength = 0;
  if (numMatches > 0) {
    const lastCol = cols[arity - 1];
    const lastColOffsets = colOffsets[arity - 1];

    const endOffset =
      lastColOffsets[lastColOffsets.length - 1] + lastCol[lastCol.length - 1].matchLength;
    offset = colOffsets[0][0];
    matchLength = endOffset - offset;
  }
  const isOptional = this instanceof pexprs$g.Opt;
  for (idx = 0; idx < cols.length; idx++) {
    state._bindings.push(
        new IterationNode$1(cols[idx], colOffsets[idx], matchLength, isOptional)
    );
    state._bindingOffsets.push(offset);
  }
  return true;
};

pexprs$g.Not.prototype.eval = function(state) {
  /*
    TODO:
    - Right now we're just throwing away all of the failures that happen inside a `not`, and
      recording `this` as a failed expression.
    - Double negation should be equivalent to lookahead, but that's not the case right now wrt
      failures. E.g., ~~'foo' produces a failure for ~~'foo', but maybe it should produce
      a failure for 'foo' instead.
  */

  const {inputStream} = state;
  const origPos = inputStream.pos;
  state.pushFailuresInfo();

  const ans = state.eval(this.expr);

  state.popFailuresInfo();
  if (ans) {
    state.processFailure(origPos, this);
    return false;
  }

  inputStream.pos = origPos;
  return true;
};

pexprs$g.Lookahead.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  if (state.eval(this.expr)) {
    inputStream.pos = origPos;
    return true;
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.eval = function(state) {
  const caller = state.currentApplication();
  const actuals = caller ? caller.args : [];
  const app = this.substituteParams(actuals);

  const posInfo = state.getCurrentPosInfo();
  if (posInfo.isActive(app)) {
    // This rule is already active at this position, i.e., it is left-recursive.
    return app.handleCycle(state);
  }

  const memoKey = app.toMemoKey();
  const memoRec = posInfo.memo[memoKey];

  if (memoRec && posInfo.shouldUseMemoizedResult(memoRec)) {
    if (state.hasNecessaryInfo(memoRec)) {
      return state.useMemoizedResult(state.inputStream.pos, memoRec);
    }
    delete posInfo.memo[memoKey];
  }
  return app.reallyEval(state);
};

pexprs$g.Apply.prototype.handleCycle = function(state) {
  const posInfo = state.getCurrentPosInfo();
  const {currentLeftRecursion} = posInfo;
  const memoKey = this.toMemoKey();
  let memoRec = posInfo.memo[memoKey];

  if (currentLeftRecursion && currentLeftRecursion.headApplication.toMemoKey() === memoKey) {
    // We already know about this left recursion, but it's possible there are "involved
    // applications" that we don't already know about, so...
    memoRec.updateInvolvedApplicationMemoKeys();
  } else if (!memoRec) {
    // New left recursion detected! Memoize a failure to try to get a seed parse.
    memoRec = posInfo.memoize(memoKey, {
      matchLength: 0,
      examinedLength: 0,
      value: false,
      rightmostFailureOffset: -1,
    });
    posInfo.startLeftRecursion(this, memoRec);
  }
  return state.useMemoizedResult(state.inputStream.pos, memoRec);
};

pexprs$g.Apply.prototype.reallyEval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const origPosInfo = state.getCurrentPosInfo();
  const ruleInfo = state.grammar.rules[this.ruleName];
  const {body} = ruleInfo;
  const {description} = ruleInfo;

  state.enterApplication(origPosInfo, this);

  if (description) {
    state.pushFailuresInfo();
  }

  // Reset the input stream's examinedLength property so that we can track
  // the examined length of this particular application.
  const origInputStreamExaminedLength = inputStream.examinedLength;
  inputStream.examinedLength = 0;

  let value = this.evalOnce(body, state);
  const currentLR = origPosInfo.currentLeftRecursion;
  const memoKey = this.toMemoKey();
  const isHeadOfLeftRecursion = currentLR && currentLR.headApplication.toMemoKey() === memoKey;
  let memoRec;

  if (isHeadOfLeftRecursion) {
    value = this.growSeedResult(body, state, origPos, currentLR, value);
    origPosInfo.endLeftRecursion();
    memoRec = currentLR;
    memoRec.examinedLength = inputStream.examinedLength - origPos;
    memoRec.rightmostFailureOffset = state._getRightmostFailureOffset();
    origPosInfo.memoize(memoKey, memoRec); // updates origPosInfo's maxExaminedLength
  } else if (!currentLR || !currentLR.isInvolved(memoKey)) {
    // This application is not involved in left recursion, so it's ok to memoize it.
    memoRec = origPosInfo.memoize(memoKey, {
      matchLength: inputStream.pos - origPos,
      examinedLength: inputStream.examinedLength - origPos,
      value,
      failuresAtRightmostPosition: state.cloneRecordedFailures(),
      rightmostFailureOffset: state._getRightmostFailureOffset(),
    });
  }
  const succeeded = !!value;

  if (description) {
    state.popFailuresInfo();
    if (!succeeded) {
      state.processFailure(origPos, this);
    }
    if (memoRec) {
      memoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();
    }
  }

  // Record trace information in the memo table, so that it is available if the memoized result
  // is used later.
  if (state.isTracing() && memoRec) {
    const entry = state.getTraceEntry(origPos, this, succeeded, succeeded ? [value] : []);
    if (isHeadOfLeftRecursion) {
      common$e.assert(entry.terminatingLREntry != null || !succeeded);
      entry.isHeadOfLeftRecursion = true;
    }
    memoRec.traceEntry = entry;
  }

  // Fix the input stream's examinedLength -- it should be the maximum examined length
  // across all applications, not just this one.
  inputStream.examinedLength = Math.max(
      inputStream.examinedLength,
      origInputStreamExaminedLength
  );

  state.exitApplication(origPosInfo, value);

  return succeeded;
};

pexprs$g.Apply.prototype.evalOnce = function(expr, state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;

  if (state.eval(expr)) {
    const arity = expr.getArity();
    const bindings = state._bindings.splice(state._bindings.length - arity, arity);
    const offsets = state._bindingOffsets.splice(state._bindingOffsets.length - arity, arity);
    const matchLength = inputStream.pos - origPos;
    return new NonterminalNode(this.ruleName, bindings, offsets, matchLength);
  } else {
    return false;
  }
};

pexprs$g.Apply.prototype.growSeedResult = function(body, state, origPos, lrMemoRec, newValue) {
  if (!newValue) {
    return false;
  }

  const {inputStream} = state;

  while (true) {
    lrMemoRec.matchLength = inputStream.pos - origPos;
    lrMemoRec.value = newValue;
    lrMemoRec.failuresAtRightmostPosition = state.cloneRecordedFailures();

    if (state.isTracing()) {
      // Before evaluating the body again, add a trace node for this application to the memo entry.
      // Its only child is a copy of the trace node from `newValue`, which will always be the last
      // element in `state.trace`.
      const seedTrace = state.trace[state.trace.length - 1];
      lrMemoRec.traceEntry = new Trace$1(
          state.input,
          origPos,
          inputStream.pos,
          this,
          true,
          [newValue],
          [seedTrace.clone()]
      );
    }
    inputStream.pos = origPos;
    newValue = this.evalOnce(body, state);
    if (inputStream.pos - origPos <= lrMemoRec.matchLength) {
      break;
    }
    if (state.isTracing()) {
      state.trace.splice(-2, 1); // Drop the trace for the old seed.
    }
  }
  if (state.isTracing()) {
    // The last entry is for an unused result -- pop it and save it in the "real" entry.
    lrMemoRec.traceEntry.recordLRTermination(state.trace.pop(), newValue);
  }
  inputStream.pos = origPos + lrMemoRec.matchLength;
  return lrMemoRec.value;
};

pexprs$g.UnicodeChar.prototype.eval = function(state) {
  const {inputStream} = state;
  const origPos = inputStream.pos;
  const ch = inputStream.next();
  if (ch && this.pattern.test(ch)) {
    state.pushBinding(new TerminalNode$1(ch.length), origPos);
    return true;
  } else {
    state.processFailure(origPos, this);
    return false;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$d = common$l;
const pexprs$f = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$f.PExpr.prototype.getArity = common$d.abstract('getArity');

pexprs$f.any.getArity =
  pexprs$f.end.getArity =
  pexprs$f.Terminal.prototype.getArity =
  pexprs$f.Range.prototype.getArity =
  pexprs$f.Param.prototype.getArity =
  pexprs$f.Apply.prototype.getArity =
  pexprs$f.UnicodeChar.prototype.getArity =
    function() {
      return 1;
    };

pexprs$f.Alt.prototype.getArity = function() {
  // This is ok b/c all terms must have the same arity -- this property is
  // checked by the Grammar constructor.
  return this.terms.length === 0 ? 0 : this.terms[0].getArity();
};

pexprs$f.Seq.prototype.getArity = function() {
  let arity = 0;
  for (let idx = 0; idx < this.factors.length; idx++) {
    arity += this.factors[idx].getArity();
  }
  return arity;
};

pexprs$f.Iter.prototype.getArity = function() {
  return this.expr.getArity();
};

pexprs$f.Not.prototype.getArity = function() {
  return 0;
};

pexprs$f.Lookahead.prototype.getArity = pexprs$f.Lex.prototype.getArity = function() {
  return this.expr.getArity();
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$c = common$l;
const pexprs$e = pexprsMain;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function getMetaInfo(expr, grammarInterval) {
  const metaInfo = {};
  if (expr.source && grammarInterval) {
    const adjusted = expr.source.relativeTo(grammarInterval);
    metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
  }
  return metaInfo;
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$e.PExpr.prototype.outputRecipe = common$c.abstract('outputRecipe');

pexprs$e.any.outputRecipe = function(formals, grammarInterval) {
  return ['any', getMetaInfo(this, grammarInterval)];
};

pexprs$e.end.outputRecipe = function(formals, grammarInterval) {
  return ['end', getMetaInfo(this, grammarInterval)];
};

pexprs$e.Terminal.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['terminal', getMetaInfo(this, grammarInterval), this.obj];
};

pexprs$e.Range.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['range', getMetaInfo(this, grammarInterval), this.from, this.to];
};

pexprs$e.Param.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['param', getMetaInfo(this, grammarInterval), this.index];
};

pexprs$e.Alt.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['alt', getMetaInfo(this, grammarInterval)].concat(
      this.terms.map(term => term.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Extend.prototype.outputRecipe = function(formals, grammarInterval) {
  const extension = this.terms[0]; // [extension, original]
  return extension.outputRecipe(formals, grammarInterval);
};

pexprs$e.Splice.prototype.outputRecipe = function(formals, grammarInterval) {
  const beforeTerms = this.terms.slice(0, this.expansionPos);
  const afterTerms = this.terms.slice(this.expansionPos + 1);
  return [
    'splice',
    getMetaInfo(this, grammarInterval),
    beforeTerms.map(term => term.outputRecipe(formals, grammarInterval)),
    afterTerms.map(term => term.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.Seq.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['seq', getMetaInfo(this, grammarInterval)].concat(
      this.factors.map(factor => factor.outputRecipe(formals, grammarInterval))
  );
};

pexprs$e.Star.prototype.outputRecipe =
  pexprs$e.Plus.prototype.outputRecipe =
  pexprs$e.Opt.prototype.outputRecipe =
  pexprs$e.Not.prototype.outputRecipe =
  pexprs$e.Lookahead.prototype.outputRecipe =
  pexprs$e.Lex.prototype.outputRecipe =
    function(formals, grammarInterval) {
      return [
        this.constructor.name.toLowerCase(),
        getMetaInfo(this, grammarInterval),
        this.expr.outputRecipe(formals, grammarInterval),
      ];
    };

pexprs$e.Apply.prototype.outputRecipe = function(formals, grammarInterval) {
  return [
    'app',
    getMetaInfo(this, grammarInterval),
    this.ruleName,
    this.args.map(arg => arg.outputRecipe(formals, grammarInterval)),
  ];
};

pexprs$e.UnicodeChar.prototype.outputRecipe = function(formals, grammarInterval) {
  return ['unicodeChar', getMetaInfo(this, grammarInterval), this.category];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$b = common$l;
const pexprs$d = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Called at grammar creation time to rewrite a rule body, replacing each reference to a formal
  parameter with a `Param` node. Returns a PExpr -- either a new one, or the original one if
  it was modified in place.
*/
pexprs$d.PExpr.prototype.introduceParams = common$b.abstract('introduceParams');

pexprs$d.any.introduceParams =
  pexprs$d.end.introduceParams =
  pexprs$d.Terminal.prototype.introduceParams =
  pexprs$d.Range.prototype.introduceParams =
  pexprs$d.Param.prototype.introduceParams =
  pexprs$d.UnicodeChar.prototype.introduceParams =
    function(formals) {
      return this;
    };

pexprs$d.Alt.prototype.introduceParams = function(formals) {
  this.terms.forEach((term, idx, terms) => {
    terms[idx] = term.introduceParams(formals);
  });
  return this;
};

pexprs$d.Seq.prototype.introduceParams = function(formals) {
  this.factors.forEach((factor, idx, factors) => {
    factors[idx] = factor.introduceParams(formals);
  });
  return this;
};

pexprs$d.Iter.prototype.introduceParams =
  pexprs$d.Not.prototype.introduceParams =
  pexprs$d.Lookahead.prototype.introduceParams =
  pexprs$d.Lex.prototype.introduceParams =
    function(formals) {
      this.expr = this.expr.introduceParams(formals);
      return this;
    };

pexprs$d.Apply.prototype.introduceParams = function(formals) {
  const index = formals.indexOf(this.ruleName);
  if (index >= 0) {
    if (this.args.length > 0) {
      // TODO: Should this be supported? See issue #64.
      throw new Error('Parameterized rules cannot be passed as arguments to another rule.');
    }
    return new pexprs$d.Param(index).withSource(this.source);
  } else {
    this.args.forEach((arg, idx, args) => {
      args[idx] = arg.introduceParams(formals);
    });
    return this;
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$a = common$l;
const pexprs$c = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns `true` if this parsing expression may accept without consuming any input.
pexprs$c.PExpr.prototype.isNullable = function(grammar) {
  return this._isNullable(grammar, Object.create(null));
};

pexprs$c.PExpr.prototype._isNullable = common$a.abstract('_isNullable');

pexprs$c.any._isNullable =
  pexprs$c.Range.prototype._isNullable =
  pexprs$c.Param.prototype._isNullable =
  pexprs$c.Plus.prototype._isNullable =
  pexprs$c.UnicodeChar.prototype._isNullable =
    function(grammar, memo) {
      return false;
    };

pexprs$c.end._isNullable = function(grammar, memo) {
  return true;
};

pexprs$c.Terminal.prototype._isNullable = function(grammar, memo) {
  if (typeof this.obj === 'string') {
    // This is an over-simplification: it's only correct if the input is a string. If it's an array
    // or an object, then the empty string parsing expression is not nullable.
    return this.obj === '';
  } else {
    return false;
  }
};

pexprs$c.Alt.prototype._isNullable = function(grammar, memo) {
  return this.terms.length === 0 || this.terms.some(term => term._isNullable(grammar, memo));
};

pexprs$c.Seq.prototype._isNullable = function(grammar, memo) {
  return this.factors.every(factor => factor._isNullable(grammar, memo));
};

pexprs$c.Star.prototype._isNullable =
  pexprs$c.Opt.prototype._isNullable =
  pexprs$c.Not.prototype._isNullable =
  pexprs$c.Lookahead.prototype._isNullable =
    function(grammar, memo) {
      return true;
    };

pexprs$c.Lex.prototype._isNullable = function(grammar, memo) {
  return this.expr._isNullable(grammar, memo);
};

pexprs$c.Apply.prototype._isNullable = function(grammar, memo) {
  const key = this.toMemoKey();
  if (!Object.prototype.hasOwnProperty.call(memo, key)) {
    const {body} = grammar.rules[this.ruleName];
    const inlined = body.substituteParams(this.args);
    memo[key] = false; // Prevent infinite recursion for recursive rules.
    memo[key] = inlined._isNullable(grammar, memo);
  }
  return memo[key];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$9 = common$l;
const pexprs$b = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a PExpr that results from recursively replacing every formal parameter (i.e., instance
  of `Param`) inside this PExpr with its actual value from `actuals` (an Array).

  The receiver must not be modified; a new PExpr must be returned if any replacement is necessary.
*/
// function(actuals) { ... }
pexprs$b.PExpr.prototype.substituteParams = common$9.abstract('substituteParams');

pexprs$b.any.substituteParams =
  pexprs$b.end.substituteParams =
  pexprs$b.Terminal.prototype.substituteParams =
  pexprs$b.Range.prototype.substituteParams =
  pexprs$b.UnicodeChar.prototype.substituteParams =
    function(actuals) {
      return this;
    };

pexprs$b.Param.prototype.substituteParams = function(actuals) {
  return actuals[this.index];
};

pexprs$b.Alt.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Alt(this.terms.map(term => term.substituteParams(actuals)));
};

pexprs$b.Seq.prototype.substituteParams = function(actuals) {
  return new pexprs$b.Seq(this.factors.map(factor => factor.substituteParams(actuals)));
};

pexprs$b.Iter.prototype.substituteParams =
  pexprs$b.Not.prototype.substituteParams =
  pexprs$b.Lookahead.prototype.substituteParams =
  pexprs$b.Lex.prototype.substituteParams =
    function(actuals) {
      return new this.constructor(this.expr.substituteParams(actuals));
    };

pexprs$b.Apply.prototype.substituteParams = function(actuals) {
  if (this.args.length === 0) {
    // Avoid making a copy of this application, as an optimization
    return this;
  } else {
    const args = this.args.map(arg => arg.substituteParams(actuals));
    return new pexprs$b.Apply(this.ruleName, args);
  }
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$8 = common$l;
const pexprs$a = pexprsMain;

const {copyWithoutDuplicates} = common$8;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function isRestrictedJSIdentifier(str) {
  return /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(str);
}

function resolveDuplicatedNames(argumentNameList) {
  // `count` is used to record the number of times each argument name occurs in the list,
  // this is useful for checking duplicated argument name. It maps argument names to ints.
  const count = Object.create(null);
  argumentNameList.forEach(argName => {
    count[argName] = (count[argName] || 0) + 1;
  });

  // Append subscripts ('_1', '_2', ...) to duplicate argument names.
  Object.keys(count).forEach(dupArgName => {
    if (count[dupArgName] <= 1) {
      return;
    }

    // This name shows up more than once, so add subscripts.
    let subscript = 1;
    argumentNameList.forEach((argName, idx) => {
      if (argName === dupArgName) {
        argumentNameList[idx] = argName + '_' + subscript++;
      }
    });
  });
}

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  Returns a list of strings that will be used as the default argument names for its receiver
  (a pexpr) in a semantic action. This is used exclusively by the Semantics Editor.

  `firstArgIndex` is the 1-based index of the first argument name that will be generated for this
  pexpr. It enables us to name arguments positionally, e.g., if the second argument is a
  non-alphanumeric terminal like "+", it will be named '$2'.

  `noDupCheck` is true if the caller of `toArgumentNameList` is not a top level caller. It enables
  us to avoid nested duplication subscripts appending, e.g., '_1_1', '_1_2', by only checking
  duplicates at the top level.

  Here is a more elaborate example that illustrates how this method works:
  `(a "+" b).toArgumentNameList(1)` evaluates to `['a', '$2', 'b']` with the following recursive
  calls:

    (a).toArgumentNameList(1) -> ['a'],
    ("+").toArgumentNameList(2) -> ['$2'],
    (b).toArgumentNameList(3) -> ['b']

  Notes:
  * This method must only be called on well-formed expressions, e.g., the receiver must
    not have any Alt sub-expressions with inconsistent arities.
  * e.getArity() === e.toArgumentNameList(1).length
*/
// function(firstArgIndex, noDupCheck) { ... }
pexprs$a.PExpr.prototype.toArgumentNameList = common$8.abstract('toArgumentNameList');

pexprs$a.any.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['any'];
};

pexprs$a.end.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['end'];
};

pexprs$a.Terminal.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  if (typeof this.obj === 'string' && /^[_a-zA-Z0-9]+$/.test(this.obj)) {
    // If this terminal is a valid suffix for a JS identifier, just prepend it with '_'
    return ['_' + this.obj];
  } else {
    // Otherwise, name it positionally.
    return ['$' + firstArgIndex];
  }
};

pexprs$a.Range.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  let argName = this.from + '_to_' + this.to;
  // If the `argName` is not valid then try to prepend a `_`.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '_' + argName;
  }
  // If the `argName` still not valid after prepending a `_`, then name it positionally.
  if (!isRestrictedJSIdentifier(argName)) {
    argName = '$' + firstArgIndex;
  }
  return [argName];
};

pexprs$a.Alt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // `termArgNameLists` is an array of arrays where each row is the
  // argument name list that corresponds to a term in this alternation.
  const termArgNameLists = this.terms.map(term =>
    term.toArgumentNameList(firstArgIndex, true)
  );

  const argumentNameList = [];
  const numArgs = termArgNameLists[0].length;
  for (let colIdx = 0; colIdx < numArgs; colIdx++) {
    const col = [];
    for (let rowIdx = 0; rowIdx < this.terms.length; rowIdx++) {
      col.push(termArgNameLists[rowIdx][colIdx]);
    }
    const uniqueNames = copyWithoutDuplicates(col);
    argumentNameList.push(uniqueNames.join('_or_'));
  }

  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Seq.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  // Generate the argument name list, without worrying about duplicates.
  let argumentNameList = [];
  this.factors.forEach(factor => {
    const factorArgumentNameList = factor.toArgumentNameList(firstArgIndex, true);
    argumentNameList = argumentNameList.concat(factorArgumentNameList);

    // Shift the firstArgIndex to take this factor's argument names into account.
    firstArgIndex += factorArgumentNameList.length;
  });
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Iter.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  const argumentNameList = this.expr
      .toArgumentNameList(firstArgIndex, noDupCheck)
      .map(exprArgumentString =>
      exprArgumentString[exprArgumentString.length - 1] === 's' ?
        exprArgumentString + 'es' :
        exprArgumentString + 's'
      );
  if (!noDupCheck) {
    resolveDuplicatedNames(argumentNameList);
  }
  return argumentNameList;
};

pexprs$a.Opt.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return this.expr.toArgumentNameList(firstArgIndex, noDupCheck).map(argName => {
    return 'opt' + argName[0].toUpperCase() + argName.slice(1);
  });
};

pexprs$a.Not.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [];
};

pexprs$a.Lookahead.prototype.toArgumentNameList = pexprs$a.Lex.prototype.toArgumentNameList =
  function(firstArgIndex, noDupCheck) {
    return this.expr.toArgumentNameList(firstArgIndex, noDupCheck);
  };

pexprs$a.Apply.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return [this.ruleName];
};

pexprs$a.UnicodeChar.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['$' + firstArgIndex];
};

pexprs$a.Param.prototype.toArgumentNameList = function(firstArgIndex, noDupCheck) {
  return ['param' + this.index];
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$7 = common$l;
const pexprs$9 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

// Returns a string representing the PExpr, for use as a UI label, etc.
pexprs$9.PExpr.prototype.toDisplayString = common$7.abstract('toDisplayString');

pexprs$9.Alt.prototype.toDisplayString = pexprs$9.Seq.prototype.toDisplayString = function() {
  if (this.source) {
    return this.source.trimmed().contents;
  }
  return '[' + this.constructor.name + ']';
};

pexprs$9.any.toDisplayString =
  pexprs$9.end.toDisplayString =
  pexprs$9.Iter.prototype.toDisplayString =
  pexprs$9.Not.prototype.toDisplayString =
  pexprs$9.Lookahead.prototype.toDisplayString =
  pexprs$9.Lex.prototype.toDisplayString =
  pexprs$9.Terminal.prototype.toDisplayString =
  pexprs$9.Range.prototype.toDisplayString =
  pexprs$9.Param.prototype.toDisplayString =
    function() {
      return this.toString();
    };

pexprs$9.Apply.prototype.toDisplayString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toDisplayString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$9.UnicodeChar.prototype.toDisplayString = function() {
  return 'Unicode [' + this.category + '] character';
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure$1 = Failure_1;
const common$6 = common$l;
const pexprs$8 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

pexprs$8.PExpr.prototype.toFailure = common$6.abstract('toFailure');

pexprs$8.any.toFailure = function(grammar) {
  return new Failure$1(this, 'any object', 'description');
};

pexprs$8.end.toFailure = function(grammar) {
  return new Failure$1(this, 'end of input', 'description');
};

pexprs$8.Terminal.prototype.toFailure = function(grammar) {
  return new Failure$1(this, this.obj, 'string');
};

pexprs$8.Range.prototype.toFailure = function(grammar) {
  // TODO: come up with something better
  return new Failure$1(this, JSON.stringify(this.from) + '..' + JSON.stringify(this.to), 'code');
};

pexprs$8.Not.prototype.toFailure = function(grammar) {
  const description =
    this.expr === pexprs$8.any ? 'nothing' : 'not ' + this.expr.toFailure(grammar);
  return new Failure$1(this, description, 'description');
};

pexprs$8.Lookahead.prototype.toFailure = function(grammar) {
  return this.expr.toFailure(grammar);
};

pexprs$8.Apply.prototype.toFailure = function(grammar) {
  let {description} = grammar.rules[this.ruleName];
  if (!description) {
    const article = /^[aeiouAEIOU]/.test(this.ruleName) ? 'an' : 'a';
    description = article + ' ' + this.ruleName;
  }
  return new Failure$1(this, description, 'description');
};

pexprs$8.UnicodeChar.prototype.toFailure = function(grammar) {
  return new Failure$1(this, 'a Unicode [' + this.category + '] character', 'description');
};

pexprs$8.Alt.prototype.toFailure = function(grammar) {
  const fs = this.terms.map(t => t.toFailure(grammar));
  const description = '(' + fs.join(' or ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Seq.prototype.toFailure = function(grammar) {
  const fs = this.factors.map(f => f.toFailure(grammar));
  const description = '(' + fs.join(' ') + ')';
  return new Failure$1(this, description, 'description');
};

pexprs$8.Iter.prototype.toFailure = function(grammar) {
  const description = '(' + this.expr.toFailure(grammar) + this.operator + ')';
  return new Failure$1(this, description, 'description');
};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$5 = common$l;
const pexprs$7 = pexprsMain;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

/*
  e1.toString() === e2.toString() ==> e1 and e2 are semantically equivalent.
  Note that this is not an iff (<==>): e.g.,
  (~"b" "a").toString() !== ("a").toString(), even though
  ~"b" "a" and "a" are interchangeable in any grammar,
  both in terms of the languages they accept and their arities.
*/
pexprs$7.PExpr.prototype.toString = common$5.abstract('toString');

pexprs$7.any.toString = function() {
  return 'any';
};

pexprs$7.end.toString = function() {
  return 'end';
};

pexprs$7.Terminal.prototype.toString = function() {
  return JSON.stringify(this.obj);
};

pexprs$7.Range.prototype.toString = function() {
  return JSON.stringify(this.from) + '..' + JSON.stringify(this.to);
};

pexprs$7.Param.prototype.toString = function() {
  return '$' + this.index;
};

pexprs$7.Lex.prototype.toString = function() {
  return '#(' + this.expr.toString() + ')';
};

pexprs$7.Alt.prototype.toString = function() {
  return this.terms.length === 1 ?
    this.terms[0].toString() :
    '(' + this.terms.map(term => term.toString()).join(' | ') + ')';
};

pexprs$7.Seq.prototype.toString = function() {
  return this.factors.length === 1 ?
    this.factors[0].toString() :
    '(' + this.factors.map(factor => factor.toString()).join(' ') + ')';
};

pexprs$7.Iter.prototype.toString = function() {
  return this.expr + this.operator;
};

pexprs$7.Not.prototype.toString = function() {
  return '~' + this.expr;
};

pexprs$7.Lookahead.prototype.toString = function() {
  return '&' + this.expr;
};

pexprs$7.Apply.prototype.toString = function() {
  if (this.args.length > 0) {
    const ps = this.args.map(arg => arg.toString());
    return this.ruleName + '<' + ps.join(',') + '>';
  } else {
    return this.ruleName;
  }
};

pexprs$7.UnicodeChar.prototype.toString = function() {
  return '\\p{' + this.category + '}';
};

// --------------------------------------------------------------------
// Re-export classes
// --------------------------------------------------------------------

var pexprs$6 = pexprsMain;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Failure = Failure_1;
const {TerminalNode} = nodes$1;
const {assert: assert$1} = common$l;
const {PExpr, Terminal} = pexprs$6;

class CaseInsensitiveTerminal$1 extends PExpr {
  constructor(param) {
    super();
    this.obj = param;
  }

  _getString(state) {
    const terminal = state.currentApplication().args[this.obj.index];
    assert$1(terminal instanceof Terminal, 'expected a Terminal expression');
    return terminal.obj;
  }

  // Implementation of the PExpr API

  allowsSkippingPrecedingSpace() {
    return true;
  }

  eval(state) {
    const {inputStream} = state;
    const origPos = inputStream.pos;
    const matchStr = this._getString(state);
    if (!inputStream.matchString(matchStr, true)) {
      state.processFailure(origPos, this);
      return false;
    } else {
      state.pushBinding(new TerminalNode(matchStr.length), origPos);
      return true;
    }
  }

  getArity() {
    return 1;
  }

  substituteParams(actuals) {
    return new CaseInsensitiveTerminal$1(this.obj.substituteParams(actuals));
  }

  toDisplayString() {
    return this.obj.toDisplayString() + ' (case-insensitive)';
  }

  toFailure(grammar) {
    return new Failure(
        this,
        this.obj.toFailure(grammar) + ' (case-insensitive)',
        'description'
    );
  }

  _isNullable(grammar, memo) {
    return this.obj._isNullable(grammar, memo);
  }
}

var CaseInsensitiveTerminal_1 = CaseInsensitiveTerminal$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Interval$1 = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function InputStream$3(source) {
  this.source = source;
  this.pos = 0;
  this.examinedLength = 0;
}

InputStream$3.prototype = {
  atEnd() {
    const ans = this.pos === this.source.length;
    this.examinedLength = Math.max(this.examinedLength, this.pos + 1);
    return ans;
  },

  next() {
    const ans = this.source[this.pos++];
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return ans;
  },

  nextCharCode() {
    const nextChar = this.next();
    return nextChar && nextChar.charCodeAt(0);
  },

  nextCodePoint() {
    const cp = this.source.slice(this.pos++).codePointAt(0);
    // If the code point is beyond plane 0, it takes up two characters.
    if (cp > 0xffff) {
      this.pos += 1;
    }
    this.examinedLength = Math.max(this.examinedLength, this.pos);
    return cp;
  },

  matchString(s, optIgnoreCase) {
    let idx;
    if (optIgnoreCase) {
      /*
        Case-insensitive comparison is a tricky business. Some notable gotchas include the
        "Turkish I" problem (http://www.i18nguy.com/unicode/turkish-i18n.html) and the fact
        that the German Esszet (ß) turns into "SS" in upper case.

        This is intended to be a locale-invariant comparison, which means it may not obey
        locale-specific expectations (e.g. "i" => "İ").
       */
      for (idx = 0; idx < s.length; idx++) {
        const actual = this.next();
        const expected = s[idx];
        if (actual == null || actual.toUpperCase() !== expected.toUpperCase()) {
          return false;
        }
      }
      return true;
    }
    // Default is case-sensitive comparison.
    for (idx = 0; idx < s.length; idx++) {
      if (this.next() !== s[idx]) {
        return false;
      }
    }
    return true;
  },

  sourceSlice(startIdx, endIdx) {
    return this.source.slice(startIdx, endIdx);
  },

  interval(startIdx, optEndIdx) {
    return new Interval$1(this.source, startIdx, optEndIdx ? optEndIdx : this.pos);
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var InputStream_1 = InputStream$3;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const common$4 = common$l;
const util$4 = util$7;
const Interval = Interval_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function MatchResult$2(
    matcher,
    input,
    startExpr,
    cst,
    cstOffset,
    rightmostFailurePosition,
    optRecordedFailures
) {
  this.matcher = matcher;
  this.input = input;
  this.startExpr = startExpr;
  this._cst = cst;
  this._cstOffset = cstOffset;
  this._rightmostFailurePosition = rightmostFailurePosition;
  this._rightmostFailures = optRecordedFailures;

  if (this.failed()) {
    /* eslint-disable no-invalid-this */
    common$4.defineLazyProperty(this, 'message', function() {
      const detail = 'Expected ' + this.getExpectedText();
      return (
        util$4.getLineAndColumnMessage(this.input, this.getRightmostFailurePosition()) + detail
      );
    });
    common$4.defineLazyProperty(this, 'shortMessage', function() {
      const detail = 'expected ' + this.getExpectedText();
      const errorInfo = util$4.getLineAndColumn(this.input, this.getRightmostFailurePosition());
      return 'Line ' + errorInfo.lineNum + ', col ' + errorInfo.colNum + ': ' + detail;
    });
    /* eslint-enable no-invalid-this */
  }
}

MatchResult$2.prototype.succeeded = function() {
  return !!this._cst;
};

MatchResult$2.prototype.failed = function() {
  return !this.succeeded();
};

MatchResult$2.prototype.getRightmostFailurePosition = function() {
  return this._rightmostFailurePosition;
};

MatchResult$2.prototype.getRightmostFailures = function() {
  if (!this._rightmostFailures) {
    this.matcher.setInput(this.input);
    const matchResultWithFailures = this.matcher._match(
        this.startExpr,
        false,
        this.getRightmostFailurePosition()
    );
    this._rightmostFailures = matchResultWithFailures.getRightmostFailures();
  }
  return this._rightmostFailures;
};

MatchResult$2.prototype.toString = function() {
  return this.succeeded() ?
    '[match succeeded]' :
    '[match failed at position ' + this.getRightmostFailurePosition() + ']';
};

// Return a string summarizing the expected contents of the input stream when
// the match failure occurred.
MatchResult$2.prototype.getExpectedText = function() {
  if (this.succeeded()) {
    throw new Error('cannot get expected text of a successful MatchResult');
  }

  const sb = new common$4.StringBuffer();
  let failures = this.getRightmostFailures();

  // Filter out the fluffy failures to make the default error messages more useful
  failures = failures.filter(failure => !failure.isFluffy());

  for (let idx = 0; idx < failures.length; idx++) {
    if (idx > 0) {
      if (idx === failures.length - 1) {
        sb.append(failures.length > 2 ? ', or ' : ' or ');
      } else {
        sb.append(', ');
      }
    }
    sb.append(failures[idx].toString());
  }
  return sb.contents();
};

MatchResult$2.prototype.getInterval = function() {
  const pos = this.getRightmostFailurePosition();
  return new Interval(this.input, pos, pos);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchResult_1 = MatchResult$2;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function PosInfo$1() {
  this.applicationMemoKeyStack = []; // active applications at this position
  this.memo = {};
  this.maxExaminedLength = 0;
  this.maxRightmostFailureOffset = -1;
  this.currentLeftRecursion = undefined;
}

PosInfo$1.prototype = {
  isActive(application) {
    return this.applicationMemoKeyStack.indexOf(application.toMemoKey()) >= 0;
  },

  enter(application) {
    this.applicationMemoKeyStack.push(application.toMemoKey());
  },

  exit() {
    this.applicationMemoKeyStack.pop();
  },

  startLeftRecursion(headApplication, memoRec) {
    memoRec.isLeftRecursion = true;
    memoRec.headApplication = headApplication;
    memoRec.nextLeftRecursion = this.currentLeftRecursion;
    this.currentLeftRecursion = memoRec;

    const {applicationMemoKeyStack} = this;
    const indexOfFirstInvolvedRule =
      applicationMemoKeyStack.indexOf(headApplication.toMemoKey()) + 1;
    const involvedApplicationMemoKeys = applicationMemoKeyStack.slice(
        indexOfFirstInvolvedRule
    );

    memoRec.isInvolved = function(applicationMemoKey) {
      return involvedApplicationMemoKeys.indexOf(applicationMemoKey) >= 0;
    };

    memoRec.updateInvolvedApplicationMemoKeys = function() {
      for (let idx = indexOfFirstInvolvedRule; idx < applicationMemoKeyStack.length; idx++) {
        const applicationMemoKey = applicationMemoKeyStack[idx];
        if (!this.isInvolved(applicationMemoKey)) {
          involvedApplicationMemoKeys.push(applicationMemoKey);
        }
      }
    };
  },

  endLeftRecursion() {
    this.currentLeftRecursion = this.currentLeftRecursion.nextLeftRecursion;
  },

  // Note: this method doesn't get called for the "head" of a left recursion -- for LR heads,
  // the memoized result (which starts out being a failure) is always used.
  shouldUseMemoizedResult(memoRec) {
    if (!memoRec.isLeftRecursion) {
      return true;
    }
    const {applicationMemoKeyStack} = this;
    for (let idx = 0; idx < applicationMemoKeyStack.length; idx++) {
      const applicationMemoKey = applicationMemoKeyStack[idx];
      if (memoRec.isInvolved(applicationMemoKey)) {
        return false;
      }
    }
    return true;
  },

  memoize(memoKey, memoRec) {
    this.memo[memoKey] = memoRec;
    this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
    this.maxRightmostFailureOffset = Math.max(
        this.maxRightmostFailureOffset,
        memoRec.rightmostFailureOffset
    );
    return memoRec;
  },

  clearObsoleteEntries(pos, invalidatedIdx) {
    if (pos + this.maxExaminedLength <= invalidatedIdx) {
      // Optimization: none of the rule applications that were memoized here examined the
      // interval of the input that changed, so nothing has to be invalidated.
      return;
    }

    const {memo} = this;
    this.maxExaminedLength = 0;
    this.maxRightmostFailureOffset = -1;
    Object.keys(memo).forEach(k => {
      const memoRec = memo[k];
      if (pos + memoRec.examinedLength > invalidatedIdx) {
        delete memo[k];
      } else {
        this.maxExaminedLength = Math.max(this.maxExaminedLength, memoRec.examinedLength);
        this.maxRightmostFailureOffset = Math.max(
            this.maxRightmostFailureOffset,
            memoRec.rightmostFailureOffset
        );
      }
    });
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var PosInfo_1 = PosInfo$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$2 = InputStream_1;
const MatchResult$1 = MatchResult_1;
const PosInfo = PosInfo_1;
const Trace = Trace_1;
const pexprs$5 = pexprs$6;
const util$3 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

let builtInApplySyntacticBody;

util$3.awaitBuiltInRules(builtInRules => {
  builtInApplySyntacticBody = builtInRules.rules.applySyntactic.body;
});

const applySpaces = new pexprs$5.Apply('spaces');

function MatchState$1(matcher, startExpr, optPositionToRecordFailures) {
  this.matcher = matcher;
  this.startExpr = startExpr;

  this.grammar = matcher.grammar;
  this.input = matcher.input;
  this.inputStream = new InputStream$2(matcher.input);
  this.memoTable = matcher.memoTable;

  this._bindings = [];
  this._bindingOffsets = [];
  this._applicationStack = [];
  this._posStack = [0];
  this.inLexifiedContextStack = [false];

  this.rightmostFailurePosition = -1;
  this._rightmostFailurePositionStack = [];
  this._recordedFailuresStack = [];

  if (optPositionToRecordFailures !== undefined) {
    this.positionToRecordFailures = optPositionToRecordFailures;
    this.recordedFailures = Object.create(null);
  }
}

MatchState$1.prototype = {
  posToOffset(pos) {
    return pos - this._posStack[this._posStack.length - 1];
  },

  enterApplication(posInfo, app) {
    this._posStack.push(this.inputStream.pos);
    this._applicationStack.push(app);
    this.inLexifiedContextStack.push(false);
    posInfo.enter(app);
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this.rightmostFailurePosition = -1;
  },

  exitApplication(posInfo, optNode) {
    const origPos = this._posStack.pop();
    this._applicationStack.pop();
    this.inLexifiedContextStack.pop();
    posInfo.exit();

    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        this._rightmostFailurePositionStack.pop()
    );

    if (optNode) {
      this.pushBinding(optNode, origPos);
    }
  },

  enterLexifiedContext() {
    this.inLexifiedContextStack.push(true);
  },

  exitLexifiedContext() {
    this.inLexifiedContextStack.pop();
  },

  currentApplication() {
    return this._applicationStack[this._applicationStack.length - 1];
  },

  inSyntacticContext() {
    const currentApplication = this.currentApplication();
    if (currentApplication) {
      return currentApplication.isSyntactic() && !this.inLexifiedContext();
    } else {
      // The top-level context is syntactic if the start application is.
      return this.startExpr.factors[0].isSyntactic();
    }
  },

  inLexifiedContext() {
    return this.inLexifiedContextStack[this.inLexifiedContextStack.length - 1];
  },

  skipSpaces() {
    this.pushFailuresInfo();
    this.eval(applySpaces);
    this.popBinding();
    this.popFailuresInfo();
    return this.inputStream.pos;
  },

  skipSpacesIfInSyntacticContext() {
    return this.inSyntacticContext() ? this.skipSpaces() : this.inputStream.pos;
  },

  maybeSkipSpacesBefore(expr) {
    if (expr.allowsSkippingPrecedingSpace() && expr !== applySpaces) {
      return this.skipSpacesIfInSyntacticContext();
    } else {
      return this.inputStream.pos;
    }
  },

  pushBinding(node, origPos) {
    this._bindings.push(node);
    this._bindingOffsets.push(this.posToOffset(origPos));
  },

  popBinding() {
    this._bindings.pop();
    this._bindingOffsets.pop();
  },

  numBindings() {
    return this._bindings.length;
  },

  truncateBindings(newLength) {
    // Yes, this is this really faster than setting the `length` property (tested with
    // bin/es5bench on Node v6.1.0).
    // Update 2021-10-25: still true on v14.15.5 — it's ~20% speedup on es5bench.
    while (this._bindings.length > newLength) {
      this.popBinding();
    }
  },

  getCurrentPosInfo() {
    return this.getPosInfo(this.inputStream.pos);
  },

  getPosInfo(pos) {
    let posInfo = this.memoTable[pos];
    if (!posInfo) {
      posInfo = this.memoTable[pos] = new PosInfo();
    }
    return posInfo;
  },

  processFailure(pos, expr) {
    this.rightmostFailurePosition = Math.max(this.rightmostFailurePosition, pos);

    if (this.recordedFailures && pos === this.positionToRecordFailures) {
      const app = this.currentApplication();
      if (app) {
        // Substitute parameters with the actual pexprs that were passed to
        // the current rule.
        expr = expr.substituteParams(app.args);
      }

      this.recordFailure(expr.toFailure(this.grammar), false);
    }
  },

  recordFailure(failure, shouldCloneIfNew) {
    const key = failure.toKey();
    if (!this.recordedFailures[key]) {
      this.recordedFailures[key] = shouldCloneIfNew ? failure.clone() : failure;
    } else if (this.recordedFailures[key].isFluffy() && !failure.isFluffy()) {
      this.recordedFailures[key].clearFluffy();
    }
  },

  recordFailures(failures, shouldCloneIfNew) {
    Object.keys(failures).forEach(key => {
      this.recordFailure(failures[key], shouldCloneIfNew);
    });
  },

  cloneRecordedFailures() {
    if (!this.recordedFailures) {
      return undefined;
    }

    const ans = Object.create(null);
    Object.keys(this.recordedFailures).forEach(key => {
      ans[key] = this.recordedFailures[key].clone();
    });
    return ans;
  },

  getRightmostFailurePosition() {
    return this.rightmostFailurePosition;
  },

  _getRightmostFailureOffset() {
    return this.rightmostFailurePosition >= 0 ?
      this.posToOffset(this.rightmostFailurePosition) :
      -1;
  },

  // Returns the memoized trace entry for `expr` at `pos`, if one exists, `null` otherwise.
  getMemoizedTraceEntry(pos, expr) {
    const posInfo = this.memoTable[pos];
    if (posInfo && expr instanceof pexprs$5.Apply) {
      const memoRec = posInfo.memo[expr.toMemoKey()];
      if (memoRec && memoRec.traceEntry) {
        const entry = memoRec.traceEntry.cloneWithExpr(expr);
        entry.isMemoized = true;
        return entry;
      }
    }
    return null;
  },

  // Returns a new trace entry, with the currently active trace array as its children.
  getTraceEntry(pos, expr, succeeded, bindings) {
    if (expr instanceof pexprs$5.Apply) {
      const app = this.currentApplication();
      const actuals = app ? app.args : [];
      expr = expr.substituteParams(actuals);
    }
    return (
      this.getMemoizedTraceEntry(pos, expr) ||
      new Trace(this.input, pos, this.inputStream.pos, expr, succeeded, bindings, this.trace)
    );
  },

  isTracing() {
    return !!this.trace;
  },

  hasNecessaryInfo(memoRec) {
    if (this.trace && !memoRec.traceEntry) {
      return false;
    }

    if (
      this.recordedFailures &&
      this.inputStream.pos + memoRec.rightmostFailureOffset === this.positionToRecordFailures
    ) {
      return !!memoRec.failuresAtRightmostPosition;
    }

    return true;
  },

  useMemoizedResult(origPos, memoRec) {
    if (this.trace) {
      this.trace.push(memoRec.traceEntry);
    }

    const memoRecRightmostFailurePosition =
      this.inputStream.pos + memoRec.rightmostFailureOffset;
    this.rightmostFailurePosition = Math.max(
        this.rightmostFailurePosition,
        memoRecRightmostFailurePosition
    );
    if (
      this.recordedFailures &&
      this.positionToRecordFailures === memoRecRightmostFailurePosition &&
      memoRec.failuresAtRightmostPosition
    ) {
      this.recordFailures(memoRec.failuresAtRightmostPosition, true);
    }

    this.inputStream.examinedLength = Math.max(
        this.inputStream.examinedLength,
        memoRec.examinedLength + origPos
    );

    if (memoRec.value) {
      this.inputStream.pos += memoRec.matchLength;
      this.pushBinding(memoRec.value, origPos);
      return true;
    }
    return false;
  },

  // Evaluate `expr` and return `true` if it succeeded, `false` otherwise. On success, `bindings`
  // will have `expr.getArity()` more elements than before, and the input stream's position may
  // have increased. On failure, `bindings` and position will be unchanged.
  eval(expr) {
    const {inputStream} = this;
    const origNumBindings = this._bindings.length;

    let origRecordedFailures;
    if (this.recordedFailures) {
      origRecordedFailures = this.recordedFailures;
      this.recordedFailures = Object.create(null);
    }

    const origPos = inputStream.pos;
    const memoPos = this.maybeSkipSpacesBefore(expr);

    let origTrace;
    if (this.trace) {
      origTrace = this.trace;
      this.trace = [];
    }

    // Do the actual evaluation.
    const ans = expr.eval(this);

    if (this.trace) {
      const bindings = this._bindings.slice(origNumBindings);
      const traceEntry = this.getTraceEntry(memoPos, expr, ans, bindings);
      traceEntry.isImplicitSpaces = expr === applySpaces;
      traceEntry.isRootNode = expr === this.startExpr;
      origTrace.push(traceEntry);
      this.trace = origTrace;
    }

    if (ans) {
      if (this.recordedFailures && inputStream.pos === this.positionToRecordFailures) {
        Object.keys(this.recordedFailures).forEach(key => {
          this.recordedFailures[key].makeFluffy();
        });
      }
    } else {
      // Reset the position and the bindings.
      inputStream.pos = origPos;
      this.truncateBindings(origNumBindings);
    }

    if (this.recordedFailures) {
      this.recordFailures(origRecordedFailures, false);
    }

    // The built-in applySyntactic rule needs special handling: we want to skip
    // trailing spaces, just as with the top-level application of a syntactic rule.
    if (expr === builtInApplySyntacticBody) {
      this.skipSpaces();
    }

    return ans;
  },

  getMatchResult() {
    this.eval(this.startExpr);
    let rightmostFailures;
    if (this.recordedFailures) {
      rightmostFailures = Object.keys(this.recordedFailures).map(
          key => this.recordedFailures[key]
      );
    }
    const cst = this._bindings[0];
    if (cst) {
      cst.grammar = this.grammar;
    }
    return new MatchResult$1(
        this.matcher,
        this.input,
        this.startExpr,
        cst,
        this._bindingOffsets[0],
        this.rightmostFailurePosition,
        rightmostFailures
    );
  },

  getTrace() {
    this.trace = [];
    const matchResult = this.getMatchResult();

    // The trace node for the start rule is always the last entry. If it is a syntactic rule,
    // the first entry is for an application of 'spaces'.
    // TODO(pdubroy): Clean this up by introducing a special `Match<startAppl>` rule, which will
    // ensure that there is always a single root trace node.
    const rootTrace = this.trace[this.trace.length - 1];
    rootTrace.result = matchResult;
    return rootTrace;
  },

  pushFailuresInfo() {
    this._rightmostFailurePositionStack.push(this.rightmostFailurePosition);
    this._recordedFailuresStack.push(this.recordedFailures);
  },

  popFailuresInfo() {
    this.rightmostFailurePosition = this._rightmostFailurePositionStack.pop();
    this.recordedFailures = this._recordedFailuresStack.pop();
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var MatchState_1 = MatchState$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const MatchState = MatchState_1;

const pexprs$4 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Matcher$1(grammar) {
  this.grammar = grammar;
  this.memoTable = [];
  this.input = '';
}

Matcher$1.prototype.getInput = function() {
  return this.input;
};

Matcher$1.prototype.setInput = function(str) {
  if (this.input !== str) {
    this.replaceInputRange(0, this.input.length, str);
  }
  return this;
};

Matcher$1.prototype.replaceInputRange = function(startIdx, endIdx, str) {
  const currentInput = this.input;
  if (
    startIdx < 0 ||
    startIdx > currentInput.length ||
    endIdx < 0 ||
    endIdx > currentInput.length ||
    startIdx > endIdx
  ) {
    throw new Error('Invalid indices: ' + startIdx + ' and ' + endIdx);
  }

  // update input
  this.input = currentInput.slice(0, startIdx) + str + currentInput.slice(endIdx);

  // update memo table (similar to the above)
  const restOfMemoTable = this.memoTable.slice(endIdx);
  this.memoTable.length = startIdx;
  for (let idx = 0; idx < str.length; idx++) {
    this.memoTable.push(undefined);
  }
  restOfMemoTable.forEach(function(posInfo) {
    this.memoTable.push(posInfo);
  }, this);

  // Invalidate memoRecs
  for (let pos = 0; pos < startIdx; pos++) {
    const posInfo = this.memoTable[pos];
    if (posInfo) {
      posInfo.clearObsoleteEntries(pos, startIdx);
    }
  }

  return this;
};

Matcher$1.prototype.match = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), false);
};

Matcher$1.prototype.trace = function(optStartApplicationStr) {
  return this._match(this._getStartExpr(optStartApplicationStr), true);
};

Matcher$1.prototype._match = function(startExpr, tracing, optPositionToRecordFailures) {
  const state = new MatchState(this, startExpr, optPositionToRecordFailures);
  return tracing ? state.getTrace() : state.getMatchResult();
};

/*
  Returns the starting expression for this Matcher's associated grammar. If `optStartApplicationStr`
  is specified, it is a string expressing a rule application in the grammar. If not specified, the
  grammar's default start rule will be used.
*/
Matcher$1.prototype._getStartExpr = function(optStartApplicationStr) {
  const applicationStr = optStartApplicationStr || this.grammar.defaultStartRule;
  if (!applicationStr) {
    throw new Error('Missing start rule argument -- the grammar has no default start rule.');
  }

  const startApp = this.grammar.parseApplication(applicationStr);
  return new pexprs$4.Seq([startApp, pexprs$4.end]);
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Matcher_1 = Matcher$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const InputStream$1 = InputStream_1;
const {IterationNode} = nodes$1;
const MatchResult = MatchResult_1;
const common$3 = common$l;
const errors$3 = errors$9;
const util$2 = util$7;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const globalActionStack = [];

const hasOwnProperty = (x, prop) => Object.prototype.hasOwnProperty.call(x, prop);

// ----------------- Wrappers -----------------

// Wrappers decorate CST nodes with all of the functionality (i.e., operations and attributes)
// provided by a Semantics (see below). `Wrapper` is the abstract superclass of all wrappers. A
// `Wrapper` must have `_node` and `_semantics` instance variables, which refer to the CST node and
// Semantics (resp.) for which it was created, and a `_childWrappers` instance variable which is
// used to cache the wrapper instances that are created for its child nodes. Setting these instance
// variables is the responsibility of the constructor of each Semantics-specific subclass of
// `Wrapper`.
class Wrapper {
  constructor(node, sourceInterval, baseInterval) {
    this._node = node;
    this.source = sourceInterval;

    // The interval that the childOffsets of `node` are relative to. It should be the source
    // of the closest Nonterminal node.
    this._baseInterval = baseInterval;

    if (node.isNonterminal()) {
      common$3.assert(sourceInterval === baseInterval);
    }
    this._childWrappers = [];
  }

  toString() {
    return '[semantics wrapper for ' + this._node.grammar.name + ']';
  }

  _forgetMemoizedResultFor(attributeName) {
    // Remove the memoized attribute from the cstNode and all its children.
    delete this._node[this._semantics.attributeKeys[attributeName]];
    this.children.forEach(child => {
      child._forgetMemoizedResultFor(attributeName);
    });
  }

  // Returns the wrapper of the specified child node. Child wrappers are created lazily and
  // cached in the parent wrapper's `_childWrappers` instance variable.
  child(idx) {
    if (!(0 <= idx && idx < this._node.numChildren())) {
      // TODO: Consider throwing an exception here.
      return undefined;
    }
    let childWrapper = this._childWrappers[idx];
    if (!childWrapper) {
      const childNode = this._node.childAt(idx);
      const offset = this._node.childOffsets[idx];

      const source = this._baseInterval.subInterval(offset, childNode.matchLength);
      const base = childNode.isNonterminal() ? source : this._baseInterval;
      childWrapper = this._childWrappers[idx] = this._semantics.wrap(childNode, source, base);
    }
    return childWrapper;
  }

  // Returns an array containing the wrappers of all of the children of the node associated
  // with this wrapper.
  _children() {
    // Force the creation of all child wrappers
    for (let idx = 0; idx < this._node.numChildren(); idx++) {
      this.child(idx);
    }
    return this._childWrappers;
  }

  // Returns `true` if the CST node associated with this wrapper corresponds to an iteration
  // expression, i.e., a Kleene-*, Kleene-+, or an optional. Returns `false` otherwise.
  isIteration() {
    return this._node.isIteration();
  }

  // Returns `true` if the CST node associated with this wrapper is a terminal node, `false`
  // otherwise.
  isTerminal() {
    return this._node.isTerminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node, `false`
  // otherwise.
  isNonterminal() {
    return this._node.isNonterminal();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a syntactic rule, `false` otherwise.
  isSyntactic() {
    return this.isNonterminal() && this._node.isSyntactic();
  }

  // Returns `true` if the CST node associated with this wrapper is a nonterminal node
  // corresponding to a lexical rule, `false` otherwise.
  isLexical() {
    return this.isNonterminal() && this._node.isLexical();
  }

  // Returns `true` if the CST node associated with this wrapper is an iterator node
  // having either one or no child (? operator), `false` otherwise.
  // Otherwise, throws an exception.
  isOptional() {
    return this._node.isOptional();
  }

  // Create a new _iter wrapper in the same semantics as this wrapper.
  iteration(optChildWrappers) {
    const childWrappers = optChildWrappers || [];

    const childNodes = childWrappers.map(c => c._node);
    const iter = new IterationNode(childNodes, [], -1, false);

    const wrapper = this._semantics.wrap(iter, null, null);
    wrapper._childWrappers = childWrappers;
    return wrapper;
  }

  // Returns an array containing the children of this CST node.
  get children() {
    return this._children();
  }

  // Returns the name of grammar rule that created this CST node.
  get ctorName() {
    return this._node.ctorName;
  }

  // TODO: Remove this eventually (deprecated in v0.12).
  get interval() {
    throw new Error('The `interval` property is deprecated -- use `source` instead');
  }

  // Returns the number of children of this CST node.
  get numChildren() {
    return this._node.numChildren();
  }

  // Returns the contents of the input stream consumed by this CST node.
  get sourceString() {
    return this.source.contents;
  }
}

// ----------------- Semantics -----------------

// A Semantics is a container for a family of Operations and Attributes for a given grammar.
// Semantics enable modularity (different clients of a grammar can create their set of operations
// and attributes in isolation) and extensibility even when operations and attributes are mutually-
// recursive. This constructor should not be called directly except from
// `Semantics.createSemantics`. The normal ways to create a Semantics, given a grammar 'g', are
// `g.createSemantics()` and `g.extendSemantics(parentSemantics)`.
function Semantics$2(grammar, superSemantics) {
  const self = this;
  this.grammar = grammar;
  this.checkedActionDicts = false;

  // Constructor for wrapper instances, which are passed as the arguments to the semantic actions
  // of an operation or attribute. Operations and attributes require double dispatch: the semantic
  // action is chosen based on both the node's type and the semantics. Wrappers ensure that
  // the `execute` method is called with the correct (most specific) semantics object as an
  // argument.
  this.Wrapper = class extends (superSemantics ? superSemantics.Wrapper : Wrapper) {
    constructor(node, sourceInterval, baseInterval) {
      super(node, sourceInterval, baseInterval);
      self.checkActionDictsIfHaventAlready();
      this._semantics = self;
    }
  };

  this.super = superSemantics;
  if (superSemantics) {
    if (!(grammar.equals(this.super.grammar) || grammar._inheritsFrom(this.super.grammar))) {
      throw new Error(
          "Cannot extend a semantics for grammar '" +
          this.super.grammar.name +
          "' for use with grammar '" +
          grammar.name +
          "' (not a sub-grammar)"
      );
    }
    this.operations = Object.create(this.super.operations);
    this.attributes = Object.create(this.super.attributes);
    this.attributeKeys = Object.create(null);

    // Assign unique symbols for each of the attributes inherited from the super-semantics so that
    // they are memoized independently.
    // eslint-disable-next-line guard-for-in
    for (const attributeName in this.attributes) {
      Object.defineProperty(this.attributeKeys, attributeName, {
        value: util$2.uniqueId(attributeName),
      });
    }
  } else {
    this.operations = Object.create(null);
    this.attributes = Object.create(null);
    this.attributeKeys = Object.create(null);
  }
}

Semantics$2.prototype.toString = function() {
  return '[semantics for ' + this.grammar.name + ']';
};

Semantics$2.prototype.checkActionDictsIfHaventAlready = function() {
  if (!this.checkedActionDicts) {
    this.checkActionDicts();
    this.checkedActionDicts = true;
  }
};

// Checks that the action dictionaries for all operations and attributes in this semantics,
// including the ones that were inherited from the super-semantics, agree with the grammar.
// Throws an exception if one or more of them doesn't.
Semantics$2.prototype.checkActionDicts = function() {
  let name;
  // eslint-disable-next-line guard-for-in
  for (name in this.operations) {
    this.operations[name].checkActionDict(this.grammar);
  }
  // eslint-disable-next-line guard-for-in
  for (name in this.attributes) {
    this.attributes[name].checkActionDict(this.grammar);
  }
};

Semantics$2.prototype.toRecipe = function(semanticsOnly) {
  function hasSuperSemantics(s) {
    return s.super !== Semantics$2.BuiltInSemantics._getSemantics();
  }

  let str = '(function(g) {\n';
  if (hasSuperSemantics(this)) {
    str += '  var semantics = ' + this.super.toRecipe(true) + '(g';

    const superSemanticsGrammar = this.super.grammar;
    let relatedGrammar = this.grammar;
    while (relatedGrammar !== superSemanticsGrammar) {
      str += '.superGrammar';
      relatedGrammar = relatedGrammar.superGrammar;
    }

    str += ');\n';
    str += '  return g.extendSemantics(semantics)';
  } else {
    str += '  return g.createSemantics()';
  }
  ['Operation', 'Attribute'].forEach(type => {
    const semanticOperations = this[type.toLowerCase() + 's'];
    Object.keys(semanticOperations).forEach(name => {
      const {actionDict, formals, builtInDefault} = semanticOperations[name];

      let signature = name;
      if (formals.length > 0) {
        signature += '(' + formals.join(', ') + ')';
      }

      let method;
      if (hasSuperSemantics(this) && this.super[type.toLowerCase() + 's'][name]) {
        method = 'extend' + type;
      } else {
        method = 'add' + type;
      }
      str += '\n    .' + method + '(' + JSON.stringify(signature) + ', {';

      const srcArray = [];
      Object.keys(actionDict).forEach(actionName => {
        if (actionDict[actionName] !== builtInDefault) {
          let source = actionDict[actionName].toString().trim();

          // Convert method shorthand to plain old function syntax.
          // https://github.com/harc/ohm/issues/263
          source = source.replace(/^.*\(/, 'function(');

          srcArray.push('\n      ' + JSON.stringify(actionName) + ': ' + source);
        }
      });
      str += srcArray.join(',') + '\n    })';
    });
  });
  str += ';\n  })';

  if (!semanticsOnly) {
    str =
      '(function() {\n' +
      '  var grammar = this.fromRecipe(' +
      this.grammar.toRecipe() +
      ');\n' +
      '  var semantics = ' +
      str +
      '(grammar);\n' +
      '  return semantics;\n' +
      '});\n';
  }

  return str;
};

function parseSignature$1(signature, type) {
  if (!Semantics$2.prototypeGrammar) {
    // The Operations and Attributes grammar won't be available while Ohm is loading,
    // but we can get away the following simplification b/c none of the operations
    // that are used while loading take arguments.
    common$3.assert(signature.indexOf('(') === -1);
    return {
      name: signature,
      formals: [],
    };
  }

  const r = Semantics$2.prototypeGrammar.match(
      signature,
    type === 'operation' ? 'OperationSignature' : 'AttributeSignature'
  );
  if (r.failed()) {
    throw new Error(r.message);
  }

  return Semantics$2.prototypeGrammarSemantics(r).parse();
}

function newDefaultAction(type, name, doIt) {
  return function(...children) {
    const thisThing = this._semantics.operations[name] || this._semantics.attributes[name];
    const args = thisThing.formals.map(formal => this.args[formal]);

    if (!this.isIteration() && children.length === 1) {
      // This CST node corresponds to a non-terminal in the grammar (e.g., AddExpr). The fact that
      // we got here means that this action dictionary doesn't have an action for this particular
      // non-terminal or a generic `_nonterminal` action.
      // As a convenience, if this node only has one child, we just return the result of applying
      // this operation / attribute to the child node.
      return doIt.apply(children[0], args);
    } else {
      // Otherwise, we throw an exception to let the programmer know that we don't know what
      // to do with this node.
      throw errors$3.missingSemanticAction(this.ctorName, name, type, globalActionStack);
    }
  };
}

Semantics$2.prototype.addOperationOrAttribute = function(type, signature, actionDict) {
  const typePlural = type + 's';

  const parsedNameAndFormalArgs = parseSignature$1(signature, type);
  const {name} = parsedNameAndFormalArgs;
  const {formals} = parsedNameAndFormalArgs;

  // TODO: check that there are no duplicate formal arguments

  this.assertNewName(name, type);

  // Create the action dictionary for this operation / attribute that contains a `_default` action
  // which defines the default behavior of iteration, terminal, and non-terminal nodes...
  const builtInDefault = newDefaultAction(type, name, doIt);
  const realActionDict = {_default: builtInDefault};
  // ... and add in the actions supplied by the programmer, which may override some or all of the
  // default ones.
  Object.keys(actionDict).forEach(name => {
    realActionDict[name] = actionDict[name];
  });

  const entry =
    type === 'operation' ?
      new Operation(name, formals, realActionDict, builtInDefault) :
      new Attribute(name, realActionDict, builtInDefault);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  entry.checkActionDict(this.grammar);

  this[typePlural][name] = entry;

  function doIt(...args) {
    // Dispatch to most specific version of this operation / attribute -- it may have been
    // overridden by a sub-semantics.
    const thisThing = this._semantics[typePlural][name];

    // Check that the caller passed the correct number of arguments.
    if (arguments.length !== thisThing.formals.length) {
      throw new Error(
          'Invalid number of arguments passed to ' +
          name +
          ' ' +
          type +
          ' (expected ' +
          thisThing.formals.length +
          ', got ' +
          arguments.length +
          ')'
      );
    }

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [idx, val] of Object.entries(args)) {
      const formal = thisThing.formals[idx];
      argsObj[formal] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = thisThing.execute(this._semantics, this);
    this.args = oldArgs;
    return ans;
  }

  if (type === 'operation') {
    this.Wrapper.prototype[name] = doIt;
    this.Wrapper.prototype[name].toString = function() {
      return '[' + name + ' operation]';
    };
  } else {
    Object.defineProperty(this.Wrapper.prototype, name, {
      get: doIt,
      configurable: true, // So the property can be deleted.
    });
    Object.defineProperty(this.attributeKeys, name, {
      value: util$2.uniqueId(name),
    });
  }
};

Semantics$2.prototype.extendOperationOrAttribute = function(type, name, actionDict) {
  const typePlural = type + 's';

  // Make sure that `name` really is just a name, i.e., that it doesn't also contain formals.
  parseSignature$1(name, 'attribute');

  if (!(this.super && name in this.super[typePlural])) {
    throw new Error(
        'Cannot extend ' +
        type +
        " '" +
        name +
        "': did not inherit an " +
        type +
        ' with that name'
    );
  }
  if (hasOwnProperty(this[typePlural], name)) {
    throw new Error('Cannot extend ' + type + " '" + name + "' again");
  }

  // Create a new operation / attribute whose actionDict delegates to the super operation /
  // attribute's actionDict, and which has all the keys from `inheritedActionDict`.
  const inheritedFormals = this[typePlural][name].formals;
  const inheritedActionDict = this[typePlural][name].actionDict;
  const newActionDict = Object.create(inheritedActionDict);
  Object.keys(actionDict).forEach(name => {
    newActionDict[name] = actionDict[name];
  });

  this[typePlural][name] =
    type === 'operation' ?
      new Operation(name, inheritedFormals, newActionDict) :
      new Attribute(name, newActionDict);

  // The following check is not strictly necessary (it will happen later anyway) but it's better to
  // catch errors early.
  this[typePlural][name].checkActionDict(this.grammar);
};

Semantics$2.prototype.assertNewName = function(name, type) {
  if (hasOwnProperty(Wrapper.prototype, name)) {
    throw new Error('Cannot add ' + type + " '" + name + "': that's a reserved name");
  }
  if (name in this.operations) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an operation with that name already exists"
    );
  }
  if (name in this.attributes) {
    throw new Error(
        'Cannot add ' + type + " '" + name + "': an attribute with that name already exists"
    );
  }
};

// Returns a wrapper for the given CST `node` in this semantics.
// If `node` is already a wrapper, returns `node` itself.  // TODO: why is this needed?
Semantics$2.prototype.wrap = function(node, source, optBaseInterval) {
  const baseInterval = optBaseInterval || source;
  return node instanceof this.Wrapper ? node : new this.Wrapper(node, source, baseInterval);
};

// Creates a new Semantics instance for `grammar`, inheriting operations and attributes from
// `optSuperSemantics`, if it is specified. Returns a function that acts as a proxy for the new
// Semantics instance. When that function is invoked with a CST node as an argument, it returns
// a wrapper for that node which gives access to the operations and attributes provided by this
// semantics.
Semantics$2.createSemantics = function(grammar, optSuperSemantics) {
  const s = new Semantics$2(
      grammar,
    optSuperSemantics !== undefined ?
      optSuperSemantics :
      Semantics$2.BuiltInSemantics._getSemantics()
  );

  // To enable clients to invoke a semantics like a function, return a function that acts as a proxy
  // for `s`, which is the real `Semantics` instance.
  const proxy = function ASemantics(matchResult) {
    if (!(matchResult instanceof MatchResult)) {
      throw new TypeError(
          'Semantics expected a MatchResult, but got ' +
          common$3.unexpectedObjToString(matchResult)
      );
    }
    if (matchResult.failed()) {
      throw new TypeError('cannot apply Semantics to ' + matchResult.toString());
    }

    const cst = matchResult._cst;
    if (cst.grammar !== grammar) {
      throw new Error(
          "Cannot use a MatchResult from grammar '" +
          cst.grammar.name +
          "' with a semantics for '" +
          grammar.name +
          "'"
      );
    }
    const inputStream = new InputStream$1(matchResult.input);
    return s.wrap(cst, inputStream.interval(matchResult._cstOffset, matchResult.input.length));
  };

  // Forward public methods from the proxy to the semantics instance.
  proxy.addOperation = function(signature, actionDict) {
    s.addOperationOrAttribute('operation', signature, actionDict);
    return proxy;
  };
  proxy.extendOperation = function(name, actionDict) {
    s.extendOperationOrAttribute('operation', name, actionDict);
    return proxy;
  };
  proxy.addAttribute = function(name, actionDict) {
    s.addOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy.extendAttribute = function(name, actionDict) {
    s.extendOperationOrAttribute('attribute', name, actionDict);
    return proxy;
  };
  proxy._getActionDict = function(operationOrAttributeName) {
    const action =
      s.operations[operationOrAttributeName] || s.attributes[operationOrAttributeName];
    if (!action) {
      throw new Error(
          '"' +
          operationOrAttributeName +
          '" is not a valid operation or attribute ' +
          'name in this semantics for "' +
          grammar.name +
          '"'
      );
    }
    return action.actionDict;
  };
  proxy._remove = function(operationOrAttributeName) {
    let semantic;
    if (operationOrAttributeName in s.operations) {
      semantic = s.operations[operationOrAttributeName];
      delete s.operations[operationOrAttributeName];
    } else if (operationOrAttributeName in s.attributes) {
      semantic = s.attributes[operationOrAttributeName];
      delete s.attributes[operationOrAttributeName];
    }
    delete s.Wrapper.prototype[operationOrAttributeName];
    return semantic;
  };
  proxy.getOperationNames = function() {
    return Object.keys(s.operations);
  };
  proxy.getAttributeNames = function() {
    return Object.keys(s.attributes);
  };
  proxy.getGrammar = function() {
    return s.grammar;
  };
  proxy.toRecipe = function(semanticsOnly) {
    return s.toRecipe(semanticsOnly);
  };

  // Make the proxy's toString() work.
  proxy.toString = s.toString.bind(s);

  // Returns the semantics for the proxy.
  proxy._getSemantics = function() {
    return s;
  };

  return proxy;
};

// ----------------- Operation -----------------

// An Operation represents a function to be applied to a concrete syntax tree (CST) -- it's very
// similar to a Visitor (http://en.wikipedia.org/wiki/Visitor_pattern). An operation is executed by
// recursively walking the CST, and at each node, invoking the matching semantic action from
// `actionDict`. See `Operation.prototype.execute` for details of how a CST node's matching semantic
// action is found.
class Operation {
  constructor(name, formals, actionDict, builtInDefault) {
    this.name = name;
    this.formals = formals;
    this.actionDict = actionDict;
    this.builtInDefault = builtInDefault;
  }

  checkActionDict(grammar) {
    grammar._checkTopDownActionDict(this.typeName, this.name, this.actionDict);
  }

  // Execute this operation on the CST node associated with `nodeWrapper` in the context of the
  // given Semantics instance.
  execute(semantics, nodeWrapper) {
    try {
      // Look for a semantic action whose name matches the node's constructor name, which is either
      // the name of a rule in the grammar, or '_terminal' (for a terminal node), or '_iter' (for an
      // iteration node).
      const {ctorName} = nodeWrapper._node;
      let actionFn = this.actionDict[ctorName];
      if (actionFn) {
        globalActionStack.push([this, ctorName]);
        return actionFn.apply(nodeWrapper, nodeWrapper._children());
      }

      // The action dictionary does not contain a semantic action for this specific type of node.
      // If this is a nonterminal node and the programmer has provided a `_nonterminal` semantic
      // action, we invoke it:
      if (nodeWrapper.isNonterminal()) {
        actionFn = this.actionDict._nonterminal;
        if (actionFn) {
          globalActionStack.push([this, '_nonterminal', ctorName]);
          return actionFn.apply(nodeWrapper, nodeWrapper._children());
        }
      }

      // Otherwise, we invoke the '_default' semantic action.
      globalActionStack.push([this, 'default action', ctorName]);
      return this.actionDict._default.apply(nodeWrapper, nodeWrapper._children());
    } finally {
      globalActionStack.pop();
    }
  }
}

Operation.prototype.typeName = 'operation';

// ----------------- Attribute -----------------

// Attributes are Operations whose results are memoized. This means that, for any given semantics,
// the semantic action for a CST node will be invoked no more than once.
class Attribute extends Operation {
  constructor(name, actionDict, builtInDefault) {
    super(name, [], actionDict, builtInDefault);
  }

  execute(semantics, nodeWrapper) {
    const node = nodeWrapper._node;
    const key = semantics.attributeKeys[this.name];
    if (!hasOwnProperty(node, key)) {
      // The following is a super-send -- isn't JS beautiful? :/
      node[key] = Operation.prototype.execute.call(this, semantics, nodeWrapper);
    }
    return node[key];
  }
}

Attribute.prototype.typeName = 'attribute';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Semantics_1 = Semantics$2;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const CaseInsensitiveTerminal = CaseInsensitiveTerminal_1;
const Matcher = Matcher_1;
const Semantics$1 = Semantics_1;
const common$2 = common$l;
const errors$2 = errors$9;
const pexprs$3 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

const SPECIAL_ACTION_NAMES = ['_iter', '_terminal', '_nonterminal', '_default'];

function getSortedRuleValues(grammar) {
  return Object.keys(grammar.rules)
      .sort()
      .map(name => grammar.rules[name]);
}

// Until ES2019, JSON was not a valid subset of JavaScript because U+2028 (line separator)
// and U+2029 (paragraph separator) are allowed in JSON string literals, but not in JS.
// This function properly encodes those two characters so that the resulting string is
// represents both valid JSON, and valid JavaScript (for ES2018 and below).
// See https://v8.dev/features/subsume-json for more details.
const jsonToJS = str => str.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');

function Grammar$4(name, superGrammar, rules, optDefaultStartRule) {
  this.name = name;
  this.superGrammar = superGrammar;
  this.rules = rules;
  if (optDefaultStartRule) {
    if (!(optDefaultStartRule in rules)) {
      throw new Error(
          "Invalid start rule: '" +
          optDefaultStartRule +
          "' is not a rule in grammar '" +
          name +
          "'"
      );
    }
    this.defaultStartRule = optDefaultStartRule;
  }
}

let ohmGrammar$2;
let buildGrammar$1;

// This method is called from main.js once Ohm has loaded.
Grammar$4.initApplicationParser = function(grammar, builderFn) {
  ohmGrammar$2 = grammar;
  buildGrammar$1 = builderFn;
};

Grammar$4.prototype = {
  matcher() {
    return new Matcher(this);
  },

  // Return true if the grammar is a built-in grammar, otherwise false.
  // NOTE: This might give an unexpected result if called before BuiltInRules is defined!
  isBuiltIn() {
    return this === Grammar$4.ProtoBuiltInRules || this === Grammar$4.BuiltInRules;
  },

  equals(g) {
    if (this === g) {
      return true;
    }
    // Do the cheapest comparisons first.
    if (
      g == null ||
      this.name !== g.name ||
      this.defaultStartRule !== g.defaultStartRule ||
      !(this.superGrammar === g.superGrammar || this.superGrammar.equals(g.superGrammar))
    ) {
      return false;
    }
    const myRules = getSortedRuleValues(this);
    const otherRules = getSortedRuleValues(g);
    return (
      myRules.length === otherRules.length &&
      myRules.every((rule, i) => {
        return (
          rule.description === otherRules[i].description &&
          rule.formals.join(',') === otherRules[i].formals.join(',') &&
          rule.body.toString() === otherRules[i].body.toString()
        );
      })
    );
  },

  match(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.match(optStartApplication);
  },

  trace(input, optStartApplication) {
    const m = this.matcher();
    m.replaceInputRange(0, 0, input);
    return m.trace(optStartApplication);
  },

  createSemantics() {
    return Semantics$1.createSemantics(this);
  },

  extendSemantics(superSemantics) {
    return Semantics$1.createSemantics(this, superSemantics._getSemantics());
  },

  // Check that every key in `actionDict` corresponds to a semantic action, and that it maps to
  // a function of the correct arity. If not, throw an exception.
  _checkTopDownActionDict(what, name, actionDict) {
    const problems = [];

    // eslint-disable-next-line guard-for-in
    for (const k in actionDict) {
      const v = actionDict[k];
      const isSpecialAction = SPECIAL_ACTION_NAMES.includes(k);

      if (!isSpecialAction && !(k in this.rules)) {
        problems.push(`'${k}' is not a valid semantic action for '${this.name}'`);
        continue;
      }
      if (typeof v !== 'function') {
        problems.push(`'${k}' must be a function in an action dictionary for '${this.name}'`);
        continue;
      }
      const actual = v.length;
      const expected = this._topDownActionArity(k);
      if (actual !== expected) {
        let details;
        if (k === '_iter' || k === '_nonterminal') {
          details =
            `it should use a rest parameter, e.g. \`${k}(...children) {}\`. ` +
            'NOTE: this is new in Ohm v16 — see https://ohmjs.org/d/ati for details.';
        } else {
          details = `expected ${expected}, got ${actual}`;
        }
        problems.push(`Semantic action '${k}' has the wrong arity: ${details}`);
      }
    }
    if (problems.length > 0) {
      const prettyProblems = problems.map(problem => '- ' + problem);
      const error = new Error(
          [
            `Found errors in the action dictionary of the '${name}' ${what}:`,
            ...prettyProblems,
          ].join('\n')
      );
      error.problems = problems;
      throw error;
    }
  },

  // Return the expected arity for a semantic action named `actionName`, which
  // is either a rule name or a special action name like '_nonterminal'.
  _topDownActionArity(actionName) {
    // All special actions have an expected arity of 0, though all but _terminal
    // are expected to use the rest parameter syntax (e.g. `_iter(...children)`).
    // This is considered to have arity 0, i.e. `((...args) => {}).length` is 0.
    return SPECIAL_ACTION_NAMES.includes(actionName) ?
      0 :
      this.rules[actionName].body.getArity();
  },

  _inheritsFrom(grammar) {
    let g = this.superGrammar;
    while (g) {
      if (g.equals(grammar, true)) {
        return true;
      }
      g = g.superGrammar;
    }
    return false;
  },

  toRecipe(superGrammarExpr = undefined) {
    const metaInfo = {};
    // Include the grammar source if it is available.
    if (this.source) {
      metaInfo.source = this.source.contents;
    }

    let startRule = null;
    if (this.defaultStartRule) {
      startRule = this.defaultStartRule;
    }

    const rules = {};
    Object.keys(this.rules).forEach(ruleName => {
      const ruleInfo = this.rules[ruleName];
      const {body} = ruleInfo;
      const isDefinition = !this.superGrammar || !this.superGrammar.rules[ruleName];

      let operation;
      if (isDefinition) {
        operation = 'define';
      } else {
        operation = body instanceof pexprs$3.Extend ? 'extend' : 'override';
      }

      const metaInfo = {};
      if (ruleInfo.source && this.source) {
        const adjusted = ruleInfo.source.relativeTo(this.source);
        metaInfo.sourceInterval = [adjusted.startIdx, adjusted.endIdx];
      }

      const description = isDefinition ? ruleInfo.description : null;
      const bodyRecipe = body.outputRecipe(ruleInfo.formals, this.source);

      rules[ruleName] = [
        operation, // "define"/"extend"/"override"
        metaInfo,
        description,
        ruleInfo.formals,
        bodyRecipe,
      ];
    });

    // If the caller provided an expression to use for the supergrammar, use that.
    // Otherwise, if the supergrammar is a user grammar, use its recipe inline.
    let superGrammarOutput = 'null';
    if (superGrammarExpr) {
      superGrammarOutput = superGrammarExpr;
    } else if (this.superGrammar && !this.superGrammar.isBuiltIn()) {
      superGrammarOutput = this.superGrammar.toRecipe();
    }

    const recipeElements = [
      ...['grammar', metaInfo, this.name].map(JSON.stringify),
      superGrammarOutput,
      ...[startRule, rules].map(JSON.stringify),
    ];
    return jsonToJS(`[${recipeElements.join(',')}]`);
  },

  // TODO: Come up with better names for these methods.
  // TODO: Write the analog of these methods for inherited attributes.
  toOperationActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },
  toAttributeActionDictionaryTemplate() {
    return this._toOperationOrAttributeActionDictionaryTemplate();
  },

  _toOperationOrAttributeActionDictionaryTemplate() {
    // TODO: add the super-grammar's templates at the right place, e.g., a case for AddExpr_plus
    // should appear next to other cases of AddExpr.

    const sb = new common$2.StringBuffer();
    sb.append('{');

    let first = true;
    // eslint-disable-next-line guard-for-in
    for (const ruleName in this.rules) {
      const {body} = this.rules[ruleName];
      if (first) {
        first = false;
      } else {
        sb.append(',');
      }
      sb.append('\n');
      sb.append('  ');
      this.addSemanticActionTemplate(ruleName, body, sb);
    }

    sb.append('\n}');
    return sb.contents();
  },

  addSemanticActionTemplate(ruleName, body, sb) {
    sb.append(ruleName);
    sb.append(': function(');
    const arity = this._topDownActionArity(ruleName);
    sb.append(common$2.repeat('_', arity).join(', '));
    sb.append(') {\n');
    sb.append('  }');
  },

  // Parse a string which expresses a rule application in this grammar, and return the
  // resulting Apply node.
  parseApplication(str) {
    let app;
    if (str.indexOf('<') === -1) {
      // simple application
      app = new pexprs$3.Apply(str);
    } else {
      // parameterized application
      const cst = ohmGrammar$2.match(str, 'Base_application');
      app = buildGrammar$1(cst, {});
    }

    // Ensure that the application is valid.
    if (!(app.ruleName in this.rules)) {
      throw errors$2.undeclaredRule(app.ruleName, this.name);
    }
    const {formals} = this.rules[app.ruleName];
    if (formals.length !== app.args.length) {
      const {source} = this.rules[app.ruleName];
      throw errors$2.wrongNumberOfParameters(
          app.ruleName,
          formals.length,
          app.args.length,
          source
      );
    }
    return app;
  },
};

// The following grammar contains a few rules that couldn't be written  in "userland".
// At the bottom of src/main.js, we create a sub-grammar of this grammar that's called
// `BuiltInRules`. That grammar contains several convenience rules, e.g., `letter` and
// `digit`, and is implicitly the super-grammar of any grammar whose super-grammar
// isn't specified.
Grammar$4.ProtoBuiltInRules = new Grammar$4(
    'ProtoBuiltInRules', // name
    undefined, // supergrammar
    {
      any: {
        body: pexprs$3.any,
        formals: [],
        description: 'any character',
        primitive: true,
      },
      end: {
        body: pexprs$3.end,
        formals: [],
        description: 'end of input',
        primitive: true,
      },

      caseInsensitive: {
        body: new CaseInsensitiveTerminal(new pexprs$3.Param(0)),
        formals: ['str'],
        primitive: true,
      },
      lower: {
        body: new pexprs$3.UnicodeChar('Ll'),
        formals: [],
        description: 'a lowercase letter',
        primitive: true,
      },
      upper: {
        body: new pexprs$3.UnicodeChar('Lu'),
        formals: [],
        description: 'an uppercase letter',
        primitive: true,
      },
      // Union of Lt (titlecase), Lm (modifier), and Lo (other), i.e. any letter not in Ll or Lu.
      unicodeLtmo: {
        body: new pexprs$3.UnicodeChar('Ltmo'),
        formals: [],
        description: 'a Unicode character in Lt, Lm, or Lo',
        primitive: true,
      },

      // These rules are not truly primitive (they could be written in userland) but are defined
      // here for bootstrapping purposes.
      spaces: {
        body: new pexprs$3.Star(new pexprs$3.Apply('space')),
        formals: [],
      },
      space: {
        body: new pexprs$3.Range('\x00', ' '),
        formals: [],
        description: 'a space',
      },
    }
);

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Grammar_1 = Grammar$4;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$3 = Grammar_1;
const InputStream = InputStream_1;
const common$1 = common$l;
const errors$1 = errors$9;
const pexprs$2 = pexprs$6;

// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Constructors

function GrammarDecl$1(name) {
  this.name = name;
}

// Helpers

GrammarDecl$1.prototype.sourceInterval = function(startIdx, endIdx) {
  return this.source.subInterval(startIdx, endIdx - startIdx);
};

GrammarDecl$1.prototype.ensureSuperGrammar = function() {
  if (!this.superGrammar) {
    this.withSuperGrammar(
      // TODO: The conditional expression below is an ugly hack. It's kind of ok because
      // I doubt anyone will ever try to declare a grammar called `BuiltInRules`. Still,
      // we should try to find a better way to do this.
      this.name === 'BuiltInRules' ? Grammar$3.ProtoBuiltInRules : Grammar$3.BuiltInRules
    );
  }
  return this.superGrammar;
};

GrammarDecl$1.prototype.ensureSuperGrammarRuleForOverriding = function(name, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotOverrideUndeclaredRule(name, this.superGrammar.name, source);
  }
  return ruleInfo;
};

GrammarDecl$1.prototype.installOverriddenOrExtendedRule = function(
    name,
    formals,
    body,
    source
) {
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  const expectedFormals = ruleInfo.formals;
  const expectedNumFormals = expectedFormals ? expectedFormals.length : 0;
  if (formals.length !== expectedNumFormals) {
    throw errors$1.wrongNumberOfParameters(name, expectedNumFormals, formals.length, source);
  }
  return this.install(name, formals, body, ruleInfo.description, source);
};

GrammarDecl$1.prototype.install = function(name, formals, body, description, source) {
  this.rules[name] = {
    body: body.introduceParams(formals),
    formals,
    description,
    source,
  };
  return this;
};

// Stuff that you should only do once

GrammarDecl$1.prototype.withSuperGrammar = function(superGrammar) {
  if (this.superGrammar) {
    throw new Error('the super grammar of a GrammarDecl cannot be set more than once');
  }
  this.superGrammar = superGrammar;
  this.rules = Object.create(superGrammar.rules);

  // Grammars with an explicit supergrammar inherit a default start rule.
  if (!superGrammar.isBuiltIn()) {
    this.defaultStartRule = superGrammar.defaultStartRule;
  }
  return this;
};

GrammarDecl$1.prototype.withDefaultStartRule = function(ruleName) {
  this.defaultStartRule = ruleName;
  return this;
};

GrammarDecl$1.prototype.withSource = function(source) {
  this.source = new InputStream(source).interval(0, source.length);
  return this;
};

// Creates a Grammar instance, and if it passes the sanity checks, returns it.
GrammarDecl$1.prototype.build = function() {
  const grammar = new Grammar$3(
      this.name,
      this.ensureSuperGrammar(),
      this.rules,
      this.defaultStartRule
  );

  // TODO: change the pexpr.prototype.assert... methods to make them add
  // exceptions to an array that's provided as an arg. Then we'll be able to
  // show more than one error of the same type at a time.
  // TODO: include the offending pexpr in the errors, that way we can show
  // the part of the source that caused it.
  const grammarErrors = [];
  let grammarHasInvalidApplications = false;
  Object.keys(grammar.rules).forEach(ruleName => {
    const {body} = grammar.rules[ruleName];
    try {
      body.assertChoicesHaveUniformArity(ruleName);
    } catch (e) {
      grammarErrors.push(e);
    }
    try {
      body.assertAllApplicationsAreValid(ruleName, grammar);
    } catch (e) {
      grammarErrors.push(e);
      grammarHasInvalidApplications = true;
    }
  });
  if (!grammarHasInvalidApplications) {
    // The following check can only be done if the grammar has no invalid applications.
    Object.keys(grammar.rules).forEach(ruleName => {
      const {body} = grammar.rules[ruleName];
      try {
        body.assertIteratedExprsAreNotNullable(grammar, []);
      } catch (e) {
        grammarErrors.push(e);
      }
    });
  }
  if (grammarErrors.length > 0) {
    errors$1.throwErrors(grammarErrors);
  }
  if (this.source) {
    grammar.source = this.source;
  }

  return grammar;
};

// Rule declarations

GrammarDecl$1.prototype.define = function(name, formals, body, description, source) {
  this.ensureSuperGrammar();
  if (this.superGrammar.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.superGrammar.name, source);
  } else if (this.rules[name]) {
    throw errors$1.duplicateRuleDeclaration(name, this.name, this.name, source);
  }
  const duplicateParameterNames = common$1.getDuplicates(formals);
  if (duplicateParameterNames.length > 0) {
    throw errors$1.duplicateParameterNames(name, duplicateParameterNames, source);
  }
  return this.install(name, formals, body, description, source);
};

GrammarDecl$1.prototype.override = function(name, formals, body, descIgnored, source) {
  this.ensureSuperGrammarRuleForOverriding(name, source);
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

GrammarDecl$1.prototype.extend = function(name, formals, fragment, descIgnored, source) {
  const ruleInfo = this.ensureSuperGrammar().rules[name];
  if (!ruleInfo) {
    throw errors$1.cannotExtendUndeclaredRule(name, this.superGrammar.name, source);
  }
  const body = new pexprs$2.Extend(this.superGrammar, name, fragment);
  body.source = fragment.source;
  this.installOverriddenOrExtendedRule(name, formals, body, source);
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var GrammarDecl_1 = GrammarDecl$1;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$2 = Grammar_1;
const GrammarDecl = GrammarDecl_1;
const pexprs$1 = pexprs$6;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function Builder$2() {}

Builder$2.prototype = {
  currentDecl: null,
  currentRuleName: null,

  newGrammar(name) {
    return new GrammarDecl(name);
  },

  grammar(metaInfo, name, superGrammar, defaultStartRule, rules) {
    const gDecl = new GrammarDecl(name);
    if (superGrammar) {
      // `superGrammar` may be a recipe (i.e. an Array), or an actual grammar instance.
      gDecl.withSuperGrammar(
        superGrammar instanceof Grammar$2 ? superGrammar : this.fromRecipe(superGrammar)
      );
    }
    if (defaultStartRule) {
      gDecl.withDefaultStartRule(defaultStartRule);
    }
    if (metaInfo && metaInfo.source) {
      gDecl.withSource(metaInfo.source);
    }

    this.currentDecl = gDecl;
    Object.keys(rules).forEach(ruleName => {
      this.currentRuleName = ruleName;
      const ruleRecipe = rules[ruleName];

      const action = ruleRecipe[0]; // define/extend/override
      const metaInfo = ruleRecipe[1];
      const description = ruleRecipe[2];
      const formals = ruleRecipe[3];
      const body = this.fromRecipe(ruleRecipe[4]);

      let source;
      if (gDecl.source && metaInfo && metaInfo.sourceInterval) {
        source = gDecl.source.subInterval(
            metaInfo.sourceInterval[0],
            metaInfo.sourceInterval[1] - metaInfo.sourceInterval[0]
        );
      }
      gDecl[action](ruleName, formals, body, description, source);
    });
    this.currentRuleName = this.currentDecl = null;
    return gDecl.build();
  },

  terminal(x) {
    return new pexprs$1.Terminal(x);
  },

  range(from, to) {
    return new pexprs$1.Range(from, to);
  },

  param(index) {
    return new pexprs$1.Param(index);
  },

  alt(...termArgs) {
    let terms = [];
    for (let arg of termArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Alt) {
        terms = terms.concat(arg.terms);
      } else {
        terms.push(arg);
      }
    }
    return terms.length === 1 ? terms[0] : new pexprs$1.Alt(terms);
  },

  seq(...factorArgs) {
    let factors = [];
    for (let arg of factorArgs) {
      if (!(arg instanceof pexprs$1.PExpr)) {
        arg = this.fromRecipe(arg);
      }
      if (arg instanceof pexprs$1.Seq) {
        factors = factors.concat(arg.factors);
      } else {
        factors.push(arg);
      }
    }
    return factors.length === 1 ? factors[0] : new pexprs$1.Seq(factors);
  },

  star(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Star(expr);
  },

  plus(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Plus(expr);
  },

  opt(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Opt(expr);
  },

  not(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Not(expr);
  },

  la(expr) {
    // TODO: temporary to still be able to read old recipes
    return this.lookahead(expr);
  },

  lookahead(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lookahead(expr);
  },

  lex(expr) {
    if (!(expr instanceof pexprs$1.PExpr)) {
      expr = this.fromRecipe(expr);
    }
    return new pexprs$1.Lex(expr);
  },

  app(ruleName, optParams) {
    if (optParams && optParams.length > 0) {
      optParams = optParams.map(function(param) {
        return param instanceof pexprs$1.PExpr ? param : this.fromRecipe(param);
      }, this);
    }
    return new pexprs$1.Apply(ruleName, optParams);
  },

  // Note that unlike other methods in this class, this method cannot be used as a
  // convenience constructor. It only works with recipes, because it relies on
  // `this.currentDecl` and `this.currentRuleName` being set.
  splice(beforeTerms, afterTerms) {
    return new pexprs$1.Splice(
        this.currentDecl.superGrammar,
        this.currentRuleName,
        beforeTerms.map(term => this.fromRecipe(term)),
        afterTerms.map(term => this.fromRecipe(term))
    );
  },

  fromRecipe(recipe) {
    // the meta-info of 'grammar' is processed in Builder.grammar
    const args = recipe[0] === 'grammar' ? recipe.slice(1) : recipe.slice(2);
    const result = this[recipe[0]](...args);

    const metaInfo = recipe[1];
    if (metaInfo) {
      if (metaInfo.sourceInterval && this.currentDecl) {
        result.withSource(this.currentDecl.sourceInterval(...metaInfo.sourceInterval));
      }
    }
    return result;
  },
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var Builder_1 = Builder$2;

var name = "ohm-js";
var version$2 = "16.3.4";
var description = "An object-oriented language for parsing and pattern matching";
var repository = "https://github.com/harc/ohm";
var keywords = [
	"parser",
	"compiler",
	"pattern matching",
	"pattern-matching",
	"ometa",
	"ometa/js",
	"ometa-js",
	"ometajs",
	"rapid",
	"prototyping"
];
var homepage = "https://ohmjs.org";
var bugs = "https://github.com/harc/ohm/issues";
var main = "index.js";
var module = "dist/ohm.esm.js";
var files = [
	"src",
	"dist",
	"extras",
	"third_party",
	"index.d.ts"
];
var types = "index.d.ts";
var scripts = {
	prebootstrap: "bash scripts/prebootstrap",
	bootstrap: "bash scripts/bootstrap --test || (echo 'Bootstrap failed.' && mv -v dist/ohm-grammar.js.old dist/ohm-grammar.js && mv -v dist/built-in-rules.js.old dist/built-in-rules.js && mv -v dist/operations-and-attributes.js.old dist/operations-and-attributes.js)",
	build: "yarn build-debug && webpack --mode=production",
	"build-debug": "webpack --mode=development && yarn build-esm && node scripts/generate-types.mjs",
	"build-esm": "rollup -c rollup.config.mjs",
	clean: "rm -f dist/ohm.js dist/ohm.min.js",
	lint: "eslint . --ignore-path ../.eslintignore",
	format: "prettier . --write --ignore-path ../.prettierignore --config ../.prettierrc && eslint . --ignore-path ../.eslintignore --fix",
	test: "ava && ava --config ava-ts.config.js test/test-typings.ts",
	"test-watch": "ava --watch",
	"pre-commit": "yarn run lint && yarn run build && yarn run test",
	prepublishOnly: "bash scripts/prepublishOnly",
	prepack: "cp ../../README.md . && yarn build",
	postpack: "rm README.md",
	postpublish: "echo '👉  Now go to https://github.com/harc/ohm/releases and create a release.'",
	"unsafe-bootstrap": "bash scripts/bootstrap",
	"update-contributors": "bash scripts/update-contributors",
	watch: "webpack --mode=development --watch"
};
var license = "MIT";
var author = "Alex Warth <alexwarth@gmail.com> (http://tinlizzie.org/~awarth)";
var contributors = [
	"Patrick Dubroy <pdubroy@gmail.com>",
	"Meixian Li <lmeixian@gmail.com>",
	"Marko Röder <m.roeder@photon-software.de>",
	"Tony Garnock-Jones <tonygarnockjones@gmail.com>",
	"Saketh Kasibatla <sake.kasi@gmail.com>",
	"Lionel Landwerlin <llandwerlin@gmail.com>",
	"Ray Toal <rtoal@lmu.edu>",
	"Jason Merrill <jwmerrill@gmail.com>",
	"Yoshiki Ohshima <Yoshiki.Ohshima@acm.org>",
	"megabuz <3299889+megabuz@users.noreply.github.com>",
	"Milan Lajtoš <milan.lajtos@me.com>",
	"Neil Jewers <njjewers@uwaterloo.ca>",
	"Jonathan Edwards <JonathanMEdwards@gmail.com>",
	"stagas <gstagas@gmail.com>",
	"Daniel Tomlinson <DanielTomlinson@me.com>",
	"Pierre Donias <pierre.donias@gmail.com>",
	"Casey Olson <casey.m.olson@gmail.com>",
	"Arthur Carabott <arthurc@gmail.com>",
	"Stan Rozenraukh <stan@stanistan.com>",
	"Stephan Seidt <stephan.seidt@gmail.com>",
	"Leslie Ying <acetophore@users.noreply.github.com>",
	"Szymon Kaliski <kaliskiszymon@gmail.com>",
	"Thomas Nyberg <tomnyberg@gmail.com>",
	"AngryPowman <angrypowman@qq.com>",
	"Vse Mozhet Byt <vsemozhetbyt@gmail.com>",
	"Wil Chung <10446+iamwilhelm@users.noreply.github.com>",
	"Zachary Sakowitz <zsakowitz@gmail.com>",
	"abego <ub@abego-software.de>",
	"acslk <d_vd415@hotmail.com>",
	"codeZeilen <codeZeilen@users.noreply.github.com>",
	"kassadin <kassadin@foxmail.com>",
	"owch <bowenrainyday@gmail.com>",
	"sfinnie <scott.finnie@gmail.com>",
	"Steve Phillips <steve@tryingtobeawesome.com>",
	"Justin Chase <justin.m.chase@gmail.com>",
	"Luca Guzzon <luca.guzzon@gmail.com>",
	"Ian Harris <ian@fofgof.xyz>",
	"Mike Niebling <(none)>",
	"Patrick Dubroy <patrick@sourcegraph.com>"
];
var dependencies = {
};
var devDependencies = {
	"@ohm-js/cli": "^1.0.0",
	"@rollup/plugin-commonjs": "^21.0.1",
	"@rollup/plugin-json": "^4.1.0",
	"@rollup/plugin-node-resolve": "^13.1.3",
	ava: "^3.15.0",
	"ava-spec": "^1.1.1",
	dedent: "^0.7.0",
	eslint: "^7.9.0",
	"eslint-config-google": "^0.14.0",
	"eslint-plugin-ava": "^11.0.0",
	"eslint-plugin-camelcase-ohm": "^0.2.1",
	"eslint-plugin-no-extension-in-require": "^0.2.0",
	husky: "^4.2.5",
	jsdom: "^9.9.1",
	json: "^9.0.6",
	markscript: "^0.5.0",
	"node-static": "^0.7.11",
	"ohm-grammar-ecmascript": "^1.0.0",
	rollup: "^2.63.0",
	"ts-loader": "^8.0.4",
	"ts-node": "^9.0.0",
	typescript: "^4.0.3",
	"walk-sync": "^2.2.0",
	webpack: "^4.44.2",
	"webpack-cli": "^3.3.12"
};
var engines = {
	node: ">=0.12.1"
};
var require$$0 = {
	name: name,
	version: version$2,
	description: description,
	repository: repository,
	keywords: keywords,
	homepage: homepage,
	bugs: bugs,
	main: main,
	module: module,
	files: files,
	types: types,
	scripts: scripts,
	license: license,
	author: author,
	contributors: contributors,
	dependencies: dependencies,
	devDependencies: devDependencies,
	engines: engines
};

/* global __GLOBAL_OHM_VERSION__ */

// When running under Node, read the version from package.json. For the browser,
// use a special global variable defined in the build process (see webpack.config.js).
var version$1 =
  typeof __GLOBAL_OHM_VERSION__ === 'string' ?
    __GLOBAL_OHM_VERSION__ :
    require$$0.version;

var makeRecipe$5 = {};

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder$1 = Builder_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

function makeRecipe$4(recipe) {
  if (typeof recipe === 'function') {
    return recipe.call(new Builder$1());
  } else {
    if (typeof recipe === 'string') {
      // stringified JSON recipe
      recipe = JSON.parse(recipe);
    }
    return new Builder$1().fromRecipe(recipe);
  }
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

makeRecipe$5.makeRecipe = makeRecipe$4;

var {makeRecipe: makeRecipe$3} = makeRecipe$5;
var builtInRules = makeRecipe$3(["grammar",{"source":"BuiltInRules {\n\n  alnum  (an alpha-numeric character)\n    = letter\n    | digit\n\n  letter  (a letter)\n    = lower\n    | upper\n    | unicodeLtmo\n\n  digit  (a digit)\n    = \"0\"..\"9\"\n\n  hexDigit  (a hexadecimal digit)\n    = digit\n    | \"a\"..\"f\"\n    | \"A\"..\"F\"\n\n  ListOf<elem, sep>\n    = NonemptyListOf<elem, sep>\n    | EmptyListOf<elem, sep>\n\n  NonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  EmptyListOf<elem, sep>\n    = /* nothing */\n\n  listOf<elem, sep>\n    = nonemptyListOf<elem, sep>\n    | emptyListOf<elem, sep>\n\n  nonemptyListOf<elem, sep>\n    = elem (sep elem)*\n\n  emptyListOf<elem, sep>\n    = /* nothing */\n\n  // Allows a syntactic rule application within a lexical context.\n  applySyntactic<app> = app\n}"},"BuiltInRules",null,null,{"alnum":["define",{"sourceInterval":[18,78]},"an alpha-numeric character",[],["alt",{"sourceInterval":[60,78]},["app",{"sourceInterval":[60,66]},"letter",[]],["app",{"sourceInterval":[73,78]},"digit",[]]]],"letter":["define",{"sourceInterval":[82,142]},"a letter",[],["alt",{"sourceInterval":[107,142]},["app",{"sourceInterval":[107,112]},"lower",[]],["app",{"sourceInterval":[119,124]},"upper",[]],["app",{"sourceInterval":[131,142]},"unicodeLtmo",[]]]],"digit":["define",{"sourceInterval":[146,177]},"a digit",[],["range",{"sourceInterval":[169,177]},"0","9"]],"hexDigit":["define",{"sourceInterval":[181,254]},"a hexadecimal digit",[],["alt",{"sourceInterval":[219,254]},["app",{"sourceInterval":[219,224]},"digit",[]],["range",{"sourceInterval":[231,239]},"a","f"],["range",{"sourceInterval":[246,254]},"A","F"]]],"ListOf":["define",{"sourceInterval":[258,336]},null,["elem","sep"],["alt",{"sourceInterval":[282,336]},["app",{"sourceInterval":[282,307]},"NonemptyListOf",[["param",{"sourceInterval":[297,301]},0],["param",{"sourceInterval":[303,306]},1]]],["app",{"sourceInterval":[314,336]},"EmptyListOf",[["param",{"sourceInterval":[326,330]},0],["param",{"sourceInterval":[332,335]},1]]]]],"NonemptyListOf":["define",{"sourceInterval":[340,388]},null,["elem","sep"],["seq",{"sourceInterval":[372,388]},["param",{"sourceInterval":[372,376]},0],["star",{"sourceInterval":[377,388]},["seq",{"sourceInterval":[378,386]},["param",{"sourceInterval":[378,381]},1],["param",{"sourceInterval":[382,386]},0]]]]],"EmptyListOf":["define",{"sourceInterval":[392,434]},null,["elem","sep"],["seq",{"sourceInterval":[438,438]}]],"listOf":["define",{"sourceInterval":[438,516]},null,["elem","sep"],["alt",{"sourceInterval":[462,516]},["app",{"sourceInterval":[462,487]},"nonemptyListOf",[["param",{"sourceInterval":[477,481]},0],["param",{"sourceInterval":[483,486]},1]]],["app",{"sourceInterval":[494,516]},"emptyListOf",[["param",{"sourceInterval":[506,510]},0],["param",{"sourceInterval":[512,515]},1]]]]],"nonemptyListOf":["define",{"sourceInterval":[520,568]},null,["elem","sep"],["seq",{"sourceInterval":[552,568]},["param",{"sourceInterval":[552,556]},0],["star",{"sourceInterval":[557,568]},["seq",{"sourceInterval":[558,566]},["param",{"sourceInterval":[558,561]},1],["param",{"sourceInterval":[562,566]},0]]]]],"emptyListOf":["define",{"sourceInterval":[572,682]},null,["elem","sep"],["seq",{"sourceInterval":[685,685]}]],"applySyntactic":["define",{"sourceInterval":[685,710]},null,["app"],["param",{"sourceInterval":[707,710]},0]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Grammar$1 = Grammar_1;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

Grammar$1.BuiltInRules = builtInRules;

var {makeRecipe: makeRecipe$2} = makeRecipe$5;
var operationsAndAttributes = makeRecipe$2(["grammar",{"source":"OperationsAndAttributes {\n\n  AttributeSignature =\n    name\n\n  OperationSignature =\n    name Formals?\n\n  Formals\n    = \"(\" ListOf<name, \",\"> \")\"\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n}"},"OperationsAndAttributes",null,"AttributeSignature",{"AttributeSignature":["define",{"sourceInterval":[29,58]},null,[],["app",{"sourceInterval":[54,58]},"name",[]]],"OperationSignature":["define",{"sourceInterval":[62,100]},null,[],["seq",{"sourceInterval":[87,100]},["app",{"sourceInterval":[87,91]},"name",[]],["opt",{"sourceInterval":[92,100]},["app",{"sourceInterval":[92,99]},"Formals",[]]]]],"Formals":["define",{"sourceInterval":[104,143]},null,[],["seq",{"sourceInterval":[118,143]},["terminal",{"sourceInterval":[118,121]},"("],["app",{"sourceInterval":[122,139]},"ListOf",[["app",{"sourceInterval":[129,133]},"name",[]],["terminal",{"sourceInterval":[135,138]},","]]],["terminal",{"sourceInterval":[140,143]},")"]]],"name":["define",{"sourceInterval":[147,187]},"a name",[],["seq",{"sourceInterval":[168,187]},["app",{"sourceInterval":[168,177]},"nameFirst",[]],["star",{"sourceInterval":[178,187]},["app",{"sourceInterval":[178,186]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[191,223]},null,[],["alt",{"sourceInterval":[207,223]},["terminal",{"sourceInterval":[207,210]},"_"],["app",{"sourceInterval":[217,223]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[227,257]},null,[],["alt",{"sourceInterval":[242,257]},["terminal",{"sourceInterval":[242,245]},"_"],["app",{"sourceInterval":[252,257]},"alnum",[]]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Semantics = Semantics_1;
const util$1 = util$7;

// ----------------- Deferred initialization -----------------

util$1.awaitBuiltInRules(builtInRules => {
  const operationsAndAttributesGrammar = operationsAndAttributes;
  initBuiltInSemantics(builtInRules);
  initPrototypeParser(operationsAndAttributesGrammar); // requires BuiltInSemantics
});

function initBuiltInSemantics(builtInRules) {
  const actions = {
    empty() {
      return this.iteration();
    },
    nonEmpty(first, _, rest) {
      return this.iteration([first].concat(rest.children));
    },
  };

  Semantics.BuiltInSemantics = Semantics.createSemantics(builtInRules, null).addOperation(
      'asIteration',
      {
        emptyListOf: actions.empty,
        nonemptyListOf: actions.nonEmpty,
        EmptyListOf: actions.empty,
        NonemptyListOf: actions.nonEmpty,
      }
  );
}

function initPrototypeParser(grammar) {
  Semantics.prototypeGrammarSemantics = grammar.createSemantics().addOperation('parse', {
    AttributeSignature(name) {
      return {
        name: name.parse(),
        formals: [],
      };
    },
    OperationSignature(name, optFormals) {
      return {
        name: name.parse(),
        formals: optFormals.children.map(c => c.parse())[0] || [],
      };
    },
    Formals(oparen, fs, cparen) {
      return fs.asIteration().children.map(c => c.parse());
    },
    name(first, rest) {
      return this.sourceString;
    },
  });
  Semantics.prototypeGrammar = grammar;
}

var {makeRecipe: makeRecipe$1} = makeRecipe$5;
var ohmGrammar$1 = makeRecipe$1(["grammar",{"source":"Ohm {\n\n  Grammars\n    = Grammar*\n\n  Grammar\n    = ident SuperGrammar? \"{\" Rule* \"}\"\n\n  SuperGrammar\n    = \"<:\" ident\n\n  Rule\n    = ident Formals? ruleDescr? \"=\"  RuleBody  -- define\n    | ident Formals?            \":=\" OverrideRuleBody  -- override\n    | ident Formals?            \"+=\" RuleBody  -- extend\n\n  RuleBody\n    = \"|\"? NonemptyListOf<TopLevelTerm, \"|\">\n\n  TopLevelTerm\n    = Seq caseName  -- inline\n    | Seq\n\n  OverrideRuleBody\n    = \"|\"? NonemptyListOf<OverrideTopLevelTerm, \"|\">\n\n  OverrideTopLevelTerm\n    = \"...\"  -- superSplice\n    | TopLevelTerm\n\n  Formals\n    = \"<\" ListOf<ident, \",\"> \">\"\n\n  Params\n    = \"<\" ListOf<Seq, \",\"> \">\"\n\n  Alt\n    = NonemptyListOf<Seq, \"|\">\n\n  Seq\n    = Iter*\n\n  Iter\n    = Pred \"*\"  -- star\n    | Pred \"+\"  -- plus\n    | Pred \"?\"  -- opt\n    | Pred\n\n  Pred\n    = \"~\" Lex  -- not\n    | \"&\" Lex  -- lookahead\n    | Lex\n\n  Lex\n    = \"#\" Base  -- lex\n    | Base\n\n  Base\n    = ident Params? ~(ruleDescr? \"=\" | \":=\" | \"+=\")  -- application\n    | oneCharTerminal \"..\" oneCharTerminal           -- range\n    | terminal                                       -- terminal\n    | \"(\" Alt \")\"                                    -- paren\n\n  ruleDescr  (a rule description)\n    = \"(\" ruleDescrText \")\"\n\n  ruleDescrText\n    = (~\")\" any)*\n\n  caseName\n    = \"--\" (~\"\\n\" space)* name (~\"\\n\" space)* (\"\\n\" | &\"}\")\n\n  name  (a name)\n    = nameFirst nameRest*\n\n  nameFirst\n    = \"_\"\n    | letter\n\n  nameRest\n    = \"_\"\n    | alnum\n\n  ident  (an identifier)\n    = name\n\n  terminal\n    = \"\\\"\" terminalChar* \"\\\"\"\n\n  oneCharTerminal\n    = \"\\\"\" terminalChar \"\\\"\"\n\n  terminalChar\n    = escapeChar\n      | ~\"\\\\\" ~\"\\\"\" ~\"\\n\" \"\\u{0}\"..\"\\u{10FFFF}\"\n\n  escapeChar  (an escape sequence)\n    = \"\\\\\\\\\"                                     -- backslash\n    | \"\\\\\\\"\"                                     -- doubleQuote\n    | \"\\\\\\'\"                                     -- singleQuote\n    | \"\\\\b\"                                      -- backspace\n    | \"\\\\n\"                                      -- lineFeed\n    | \"\\\\r\"                                      -- carriageReturn\n    | \"\\\\t\"                                      -- tab\n    | \"\\\\u{\" hexDigit hexDigit? hexDigit?\n             hexDigit? hexDigit? hexDigit? \"}\"   -- unicodeCodePoint\n    | \"\\\\u\" hexDigit hexDigit hexDigit hexDigit  -- unicodeEscape\n    | \"\\\\x\" hexDigit hexDigit                    -- hexEscape\n\n  space\n   += comment\n\n  comment\n    = \"//\" (~\"\\n\" any)* &(\"\\n\" | end)  -- singleLine\n    | \"/*\" (~\"*/\" any)* \"*/\"  -- multiLine\n\n  tokens = token*\n\n  token = caseName | comment | ident | operator | punctuation | terminal | any\n\n  operator = \"<:\" | \"=\" | \":=\" | \"+=\" | \"*\" | \"+\" | \"?\" | \"~\" | \"&\"\n\n  punctuation = \"<\" | \">\" | \",\" | \"--\"\n}"},"Ohm",null,"Grammars",{"Grammars":["define",{"sourceInterval":[9,32]},null,[],["star",{"sourceInterval":[24,32]},["app",{"sourceInterval":[24,31]},"Grammar",[]]]],"Grammar":["define",{"sourceInterval":[36,83]},null,[],["seq",{"sourceInterval":[50,83]},["app",{"sourceInterval":[50,55]},"ident",[]],["opt",{"sourceInterval":[56,69]},["app",{"sourceInterval":[56,68]},"SuperGrammar",[]]],["terminal",{"sourceInterval":[70,73]},"{"],["star",{"sourceInterval":[74,79]},["app",{"sourceInterval":[74,78]},"Rule",[]]],["terminal",{"sourceInterval":[80,83]},"}"]]],"SuperGrammar":["define",{"sourceInterval":[87,116]},null,[],["seq",{"sourceInterval":[106,116]},["terminal",{"sourceInterval":[106,110]},"<:"],["app",{"sourceInterval":[111,116]},"ident",[]]]],"Rule_define":["define",{"sourceInterval":[131,181]},null,[],["seq",{"sourceInterval":[131,170]},["app",{"sourceInterval":[131,136]},"ident",[]],["opt",{"sourceInterval":[137,145]},["app",{"sourceInterval":[137,144]},"Formals",[]]],["opt",{"sourceInterval":[146,156]},["app",{"sourceInterval":[146,155]},"ruleDescr",[]]],["terminal",{"sourceInterval":[157,160]},"="],["app",{"sourceInterval":[162,170]},"RuleBody",[]]]],"Rule_override":["define",{"sourceInterval":[188,248]},null,[],["seq",{"sourceInterval":[188,235]},["app",{"sourceInterval":[188,193]},"ident",[]],["opt",{"sourceInterval":[194,202]},["app",{"sourceInterval":[194,201]},"Formals",[]]],["terminal",{"sourceInterval":[214,218]},":="],["app",{"sourceInterval":[219,235]},"OverrideRuleBody",[]]]],"Rule_extend":["define",{"sourceInterval":[255,305]},null,[],["seq",{"sourceInterval":[255,294]},["app",{"sourceInterval":[255,260]},"ident",[]],["opt",{"sourceInterval":[261,269]},["app",{"sourceInterval":[261,268]},"Formals",[]]],["terminal",{"sourceInterval":[281,285]},"+="],["app",{"sourceInterval":[286,294]},"RuleBody",[]]]],"Rule":["define",{"sourceInterval":[120,305]},null,[],["alt",{"sourceInterval":[131,305]},["app",{"sourceInterval":[131,170]},"Rule_define",[]],["app",{"sourceInterval":[188,235]},"Rule_override",[]],["app",{"sourceInterval":[255,294]},"Rule_extend",[]]]],"RuleBody":["define",{"sourceInterval":[309,362]},null,[],["seq",{"sourceInterval":[324,362]},["opt",{"sourceInterval":[324,328]},["terminal",{"sourceInterval":[324,327]},"|"]],["app",{"sourceInterval":[329,362]},"NonemptyListOf",[["app",{"sourceInterval":[344,356]},"TopLevelTerm",[]],["terminal",{"sourceInterval":[358,361]},"|"]]]]],"TopLevelTerm_inline":["define",{"sourceInterval":[385,408]},null,[],["seq",{"sourceInterval":[385,397]},["app",{"sourceInterval":[385,388]},"Seq",[]],["app",{"sourceInterval":[389,397]},"caseName",[]]]],"TopLevelTerm":["define",{"sourceInterval":[366,418]},null,[],["alt",{"sourceInterval":[385,418]},["app",{"sourceInterval":[385,397]},"TopLevelTerm_inline",[]],["app",{"sourceInterval":[415,418]},"Seq",[]]]],"OverrideRuleBody":["define",{"sourceInterval":[422,491]},null,[],["seq",{"sourceInterval":[445,491]},["opt",{"sourceInterval":[445,449]},["terminal",{"sourceInterval":[445,448]},"|"]],["app",{"sourceInterval":[450,491]},"NonemptyListOf",[["app",{"sourceInterval":[465,485]},"OverrideTopLevelTerm",[]],["terminal",{"sourceInterval":[487,490]},"|"]]]]],"OverrideTopLevelTerm_superSplice":["define",{"sourceInterval":[522,543]},null,[],["terminal",{"sourceInterval":[522,527]},"..."]],"OverrideTopLevelTerm":["define",{"sourceInterval":[495,562]},null,[],["alt",{"sourceInterval":[522,562]},["app",{"sourceInterval":[522,527]},"OverrideTopLevelTerm_superSplice",[]],["app",{"sourceInterval":[550,562]},"TopLevelTerm",[]]]],"Formals":["define",{"sourceInterval":[566,606]},null,[],["seq",{"sourceInterval":[580,606]},["terminal",{"sourceInterval":[580,583]},"<"],["app",{"sourceInterval":[584,602]},"ListOf",[["app",{"sourceInterval":[591,596]},"ident",[]],["terminal",{"sourceInterval":[598,601]},","]]],["terminal",{"sourceInterval":[603,606]},">"]]],"Params":["define",{"sourceInterval":[610,647]},null,[],["seq",{"sourceInterval":[623,647]},["terminal",{"sourceInterval":[623,626]},"<"],["app",{"sourceInterval":[627,643]},"ListOf",[["app",{"sourceInterval":[634,637]},"Seq",[]],["terminal",{"sourceInterval":[639,642]},","]]],["terminal",{"sourceInterval":[644,647]},">"]]],"Alt":["define",{"sourceInterval":[651,685]},null,[],["app",{"sourceInterval":[661,685]},"NonemptyListOf",[["app",{"sourceInterval":[676,679]},"Seq",[]],["terminal",{"sourceInterval":[681,684]},"|"]]]],"Seq":["define",{"sourceInterval":[689,704]},null,[],["star",{"sourceInterval":[699,704]},["app",{"sourceInterval":[699,703]},"Iter",[]]]],"Iter_star":["define",{"sourceInterval":[719,736]},null,[],["seq",{"sourceInterval":[719,727]},["app",{"sourceInterval":[719,723]},"Pred",[]],["terminal",{"sourceInterval":[724,727]},"*"]]],"Iter_plus":["define",{"sourceInterval":[743,760]},null,[],["seq",{"sourceInterval":[743,751]},["app",{"sourceInterval":[743,747]},"Pred",[]],["terminal",{"sourceInterval":[748,751]},"+"]]],"Iter_opt":["define",{"sourceInterval":[767,783]},null,[],["seq",{"sourceInterval":[767,775]},["app",{"sourceInterval":[767,771]},"Pred",[]],["terminal",{"sourceInterval":[772,775]},"?"]]],"Iter":["define",{"sourceInterval":[708,794]},null,[],["alt",{"sourceInterval":[719,794]},["app",{"sourceInterval":[719,727]},"Iter_star",[]],["app",{"sourceInterval":[743,751]},"Iter_plus",[]],["app",{"sourceInterval":[767,775]},"Iter_opt",[]],["app",{"sourceInterval":[790,794]},"Pred",[]]]],"Pred_not":["define",{"sourceInterval":[809,824]},null,[],["seq",{"sourceInterval":[809,816]},["terminal",{"sourceInterval":[809,812]},"~"],["app",{"sourceInterval":[813,816]},"Lex",[]]]],"Pred_lookahead":["define",{"sourceInterval":[831,852]},null,[],["seq",{"sourceInterval":[831,838]},["terminal",{"sourceInterval":[831,834]},"&"],["app",{"sourceInterval":[835,838]},"Lex",[]]]],"Pred":["define",{"sourceInterval":[798,862]},null,[],["alt",{"sourceInterval":[809,862]},["app",{"sourceInterval":[809,816]},"Pred_not",[]],["app",{"sourceInterval":[831,838]},"Pred_lookahead",[]],["app",{"sourceInterval":[859,862]},"Lex",[]]]],"Lex_lex":["define",{"sourceInterval":[876,892]},null,[],["seq",{"sourceInterval":[876,884]},["terminal",{"sourceInterval":[876,879]},"#"],["app",{"sourceInterval":[880,884]},"Base",[]]]],"Lex":["define",{"sourceInterval":[866,903]},null,[],["alt",{"sourceInterval":[876,903]},["app",{"sourceInterval":[876,884]},"Lex_lex",[]],["app",{"sourceInterval":[899,903]},"Base",[]]]],"Base_application":["define",{"sourceInterval":[918,979]},null,[],["seq",{"sourceInterval":[918,963]},["app",{"sourceInterval":[918,923]},"ident",[]],["opt",{"sourceInterval":[924,931]},["app",{"sourceInterval":[924,930]},"Params",[]]],["not",{"sourceInterval":[932,963]},["alt",{"sourceInterval":[934,962]},["seq",{"sourceInterval":[934,948]},["opt",{"sourceInterval":[934,944]},["app",{"sourceInterval":[934,943]},"ruleDescr",[]]],["terminal",{"sourceInterval":[945,948]},"="]],["terminal",{"sourceInterval":[951,955]},":="],["terminal",{"sourceInterval":[958,962]},"+="]]]]],"Base_range":["define",{"sourceInterval":[986,1041]},null,[],["seq",{"sourceInterval":[986,1022]},["app",{"sourceInterval":[986,1001]},"oneCharTerminal",[]],["terminal",{"sourceInterval":[1002,1006]},".."],["app",{"sourceInterval":[1007,1022]},"oneCharTerminal",[]]]],"Base_terminal":["define",{"sourceInterval":[1048,1106]},null,[],["app",{"sourceInterval":[1048,1056]},"terminal",[]]],"Base_paren":["define",{"sourceInterval":[1113,1168]},null,[],["seq",{"sourceInterval":[1113,1124]},["terminal",{"sourceInterval":[1113,1116]},"("],["app",{"sourceInterval":[1117,1120]},"Alt",[]],["terminal",{"sourceInterval":[1121,1124]},")"]]],"Base":["define",{"sourceInterval":[907,1168]},null,[],["alt",{"sourceInterval":[918,1168]},["app",{"sourceInterval":[918,963]},"Base_application",[]],["app",{"sourceInterval":[986,1022]},"Base_range",[]],["app",{"sourceInterval":[1048,1056]},"Base_terminal",[]],["app",{"sourceInterval":[1113,1124]},"Base_paren",[]]]],"ruleDescr":["define",{"sourceInterval":[1172,1231]},"a rule description",[],["seq",{"sourceInterval":[1210,1231]},["terminal",{"sourceInterval":[1210,1213]},"("],["app",{"sourceInterval":[1214,1227]},"ruleDescrText",[]],["terminal",{"sourceInterval":[1228,1231]},")"]]],"ruleDescrText":["define",{"sourceInterval":[1235,1266]},null,[],["star",{"sourceInterval":[1255,1266]},["seq",{"sourceInterval":[1256,1264]},["not",{"sourceInterval":[1256,1260]},["terminal",{"sourceInterval":[1257,1260]},")"]],["app",{"sourceInterval":[1261,1264]},"any",[]]]]],"caseName":["define",{"sourceInterval":[1270,1338]},null,[],["seq",{"sourceInterval":[1285,1338]},["terminal",{"sourceInterval":[1285,1289]},"--"],["star",{"sourceInterval":[1290,1304]},["seq",{"sourceInterval":[1291,1302]},["not",{"sourceInterval":[1291,1296]},["terminal",{"sourceInterval":[1292,1296]},"\n"]],["app",{"sourceInterval":[1297,1302]},"space",[]]]],["app",{"sourceInterval":[1305,1309]},"name",[]],["star",{"sourceInterval":[1310,1324]},["seq",{"sourceInterval":[1311,1322]},["not",{"sourceInterval":[1311,1316]},["terminal",{"sourceInterval":[1312,1316]},"\n"]],["app",{"sourceInterval":[1317,1322]},"space",[]]]],["alt",{"sourceInterval":[1326,1337]},["terminal",{"sourceInterval":[1326,1330]},"\n"],["lookahead",{"sourceInterval":[1333,1337]},["terminal",{"sourceInterval":[1334,1337]},"}"]]]]],"name":["define",{"sourceInterval":[1342,1382]},"a name",[],["seq",{"sourceInterval":[1363,1382]},["app",{"sourceInterval":[1363,1372]},"nameFirst",[]],["star",{"sourceInterval":[1373,1382]},["app",{"sourceInterval":[1373,1381]},"nameRest",[]]]]],"nameFirst":["define",{"sourceInterval":[1386,1418]},null,[],["alt",{"sourceInterval":[1402,1418]},["terminal",{"sourceInterval":[1402,1405]},"_"],["app",{"sourceInterval":[1412,1418]},"letter",[]]]],"nameRest":["define",{"sourceInterval":[1422,1452]},null,[],["alt",{"sourceInterval":[1437,1452]},["terminal",{"sourceInterval":[1437,1440]},"_"],["app",{"sourceInterval":[1447,1452]},"alnum",[]]]],"ident":["define",{"sourceInterval":[1456,1489]},"an identifier",[],["app",{"sourceInterval":[1485,1489]},"name",[]]],"terminal":["define",{"sourceInterval":[1493,1531]},null,[],["seq",{"sourceInterval":[1508,1531]},["terminal",{"sourceInterval":[1508,1512]},"\""],["star",{"sourceInterval":[1513,1526]},["app",{"sourceInterval":[1513,1525]},"terminalChar",[]]],["terminal",{"sourceInterval":[1527,1531]},"\""]]],"oneCharTerminal":["define",{"sourceInterval":[1535,1579]},null,[],["seq",{"sourceInterval":[1557,1579]},["terminal",{"sourceInterval":[1557,1561]},"\""],["app",{"sourceInterval":[1562,1574]},"terminalChar",[]],["terminal",{"sourceInterval":[1575,1579]},"\""]]],"terminalChar":["define",{"sourceInterval":[1583,1660]},null,[],["alt",{"sourceInterval":[1602,1660]},["app",{"sourceInterval":[1602,1612]},"escapeChar",[]],["seq",{"sourceInterval":[1621,1660]},["not",{"sourceInterval":[1621,1626]},["terminal",{"sourceInterval":[1622,1626]},"\\"]],["not",{"sourceInterval":[1627,1632]},["terminal",{"sourceInterval":[1628,1632]},"\""]],["not",{"sourceInterval":[1633,1638]},["terminal",{"sourceInterval":[1634,1638]},"\n"]],["range",{"sourceInterval":[1639,1660]},"\u0000","􏿿"]]]],"escapeChar_backslash":["define",{"sourceInterval":[1703,1758]},null,[],["terminal",{"sourceInterval":[1703,1709]},"\\\\"]],"escapeChar_doubleQuote":["define",{"sourceInterval":[1765,1822]},null,[],["terminal",{"sourceInterval":[1765,1771]},"\\\""]],"escapeChar_singleQuote":["define",{"sourceInterval":[1829,1886]},null,[],["terminal",{"sourceInterval":[1829,1835]},"\\'"]],"escapeChar_backspace":["define",{"sourceInterval":[1893,1948]},null,[],["terminal",{"sourceInterval":[1893,1898]},"\\b"]],"escapeChar_lineFeed":["define",{"sourceInterval":[1955,2009]},null,[],["terminal",{"sourceInterval":[1955,1960]},"\\n"]],"escapeChar_carriageReturn":["define",{"sourceInterval":[2016,2076]},null,[],["terminal",{"sourceInterval":[2016,2021]},"\\r"]],"escapeChar_tab":["define",{"sourceInterval":[2083,2132]},null,[],["terminal",{"sourceInterval":[2083,2088]},"\\t"]],"escapeChar_unicodeCodePoint":["define",{"sourceInterval":[2139,2243]},null,[],["seq",{"sourceInterval":[2139,2221]},["terminal",{"sourceInterval":[2139,2145]},"\\u{"],["app",{"sourceInterval":[2146,2154]},"hexDigit",[]],["opt",{"sourceInterval":[2155,2164]},["app",{"sourceInterval":[2155,2163]},"hexDigit",[]]],["opt",{"sourceInterval":[2165,2174]},["app",{"sourceInterval":[2165,2173]},"hexDigit",[]]],["opt",{"sourceInterval":[2188,2197]},["app",{"sourceInterval":[2188,2196]},"hexDigit",[]]],["opt",{"sourceInterval":[2198,2207]},["app",{"sourceInterval":[2198,2206]},"hexDigit",[]]],["opt",{"sourceInterval":[2208,2217]},["app",{"sourceInterval":[2208,2216]},"hexDigit",[]]],["terminal",{"sourceInterval":[2218,2221]},"}"]]],"escapeChar_unicodeEscape":["define",{"sourceInterval":[2250,2309]},null,[],["seq",{"sourceInterval":[2250,2291]},["terminal",{"sourceInterval":[2250,2255]},"\\u"],["app",{"sourceInterval":[2256,2264]},"hexDigit",[]],["app",{"sourceInterval":[2265,2273]},"hexDigit",[]],["app",{"sourceInterval":[2274,2282]},"hexDigit",[]],["app",{"sourceInterval":[2283,2291]},"hexDigit",[]]]],"escapeChar_hexEscape":["define",{"sourceInterval":[2316,2371]},null,[],["seq",{"sourceInterval":[2316,2339]},["terminal",{"sourceInterval":[2316,2321]},"\\x"],["app",{"sourceInterval":[2322,2330]},"hexDigit",[]],["app",{"sourceInterval":[2331,2339]},"hexDigit",[]]]],"escapeChar":["define",{"sourceInterval":[1664,2371]},"an escape sequence",[],["alt",{"sourceInterval":[1703,2371]},["app",{"sourceInterval":[1703,1709]},"escapeChar_backslash",[]],["app",{"sourceInterval":[1765,1771]},"escapeChar_doubleQuote",[]],["app",{"sourceInterval":[1829,1835]},"escapeChar_singleQuote",[]],["app",{"sourceInterval":[1893,1898]},"escapeChar_backspace",[]],["app",{"sourceInterval":[1955,1960]},"escapeChar_lineFeed",[]],["app",{"sourceInterval":[2016,2021]},"escapeChar_carriageReturn",[]],["app",{"sourceInterval":[2083,2088]},"escapeChar_tab",[]],["app",{"sourceInterval":[2139,2221]},"escapeChar_unicodeCodePoint",[]],["app",{"sourceInterval":[2250,2291]},"escapeChar_unicodeEscape",[]],["app",{"sourceInterval":[2316,2339]},"escapeChar_hexEscape",[]]]],"space":["extend",{"sourceInterval":[2375,2394]},null,[],["app",{"sourceInterval":[2387,2394]},"comment",[]]],"comment_singleLine":["define",{"sourceInterval":[2412,2458]},null,[],["seq",{"sourceInterval":[2412,2443]},["terminal",{"sourceInterval":[2412,2416]},"//"],["star",{"sourceInterval":[2417,2429]},["seq",{"sourceInterval":[2418,2427]},["not",{"sourceInterval":[2418,2423]},["terminal",{"sourceInterval":[2419,2423]},"\n"]],["app",{"sourceInterval":[2424,2427]},"any",[]]]],["lookahead",{"sourceInterval":[2430,2443]},["alt",{"sourceInterval":[2432,2442]},["terminal",{"sourceInterval":[2432,2436]},"\n"],["app",{"sourceInterval":[2439,2442]},"end",[]]]]]],"comment_multiLine":["define",{"sourceInterval":[2465,2501]},null,[],["seq",{"sourceInterval":[2465,2487]},["terminal",{"sourceInterval":[2465,2469]},"/*"],["star",{"sourceInterval":[2470,2482]},["seq",{"sourceInterval":[2471,2480]},["not",{"sourceInterval":[2471,2476]},["terminal",{"sourceInterval":[2472,2476]},"*/"]],["app",{"sourceInterval":[2477,2480]},"any",[]]]],["terminal",{"sourceInterval":[2483,2487]},"*/"]]],"comment":["define",{"sourceInterval":[2398,2501]},null,[],["alt",{"sourceInterval":[2412,2501]},["app",{"sourceInterval":[2412,2443]},"comment_singleLine",[]],["app",{"sourceInterval":[2465,2487]},"comment_multiLine",[]]]],"tokens":["define",{"sourceInterval":[2505,2520]},null,[],["star",{"sourceInterval":[2514,2520]},["app",{"sourceInterval":[2514,2519]},"token",[]]]],"token":["define",{"sourceInterval":[2524,2600]},null,[],["alt",{"sourceInterval":[2532,2600]},["app",{"sourceInterval":[2532,2540]},"caseName",[]],["app",{"sourceInterval":[2543,2550]},"comment",[]],["app",{"sourceInterval":[2553,2558]},"ident",[]],["app",{"sourceInterval":[2561,2569]},"operator",[]],["app",{"sourceInterval":[2572,2583]},"punctuation",[]],["app",{"sourceInterval":[2586,2594]},"terminal",[]],["app",{"sourceInterval":[2597,2600]},"any",[]]]],"operator":["define",{"sourceInterval":[2604,2669]},null,[],["alt",{"sourceInterval":[2615,2669]},["terminal",{"sourceInterval":[2615,2619]},"<:"],["terminal",{"sourceInterval":[2622,2625]},"="],["terminal",{"sourceInterval":[2628,2632]},":="],["terminal",{"sourceInterval":[2635,2639]},"+="],["terminal",{"sourceInterval":[2642,2645]},"*"],["terminal",{"sourceInterval":[2648,2651]},"+"],["terminal",{"sourceInterval":[2654,2657]},"?"],["terminal",{"sourceInterval":[2660,2663]},"~"],["terminal",{"sourceInterval":[2666,2669]},"&"]]],"punctuation":["define",{"sourceInterval":[2673,2709]},null,[],["alt",{"sourceInterval":[2687,2709]},["terminal",{"sourceInterval":[2687,2690]},"<"],["terminal",{"sourceInterval":[2693,2696]},">"],["terminal",{"sourceInterval":[2699,2702]},","],["terminal",{"sourceInterval":[2705,2709]},"--"]]]}]);

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const Builder = Builder_1;
const Grammar = Grammar_1;
const Namespace = Namespace_1;
const common = common$l;
const errors = errors$9;
const pexprs = pexprs$6;
const util = util$7;
const version = version$1;
const {makeRecipe} = makeRecipe$5;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// The metagrammar, i.e. the grammar for Ohm grammars. Initialized at the
// bottom of this file because loading the grammar requires Ohm itself.
let ohmGrammar;

const superSplicePlaceholder = Object.create(pexprs.PExpr.prototype);

const isBuffer = obj =>
  !!obj.constructor &&
  typeof obj.constructor.isBuffer === 'function' &&
  obj.constructor.isBuffer(obj);

// Returns a Grammar instance (i.e., an object with a `match` method) for
// `tree`, which is the concrete syntax tree of a user-written grammar.
// The grammar will be assigned into `namespace` under the name of the grammar
// as specified in the source.
function buildGrammar(match, namespace, optOhmGrammarForTesting) {
  const builder = new Builder();
  let decl;
  let currentRuleName;
  let currentRuleFormals;
  let overriding = false;
  const metaGrammar = optOhmGrammarForTesting || ohmGrammar;

  // A visitor that produces a Grammar instance from the CST.
  const helpers = metaGrammar.createSemantics().addOperation('visit', {
    Grammars(grammarIter) {
      return grammarIter.children.map(c => c.visit());
    },
    Grammar(id, s, _open, rules, _close) {
      const grammarName = id.visit();
      decl = builder.newGrammar(grammarName, namespace);
      s.child(0) && s.child(0).visit();
      rules.children.map(c => c.visit());
      const g = decl.build();
      g.source = this.source.trimmed();
      if (grammarName in namespace) {
        throw errors.duplicateGrammarDeclaration(g, namespace);
      }
      namespace[grammarName] = g;
      return g;
    },

    SuperGrammar(_, n) {
      const superGrammarName = n.visit();
      if (superGrammarName === 'null') {
        decl.withSuperGrammar(null);
      } else {
        if (!namespace || !(superGrammarName in namespace)) {
          throw errors.undeclaredGrammar(superGrammarName, namespace, n.source);
        }
        decl.withSuperGrammar(namespace[superGrammarName]);
      }
    },

    Rule_define(n, fs, d, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      // If there is no default start rule yet, set it now. This must be done before visiting
      // the body, because it might contain an inline rule definition.
      if (!decl.defaultStartRule && decl.ensureSuperGrammar() !== Grammar.ProtoBuiltInRules) {
        decl.withDefaultStartRule(currentRuleName);
      }
      const body = b.visit();
      const description = d.children.map(c => c.visit())[0];
      const source = this.source.trimmed();
      return decl.define(currentRuleName, currentRuleFormals, body, description, source);
    },
    Rule_override(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];

      const source = this.source.trimmed();
      decl.ensureSuperGrammarRuleForOverriding(currentRuleName, source);

      overriding = true;
      const body = b.visit();
      overriding = false;
      return decl.override(currentRuleName, currentRuleFormals, body, null, source);
    },
    Rule_extend(n, fs, _, b) {
      currentRuleName = n.visit();
      currentRuleFormals = fs.children.map(c => c.visit())[0] || [];
      const body = b.visit();
      const source = this.source.trimmed();
      return decl.extend(currentRuleName, currentRuleFormals, body, null, source);
    },
    RuleBody(_, terms) {
      return builder.alt(...terms.visit()).withSource(this.source);
    },
    OverrideRuleBody(_, terms) {
      const args = terms.visit();

      // Check if the super-splice operator (`...`) appears in the terms.
      const expansionPos = args.indexOf(superSplicePlaceholder);
      if (expansionPos >= 0) {
        const beforeTerms = args.slice(0, expansionPos);
        const afterTerms = args.slice(expansionPos + 1);

        // Ensure it appears no more than once.
        afterTerms.forEach(t => {
          if (t === superSplicePlaceholder) throw errors.multipleSuperSplices(t);
        });

        return new pexprs.Splice(
            decl.superGrammar,
            currentRuleName,
            beforeTerms,
            afterTerms
        ).withSource(this.source);
      } else {
        return builder.alt(...args).withSource(this.source);
      }
    },
    Formals(opointy, fs, cpointy) {
      return fs.visit();
    },

    Params(opointy, ps, cpointy) {
      return ps.visit();
    },

    Alt(seqs) {
      return builder.alt(...seqs.visit()).withSource(this.source);
    },

    TopLevelTerm_inline(b, n) {
      const inlineRuleName = currentRuleName + '_' + n.visit();
      const body = b.visit();
      const source = this.source.trimmed();
      const isNewRuleDeclaration = !(
        decl.superGrammar && decl.superGrammar.rules[inlineRuleName]
      );
      if (overriding && !isNewRuleDeclaration) {
        decl.override(inlineRuleName, currentRuleFormals, body, null, source);
      } else {
        decl.define(inlineRuleName, currentRuleFormals, body, null, source);
      }
      const params = currentRuleFormals.map(formal => builder.app(formal));
      return builder.app(inlineRuleName, params).withSource(body.source);
    },
    OverrideTopLevelTerm_superSplice(_) {
      return superSplicePlaceholder;
    },

    Seq(expr) {
      return builder.seq(...expr.children.map(c => c.visit())).withSource(this.source);
    },

    Iter_star(x, _) {
      return builder.star(x.visit()).withSource(this.source);
    },
    Iter_plus(x, _) {
      return builder.plus(x.visit()).withSource(this.source);
    },
    Iter_opt(x, _) {
      return builder.opt(x.visit()).withSource(this.source);
    },

    Pred_not(_, x) {
      return builder.not(x.visit()).withSource(this.source);
    },
    Pred_lookahead(_, x) {
      return builder.lookahead(x.visit()).withSource(this.source);
    },

    Lex_lex(_, x) {
      return builder.lex(x.visit()).withSource(this.source);
    },

    Base_application(rule, ps) {
      const params = ps.children.map(c => c.visit())[0] || [];
      return builder.app(rule.visit(), params).withSource(this.source);
    },
    Base_range(from, _, to) {
      return builder.range(from.visit(), to.visit()).withSource(this.source);
    },
    Base_terminal(expr) {
      return builder.terminal(expr.visit()).withSource(this.source);
    },
    Base_paren(open, x, close) {
      return x.visit();
    },

    ruleDescr(open, t, close) {
      return t.visit();
    },
    ruleDescrText(_) {
      return this.sourceString.trim();
    },

    caseName(_, space1, n, space2, end) {
      return n.visit();
    },

    name(first, rest) {
      return this.sourceString;
    },
    nameFirst(expr) {},
    nameRest(expr) {},

    terminal(open, cs, close) {
      return cs.children.map(c => c.visit()).join('');
    },

    oneCharTerminal(open, c, close) {
      return c.visit();
    },

    escapeChar(c) {
      try {
        return common.unescapeCodePoint(this.sourceString);
      } catch (err) {
        if (err instanceof RangeError && err.message.startsWith('Invalid code point ')) {
          throw errors.invalidCodePoint(c);
        }
        throw err; // Rethrow
      }
    },

    NonemptyListOf(x, _, xs) {
      return [x.visit()].concat(xs.children.map(c => c.visit()));
    },
    EmptyListOf() {
      return [];
    },

    _terminal() {
      return this.sourceString;
    },
  });
  return helpers(match).visit();
}

function compileAndLoad(source, namespace) {
  const m = ohmGrammar.match(source, 'Grammars');
  if (m.failed()) {
    throw errors.grammarSyntaxError(m);
  }
  return buildGrammar(m, namespace);
}

function grammar(source, optNamespace) {
  const ns = grammars(source, optNamespace);

  // Ensure that the source contained no more than one grammar definition.
  const grammarNames = Object.keys(ns);
  if (grammarNames.length === 0) {
    throw new Error('Missing grammar definition');
  } else if (grammarNames.length > 1) {
    const secondGrammar = ns[grammarNames[1]];
    const interval = secondGrammar.source;
    throw new Error(
        util.getLineAndColumnMessage(interval.sourceString, interval.startIdx) +
        'Found more than one grammar definition -- use ohm.grammars() instead.'
    );
  }
  return ns[grammarNames[0]]; // Return the one and only grammar.
}

function grammars(source, optNamespace) {
  const ns = Namespace.extend(Namespace.asNamespace(optNamespace));
  if (typeof source !== 'string') {
    // For convenience, detect Node.js Buffer objects and automatically call toString().
    if (isBuffer(source)) {
      source = source.toString();
    } else {
      throw new TypeError(
          'Expected string as first argument, got ' + common.unexpectedObjToString(source)
      );
    }
  }
  compileAndLoad(source, ns);
  return ns;
}

function grammarFromScriptElement(optNode) {
  throw new Error(
      'grammarFromScriptElement was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

function grammarsFromScriptElements(optNodeOrNodeList) {
  throw new Error(
      'grammarsFromScriptElements was removed in Ohm v16.0. See https://ohmjs.org/d/gfs for more info.'
  );
}

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

// Stuff that users should know about
main$1.exports = {
  createNamespace: Namespace.createNamespace,
  grammar,
  grammars,
  grammarFromScriptElement,
  grammarsFromScriptElements,
  makeRecipe,
  ohmGrammar: null, // Initialized below, after Grammar.BuiltInRules.
  pexprs,
  util,
  version,
};

// Stuff for testing, etc.
main$1.exports._buildGrammar = buildGrammar;

// Late initialization for stuff that is bootstrapped.


util.announceBuiltInRules(Grammar.BuiltInRules);

main$1.exports.ohmGrammar = ohmGrammar = ohmGrammar$1;
Grammar.initApplicationParser(ohmGrammar, buildGrammar);

var ohm = main$1.exports;

// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = common$l;

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

var VisitorFamily_1 = VisitorFamily;

// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

var semanticsToAST = {
  helper: toAST,
  semantics: semanticsForToAST,
};

var extras = {
  VisitorFamily: VisitorFamily_1,
  semanticsForToAST: semanticsToAST.semantics,
  toAST: semanticsToAST.helper,
};




/***/ }),

/***/ "./node_modules/ohm-js/extras/VisitorFamily.js":
/*!*****************************************************!*\
  !*** ./node_modules/ohm-js/extras/VisitorFamily.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


// --------------------------------------------------------------------
// Imports
// --------------------------------------------------------------------

const {assert} = __webpack_require__(/*! ../src/common */ "./node_modules/ohm-js/src/common.js");

// --------------------------------------------------------------------
// Private stuff
// --------------------------------------------------------------------

// Helpers

function getProp(name, thing, fn) {
  return fn(thing[name]);
}

function mapProp(name, thing, fn) {
  return thing[name].map(fn);
}

// Returns a function that will walk a single property of a node.
// `descriptor` is a string indicating the property name, optionally ending
// with '[]' (e.g., 'children[]').
function getPropWalkFn(descriptor) {
  const parts = descriptor.split(/ ?\[\]/);
  if (parts.length === 2) {
    return mapProp.bind(null, parts[0]);
  }
  return getProp.bind(null, descriptor);
}

function getProps(walkFns, thing, fn) {
  return walkFns.map(walkFn => walkFn(thing, fn));
}

function getWalkFn(shape) {
  if (typeof shape === 'string') {
    return getProps.bind(null, [getPropWalkFn(shape)]);
  } else if (Array.isArray(shape)) {
    return getProps.bind(null, shape.map(getPropWalkFn));
  } else {
    assert(typeof shape === 'function', 'Expected a string, Array, or function');
    assert(shape.length === 2, 'Expected a function of arity 2, got ' + shape.length);
    return shape;
  }
}

function isRestrictedIdentifier(str) {
  return /^[a-zA-Z_][0-9a-zA-Z_]*$/.test(str);
}

function trim(s) {
  return s.trim();
}

function parseSignature(sig) {
  const parts = sig.split(/[()]/).map(trim);
  if (parts.length === 3 && parts[2] === '') {
    const name = parts[0];
    let params = [];
    if (parts[1].length > 0) {
      params = parts[1].split(',').map(trim);
    }
    if (isRestrictedIdentifier(name) && params.every(isRestrictedIdentifier)) {
      return {name, formals: params};
    }
  }
  throw new Error('Invalid operation signature: ' + sig);
}

/*
  A VisitorFamily contains a set of recursive operations that are defined over some kind of
  tree structure. The `config` parameter specifies how to walk the tree:
  - 'getTag' is function which, given a node in the tree, returns the node's 'tag' (type)
  - 'shapes' an object that maps from a tag to a value that describes how to recursively
    evaluate the operation for nodes of that type. The value can be:
    * a string indicating the property name that holds that node's only child
    * an Array of property names (or an empty array indicating a leaf type), or
    * a function taking two arguments (node, fn), and returning an Array which is the result
      of apply `fn` to each of the node's children.
 */
function VisitorFamily(config) {
  this._shapes = config.shapes;
  this._getTag = config.getTag;

  this.Adapter = function(thing, family) {
    this._adaptee = thing;
    this._family = family;
  };
  this.Adapter.prototype.valueOf = function() {
    throw new Error('heeey!');
  };
  this.operations = {};

  this._arities = Object.create(null);
  this._getChildren = Object.create(null);

  Object.keys(this._shapes).forEach(k => {
    const shape = this._shapes[k];
    this._getChildren[k] = getWalkFn(shape);

    // A function means the arity isn't fixed, so don't put an entry in the arity map.
    if (typeof shape !== 'function') {
      this._arities[k] = Array.isArray(shape) ? shape.length : 1;
    }
  });
  this._wrap = thing => new this.Adapter(thing, this);
}

VisitorFamily.prototype.wrap = function(thing) {
  return this._wrap(thing);
};

VisitorFamily.prototype._checkActionDict = function(dict) {
  Object.keys(dict).forEach(k => {
    assert(k in this._getChildren, "Unrecognized action name '" + k + "'");
    const action = dict[k];
    assert(typeof action === 'function', "Key '" + k + "': expected function, got " + action);
    if (k in this._arities) {
      const expected = this._arities[k];
      const actual = dict[k].length;
      assert(
          actual === expected,
          "Action '" + k + "' has the wrong arity: expected " + expected + ', got ' + actual
      );
    }
  });
};

VisitorFamily.prototype.addOperation = function(signature, actions) {
  const sig = parseSignature(signature);
  const {name} = sig;
  this._checkActionDict(actions);
  this.operations[name] = {
    name,
    formals: sig.formals,
    actions,
  };

  const family = this;
  this.Adapter.prototype[name] = function(...args) {
    const tag = family._getTag(this._adaptee);
    assert(tag in family._getChildren, "getTag returned unrecognized tag '" + tag + "'");
    assert(tag in actions, "No action for '" + tag + "' in operation '" + name + "'");

    // Create an "arguments object" from the arguments that were passed to this
    // operation / attribute.
    const argsObj = Object.create(null);
    for (const [i, val] of Object.entries(args)) {
      argsObj[sig.formals[i]] = val;
    }

    const oldArgs = this.args;
    this.args = argsObj;
    const ans = actions[tag].apply(
        this,
        family._getChildren[tag](this._adaptee, family._wrap)
    );
    this.args = oldArgs;
    return ans;
  };
  return this;
};

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

module.exports = VisitorFamily;


/***/ }),

/***/ "./node_modules/ohm-js/extras/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ohm-js/extras/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = {
  VisitorFamily: __webpack_require__(/*! ./VisitorFamily */ "./node_modules/ohm-js/extras/VisitorFamily.js"),
  semanticsForToAST: (__webpack_require__(/*! ./semantics-toAST */ "./node_modules/ohm-js/extras/semantics-toAST.js").semantics),
  toAST: (__webpack_require__(/*! ./semantics-toAST */ "./node_modules/ohm-js/extras/semantics-toAST.js").helper),
};


/***/ }),

/***/ "./node_modules/ohm-js/extras/semantics-toAST.js":
/*!*******************************************************!*\
  !*** ./node_modules/ohm-js/extras/semantics-toAST.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


// --------------------------------------------------------------------
// Operations
// --------------------------------------------------------------------

const defaultOperation = {
  _terminal() {
    return this.sourceString;
  },

  _nonterminal(...children) {
    const {ctorName} = this._node;
    const {mapping} = this.args;

    // without customization
    if (!Object.prototype.hasOwnProperty.call(mapping, ctorName)) {
      // lexical rule
      if (this.isLexical()) {
        return this.sourceString;
      }

      // singular node (e.g. only surrounded by literals or lookaheads)
      const realChildren = children.filter(child => !child.isTerminal());
      if (realChildren.length === 1) {
        return realChildren[0].toAST(mapping);
      }

      // rest: terms with multiple children
    }

    // direct forward
    if (typeof mapping[ctorName] === 'number') {
      return children[mapping[ctorName]].toAST(mapping);
    }

    // named/mapped children or unnamed children ('0', '1', '2', ...)
    const propMap = mapping[ctorName] || children;
    const node = {
      type: ctorName,
    };
    // eslint-disable-next-line guard-for-in
    for (const prop in propMap) {
      const mappedProp = mapping[ctorName] && mapping[ctorName][prop];
      if (typeof mappedProp === 'number') {
        // direct forward
        node[prop] = children[mappedProp].toAST(mapping);
      } else if (
        typeof mappedProp === 'string' ||
        typeof mappedProp === 'boolean' ||
        mappedProp === null
      ) {
        // primitive value
        node[prop] = mappedProp;
      } else if (typeof mappedProp === 'object' && mappedProp instanceof Number) {
        // primitive number (must be unboxed)
        node[prop] = Number(mappedProp);
      } else if (typeof mappedProp === 'function') {
        // computed value
        node[prop] = mappedProp.call(this, children);
      } else if (mappedProp === undefined) {
        if (children[prop] && !children[prop].isTerminal()) {
          node[prop] = children[prop].toAST(mapping);
        } else {
          // delete predefined 'type' properties, like 'type', if explicitely removed
          delete node[prop];
        }
      }
    }
    return node;
  },

  _iter(...children) {
    if (this._node.isOptional()) {
      if (this.numChildren === 0) {
        return null;
      } else {
        return children[0].toAST(this.args.mapping);
      }
    }

    return children.map(function(child) {
      return child.toAST(this.args.mapping);
    }, this);
  },

  NonemptyListOf(first, sep, rest) {
    return [first.toAST(this.args.mapping)].concat(rest.toAST(this.args.mapping));
  },

  EmptyListOf() {
    return [];
  },
};

// Returns a plain JavaScript object that includes an abstract syntax tree (AST)
// for the given match result `res` containg a concrete syntax tree (CST) and grammar.
// The optional `mapping` parameter can be used to customize how the nodes of the CST
// are mapped to the AST (see /doc/extras.md#toastmatchresult-mapping).
function toAST(res, mapping) {
  if (typeof res.failed !== 'function' || res.failed()) {
    throw new Error('toAST() expects a succesful MatchResult as first parameter');
  }

  mapping = Object.assign({}, mapping);
  const operation = Object.assign({}, defaultOperation);
  for (const termName in mapping) {
    if (typeof mapping[termName] === 'function') {
      operation[termName] = mapping[termName];
      delete mapping[termName];
    }
  }
  const g = res._cst.grammar;
  const s = g.createSemantics().addOperation('toAST(mapping)', operation);
  return s(res).toAST(mapping);
}

// Returns a semantics containg the toAST(mapping) operation for the given grammar g.
function semanticsForToAST(g) {
  if (typeof g.createSemantics !== 'function') {
    throw new Error('semanticsToAST() expects a Grammar as parameter');
  }

  return g.createSemantics().addOperation('toAST(mapping)', defaultOperation);
}

module.exports = {
  helper: toAST,
  semantics: semanticsForToAST,
};


/***/ }),

/***/ "./node_modules/ohm-js/src/common.js":
/*!*******************************************!*\
  !*** ./node_modules/ohm-js/src/common.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


// --------------------------------------------------------------------
// Private Stuff
// --------------------------------------------------------------------

// Helpers

const escapeStringFor = {};
for (let c = 0; c < 128; c++) {
  escapeStringFor[c] = String.fromCharCode(c);
}
escapeStringFor["'".charCodeAt(0)] = "\\'";
escapeStringFor['"'.charCodeAt(0)] = '\\"';
escapeStringFor['\\'.charCodeAt(0)] = '\\\\';
escapeStringFor['\b'.charCodeAt(0)] = '\\b';
escapeStringFor['\f'.charCodeAt(0)] = '\\f';
escapeStringFor['\n'.charCodeAt(0)] = '\\n';
escapeStringFor['\r'.charCodeAt(0)] = '\\r';
escapeStringFor['\t'.charCodeAt(0)] = '\\t';
escapeStringFor['\u000b'.charCodeAt(0)] = '\\v';

// --------------------------------------------------------------------
// Exports
// --------------------------------------------------------------------

exports.abstract = function(optMethodName) {
  const methodName = optMethodName || '';
  return function() {
    throw new Error(
        'this method ' +
        methodName +
        ' is abstract! ' +
        '(it has no implementation in class ' +
        this.constructor.name +
        ')'
    );
  };
};

exports.assert = function(cond, message) {
  if (!cond) {
    throw new Error(message || 'Assertion failed');
  }
};

// Define a lazily-computed, non-enumerable property named `propName`
// on the object `obj`. `getterFn` will be called to compute the value the
// first time the property is accessed.
exports.defineLazyProperty = function(obj, propName, getterFn) {
  let memo;
  Object.defineProperty(obj, propName, {
    get() {
      if (!memo) {
        memo = getterFn.call(this);
      }
      return memo;
    },
  });
};

exports.clone = function(obj) {
  if (obj) {
    return Object.assign({}, obj);
  }
  return obj;
};

exports.repeatFn = function(fn, n) {
  const arr = [];
  while (n-- > 0) {
    arr.push(fn());
  }
  return arr;
};

exports.repeatStr = function(str, n) {
  return new Array(n + 1).join(str);
};

exports.repeat = function(x, n) {
  return exports.repeatFn(() => x, n);
};

exports.getDuplicates = function(array) {
  const duplicates = [];
  for (let idx = 0; idx < array.length; idx++) {
    const x = array[idx];
    if (array.lastIndexOf(x) !== idx && duplicates.indexOf(x) < 0) {
      duplicates.push(x);
    }
  }
  return duplicates;
};

exports.copyWithoutDuplicates = function(array) {
  const noDuplicates = [];
  array.forEach(entry => {
    if (noDuplicates.indexOf(entry) < 0) {
      noDuplicates.push(entry);
    }
  });
  return noDuplicates;
};

exports.isSyntactic = function(ruleName) {
  const firstChar = ruleName[0];
  return firstChar === firstChar.toUpperCase();
};

exports.isLexical = function(ruleName) {
  return !exports.isSyntactic(ruleName);
};

exports.padLeft = function(str, len, optChar) {
  const ch = optChar || ' ';
  if (str.length < len) {
    return exports.repeatStr(ch, len - str.length) + str;
  }
  return str;
};

// StringBuffer

exports.StringBuffer = function() {
  this.strings = [];
};

exports.StringBuffer.prototype.append = function(str) {
  this.strings.push(str);
};

exports.StringBuffer.prototype.contents = function() {
  return this.strings.join('');
};

const escapeUnicode = str => String.fromCodePoint(parseInt(str, 16));

exports.unescapeCodePoint = function(s) {
  if (s.charAt(0) === '\\') {
    switch (s.charAt(1)) {
      case 'b':
        return '\b';
      case 'f':
        return '\f';
      case 'n':
        return '\n';
      case 'r':
        return '\r';
      case 't':
        return '\t';
      case 'v':
        return '\v';
      case 'x':
        return escapeUnicode(s.slice(2, 4));
      case 'u':
        return s.charAt(2) === '{' ?
          escapeUnicode(s.slice(3, -1)) :
          escapeUnicode(s.slice(2, 6));
      default:
        return s.charAt(1);
    }
  } else {
    return s;
  }
};

// Helper for producing a description of an unknown object in a safe way.
// Especially useful for error messages where an unexpected type of object was encountered.
exports.unexpectedObjToString = function(obj) {
  if (obj == null) {
    return String(obj);
  }
  const baseToString = Object.prototype.toString.call(obj);
  try {
    let typeName;
    if (obj.constructor && obj.constructor.name) {
      typeName = obj.constructor.name;
    } else if (baseToString.indexOf('[object ') === 0) {
      typeName = baseToString.slice(8, -1); // Extract e.g. "Array" from "[object Array]".
    } else {
      typeName = typeof obj;
    }
    return typeName + ': ' + JSON.stringify(String(obj));
  } catch (e) {
    return baseToString;
  }
};


/***/ }),

/***/ "prettier":
/*!*************************************************************************************************************!*\
  !*** external {"commonjs":"prettier","commonjs2":"prettier","amd":"prettier/standalone","root":"prettier"} ***!
  \*************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = __WEBPACK_EXTERNAL_MODULE_prettier__;

/***/ }),

/***/ "./node_modules/html-styles/index.json":
/*!*********************************************!*\
  !*** ./node_modules/html-styles/index.json ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"selectorText":"[hidden], area, base, basefont, datalist, head, link, meta,\\nnoembed, noframes, param, rp, script, source, style, template, track, title","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"embed[hidden]","type":"CSSStyleRule","style":{"display":"inline","height":"0","width":"0"}},{"selectorText":"input[type=hidden i]","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"html, body","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, xmp","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"blockquote, figure, listing, p, plaintext, pre, xmp","type":"CSSStyleRule","style":{"margin-block-start":"1em","margin-block-end":"1em"}},{"selectorText":"blockquote, figure","type":"CSSStyleRule","style":{"margin-inline-start":"40px","margin-inline-end":"40px"}},{"selectorText":"address","type":"CSSStyleRule","style":{"font-style":"italic"}},{"selectorText":"listing, plaintext, pre, xmp","type":"CSSStyleRule","style":{"font-family":"monospace","white-space":"pre"}},{"selectorText":"dialog:not([open])","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"dialog","type":"CSSStyleRule","style":{"position":"absolute","left":"0","right":"0","width":"fit-content","height":"fit-content","margin":"auto","border":"solid","padding":"1em","background":"white","color":"black"}},{"selectorText":"dialog::backdrop","type":"CSSStyleRule","style":{"background":"rgba(0,0,0,0.1)"}},{"selectorText":"slot","type":"CSSStyleRule","style":{"display":"contents"}},{"selectorText":"pre[wrap]","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}},{"selectorText":"form","type":"CSSStyleRule","style":{"margin-block-end":"1em"}},{"selectorText":"cite, dfn, em, i, var","type":"CSSStyleRule","style":{"font-style":"italic"}},{"selectorText":"b, strong","type":"CSSStyleRule","style":{"font-weight":"bolder"}},{"selectorText":"code, kbd, samp, tt","type":"CSSStyleRule","style":{"font-family":"monospace"}},{"selectorText":"big","type":"CSSStyleRule","style":{"font-size":"larger"}},{"selectorText":"small","type":"CSSStyleRule","style":{"font-size":"smaller"}},{"selectorText":"sub","type":"CSSStyleRule","style":{"vertical-align":"sub"}},{"selectorText":"sup","type":"CSSStyleRule","style":{"vertical-align":"super"}},{"selectorText":"sub, sup","type":"CSSStyleRule","style":{"line-height":"normal","font-size":"smaller"}},{"selectorText":"ruby","type":"CSSStyleRule","style":{"display":"ruby"}},{"selectorText":"rt","type":"CSSStyleRule","style":{"display":"ruby-text"}},{"selectorText":":link","type":"CSSStyleRule","style":{"color":"#0000EE"}},{"selectorText":":visited","type":"CSSStyleRule","style":{"color":"#551A8B"}},{"selectorText":":link:active, :visited:active","type":"CSSStyleRule","style":{"color":"#FF0000"}},{"selectorText":":link, :visited","type":"CSSStyleRule","style":{"text-decoration":"underline","cursor":"pointer"}},{"selectorText":"a:link[rel~=help], a:visited[rel~=help],\\narea:link[rel~=help], area:visited[rel~=help]","type":"CSSStyleRule","style":{"cursor":"help"}},{"selectorText":":focus","type":"CSSStyleRule","style":{"outline":"auto"}},{"selectorText":"mark","type":"CSSStyleRule","style":{"background":"yellow","color":"black"}},{"selectorText":"abbr[title], acronym[title]","type":"CSSStyleRule","style":{"text-decoration":"dotted underline"}},{"selectorText":"ins, u","type":"CSSStyleRule","style":{"text-decoration":"underline"}},{"selectorText":"del, s, strike","type":"CSSStyleRule","style":{"text-decoration":"line-through"}},{"selectorText":"blink","type":"CSSStyleRule","style":{"text-decoration":"blink"}},{"selectorText":"q::before","type":"CSSStyleRule","style":{"content":"open-quote"}},{"selectorText":"q::after","type":"CSSStyleRule","style":{"content":"close-quote"}},{"selectorText":"br","type":"CSSStyleRule","style":{"display-outside":"newline"}},{"selectorText":"nobr","type":"CSSStyleRule","style":{"white-space":"nowrap"}},{"selectorText":"wbr","type":"CSSStyleRule","style":{"display-outside":"break-opportunity"}},{"selectorText":"nobr wbr","type":"CSSStyleRule","style":{"white-space":"normal"}},{"selectorText":"br[clear=left i]","type":"CSSStyleRule","style":{"clear":"left"}},{"selectorText":"br[clear=right i]","type":"CSSStyleRule","style":{"clear":"right"}},{"selectorText":"br[clear=all i], br[clear=both i]","type":"CSSStyleRule","style":{"clear":"both"}},{"selectorText":"[dir]:dir(ltr), bdi:dir(ltr), input[type=tel i]:dir(ltr)","type":"CSSStyleRule","style":{"direction":"ltr"}},{"selectorText":"[dir]:dir(rtl), bdi:dir(rtl)","type":"CSSStyleRule","style":{"direction":"rtl"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,\\nh3, h4, h5, h6, hgroup, nav, section, table, caption, colgroup, col, thead,\\ntbody, tfoot, tr, td, th, dir, dd, dl, dt, ol, ul, li, bdi, output,\\n[dir=ltr i], [dir=rtl i], [dir=auto i]","type":"CSSStyleRule","style":{"unicode-bidi":"isolate"}},{"selectorText":"bdo, bdo[dir]","type":"CSSStyleRule","style":{"unicode-bidi":"isolate-override"}},{"selectorText":"input[dir=auto i][type=search i], input[dir=auto i][type=tel i], input[dir=auto i][type=url i], input[dir=auto i][type=email i], textarea[dir=auto i], pre[dir=auto i]","type":"CSSStyleRule","style":{"unicode-bidi":"plaintext"}},{"selectorText":"address, blockquote, center, div, figure, figcaption, footer, form, header, hr,\\nlegend, listing, main, p, plaintext, pre, summary, xmp, article, aside, h1, h2,\\nh3, h4, h5, h6, hgroup, nav, section, table, caption, colgroup, col, thead,\\ntbody, tfoot, tr, td, th, dir, dd, dl, dt, ol, ul, li, [dir=ltr i],\\n[dir=rtl i], [dir=auto i], *|*","type":"CSSStyleRule","style":{"unicode-bidi":"bidi-override"}},{"selectorText":"input:not([type=submit i]):not([type=reset i]):not([type=button i]),\\ntextarea","type":"CSSStyleRule","style":{"unicode-bidi":"normal"}},{"selectorText":"article, aside, h1, h2, h3, h4, h5, h6, hgroup, nav, section","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"h1","type":"CSSStyleRule","style":{"margin-block-start":"0.67em","margin-block-end":"0.67em","font-size":"2.00em","font-weight":"bold"}},{"selectorText":"h2","type":"CSSStyleRule","style":{"margin-block-start":"0.83em","margin-block-end":"0.83em","font-size":"1.50em","font-weight":"bold"}},{"selectorText":"h3","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em","font-weight":"bold"}},{"selectorText":"h4","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em","font-weight":"bold"}},{"selectorText":"h5","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em","font-weight":"bold"}},{"selectorText":"h6","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em","font-weight":"bold"}},{"selectorText":"x h1","type":"CSSStyleRule","style":{"margin-block-start":"0.83em","margin-block-end":"0.83em","font-size":"1.50em"}},{"selectorText":"x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em"}},{"selectorText":"x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x x x h1","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.00em","margin-block-end":"1.00em","font-size":"1.17em"}},{"selectorText":"x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x x hgroup > h1 ~ h2","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"1.33em","margin-block-end":"1.33em","font-size":"1.00em"}},{"selectorText":"x x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x x hgroup > h1 ~ h3","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h4","type":"CSSStyleRule","style":{"margin-block-start":"1.67em","margin-block-end":"1.67em","font-size":"0.83em"}},{"selectorText":"x x hgroup > h1 ~ h4","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"x hgroup > h1 ~ h5","type":"CSSStyleRule","style":{"margin-block-start":"2.33em","margin-block-end":"2.33em","font-size":"0.67em"}},{"selectorText":"dir, dd, dl, dt, ol, ul","type":"CSSStyleRule","style":{"display":"block"}},{"selectorText":"li","type":"CSSStyleRule","style":{"display":"list-item"}},{"selectorText":"dir, dl, ol, ul","type":"CSSStyleRule","style":{"margin-block-start":"1em","margin-block-end":"1em"}},{"selectorText":"dir dir, dl dir, ol dir, ul dir, dir dl, dl dl, ol dl, ul dl, dir ol, dl ol, ol ol, ul ol, dir ul, dl ul, ol ul, ul ul","type":"CSSStyleRule","style":{"margin-block-start":"0","margin-block-end":"0"}},{"selectorText":"dd","type":"CSSStyleRule","style":{"margin-inline-start":"40px"}},{"selectorText":"dir, ol, ul","type":"CSSStyleRule","style":{"padding-inline-start":"40px"}},{"selectorText":"ol","type":"CSSStyleRule","style":{"list-style-type":"decimal"}},{"selectorText":"dir, ul","type":"CSSStyleRule","style":{"list-style-type":"disc"}},{"selectorText":"dir dir, ol dir, ul dir, dir ul, ol ul, ul ul","type":"CSSStyleRule","style":{"list-style-type":"circle"}},{"selectorText":"dir dir dir, ol dir dir, ul dir dir, dir ol dir, ol ol dir, ul ol dir, dir ul dir, ol ul dir, ul ul dir, dir dir ul, ol dir ul, ul dir ul, dir ol ul, ol ol ul, ul ol ul, dir ul ul, ol ul ul, ul ul ul","type":"CSSStyleRule","style":{"list-style-type":"square"}},{"selectorText":"ol[type=\\"1\\"], li[type=\\"1\\"]","type":"CSSStyleRule","style":{"list-style-type":"decimal"}},{"selectorText":"ol[type=a], li[type=a]","type":"CSSStyleRule","style":{"list-style-type":"lower-alpha"}},{"selectorText":"ol[type=A], li[type=A]","type":"CSSStyleRule","style":{"list-style-type":"upper-alpha"}},{"selectorText":"ol[type=i], li[type=i]","type":"CSSStyleRule","style":{"list-style-type":"lower-roman"}},{"selectorText":"ol[type=I], li[type=I]","type":"CSSStyleRule","style":{"list-style-type":"upper-roman"}},{"selectorText":"ul[type=none i], li[type=none i]","type":"CSSStyleRule","style":{"list-style-type":"none"}},{"selectorText":"ul[type=disc i], li[type=disc i]","type":"CSSStyleRule","style":{"list-style-type":"disc"}},{"selectorText":"ul[type=circle i], li[type=circle i]","type":"CSSStyleRule","style":{"list-style-type":"circle"}},{"selectorText":"ul[type=square i], li[type=square i]","type":"CSSStyleRule","style":{"list-style-type":"square"}},{"selectorText":"table","type":"CSSStyleRule","style":{"display":"table"}},{"selectorText":"caption","type":"CSSStyleRule","style":{"display":"table-caption"}},{"selectorText":"colgroup, colgroup[hidden]","type":"CSSStyleRule","style":{"display":"table-column-group"}},{"selectorText":"col, col[hidden]","type":"CSSStyleRule","style":{"display":"table-column"}},{"selectorText":"thead, thead[hidden]","type":"CSSStyleRule","style":{"display":"table-header-group"}},{"selectorText":"tbody, tbody[hidden]","type":"CSSStyleRule","style":{"display":"table-row-group"}},{"selectorText":"tfoot, tfoot[hidden]","type":"CSSStyleRule","style":{"display":"table-footer-group"}},{"selectorText":"tr, tr[hidden]","type":"CSSStyleRule","style":{"display":"table-row"}},{"selectorText":"td, th, td[hidden], th[hidden]","type":"CSSStyleRule","style":{"display":"table-cell"}},{"selectorText":"colgroup[hidden], col[hidden], thead[hidden], tbody[hidden],\\ntfoot[hidden], tr[hidden], td[hidden], th[hidden]","type":"CSSStyleRule","style":{"visibility":"collapse"}},{"selectorText":"table","type":"CSSStyleRule","style":{"box-sizing":"border-box","border-spacing":"2px","border-collapse":"separate","text-indent":"initial"}},{"selectorText":"td, th","type":"CSSStyleRule","style":{"padding":"1px"}},{"selectorText":"th","type":"CSSStyleRule","style":{"font-weight":"bold"}},{"selectorText":"caption","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"thead, tbody, tfoot, table > tr","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"tr, td, th","type":"CSSStyleRule","style":{"vertical-align":"inherit"}},{"selectorText":"table, td, th","type":"CSSStyleRule","style":{"border-color":"gray"}},{"selectorText":"thead, tbody, tfoot, tr","type":"CSSStyleRule","style":{"border-color":"inherit"}},{"selectorText":"table[rules=none i], table[rules=groups i], table[rules=rows i],\\ntable[rules=cols i], table[rules=all i], table[frame=void i],\\ntable[frame=above i], table[frame=below i], table[frame=hsides i],\\ntable[frame=lhs i], table[frame=rhs i], table[frame=vsides i],\\ntable[frame=box i], table[frame=border i],\\ntable[rules=none i] > tr > td, table[rules=none i] > tr > th,\\ntable[rules=groups i] > tr > td, table[rules=groups i] > tr > th,\\ntable[rules=rows i] > tr > td, table[rules=rows i] > tr > th,\\ntable[rules=cols i] > tr > td, table[rules=cols i] > tr > th,\\ntable[rules=all i] > tr > td, table[rules=all i] > tr > th,\\ntable[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,\\ntable[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,\\ntable[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,\\ntable[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,\\ntable[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,\\ntable[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,\\ntable[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,\\ntable[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,\\ntable[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,\\ntable[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,\\ntable[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,\\ntable[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,\\ntable[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th,\\ntable[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th,\\ntable[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-color":"black"}},{"selectorText":"table[align=left i]","type":"CSSStyleRule","style":{"float":"left"}},{"selectorText":"table[align=right i]","type":"CSSStyleRule","style":{"float":"right"}},{"selectorText":"table[align=center i]","type":"CSSStyleRule","style":{"margin-inline-start":"auto","margin-inline-end":"auto"}},{"selectorText":"thead[align=absmiddle i], tbody[align=absmiddle i], tfoot[align=absmiddle i],\\ntr[align=absmiddle i], td[align=absmiddle i], th[align=absmiddle i]","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"caption[align=bottom i]","type":"CSSStyleRule","style":{"caption-side":"bottom"}},{"selectorText":"p[align=left i], h1[align=left i], h2[align=left i], h3[align=left i],\\nh4[align=left i], h5[align=left i], h6[align=left i]","type":"CSSStyleRule","style":{"text-align":"left"}},{"selectorText":"p[align=right i], h1[align=right i], h2[align=right i], h3[align=right i],\\nh4[align=right i], h5[align=right i], h6[align=right i]","type":"CSSStyleRule","style":{"text-align":"right"}},{"selectorText":"p[align=center i], h1[align=center i], h2[align=center i], h3[align=center i],\\nh4[align=center i], h5[align=center i], h6[align=center i]","type":"CSSStyleRule","style":{"text-align":"center"}},{"selectorText":"p[align=justify i], h1[align=justify i], h2[align=justify i], h3[align=justify i],\\nh4[align=justify i], h5[align=justify i], h6[align=justify i]","type":"CSSStyleRule","style":{"text-align":"justify"}},{"selectorText":"thead[valign=top i], tbody[valign=top i], tfoot[valign=top i],\\ntr[valign=top i], td[valign=top i], th[valign=top i]","type":"CSSStyleRule","style":{"vertical-align":"top"}},{"selectorText":"thead[valign=middle i], tbody[valign=middle i], tfoot[valign=middle i],\\ntr[valign=middle i], td[valign=middle i], th[valign=middle i]","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"thead[valign=bottom i], tbody[valign=bottom i], tfoot[valign=bottom i],\\ntr[valign=bottom i], td[valign=bottom i], th[valign=bottom i]","type":"CSSStyleRule","style":{"vertical-align":"bottom"}},{"selectorText":"thead[valign=baseline i], tbody[valign=baseline i], tfoot[valign=baseline i],\\ntr[valign=baseline i], td[valign=baseline i], th[valign=baseline i]","type":"CSSStyleRule","style":{"vertical-align":"baseline"}},{"selectorText":"td[nowrap], th[nowrap]","type":"CSSStyleRule","style":{"white-space":"nowrap"}},{"selectorText":"table[rules=none i], table[rules=groups i], table[rules=rows i],\\ntable[rules=cols i], table[rules=all i]","type":"CSSStyleRule","style":{"border-style":"hidden","border-collapse":"collapse"}},{"selectorText":"table[border]","type":"CSSStyleRule","style":{"border-style":"outset"}},{"selectorText":"table[frame=void i]","type":"CSSStyleRule","style":{"border-style":"hidden"}},{"selectorText":"table[frame=above i]","type":"CSSStyleRule","style":{"border-style":"outset hidden hidden hidden"}},{"selectorText":"table[frame=below i]","type":"CSSStyleRule","style":{"border-style":"hidden hidden outset hidden"}},{"selectorText":"table[frame=hsides i]","type":"CSSStyleRule","style":{"border-style":"outset hidden outset hidden"}},{"selectorText":"table[frame=lhs i]","type":"CSSStyleRule","style":{"border-style":"hidden hidden hidden outset"}},{"selectorText":"table[frame=rhs i]","type":"CSSStyleRule","style":{"border-style":"hidden outset hidden hidden"}},{"selectorText":"table[frame=vsides i]","type":"CSSStyleRule","style":{"border-style":"hidden outset"}},{"selectorText":"table[frame=box i], table[frame=border i]","type":"CSSStyleRule","style":{"border-style":"outset"}},{"selectorText":"table[border] > tr > td, table[border] > tr > th,\\ntable[border] > thead > tr > td, table[border] > thead > tr > th,\\ntable[border] > tbody > tr > td, table[border] > tbody > tr > th,\\ntable[border] > tfoot > tr > td, table[border] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"inset"}},{"selectorText":"table[rules=none i] > tr > td, table[rules=none i] > tr > th,\\ntable[rules=none i] > thead > tr > td, table[rules=none i] > thead > tr > th,\\ntable[rules=none i] > tbody > tr > td, table[rules=none i] > tbody > tr > th,\\ntable[rules=none i] > tfoot > tr > td, table[rules=none i] > tfoot > tr > th,\\ntable[rules=groups i] > tr > td, table[rules=groups i] > tr > th,\\ntable[rules=groups i] > thead > tr > td, table[rules=groups i] > thead > tr > th,\\ntable[rules=groups i] > tbody > tr > td, table[rules=groups i] > tbody > tr > th,\\ntable[rules=groups i] > tfoot > tr > td, table[rules=groups i] > tfoot > tr > th,\\ntable[rules=rows i] > tr > td, table[rules=rows i] > tr > th,\\ntable[rules=rows i] > thead > tr > td, table[rules=rows i] > thead > tr > th,\\ntable[rules=rows i] > tbody > tr > td, table[rules=rows i] > tbody > tr > th,\\ntable[rules=rows i] > tfoot > tr > td, table[rules=rows i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"none"}},{"selectorText":"table[rules=cols i] > tr > td, table[rules=cols i] > tr > th,\\ntable[rules=cols i] > thead > tr > td, table[rules=cols i] > thead > tr > th,\\ntable[rules=cols i] > tbody > tr > td, table[rules=cols i] > tbody > tr > th,\\ntable[rules=cols i] > tfoot > tr > td, table[rules=cols i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","block-start-style":"none","border-inline-end-style":"solid","border-block-end-style":"none","border-inline-start-style":"solid"}},{"selectorText":"table[rules=all i] > tr > td, table[rules=all i] > tr > th,\\ntable[rules=all i] > thead > tr > td, table[rules=all i] > thead > tr > th,\\ntable[rules=all i] > tbody > tr > td, table[rules=all i] > tbody > tr > th,\\ntable[rules=all i] > tfoot > tr > td, table[rules=all i] > tfoot > tr > th","type":"CSSStyleRule","style":{"border-width":"1px","border-style":"solid"}},{"selectorText":"table[rules=groups i] > colgroup","type":"CSSStyleRule","style":{"border-inline-start-width":"1px","border-inline-start-style":"solid","border-inline-end-width":"1px","border-inline-end-style":"solid"}},{"selectorText":"table[rules=groups i] > thead,\\ntable[rules=groups i] > tbody,\\ntable[rules=groups i] > tfoot","type":"CSSStyleRule","style":{"border-block-start-width":"1px","border-block-start-style":"solid","border-block-end-width":"1px","border-block-end-style":"solid"}},{"selectorText":"table[rules=rows i] > tr, table[rules=rows i] > thead > tr,\\ntable[rules=rows i] > tbody > tr, table[rules=rows i] > tfoot > tr","type":"CSSStyleRule","style":{"border-block-start-width":"1px","border-block-start-style":"solid","border-block-end-width":"1px","border-block-end-style":"solid"}},{"selectorText":"table","type":"CSSStyleRule","style":{"font-weight":"initial","font-style":"initial","font-variant":"initial","font-size":"initial","line-height":"initial","white-space":"initial","text-align":"initial"}},{"selectorText":"table > form, thead > form, tbody > form, tfoot > form, tr > form","type":"CSSStyleRule","style":{"display":"none"}},{"selectorText":"input, select, option, optgroup, button, textarea","type":"CSSStyleRule","style":{"text-indent":"initial"}},{"selectorText":"input[type=radio i], input[type=checkbox i], input[type=reset i], input[type=button i], input[type=submit i], input[type=search i], select, button","type":"CSSStyleRule","style":{"box-sizing":"border-box"}},{"selectorText":"textarea","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}},{"selectorText":"input:not([type=image i]), textarea","type":"CSSStyleRule","style":{"box-sizing":"border-box"}},{"selectorText":"hr","type":"CSSStyleRule","style":{"color":"gray","border-style":"inset","border-width":"1px","margin-block-start":"0.5em","margin-inline-end":"auto","margin-block-end":"0.5em","margin-inline-start":"auto"}},{"selectorText":"hr[align=left i]","type":"CSSStyleRule","style":{"margin-left":"0","margin-right":"auto"}},{"selectorText":"hr[align=right i]","type":"CSSStyleRule","style":{"margin-left":"auto","margin-right":"0"}},{"selectorText":"hr[align=center i]","type":"CSSStyleRule","style":{"margin-left":"auto","margin-right":"auto"}},{"selectorText":"hr[color], hr[noshade]","type":"CSSStyleRule","style":{"border-style":"solid"}},{"selectorText":"fieldset","type":"CSSStyleRule","style":{"display":"block","margin-inline-start":"2px","margin-inline-end":"2px","border":"groove 2px ThreeDFace","padding-block-start":"0.35em","padding-inline-end":"0.625em","padding-block-end":"0.75em","padding-inline-start":"0.625em","min-width":"min-content"}},{"selectorText":"legend","type":"CSSStyleRule","style":{"padding-inline-start":"2px","padding-inline-end":"2px"}},{"selectorText":"iframe","type":"CSSStyleRule","style":{"border":"2px inset"}},{"selectorText":"video","type":"CSSStyleRule","style":{"object-fit":"contain"}},{"selectorText":"img[align=left i]","type":"CSSStyleRule","style":{"margin-right":"3px"}},{"selectorText":"img[align=right i]","type":"CSSStyleRule","style":{"margin-left":"3px"}},{"selectorText":"iframe[frameborder=\\"0\\"], iframe[frameborder=no i]","type":"CSSStyleRule","style":{"border":"none"}},{"selectorText":"applet[align=left i], embed[align=left i], iframe[align=left i],\\nimg[align=left i], input[type=image i][align=left i], object[align=left i]","type":"CSSStyleRule","style":{"float":"left"}},{"selectorText":"applet[align=right i], embed[align=right i], iframe[align=right i],\\nimg[align=right i], input[type=image i][align=right i], object[align=right i]","type":"CSSStyleRule","style":{"float":"right"}},{"selectorText":"applet[align=top i], embed[align=top i], iframe[align=top i],\\nimg[align=top i], input[type=image i][align=top i], object[align=top i]","type":"CSSStyleRule","style":{"vertical-align":"top"}},{"selectorText":"applet[align=baseline i], embed[align=baseline i], iframe[align=baseline i],\\nimg[align=baseline i], input[type=image i][align=baseline i], object[align=baseline i]","type":"CSSStyleRule","style":{"vertical-align":"baseline"}},{"selectorText":"applet[align=texttop i], embed[align=texttop i], iframe[align=texttop i],\\nimg[align=texttop i], input[type=image i][align=texttop i], object[align=texttop i]","type":"CSSStyleRule","style":{"vertical-align":"text-top"}},{"selectorText":"applet[align=absmiddle i], embed[align=absmiddle i], iframe[align=absmiddle i],\\nimg[align=absmiddle i], input[type=image i][align=absmiddle i], object[align=absmiddle i],\\napplet[align=abscenter i], embed[align=abscenter i], iframe[align=abscenter i],\\nimg[align=abscenter i], input[type=image i][align=abscenter i], object[align=abscenter i]","type":"CSSStyleRule","style":{"vertical-align":"middle"}},{"selectorText":"applet[align=bottom i], embed[align=bottom i], iframe[align=bottom i],\\nimg[align=bottom i], input[type=image i][align=bottom i],\\nobject[align=bottom i]","type":"CSSStyleRule","style":{"vertical-align":"bottom"}},{"selectorText":"textarea","type":"CSSStyleRule","style":{"white-space":"pre-wrap"}}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQSxpQ0FBaUMsZ0NBQWdDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTiw0Q0FBNEM7QUFDNUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyx1QkFBdUI7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxrQkFBa0I7QUFDekI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUyxVQUFVO0FBQ25CO0FBQ0EscURBQXFELFNBQVM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxTQUFTLE9BQU8sTUFBTSxHQUFHLEtBQUssSUFBSSxTQUFTO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFFBQVE7QUFDakIsU0FBUyxXQUFXOztBQUVwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEsT0FBTyx1QkFBdUI7QUFDOUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLGtCQUFrQjtBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTyxrQkFBa0I7QUFDekI7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FB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QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLGFBQWE7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLGFBQWE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNB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RUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxzQ0FBc0M7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHlCQUF5QjtBQUNwQyxzQkFBc0Isc0NBQXNDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPLGVBQWU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0NBQWdDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxxQ0FBcUM7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esd0VBQXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCwwQ0FBMEM7QUFDMUMsS0FBSztBQUNMLEdBQUc7QUFDSCxXQUFXLEtBQUs7O0FBRWhCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLDBCQUEwQjtBQUMxQixRQUFRLEVBQUU7QUFDVjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFNBQVMsTUFBTTtBQUNmLFNBQVMsU0FBUzs7QUFFbEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7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QUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsc0JBQXNCO0FBQ3RCLHFCQUFxQjs7QUFFckI7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7QUFHQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLFFBQVE7O0FBRWY7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztB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O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7VUVOQTtVQUNBO1VBQ0E7VUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2J1aWxkL3NoaW1zL2xpcXVpZC1odG1sLW9obS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvY29uc3RhbnRzLmV2YWx1YXRlLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2FzdC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2NzdC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL2dyYW1tYXIuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3BhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcGFyc2VyL3BhcnNlci5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1jc3MtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1mYW1pbHkuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtcGFyZW50LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXNpYmxpbmdzLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXdoaXRlc3BhY2UtaGVscGVycy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmVwcm9jZXNzL2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByaW50LXByZXByb2Nlc3MuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvY2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci9wcmludC9saXF1aWQuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvcHJpbnQvdGFnLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC9wcmludGVyL3ByaW50ZXItbGlxdWlkLWh0bWwuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3ByaW50ZXIvdXRpbHMvbm9kZS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL2Rpc3QvcHJpbnRlci91dGlscy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvLi9kaXN0L3R5cGVzLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vZGlzdC91dGlscy5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9odG1sLXN0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL2xpbmUtY29sdW1uL2xpYi9saW5lLWNvbHVtbi5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9vaG0tanMvZGlzdC9vaG0uZXNtLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9leHRyYXMvVmlzaXRvckZhbWlseS5qcyIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC8uL25vZGVfbW9kdWxlcy9vaG0tanMvZXh0cmFzL2luZGV4LmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9leHRyYXMvc2VtYW50aWNzLXRvQVNULmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkLy4vbm9kZV9tb2R1bGVzL29obS1qcy9zcmMvY29tbW9uLmpzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL2V4dGVybmFsIHVtZCB7XCJjb21tb25qc1wiOlwicHJldHRpZXJcIixcImNvbW1vbmpzMlwiOlwicHJldHRpZXJcIixcImFtZFwiOlwicHJldHRpZXIvc3RhbmRhbG9uZVwiLFwicm9vdFwiOlwicHJldHRpZXJcIn0iLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcHJldHRpZXJQbHVnaW5MaXF1aWQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC93ZWJwYWNrL2JlZm9yZS1zdGFydHVwIiwid2VicGFjazovL3ByZXR0aWVyUGx1Z2luTGlxdWlkL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9wcmV0dGllclBsdWdpbkxpcXVpZC93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicHJldHRpZXJcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicHJldHRpZXIvc3RhbmRhbG9uZVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJwcmV0dGllclBsdWdpbkxpcXVpZFwiXSA9IGZhY3RvcnkocmVxdWlyZShcInByZXR0aWVyXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJwcmV0dGllclBsdWdpbkxpcXVpZFwiXSA9IGZhY3Rvcnkocm9vdFtcInByZXR0aWVyXCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcHJldHRpZXJfXykge1xucmV0dXJuICIsIm1vZHVsZS5leHBvcnRzID0gU3RyaW5nLnJhd2BMaXF1aWRIVE1MIHtcbiAgTm9kZVxuICAgID0geWFtbEZyb250bWF0dGVyPyAoSHRtbE5vZGUgfCBsaXF1aWROb2RlIHwgVGV4dE5vZGUpKlxuXG4gIHlhbWxGcm9udG1hdHRlciA9XG4gICAgXCItLS1cIiBuZXdsaW5lIGFueUV4Y2VwdFN0YXI8XCItLS1cIj4gXCItLS1cIiBuZXdsaW5lXG5cbiAgSHRtbE5vZGUgPVxuICAgIHwgSHRtbENvbW1lbnRcbiAgICB8IEh0bWxSYXdUYWdcbiAgICB8IEh0bWxWb2lkRWxlbWVudFxuICAgIHwgSHRtbFNlbGZDbG9zaW5nRWxlbWVudFxuICAgIHwgSHRtbFRhZ0Nsb3NlXG4gICAgfCBIdG1sVGFnT3BlblxuXG4gIEh0bWxDb21tZW50ID0gXCI8IS0tXCIgIyhhbnlFeGNlcHRTdGFyPFwiLS0+XCI+IFwiLS0+XCIpXG5cbiAgLy8gVGhlc2UgYXJlIGJsYWNrIGhvbGVzLCB3ZSdsbCBpZ25vcmUgd2hhdCdzIGluIHRoZW1cbiAgSHRtbFJhd1RhZyA9XG4gICAgfCBIdG1sUmF3VGFnSW1wbDxcInNjcmlwdFwiPlxuICAgIHwgSHRtbFJhd1RhZ0ltcGw8XCJzdHlsZVwiPlxuICAgIHwgSHRtbFJhd1RhZ0ltcGw8XCJzdmdcIj5cblxuICBIdG1sUmF3VGFnSW1wbDxuYW1lPiA9XG4gICAgIyhcIjxcIiBuYW1lKSBBdHRyTGlzdCBcIj5cIiAjKGFueUV4Y2VwdFN0YXI8ZW5kVGFnPG5hbWU+PiBlbmRUYWc8bmFtZT4pXG5cbiAgZW5kVGFnPG5hbWU+ID1cbiAgICBcIjwvXCIgbmFtZSBzcGFjZSogXCI+XCJcblxuICBIdG1sVm9pZEVsZW1lbnQgPVxuICAgICMoXCI8XCIgdm9pZEVsZW1lbnROYW1lICYoc3BhY2UgfCBcIi9cIiB8IFwiPlwiKSkgQXR0ckxpc3QgXCIvXCI/IFwiPlwiXG5cbiAgSHRtbFNlbGZDbG9zaW5nRWxlbWVudCA9XG4gICAgIyhcIjxcIiB0YWdOYW1lT3JMaXF1aWREcm9wKSBBdHRyTGlzdCBcIi8+XCJcblxuICBIdG1sVGFnT3BlbiA9XG4gICAgIyhcIjxcIiB0YWdOYW1lT3JMaXF1aWREcm9wKSBBdHRyTGlzdCBcIj5cIlxuXG4gIEh0bWxUYWdDbG9zZSA9XG4gICAgIyhcIjwvXCIgdGFnTmFtZU9yTGlxdWlkRHJvcCkgXCI+XCJcblxuICB0YWdOYW1lT3JMaXF1aWREcm9wID1cbiAgICB8IHRhZ05hbWVcbiAgICB8IGxpcXVpZERyb3BcblxuICB0YWdOYW1lID1cbiAgICBsZXR0ZXIgKGFsbnVtIHwgXCItXCIgfCBcIjpcIikqXG5cbiAgbGlxdWlkVGFnTmFtZSA9XG4gICAgbGV0dGVyIChhbG51bSB8IFwiX1wiKSpcblxuICBBdHRyTGlzdCA9IEF0dHIqXG5cbiAgQXR0ciA9XG4gICAgbGlxdWlkTm9kZSB8IEF0dHJTaW5nbGVRdW90ZWQgfCBBdHRyRG91YmxlUXVvdGVkIHwgQXR0clVucXVvdGVkIHwgYXR0ckVtcHR5XG5cbiAgYXR0ckVtcHR5ID0gYXR0ck5hbWVcblxuICBBdHRyVW5xdW90ZWQgPSBhdHRyTmFtZSBcIj1cIiBhdHRyVW5xdW90ZWRWYWx1ZVxuICBBdHRyU2luZ2xlUXVvdGVkID0gYXR0ck5hbWUgXCI9XCIgXCInXCIgIyhhdHRyU2luZ2xlUXVvdGVkVmFsdWUgXCInXCIpXG4gIEF0dHJEb3VibGVRdW90ZWQgPSBhdHRyTmFtZSBcIj1cIiBcIlxcXCJcIiAjKGF0dHJEb3VibGVRdW90ZWRWYWx1ZSBcIlxcXCJcIilcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNhdHRyaWJ1dGVzLTJcbiAgYXR0ck5hbWUgPSBhbnlFeGNlcHRQbHVzPChzcGFjZSB8IHF1b3RlcyB8IFwiPVwiIHwgXCI+XCIgfCBcIi9cIiB8IFwie3tcIiB8IFwieyVcIiB8IGNvbnRyb2xzIHwgbm9uY2hhcmFjdGVycyk+XG4gIGF0dHJVbnF1b3RlZFZhbHVlID0gKGF0dHJVbnF1b3RlZFRleHROb2RlKSpcbiAgYXR0clNpbmdsZVF1b3RlZFZhbHVlID0gKGxpcXVpZE5vZGUgfCBhdHRyU2luZ2xlUXVvdGVkVGV4dE5vZGUpKlxuICBhdHRyRG91YmxlUXVvdGVkVmFsdWUgPSAobGlxdWlkTm9kZSB8IGF0dHJEb3VibGVRdW90ZWRUZXh0Tm9kZSkqXG5cbiAgYXR0clVucXVvdGVkVGV4dE5vZGUgPSBhbnlFeGNlcHRQbHVzPChzcGFjZSB8IHF1b3RlcyB8IFwiPVwiIHwgXCI8XCIgfCBcIj5cIiB8IFwiJHtcImBcIn1cIiB8IFwie3tcIiB8IFwieyVcIik+XG4gIGF0dHJTaW5nbGVRdW90ZWRUZXh0Tm9kZSA9IGFueUV4Y2VwdFBsdXM8KFwiJ1wiIHwgXCJ7e1wiIHwgXCJ7JVwiKT5cbiAgYXR0ckRvdWJsZVF1b3RlZFRleHROb2RlID0gYW55RXhjZXB0UGx1czwoXCJcXFwiXCJ8IFwie3tcIiB8IFwieyVcIik+XG5cbiAgcXVvdGVzID0gIFwiJ1wiIHwgXCJcXFwiXCJcblxuICBMaXF1aWROb2RlID0gbGlxdWlkTm9kZVxuICBsaXF1aWROb2RlID0gbGlxdWlkUmF3VGFnIHwgbGlxdWlkRHJvcCB8IGxpcXVpZFRhZ0Nsb3NlIHwgbGlxdWlkVGFnT3BlbiB8IGxpcXVpZFRhZyB8IGxpcXVpZElubGluZUNvbW1lbnRcblxuICBsaXF1aWRUYWdPcGVuID0gXCJ7JVwiIFwiLVwiPyBzcGFjZSogYmxvY2tOYW1lIHNwYWNlKiB0YWdNYXJrdXAgXCItXCI/IFwiJX1cIlxuICBsaXF1aWRUYWdDbG9zZSA9IFwieyVcIiBcIi1cIj8gc3BhY2UqIFwiZW5kXCIgYmxvY2tOYW1lIHNwYWNlKiB0YWdNYXJrdXAgXCItXCI/IFwiJX1cIlxuICBsaXF1aWRUYWcgPSBcInslXCIgXCItXCI/IHNwYWNlKiBsaXF1aWRUYWdOYW1lIHNwYWNlPyB0YWdNYXJrdXAgXCItXCI/IFwiJX1cIlxuICBsaXF1aWREcm9wID0gXCJ7e1wiIFwiLVwiPyBzcGFjZSogbGlxdWlkRHJvcENhc2VzIFwiLVwiPyBcIn19XCJcbiAgbGlxdWlkRHJvcENhc2VzID0gbGlxdWlkVmFyaWFibGUgfCBsaXF1aWREcm9wQmFzZUNhc2VcbiAgbGlxdWlkRHJvcEJhc2VDYXNlID0gYW55RXhjZXB0U3RhcjwoXCItfX1cIiB8IFwifX1cIik+XG4gIGxpcXVpZElubGluZUNvbW1lbnQgPSBcInslXCIgXCItXCI/IHNwYWNlKiBcIiNcIiBzcGFjZT8gdGFnTWFya3VwIFwiLVwiPyBcIiV9XCJcblxuICBsaXF1aWRSYXdUYWcgPVxuICAgIHwgbGlxdWlkUmF3VGFnSW1wbDxcInJhd1wiPlxuICAgIHwgbGlxdWlkUmF3VGFnSW1wbDxcImNvbW1lbnRcIj5cbiAgICB8IGxpcXVpZFJhd1RhZ0ltcGw8XCJqYXZhc2NyaXB0XCI+XG4gICAgfCBsaXF1aWRSYXdUYWdJbXBsPFwic2NoZW1hXCI+XG4gICAgfCBsaXF1aWRSYXdUYWdJbXBsPFwic3R5bGVcIj5cbiAgbGlxdWlkUmF3VGFnSW1wbDxuYW1lPiA9XG4gICAgXCJ7JVwiIFwiLVwiPyBzcGFjZSogbmFtZSBzcGFjZSogXCItXCI/IFwiJX1cIlxuICAgIGFueUV4Y2VwdFN0YXI8bGlxdWlkUmF3VGFnQ2xvc2U8bmFtZT4+XG4gICAgXCJ7JVwiIFwiLVwiPyBzcGFjZSogXCJlbmRcIiBuYW1lIHNwYWNlKiBcIi1cIj8gXCIlfVwiXG4gIGxpcXVpZFJhd1RhZ0Nsb3NlPG5hbWU+ID1cbiAgICBcInslXCIgXCItXCI/IHNwYWNlKiBcImVuZFwiIG5hbWUgc3BhY2UqIFwiLVwiPyBcIiV9XCJcblxuICAvLyBJbiBvcmRlciBmb3IgdGhlIGdyYW1tYXIgdG8gXCJmYWxsYmFja1wiIHRvIHRoZSBiYXNlIGNhc2UsIHRoaXNcbiAgLy8gcnVsZSBtdXN0IHBhc3MgaWYgYW5kIG9ubHkgaWYgd2Ugc3VwcG9ydCB3aGF0IHdlIHBhcnNlLiBUaGlzXG4gIC8vIGltcGxpZXMgdGhhdOKAlHNpbmNlIHdlIGRvbid0IHN1cHBvcnQgZmlsdGVycyB5ZXTigJR3ZSBoYXZlIGFcbiAgLy8gcG9zaXRpdmUgbG9va2FoZWFkIG9uIFwiLX19XCIgb3IgXCJ9fVwiIGluIHRoZSBydWxlLiBXZSBkbyB0aGlzXG4gIC8vIGJlY2F1c2Ugd2UnZCBvdGhlcndpc2UgcG9zaXRpdmVseSBtYXRjaCB0aGUgZm9sbG93aW5nIHN0cmluZ1xuICAvLyBpbnN0ZWFkIG9mIGZhbGxpbmcgYmFjayB0byB0aGUgb3RoZXIgcnVsZTpcbiAgLy8ge3sgJ3N0cmluZycgfCBzb21lX2ZpbHRlciB9fVxuICBsaXF1aWRWYXJpYWJsZSA9IGxpcXVpZEV4cHJlc3Npb24gbGlxdWlkRmlsdGVyKiBzcGFjZSogJihcIi19fVwiIHwgXCJ9fVwiKVxuXG4gIGxpcXVpZEV4cHJlc3Npb24gPVxuICAgIHwgbGlxdWlkU3RyaW5nXG4gICAgfCBsaXF1aWROdW1iZXJcbiAgICB8IGxpcXVpZExpdGVyYWxcbiAgICB8IGxpcXVpZFJhbmdlXG4gICAgfCBsaXF1aWRWYXJpYWJsZUxvb2t1cFxuXG4gIGxpcXVpZFN0cmluZyA9IGxpcXVpZFNpbmdsZVF1b3RlZFN0cmluZyB8IGxpcXVpZERvdWJsZVF1b3RlZFN0cmluZ1xuICBsaXF1aWRTaW5nbGVRdW90ZWRTdHJpbmcgPSBcIidcIiBhbnlFeGNlcHRTdGFyPChcIidcInwgXCIlfVwiIHwgXCJ9fVwiKT4gXCInXCJcbiAgbGlxdWlkRG91YmxlUXVvdGVkU3RyaW5nID0gXCJcXFwiXCIgYW55RXhjZXB0U3RhcjwoXCJcXFwiXCJ8IFwiJX1cIiB8IFwifX1cIik+IFwiXFxcIlwiXG5cbiAgbGlxdWlkTnVtYmVyID0gbGlxdWlkRmxvYXQgfCBsaXF1aWRJbnRlZ2VyXG4gIGxpcXVpZEludGVnZXIgPSBcIi1cIj8gZGlnaXQrXG4gIGxpcXVpZEZsb2F0ID0gXCItXCI/IGRpZ2l0KyBcIi5cIiBkaWdpdCtcblxuICBsaXF1aWRMaXRlcmFsID1cbiAgICAoIFwidHJ1ZVwiXG4gICAgfCBcImZhbHNlXCJcbiAgICB8IFwiYmxhbmtcIlxuICAgIHwgXCJlbXB0eVwiXG4gICAgfCBcIm5pbFwiXG4gICAgfCBcIm51bGxcIlxuICAgICkgfmlkZW50aWZpZXJDaGFyYWN0ZXJcblxuICBsaXF1aWRSYW5nZSA9XG4gICAgXCIoXCIgc3BhY2UqIGxpcXVpZEV4cHJlc3Npb24gc3BhY2UqIFwiLi5cIiBzcGFjZSogbGlxdWlkRXhwcmVzc2lvbiBzcGFjZSogXCIpXCJcblxuICBsaXF1aWRWYXJpYWJsZUxvb2t1cCA9IHZhcmlhYmxlU2VnbWVudD8gbG9va3VwKlxuICBsb29rdXAgPVxuICAgIHwgaW5kZXhMb29rdXBcbiAgICB8IGRvdExvb2t1cFxuICBpbmRleExvb2t1cCA9IHNwYWNlKiBcIltcIiBzcGFjZSogbGlxdWlkRXhwcmVzc2lvbiBzcGFjZSogXCJdXCJcbiAgZG90TG9va3VwID0gc3BhY2UqIFwiLlwiIHNwYWNlKiBpZGVudGlmaWVyXG5cbiAgbGlxdWlkRmlsdGVyID0gc3BhY2UqIFwifFwiIHNwYWNlKiBpZGVudGlmaWVyIChzcGFjZSogXCI6XCIgc3BhY2UqIGZpbHRlckFyZ3VtZW50cyk/XG4gIGZpbHRlclNlcGFyYXRvciA9IHNwYWNlKiBcIixcIiBzcGFjZSpcbiAgZmlsdGVyQXJndW1lbnRzID0gbGlzdE9mPGZpbHRlckFyZ3VtZW50LCBmaWx0ZXJTZXBhcmF0b3I+XG4gIGZpbHRlckFyZ3VtZW50ID0gbmFtZWRBcmd1bWVudCB8IHBvc2l0aW9uYWxBcmd1bWVudFxuICBwb3NpdGlvbmFsQXJndW1lbnQgPSBsaXF1aWRFeHByZXNzaW9uXG4gIG5hbWVkQXJndW1lbnQgPSB2YXJpYWJsZVNlZ21lbnQgc3BhY2UqIFwiOlwiIHNwYWNlKiBsaXF1aWRFeHByZXNzaW9uXG5cbiAgdmFyaWFibGVTZWdtZW50ID0gKGxldHRlciB8IFwiX1wiKSBpZGVudGlmaWVyQ2hhcmFjdGVyKlxuICBpZGVudGlmaWVyID0gdmFyaWFibGVTZWdtZW50IFwiP1wiP1xuXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWwtbWFya3VwLTIwMTEwMTEzL3N5bnRheC5odG1sI3ZvaWQtZWxlbWVudFxuICAvLyBDaGVhdGluZyBhIGJpdCB3aXRoIGJ5IHN0cmV0Y2hpbmcgaXQgdG8gdGhlIGRvY3R5cGVcbiAgdm9pZEVsZW1lbnROYW1lID1cbiAgICAoIGNhc2VJbnNlbnNpdGl2ZTxcIiFkb2N0eXBlXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJhcmVhXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJiYXNlXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJiclwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiY29sXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJjb21tYW5kXCI+XG4gICAgfCBjYXNlSW5zZW5zaXRpdmU8XCJlbWJlZFwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiaHJcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcImltZ1wiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwiaW5wdXRcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcImtleWdlblwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwibGlua1wiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwibWV0YVwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwicGFyYW1cIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcInNvdXJjZVwiPlxuICAgIHwgY2FzZUluc2Vuc2l0aXZlPFwidHJhY2tcIj5cbiAgICB8IGNhc2VJbnNlbnNpdGl2ZTxcIndiclwiPlxuICAgICkgfmlkZW50aWZpZXJDaGFyYWN0ZXJcblxuICBibG9ja05hbWUgPVxuICAgIC8vIFNob3BpZnkgYmxvY2tzXG4gICAgKCBcInN0eWxlXCJcbiAgICB8IFwiZm9ybVwiXG4gICAgfCBcInBhZ2luYXRlXCJcbiAgICAvLyBCYXNlIGJsb2Nrc1xuICAgIHwgXCJjYXB0dXJlXCJcbiAgICB8IFwiY2FzZVwiXG4gICAgfCBcImZvclwiXG4gICAgfCBcImlmY2hhbmdlZFwiXG4gICAgfCBcImlmXCJcbiAgICB8IFwidW5sZXNzXCJcbiAgICB8IFwicmF3XCJcbiAgICB8IFwidGFibGVyb3dcIlxuICAgICkgfmlkZW50aWZpZXJDaGFyYWN0ZXJcblxuICB0YWdNYXJrdXAgPSBhbnlFeGNlcHRTdGFyPChcIi0lfVwifCBcIiV9XCIpPlxuXG4gIGFueUV4Y2VwdDxsaXQ+ID0gKH4gbGl0IGFueSlcbiAgYW55RXhjZXB0U3RhcjxsaXQ+ID0gKH4gbGl0IGFueSkqXG4gIGFueUV4Y2VwdFBsdXM8bGl0PiA9ICh+IGxpdCBhbnkpK1xuICBBbnlFeGNlcHQ8bGl0PiA9ICh+IGxpdCBhbnkpXG4gIEFueUV4Y2VwdFBsdXM8bGl0PiA9ICh+IGxpdCBhbnkpK1xuICBBbnlFeGNlcHRTdGFyPGxpdD4gPSAofiBsaXQgYW55KSpcbiAgaWRlbnRpZmllckNoYXJhY3RlciA9IGFsbnVtIHwgXCJfXCIgfCBcIi1cIlxuXG4gIFRleHROb2RlID0gQW55RXhjZXB0UGx1czxvcGVuQ29udHJvbD5cbiAgb3BlbkNvbnRyb2wgPSBcIjxcIiB8IFwie3tcIiB8IFwieyVcIlxuICBjb250cm9scyA9IFwiXFx1ezAwN0Z9XCIuLlwiXFx1ezAwOUZ9XCJcbiAgbm9uY2hhcmFjdGVycyA9IFwiXFx1e0ZERDB9XCIuLlwiXFx1e0ZERUZ9XCJcbiAgbmV3bGluZSA9IFwiXFxyXCI/IFwiXFxuXCJcbn1cbmA7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNTU19XSElURV9TUEFDRV9ERUZBVUxUID0gZXhwb3J0cy5DU1NfV0hJVEVfU1BBQ0VfVEFHUyA9IGV4cG9ydHMuQ1NTX0RJU1BMQVlfREVGQVVMVCA9IGV4cG9ydHMuQ1NTX0RJU1BMQVlfTElRVUlEX0RFRkFVTFQgPSBleHBvcnRzLkNTU19ESVNQTEFZX0xJUVVJRF9UQUdTID0gZXhwb3J0cy5DU1NfRElTUExBWV9UQUdTID0gdm9pZCAwO1xuY29uc3QgaHRtbFN0eWxlcyA9IHJlcXVpcmUoJ2h0bWwtc3R5bGVzJyk7XG5jb25zdCBnZXRDc3NTdHlsZVRhZ3MgPSAocHJvcGVydHkpID0+IE9iamVjdC5mcm9tRW50cmllcyhodG1sU3R5bGVzXG4gICAgLmZpbHRlcigoaHRtbFN0eWxlKSA9PiBodG1sU3R5bGUuc3R5bGVbcHJvcGVydHldKVxuICAgIC5mbGF0TWFwKChodG1sU3R5bGUpID0+IGh0bWxTdHlsZS5zZWxlY3RvclRleHRcbiAgICAuc3BsaXQoJywnKVxuICAgIC5tYXAoKHNlbGVjdG9yKSA9PiBzZWxlY3Rvci50cmltKCkpXG4gICAgLmZpbHRlcigoc2VsZWN0b3IpID0+IC9eW1xcZEEtWmEtel0rJC8udGVzdChzZWxlY3RvcikpXG4gICAgLm1hcCgodGFnTmFtZSkgPT4gW3RhZ05hbWUsIGh0bWxTdHlsZS5zdHlsZVtwcm9wZXJ0eV1dKSkpO1xuZXhwb3J0cy5DU1NfRElTUExBWV9UQUdTID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRDc3NTdHlsZVRhZ3MoJ2Rpc3BsYXknKSksIHsgYnV0dG9uOiAnaW5saW5lLWJsb2NrJywgdGVtcGxhdGU6ICdpbmxpbmUnLCBzb3VyY2U6ICdibG9jaycsIHRyYWNrOiAnYmxvY2snLCBzY3JpcHQ6ICdibG9jaycsIHBhcmFtOiAnYmxvY2snLCBkZXRhaWxzOiAnYmxvY2snLCBzdW1tYXJ5OiAnYmxvY2snLCBkaWFsb2c6ICdibG9jaycsIG1ldGVyOiAnaW5saW5lLWJsb2NrJywgcHJvZ3Jlc3M6ICdpbmxpbmUtYmxvY2snLCBvYmplY3Q6ICdpbmxpbmUtYmxvY2snLCB2aWRlbzogJ2lubGluZS1ibG9jaycsIGF1ZGlvOiAnaW5saW5lLWJsb2NrJywgc2VsZWN0OiAnaW5saW5lLWJsb2NrJywgb3B0aW9uOiAnYmxvY2snLCBvcHRncm91cDogJ2Jsb2NrJyB9KTtcbmV4cG9ydHMuQ1NTX0RJU1BMQVlfTElRVUlEX1RBR1MgPSB7XG4gICAgaWY6ICdpbmxpbmUnLFxuICAgIHVubGVzczogJ2lubGluZScsXG4gICAgZWxzZTogJ2lubGluZScsXG4gICAgZWxzaWY6ICdpbmxpbmUnLFxuICAgIGNhc2U6ICdpbmxpbmUnLFxuICAgIHdoZW46ICdpbmxpbmUnLFxuICAgIGZvcjogJ2lubGluZScsXG4gICAgY3ljbGU6ICdpbmxpbmUnLFxuICAgIHRhYmxlcm93OiAnYmxvY2snLFxuICAgIGJyZWFrOiAnbm9uZScsXG4gICAgY29udGludWU6ICdub25lJyxcbiAgICBjb21tZW50OiAnbm9uZScsXG4gICAgZWNobzogJ2lubGluZScsXG4gICAgZm9ybTogJ2Jsb2NrJyxcbiAgICBsYXlvdXQ6ICdub25lJyxcbiAgICBsaXF1aWQ6ICdpbmxpbmUnLFxuICAgIHBhZ2luYXRlOiAnaW5saW5lJyxcbiAgICByYXc6ICdpbmxpbmUnLFxuICAgIHJlbmRlcjogJ2lubGluZScsXG4gICAgaW5jbHVkZTogJ2lubGluZScsXG4gICAgc2VjdGlvbjogJ2Jsb2NrJyxcbiAgICBzdHlsZTogJ25vbmUnLFxuICAgIGFzc2lnbjogJ25vbmUnLFxuICAgIGNhcHR1cmU6ICdpbmxpbmUnLFxuICAgIGluY3JlbWVudDogJ2lubGluZScsXG4gICAgZGVjcmVtZW50OiAnaW5saW5lJyxcbn07XG5leHBvcnRzLkNTU19ESVNQTEFZX0xJUVVJRF9ERUZBVUxUID0gJ2lubGluZSc7XG5leHBvcnRzLkNTU19ESVNQTEFZX0RFRkFVTFQgPSAnaW5saW5lJztcbmV4cG9ydHMuQ1NTX1dISVRFX1NQQUNFX1RBR1MgPSBnZXRDc3NTdHlsZVRhZ3MoJ3doaXRlLXNwYWNlJyk7XG5leHBvcnRzLkNTU19XSElURV9TUEFDRV9ERUZBVUxUID0gJ25vcm1hbCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl1YzNSaGJuUnpMbVYyWVd4MVlYUmxMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJOdmJuTjBZVzUwY3k1bGRtRnNkV0YwWlM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZEUVN4TlFVRk5MRlZCUVZVc1IwRkJVU3hQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdRVUZGTDBNc1RVRkJUU3hsUVVGbExFZEJRVWNzUTBGQlF5eFJRVUZuUWl4RlFVRkZMRVZCUVVVc1EwRkRNME1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZEYUVJc1ZVRkJWVHRMUVVOUUxFMUJRVTBzUTBGQlF5eERRVUZETEZOQlFXTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0TFFVTnlSQ3hQUVVGUExFTkJRVU1zUTBGQlF5eFRRVUZqTEVWQlFVVXNSVUZCUlN4RFFVTXhRaXhUUVVGVExFTkJRVU1zV1VGQldUdExRVU51UWl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wdEJRMVlzUjBGQlJ5eERRVUZETEVOQlFVTXNVVUZCWVN4RlFVRkZMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdTMEZEZGtNc1RVRkJUU3hEUVVGRExFTkJRVU1zVVVGQllTeEZRVUZGTEVWQlFVVXNRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzB0QlEzcEVMRWRCUVVjc1EwRkJReXhEUVVGRExFOUJRVmtzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUXk5RUxFTkJRMG9zUTBGQlF6dEJRVVZUTEZGQlFVRXNaMEpCUVdkQ0xHMURRVU40UWl4bFFVRmxMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJSemRDTEUxQlFVMHNSVUZCUlN4alFVRmpMRVZCUjNSQ0xGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlEyeENMRTFCUVUwc1JVRkJSU3hQUVVGUExFVkJRMllzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZEWkN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVObUxFdEJRVXNzUlVGQlJTeFBRVUZQTEVWQlRXUXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkRhRUlzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZEYUVJc1RVRkJUU3hGUVVGRkxFOUJRVThzUlVGRFppeExRVUZMTEVWQlFVVXNZMEZCWXl4RlFVTnlRaXhSUVVGUkxFVkJRVVVzWTBGQll5eEZRVU40UWl4TlFVRk5MRVZCUVVVc1kwRkJZeXhGUVVOMFFpeExRVUZMTEVWQlFVVXNZMEZCWXl4RlFVTnlRaXhMUVVGTExFVkJRVVVzWTBGQll5eEZRVU55UWl4TlFVRk5MRVZCUVVVc1kwRkJZeXhGUVVOMFFpeE5RVUZOTEVWQlFVVXNUMEZCVHl4RlFVTm1MRkZCUVZFc1JVRkJSU3hQUVVGUExFbEJRMnBDTzBGQlJWY3NVVUZCUVN4MVFrRkJkVUlzUjBGQk1rSTdTVUZGTjBRc1JVRkJSU3hGUVVGRkxGRkJRVkU3U1VGRFdpeE5RVUZOTEVWQlFVVXNVVUZCVVR0SlFVTm9RaXhKUVVGSkxFVkJRVVVzVVVGQlVUdEpRVU5rTEV0QlFVc3NSVUZCUlN4UlFVRlJPMGxCUTJZc1NVRkJTU3hGUVVGRkxGRkJRVkU3U1VGRFpDeEpRVUZKTEVWQlFVVXNVVUZCVVR0SlFVZGtMRWRCUVVjc1JVRkJSU3hSUVVGUk8wbEJRMklzUzBGQlN5eEZRVUZGTEZGQlFWRTdTVUZEWml4UlFVRlJMRVZCUVVVc1QwRkJUenRKUVVOcVFpeExRVUZMTEVWQlFVVXNUVUZCVFR0SlFVTmlMRkZCUVZFc1JVRkJSU3hOUVVGTk8wbEJSMmhDTEU5QlFVOHNSVUZCUlN4TlFVRk5PMGxCUTJZc1NVRkJTU3hGUVVGRkxGRkJRVkU3U1VGRFpDeEpRVUZKTEVWQlFVVXNUMEZCVHp0SlFVTmlMRTFCUVUwc1JVRkJSU3hOUVVGTk8wbEJRMlFzVFVGQlRTeEZRVUZGTEZGQlFWRTdTVUZEYUVJc1VVRkJVU3hGUVVGRkxGRkJRVkU3U1VGRGJFSXNSMEZCUnl4RlFVRkZMRkZCUVZFN1NVRkRZaXhOUVVGTkxFVkJRVVVzVVVGQlVUdEpRVU5vUWl4UFFVRlBMRVZCUVVVc1VVRkJVVHRKUVVOcVFpeFBRVUZQTEVWQlFVVXNUMEZCVHp0SlFVTm9RaXhMUVVGTExFVkJRVVVzVFVGQlRUdEpRVWRpTEUxQlFVMHNSVUZCUlN4TlFVRk5PMGxCUTJRc1QwRkJUeXhGUVVGRkxGRkJRVkU3U1VGRGFrSXNVMEZCVXl4RlFVRkZMRkZCUVZFN1NVRkRia0lzVTBGQlV5eEZRVUZGTEZGQlFWRTdRMEZEY0VJc1EwRkJRenRCUVVWWExGRkJRVUVzTUVKQlFUQkNMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJSWFJETEZGQlFVRXNiVUpCUVcxQ0xFZEJRVWNzVVVGQlVTeERRVUZETzBGQlF5OUNMRkZCUVVFc2IwSkJRVzlDTEVkQlF5OUNMR1ZCUVdVc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU53UWl4UlFVRkJMSFZDUVVGMVFpeEhRVUZITEZGQlFWRXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XG5jb25zdCBwcmludGVyXzEgPSByZXF1aXJlKFwiLi9wcmludGVyXCIpO1xuY29uc3QgbGFuZ3VhZ2VzID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogJ0xpcXVpZEhUTUwnLFxuICAgICAgICBwYXJzZXJzOiBbcGFyc2VyXzEubGlxdWlkSHRtbExhbmd1YWdlTmFtZV0sXG4gICAgICAgIGV4dGVuc2lvbnM6IFsnLmxpcXVpZCddLFxuICAgICAgICB2c2NvZGVMYW5ndWFnZUlkczogWydsaXF1aWQnLCAnTGlxdWlkJ10sXG4gICAgfSxcbl07XG5jb25zdCBvcHRpb25zID0ge1xuICAgIGxpcXVpZFNpbmdsZVF1b3RlOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdMSVFVSUQnLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1VzZSBzaW5nbGUgcXVvdGVzIGluc3RlYWQgb2YgZG91YmxlIHF1b3RlcyBpbiBMaXF1aWQgdGFncyBhbmQgb2JqZWN0cy4nLFxuICAgICAgICBzaW5jZTogJzAuMi4wJyxcbiAgICB9LFxuICAgIHNpbmdsZUxpbmVMaW5rVGFnczoge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGNhdGVnb3J5OiAnSFRNTCcsXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Fsd2F5cyBwcmludCBsaW5rIHRhZ3Mgb24gYSBzaW5nbGUgbGluZSB0byByZW1vdmUgY2x1dHRlcicsXG4gICAgICAgIHNpbmNlOiAnMC4xLjAnLFxuICAgIH0sXG4gICAgaW5kZW50U2NoZW1hOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdMSVFVSUQnLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdJbmRlbnQgdGhlIGNvbnRlbnRzIG9mIHRoZSB7JSBzY2hlbWEgJX0gdGFnJyxcbiAgICAgICAgc2luY2U6ICcwLjEuMCcsXG4gICAgfSxcbn07XG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwcmludFdpZHRoOiAxMjAsXG59O1xuY29uc3QgcGx1Z2luID0ge1xuICAgIGxhbmd1YWdlcyxcbiAgICBwYXJzZXJzOiBwYXJzZXJfMS5wYXJzZXJzLFxuICAgIHByaW50ZXJzOiBwcmludGVyXzEucHJpbnRlcnMsXG4gICAgb3B0aW9ucyxcbiAgICBkZWZhdWx0T3B0aW9ucyxcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHBsdWdpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFVMUJMSEZEUVVFeVJEdEJRVU16UkN4MVEwRkJjVU03UVVGSGNrTXNUVUZCVFN4VFFVRlRMRWRCUVhOQ08wbEJRMjVETzFGQlEwVXNTVUZCU1N4RlFVRkZMRmxCUVZrN1VVRkRiRUlzVDBGQlR5eEZRVUZGTEVOQlFVTXNLMEpCUVhOQ0xFTkJRVU03VVVGRGFrTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRM1pDTEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXp0TFFVTjRRenREUVVOR0xFTkJRVU03UVVGRlJpeE5RVUZOTEU5QlFVOHNSMEZCYlVJN1NVRkRPVUlzYVVKQlFXbENMRVZCUVVVN1VVRkRha0lzU1VGQlNTeEZRVUZGTEZOQlFWTTdVVUZEWml4UlFVRlJMRVZCUVVVc1VVRkJVVHRSUVVOc1FpeFBRVUZQTEVWQlFVVXNTVUZCU1R0UlFVTmlMRmRCUVZjc1JVRkRWQ3gzUlVGQmQwVTdVVUZETVVVc1MwRkJTeXhGUVVGRkxFOUJRVTg3UzBGRFpqdEpRVU5FTEd0Q1FVRnJRaXhGUVVGRk8xRkJRMnhDTEVsQlFVa3NSVUZCUlN4VFFVRlRPMUZCUTJZc1VVRkJVU3hGUVVGRkxFMUJRVTA3VVVGRGFFSXNUMEZCVHl4RlFVRkZMRXRCUVVzN1VVRkRaQ3hYUVVGWExFVkJRVVVzTWtSQlFUSkVPMUZCUTNoRkxFdEJRVXNzUlVGQlJTeFBRVUZQTzB0QlEyWTdTVUZEUkN4WlFVRlpMRVZCUVVVN1VVRkRXaXhKUVVGSkxFVkJRVVVzVTBGQlV6dFJRVU5tTEZGQlFWRXNSVUZCUlN4UlFVRlJPMUZCUTJ4Q0xFOUJRVThzUlVGQlJTeExRVUZMTzFGQlEyUXNWMEZCVnl4RlFVRkZMRFpEUVVFMlF6dFJRVU14UkN4TFFVRkxMRVZCUVVVc1QwRkJUenRMUVVObU8wTkJRMFlzUTBGQlF6dEJRVVZHTEUxQlFVMHNZMEZCWXl4SFFVRTJRanRKUVVNdlF5eFZRVUZWTEVWQlFVVXNSMEZCUnp0RFFVTm9RaXhEUVVGRE8wRkJSVVlzVFVGQlRTeE5RVUZOTEVkQlFUSkNPMGxCUTNKRExGTkJRVk03U1VGRFZDeFBRVUZQTEVWQlFWQXNaMEpCUVU4N1NVRkRVQ3hSUVVGUkxFVkJRVklzYTBKQlFWRTdTVUZEVWl4UFFVRlBPMGxCUTFBc1kwRkJZenREUVVObUxFTkJRVU03UVVGRlJpeHBRa0ZCVXl4TlFVRk5MRU5CUVVNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2FsayA9IGV4cG9ydHMuY3N0VG9Bc3QgPSBleHBvcnRzLnRvTGlxdWlkSHRtbEFTVCA9IGV4cG9ydHMuaXNCcmFuY2hlZFRhZyA9IHZvaWQgMDtcbmNvbnN0IGNzdF8xID0gcmVxdWlyZShcIi4uL3BhcnNlci9jc3RcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL3BhcnNlci9lcnJvcnNcIik7XG5mdW5jdGlvbiBpc0JyYW5jaGVkVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnICYmXG4gICAgICAgIFsnaWYnLCAnZm9yJywgJ3VubGVzcycsICdjYXNlJ10uaW5jbHVkZXMobm9kZS5uYW1lKSk7XG59XG5leHBvcnRzLmlzQnJhbmNoZWRUYWcgPSBpc0JyYW5jaGVkVGFnO1xuZnVuY3Rpb24gaXNCcmFuY2hUYWcobm9kZSkge1xuICAgIHJldHVybiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcgJiZcbiAgICAgICAgWydlbHNlJywgJ2Vsc2lmJywgJ3doZW4nXS5pbmNsdWRlcyhub2RlLm5hbWUpKTtcbn1cbmZ1bmN0aW9uIHRvTGlxdWlkSHRtbEFTVCh0ZXh0KSB7XG4gICAgY29uc3QgY3N0ID0gKDAsIGNzdF8xLnRvTGlxdWlkSHRtbENTVCkodGV4dCk7XG4gICAgY29uc3Qgcm9vdCA9IHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuRG9jdW1lbnQsXG4gICAgICAgIHNvdXJjZTogdGV4dCxcbiAgICAgICAgY2hpbGRyZW46IGNzdFRvQXN0KGNzdCwgdGV4dCksXG4gICAgICAgIG5hbWU6ICcjZG9jdW1lbnQnLFxuICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgICAgICBlbmQ6IHRleHQubGVuZ3RoLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHJvb3Q7XG59XG5leHBvcnRzLnRvTGlxdWlkSHRtbEFTVCA9IHRvTGlxdWlkSHRtbEFTVDtcbmNsYXNzIEFTVEJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgICAgICB0aGlzLmFzdCA9IFtdO1xuICAgICAgICB0aGlzLmN1cnNvciA9IFtdO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgZ2V0IGN1cnJlbnQoKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5kZWVwR2V0KSh0aGlzLmN1cnNvciwgdGhpcy5hc3QpO1xuICAgIH1cbiAgICBnZXQgY3VycmVudFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuY3VycmVudCB8fCBbXSkubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgZ2V0IHBhcmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmRlZXBHZXQpKCgwLCB1dGlsc18xLmRyb3BMYXN0KSgxLCB0aGlzLmN1cnNvciksIHRoaXMuYXN0KTtcbiAgICB9XG4gICAgb3Blbihub2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5wdXNoKG5vZGUpO1xuICAgICAgICB0aGlzLmN1cnNvci5wdXNoKHRoaXMuY3VycmVudFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5jdXJzb3IucHVzaCgnY2hpbGRyZW4nKTtcbiAgICAgICAgaWYgKGlzQnJhbmNoZWRUYWcobm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMub3Blbih7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoLFxuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgbWFya3VwOiAnJyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZS5wb3NpdGlvbi5lbmQsXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbm9kZS5wb3NpdGlvbi5lbmQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vZGUucG9zaXRpb24uZW5kLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogJycsXG4gICAgICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogJycsXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1c2gobm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJiBpc0JyYW5jaFRhZyhub2RlKSkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3IucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMub3Blbih7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaCxcbiAgICAgICAgICAgICAgICBtYXJrdXA6IG5vZGUubWFya3VwLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBPYmplY3QuYXNzaWduKHt9LCBub2RlLnBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiBPYmplY3QuYXNzaWduKHt9LCBub2RlLnBvc2l0aW9uKSxcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IG5vZGUud2hpdGVzcGFjZVN0YXJ0LFxuICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IG5vZGUud2hpdGVzcGFjZUVuZCxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoKChfYSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHlwZSkgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnBvc2l0aW9uLmVuZCA9IG5vZGUucG9zaXRpb24uZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xvc2Uobm9kZSwgbm9kZVR5cGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICAgICAgaWYgKCgoX2EgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2gpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnBvc2l0aW9uLmVuZCA9IG5vZGUubG9jU3RhcnQ7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXROYW1lKHRoaXMucGFyZW50KSAhPT0gZ2V0TmFtZShub2RlKSB8fFxuICAgICAgICAgICAgKChfYiA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHlwZSkgIT09IG5vZGVUeXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTGlxdWlkSFRNTEFTVFBhcnNpbmdFcnJvcihgQXR0ZW1wdGluZyB0byBjbG9zZSAke25vZGVUeXBlfSAnJHtub2RlLm5hbWV9JyBiZWZvcmUgJHsoX2MgPSB0aGlzLnBhcmVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnR5cGV9ICckeyhfZCA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QubmFtZX0nIHdhcyBjbG9zZWRgLCB0aGlzLnNvdXJjZSwgKChfZiA9IChfZSA9IHRoaXMucGFyZW50KSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UucG9zaXRpb24pID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5zdGFydCkgfHwgMCwgbm9kZS5sb2NFbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50LnBvc2l0aW9uLmVuZCA9IG5vZGUubG9jRW5kO1xuICAgICAgICB0aGlzLnBhcmVudC5ibG9ja0VuZFBvc2l0aW9uID0gcG9zaXRpb24obm9kZSk7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudC50eXBlID09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJlxuICAgICAgICAgICAgbm9kZS50eXBlID09IGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZ0Nsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5kZWxpbWl0ZXJXaGl0ZXNwYWNlU3RhcnQgPSAoX2cgPSBub2RlLndoaXRlc3BhY2VTdGFydCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJyc7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kID0gKF9oID0gbm9kZS53aGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnNvci5wb3AoKTtcbiAgICAgICAgdGhpcy5jdXJzb3IucG9wKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TmFtZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkh0bWxUYWdDbG9zZTpcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5uYW1lLm1hcmt1cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHt7JHtub2RlLm5hbWUubWFya3VwLnRyaW0oKX19fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYHt7JHtub2RlLm5hbWUubWFya3VwLnJhd1NvdXJjZX19fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNzdFRvQXN0KGNzdCwgc291cmNlKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaDtcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IEFTVEJ1aWxkZXIoc291cmNlKTtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY3N0KSB7XG4gICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLlRleHROb2RlOiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuVGV4dE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBub2RlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkRHJvcDoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh0b0xpcXVpZERyb3Aobm9kZSwgc291cmNlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZ09wZW46IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLm9wZW4oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcsXG4gICAgICAgICAgICAgICAgICAgIG1hcmt1cDogbm9kZS5tYXJrdXAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogKF9hID0gbm9kZS53aGl0ZXNwYWNlU3RhcnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnLFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiAoX2IgPSBub2RlLndoaXRlc3BhY2VFbmQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZ0Nsb3NlOiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5jbG9zZShub2RlLCB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRUYWc6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWcsXG4gICAgICAgICAgICAgICAgICAgIG1hcmt1cDogbm9kZS5tYXJrdXAsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IChfYyA9IG5vZGUud2hpdGVzcGFjZVN0YXJ0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogKF9kID0gbm9kZS53aGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWcsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogbm9kZS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IChfZSA9IG5vZGUud2hpdGVzcGFjZVN0YXJ0KSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogKF9mID0gbm9kZS53aGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyV2hpdGVzcGFjZVN0YXJ0OiAoX2cgPSBub2RlLmRlbGltaXRlcldoaXRlc3BhY2VTdGFydCkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGRlbGltaXRlcldoaXRlc3BhY2VFbmQ6IChfaCA9IG5vZGUuZGVsaW1pdGVyV2hpdGVzcGFjZUVuZCkgIT09IG51bGwgJiYgX2ggIT09IHZvaWQgMCA/IF9oIDogJycsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZS5ibG9ja1N0YXJ0TG9jU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vZGUuYmxvY2tTdGFydExvY0VuZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYmxvY2tFbmRQb3NpdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUuYmxvY2tFbmRMb2NTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbm9kZS5ibG9ja0VuZExvY0VuZCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sVGFnT3Blbjoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIub3Blbih0b0h0bWxFbGVtZW50KG5vZGUsIHNvdXJjZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sVGFnQ2xvc2U6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLmNsb3NlKG5vZGUsIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuSHRtbFZvaWRFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKHRvSHRtbFZvaWRFbGVtZW50KG5vZGUsIHNvdXJjZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OiB7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKHRvSHRtbFNlbGZDbG9zaW5nRWxlbWVudChub2RlLCBzb3VyY2UpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuSHRtbENvbW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5IdG1sQ29tbWVudCxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogbm9kZS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuSHRtbFJhd1RhZzoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IG5vZGUuYm9keSxcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdG9BdHRyaWJ1dGVzKG5vZGUuYXR0ckxpc3QgfHwgW10sIHNvdXJjZSksXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0UG9zaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBub2RlLmJsb2NrU3RhcnRMb2NTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbm9kZS5ibG9ja1N0YXJ0TG9jRW5kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBibG9ja0VuZFBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZS5ibG9ja0VuZExvY1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBub2RlLmJsb2NrRW5kTG9jRW5kLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5BdHRyRW1wdHk6IHtcbiAgICAgICAgICAgICAgICBidWlsZGVyLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5BdHRyRW1wdHksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkF0dHJTaW5nbGVRdW90ZWQ6XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkF0dHJEb3VibGVRdW90ZWQ6XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLkF0dHJVbnF1b3RlZDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFic3RyYWN0Tm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbm9kZS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVQb3NpdGlvbjogeyBzdGFydDogLTEsIGVuZDogLTEgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0b0F0dHJpYnV0ZVZhbHVlKG5vZGUudmFsdWUsIHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3ROb2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYWJzdHJhY3ROb2RlLmF0dHJpYnV0ZVBvc2l0aW9uID0gdG9BdHRyaWJ1dGVQb3NpdGlvbihub2RlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnVpbGRlci5wdXNoKGFic3RyYWN0Tm9kZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLllBTUxGcm9udG1hdHRlcjoge1xuICAgICAgICAgICAgICAgIGJ1aWxkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLllBTUxGcm9udG1hdHRlcixcbiAgICAgICAgICAgICAgICAgICAgYm9keTogbm9kZS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5hc3NlcnROZXZlcikobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJ1aWxkZXIuYXN0O1xufVxuZXhwb3J0cy5jc3RUb0FzdCA9IGNzdFRvQXN0O1xuZnVuY3Rpb24gdG9BdHRyaWJ1dGVQb3NpdGlvbihub2RlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBub2RlLmxvY1N0YXJ0ICsgbm9kZS5uYW1lLmxlbmd0aCArICc9Jy5sZW5ndGggKyAnXCInLmxlbmd0aCxcbiAgICAgICAgICAgIGVuZDogbm9kZS5sb2NTdGFydCArIG5vZGUubmFtZS5sZW5ndGggKyAnPScubGVuZ3RoICsgJ1wiJy5sZW5ndGgsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiB2YWx1ZVswXS5wb3NpdGlvbi5zdGFydCxcbiAgICAgICAgZW5kOiB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXS5wb3NpdGlvbi5lbmQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvQXR0cmlidXRlVmFsdWUodmFsdWUsIHNvdXJjZSkge1xuICAgIHJldHVybiBjc3RUb0FzdCh2YWx1ZSwgc291cmNlKTtcbn1cbmZ1bmN0aW9uIHRvQXR0cmlidXRlcyhhdHRyTGlzdCwgc291cmNlKSB7XG4gICAgcmV0dXJuIGNzdFRvQXN0KGF0dHJMaXN0LCBzb3VyY2UpO1xufVxuZnVuY3Rpb24gdG9OYW1lKG5hbWUsIHNvdXJjZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIHJldHVybiB0b0xpcXVpZERyb3AobmFtZSwgc291cmNlKTtcbn1cbmZ1bmN0aW9uIHRvTGlxdWlkRHJvcChub2RlLCBzb3VyY2UpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3AsXG4gICAgICAgIG1hcmt1cDogdHlwZW9mIG5vZGUubWFya3VwID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBub2RlLm1hcmt1cFxuICAgICAgICAgICAgOiB0b0xpcXVpZFZhcmlhYmxlKG5vZGUubWFya3VwLCBzb3VyY2UpLFxuICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IChfYSA9IG5vZGUud2hpdGVzcGFjZVN0YXJ0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJyxcbiAgICAgICAgd2hpdGVzcGFjZUVuZDogKF9iID0gbm9kZS53aGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJyxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvTGlxdWlkVmFyaWFibGUobm9kZSwgc291cmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVmFyaWFibGUsXG4gICAgICAgIGV4cHJlc3Npb246IHRvRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIHNvdXJjZSksXG4gICAgICAgIGZpbHRlcnM6IG5vZGUuZmlsdGVycy5tYXAoKGZpbHRlcikgPT4gdG9GaWx0ZXIoZmlsdGVyLCBzb3VyY2UpKSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICByYXdTb3VyY2U6IG5vZGUucmF3U291cmNlLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvRXhwcmVzc2lvbihub2RlLCBzb3VyY2UpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLlN0cmluZzoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5TdHJpbmcsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgIHNpbmdsZTogbm9kZS5zaW5nbGUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5vZGUudmFsdWUsXG4gICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLk51bWJlcjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5OdW1iZXIsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBub2RlLnZhbHVlLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBjc3RfMS5Db25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRMaXRlcmFsOiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZExpdGVyYWwsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBub2RlLnZhbHVlLFxuICAgICAgICAgICAgICAgIGtleXdvcmQ6IG5vZGUua2V5d29yZCxcbiAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuUmFuZ2U6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuUmFuZ2UsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRvRXhwcmVzc2lvbihub2RlLnN0YXJ0LCBzb3VyY2UpLFxuICAgICAgICAgICAgICAgIGVuZDogdG9FeHByZXNzaW9uKG5vZGUuZW5kLCBzb3VyY2UpLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3N0XzEuQ29uY3JldGVOb2RlVHlwZXMuVmFyaWFibGVMb29rdXA6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuVmFyaWFibGVMb29rdXAsXG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIGxvb2t1cHM6IG5vZGUubG9va3Vwcy5tYXAoKGxvb2t1cCkgPT4gdG9FeHByZXNzaW9uKGxvb2t1cCwgc291cmNlKSksXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRvRmlsdGVyKG5vZGUsIHNvdXJjZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEZpbHRlcixcbiAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICBhcmdzOiBub2RlLmFyZ3MubWFwKChhcmcpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoYXJnLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIGNzdF8xLkNvbmNyZXRlTm9kZVR5cGVzLk5hbWVkQXJndW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvTmFtZWRBcmd1bWVudChhcmcsIHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvRXhwcmVzc2lvbihhcmcsIHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvTmFtZWRBcmd1bWVudChub2RlLCBzb3VyY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5OYW1lZEFyZ3VtZW50LFxuICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgIHZhbHVlOiB0b0V4cHJlc3Npb24obm9kZS52YWx1ZSwgc291cmNlKSxcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uKG5vZGUpLFxuICAgICAgICBzb3VyY2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvSHRtbEVsZW1lbnQobm9kZSwgc291cmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQsXG4gICAgICAgIG5hbWU6IHRvTmFtZShub2RlLm5hbWUsIHNvdXJjZSksXG4gICAgICAgIGF0dHJpYnV0ZXM6IHRvQXR0cmlidXRlcyhub2RlLmF0dHJMaXN0IHx8IFtdLCBzb3VyY2UpLFxuICAgICAgICBwb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgIGJsb2NrU3RhcnRQb3NpdGlvbjogcG9zaXRpb24obm9kZSksXG4gICAgICAgIGJsb2NrRW5kUG9zaXRpb246IHsgc3RhcnQ6IC0xLCBlbmQ6IC0xIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgc291cmNlLFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0h0bWxWb2lkRWxlbWVudChub2RlLCBzb3VyY2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0eXBlc18xLk5vZGVUeXBlcy5IdG1sVm9pZEVsZW1lbnQsXG4gICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgYXR0cmlidXRlczogdG9BdHRyaWJ1dGVzKG5vZGUuYXR0ckxpc3QgfHwgW10sIHNvdXJjZSksXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgc291cmNlLFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0h0bWxTZWxmQ2xvc2luZ0VsZW1lbnQobm9kZSwgc291cmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFNlbGZDbG9zaW5nRWxlbWVudCxcbiAgICAgICAgbmFtZTogdG9OYW1lKG5vZGUubmFtZSwgc291cmNlKSxcbiAgICAgICAgYXR0cmlidXRlczogdG9BdHRyaWJ1dGVzKG5vZGUuYXR0ckxpc3QgfHwgW10sIHNvdXJjZSksXG4gICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgYmxvY2tTdGFydFBvc2l0aW9uOiBwb3NpdGlvbihub2RlKSxcbiAgICAgICAgc291cmNlLFxuICAgIH07XG59XG5mdW5jdGlvbiBwb3NpdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IG5vZGUubG9jU3RhcnQsXG4gICAgICAgIGVuZDogbm9kZS5sb2NFbmQsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHdhbGsoYXN0LCBmbiwgcGFyZW50Tm9kZSkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIFsnY2hpbGRyZW4nLCAnYXR0cmlidXRlcyddKSB7XG4gICAgICAgIGlmIChrZXkgaW4gYXN0KSB7XG4gICAgICAgICAgICBhc3Rba2V5XS5mb3JFYWNoKChub2RlKSA9PiB3YWxrKG5vZGUsIGZuLCBhc3QpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoJ3ZhbHVlJyBpbiBhc3QpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXN0LnZhbHVlKSkge1xuICAgICAgICAgICAgYXN0LnZhbHVlLmZvckVhY2goKG5vZGUpID0+IHdhbGsobm9kZSwgZm4sIGFzdCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICgnbmFtZScgaW4gYXN0KSB7XG4gICAgICAgIGlmIChhc3QubmFtZSAmJiB0eXBlb2YgYXN0Lm5hbWUgIT09ICdzdHJpbmcnICYmIGFzdC5uYW1lLnR5cGUpIHtcbiAgICAgICAgICAgIGZuKGFzdC5uYW1lLCBhc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZuKGFzdCwgcGFyZW50Tm9kZSk7XG59XG5leHBvcnRzLndhbGsgPSB3YWxrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhOMExtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNCaGNuTmxjaTloYzNRdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2MwTkJjVUp6UWp0QlFVTjBRaXh0UTBGQk9FTTdRVUZET1VNc2JVTkJRWGxFTzBGQlEzcEVMRFJEUVVFMFJEdEJRWGRQTlVRc1UwRkJaMElzWVVGQllTeERRVUZETEVsQlFXOUNPMGxCUTJoRUxFOUJRVThzUTBGRFRDeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVTBGQlV6dFJRVU5xUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEzQkVMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJURVFzYzBOQlMwTTdRVUZIUkN4VFFVRlRMRmRCUVZjc1EwRkJReXhKUVVGdlFqdEpRVU4yUXl4UFFVRlBMRU5CUTB3c1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNN1VVRkRha01zUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUXpsRExFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCWjBJc1pVRkJaU3hEUVVGRExFbEJRVms3U1VGRE1VTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1NVRkJRU3h4UWtGQlpTeEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJ4RExFMUJRVTBzU1VGQlNTeEhRVUZwUWp0UlFVTjZRaXhKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4UlFVRlJPMUZCUTNoQ0xFMUJRVTBzUlVGQlJTeEpRVUZKTzFGQlExb3NVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETzFGQlF6ZENMRWxCUVVrc1JVRkJSU3hYUVVGWE8xRkJRMnBDTEZGQlFWRXNSVUZCUlR0WlFVTlNMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRMUlzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5PMU5CUTJwQ08wdEJRMFlzUTBGQlF6dEpRVU5HTEU5QlFVOHNTVUZCU1N4RFFVRkRPMEZCUTJRc1EwRkJRenRCUVdKRUxEQkRRV0ZETzBGQlJVUXNUVUZCVFN4VlFVRlZPMGxCUzJRc1dVRkJXU3hOUVVGak8xRkJRM2hDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRE8xRkJRMlFzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRha0lzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1NVRkRka0lzUTBGQlF6dEpRVVZFTEVsQlFVa3NUMEZCVHp0UlFVTlVMRTlCUVU4c1NVRkJRU3hsUVVGUExFVkJRVzFDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQmNVSXNRMEZCUXp0SlFVTTVSU3hEUVVGRE8wbEJSVVFzU1VGQlNTeGxRVUZsTzFGQlEycENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGVrTXNRMEZCUXp0SlFVVkVMRWxCUVVrc1RVRkJUVHRSUVVOU0xFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJRenRaUVVGRkxFOUJRVThzVTBGQlV5eERRVUZETzFGQlF6bERMRTlCUVU4c1NVRkJRU3hsUVVGUExFVkJRVEJDTEVsQlFVRXNaMEpCUVZFc1JVRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU01UlN4RFFVRkRPMGxCUlVRc1NVRkJTU3hEUVVGRExFbEJRVzlDTzFGQlEzWkNMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNoQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dFJRVU4yUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVVTNRaXhKUVVGSkxHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0WlFVTjJRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzJkQ1FVTlNMRWxCUVVrc1JVRkJSU3hwUWtGQlV5eERRVUZETEZsQlFWazdaMEpCUXpWQ0xFbEJRVWtzUlVGQlJTeEpRVUZKTzJkQ1FVTldMRTFCUVUwc1JVRkJSU3hGUVVGRk8yZENRVU5XTEZGQlFWRXNSVUZCUlR0dlFrRkRVaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhPMjlDUVVONFFpeEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSE8ybENRVU4yUWp0blFrRkRSQ3hyUWtGQmEwSXNSVUZCUlR0dlFrRkRiRUlzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSenR2UWtGRGVFSXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ6dHBRa0ZEZGtJN1owSkJRMFFzVVVGQlVTeEZRVUZGTEVWQlFVVTdaMEpCUTFvc1pVRkJaU3hGUVVGRkxFVkJRVVU3WjBKQlEyNUNMR0ZCUVdFc1JVRkJSU3hGUVVGRk8yZENRVU5xUWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTA3WVVGRGNFSXNRMEZCUXl4RFFVRkRPMU5CUTBvN1NVRkRTQ3hEUVVGRE8wbEJSVVFzU1VGQlNTeERRVUZETEVsQlFXOUNPenRSUVVOMlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTEVsQlFVa3NWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xbEJRekZFTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03V1VGRGJFSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU5zUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8yZENRVU5TTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRuUWtGRFppeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhaUVVGWk8yZENRVU0xUWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTA3WjBKQlEyNUNMRkZCUVZFc2IwSkJRVThzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUlR0blFrRkRPVUlzVVVGQlVTeEZRVUZGTEVWQlFVVTdaMEpCUTFvc2EwSkJRV3RDTEc5Q1FVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVVU3WjBKQlEzaERMR1ZCUVdVc1JVRkJSU3hKUVVGSkxFTkJRVU1zWlVGQlpUdG5Ra0ZEY2tNc1lVRkJZU3hGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTzJkQ1FVTnFReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMDdZVUZEY0VJc1EwRkJReXhEUVVGRE8xTkJRMG83WVVGQlRUdFpRVU5NTEVsQlFVa3NRMEZCUVN4TlFVRkJMRWxCUVVrc1EwRkJReXhOUVVGTkxEQkRRVUZGTEVsQlFVa3NUVUZCU3l4cFFrRkJVeXhEUVVGRExGbEJRVmtzUlVGQlJUdG5Ra0ZEYUVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETzJGQlF6bERPMWxCUTBRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkRla0k3U1VGRFNDeERRVUZETzBsQlJVUXNTMEZCU3l4RFFVTklMRWxCUVcxRUxFVkJRMjVFTEZGQlFYRkVPenRSUVVWeVJDeEpRVUZKTEVOQlFVRXNUVUZCUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3d3UTBGQlJTeEpRVUZKTEUxQlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGFFUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1dVRkRla01zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenRaUVVOc1FpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE8xTkJRMjVDTzFGQlJVUXNTVUZEUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN1dVRkRkRU1zUTBGQlFTeE5RVUZCTEVsQlFVa3NRMEZCUXl4TlFVRk5MREJEUVVGRkxFbEJRVWtzVFVGQlN5eFJRVUZSTEVWQlF6bENPMWxCUTBFc1RVRkJUU3hKUVVGSkxHdERRVUY1UWl4RFFVTnFReXgxUWtGQmRVSXNVVUZCVVN4TFFVRkxMRWxCUVVrc1EwRkJReXhKUVVGSkxGbEJRVmtzVFVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN3d1EwRkJSU3hKUVVGSkxFdEJRVXNzVFVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN3d1EwRkJSU3hKUVVGSkxHTkJRV01zUlVGRE9VY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkRXQ3hEUVVGQkxFMUJRVUVzVFVGQlFTeEpRVUZKTEVOQlFVTXNUVUZCVFN3d1EwRkJSU3hSUVVGUkxEQkRRVUZGTEV0QlFVc3NTMEZCU1N4RFFVRkRMRVZCUTJwRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlExb3NRMEZCUXp0VFFVTklPMUZCUlVRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU03VVVGRGRrTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE9VTXNTVUZEUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzU1VGQlNTeHBRa0ZCVXl4RFFVRkRMRk5CUVZNN1dVRkRka01zU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4MVFrRkJhVUlzUTBGQlF5eGpRVUZqTEVWQlF6ZERPMWxCUTBFc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eDNRa0ZCZDBJc1IwRkJSeXhOUVVGQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEcxRFFVRkpMRVZCUVVVc1EwRkJRenRaUVVOc1JTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMSE5DUVVGelFpeEhRVUZITEUxQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc2JVTkJRVWtzUlVGQlJTeERRVUZETzFOQlF5OUVPMUZCUTBRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTnNRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMGxCUTNCQ0xFTkJRVU03UTBGRFJqdEJRVVZFTEZOQlFWTXNUMEZCVHl4RFFVTmtMRWxCUVRSRk8wbEJSVFZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGRrSXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMnBDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhYUVVGWExFTkJRVU03VVVGRE0wSXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFpRVUZaTzFsQlEycERMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEZGQlFWRXNSVUZCUlR0blFrRkRha01zVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMkZCUTJ4Q08ybENRVUZOTEVsQlFVa3NUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUzBGQlN5eFJRVUZSTEVWQlFVVTdaMEpCUXk5RExFOUJRVThzUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETzJGQlEzcERPMmxDUVVGTk8yZENRVU5NTEU5QlFVOHNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVsQlFVa3NRMEZCUXp0aFFVTTFRenRSUVVOSU8xbEJRMFVzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMHRCUTNCQ08wRkJRMGdzUTBGQlF6dEJRVVZFTEZOQlFXZENMRkZCUVZFc1EwRkRkRUlzUjBGQk5FTXNSVUZETlVNc1RVRkJZenM3U1VGRlpDeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEpRVVYyUXl4TFFVRkxMRTFCUVUwc1NVRkJTU3hKUVVGSkxFZEJRVWNzUlVGQlJUdFJRVU4wUWl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRGFrSXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0blFrRkRMMElzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXp0dlFrRkRXQ3hKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4UlFVRlJPMjlDUVVONFFpeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzN2IwSkJRMnBDTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU40UWl4TlFVRk5PMmxDUVVOUUxFTkJRVU1zUTBGQlF6dG5Ra0ZEU0N4TlFVRk5PMkZCUTFBN1dVRkZSQ3hMUVVGTExIVkNRVUZwUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8yZENRVU5xUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVrTXNUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRuUWtGRGNFTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRFdDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhUUVVGVE8yOUNRVU42UWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTA3YjBKQlEyNUNMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTjRRaXhSUVVGUkxFVkJRVVVzUlVGQlJUdHZRa0ZEV2l4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3YjBKQlEyWXNaVUZCWlN4RlFVRkZMRTFCUVVFc1NVRkJTU3hEUVVGRExHVkJRV1VzYlVOQlFVa3NSVUZCUlR0dlFrRkRNME1zWVVGQllTeEZRVUZGTEUxQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc2JVTkJRVWtzUlVGQlJUdHZRa0ZEZGtNc2EwSkJRV3RDTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRGJFTXNUVUZCVFR0cFFrRkRVQ3hEUVVGRExFTkJRVU03WjBKQlEwZ3NUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRuUWtGRGNrTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRuUWtGRGVrTXNUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRuUWtGRGFFTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRFdDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhUUVVGVE8yOUNRVU42UWl4TlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTA3YjBKQlEyNUNMRkZCUVZFc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzI5Q1FVTjRRaXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVazdiMEpCUTJZc1pVRkJaU3hGUVVGRkxFMUJRVUVzU1VGQlNTeERRVUZETEdWQlFXVXNiVU5CUVVrc1JVRkJSVHR2UWtGRE0wTXNZVUZCWVN4RlFVRkZMRTFCUVVFc1NVRkJTU3hEUVVGRExHRkJRV0VzYlVOQlFVa3NSVUZCUlR0dlFrRkRka01zYTBKQlFXdENMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEYkVNc1RVRkJUVHRwUWtGRFVDeERRVUZETEVOQlFVTTdaMEpCUTBnc1RVRkJUVHRoUVVOUU8xbEJSVVFzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dG5Ra0ZEYmtNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEV0N4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzI5Q1FVTTFRaXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVazdiMEpCUTJZc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzI5Q1FVTm1MR1ZCUVdVc1JVRkJSU3hOUVVGQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEcxRFFVRkpMRVZCUVVVN2IwSkJRek5ETEdGQlFXRXNSVUZCUlN4TlFVRkJMRWxCUVVrc1EwRkJReXhoUVVGaExHMURRVUZKTEVWQlFVVTdiMEpCUTNaRExIZENRVUYzUWl4RlFVRkZMRTFCUVVFc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4dFEwRkJTU3hGUVVGRk8yOUNRVU0zUkN4elFrRkJjMElzUlVGQlJTeE5RVUZCTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzYlVOQlFVa3NSVUZCUlR0dlFrRkRla1FzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRM2hDTEd0Q1FVRnJRaXhGUVVGRk8zZENRVU5zUWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExHdENRVUZyUWp0M1FrRkRPVUlzUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3Y1VKQlF6TkNPMjlDUVVORUxHZENRVUZuUWl4RlFVRkZPM2RDUVVOb1FpeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFqdDNRa0ZETlVJc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eGpRVUZqTzNGQ1FVTjZRanR2UWtGRFJDeE5RVUZOTzJsQ1FVTlFMRU5CUVVNc1EwRkJRenRuUWtGRFNDeE5RVUZOTzJGQlExQTdXVUZGUkN4TFFVRkxMSFZDUVVGcFFpeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMmRDUVVOc1F5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRNVU1zVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0blFrRkRia01zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0blFrRkRNME1zVFVGQlRUdGhRVU5RTzFsQlJVUXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0blFrRkRkRU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRE9VTXNUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZETzJkQ1FVTTNReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVOeVJDeE5RVUZOTzJGQlExQTdXVUZGUkN4TFFVRkxMSFZDUVVGcFFpeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMmRDUVVOc1F5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVOWUxFbEJRVWtzUlVGQlJTeHBRa0ZCVXl4RFFVRkRMRmRCUVZjN2IwSkJRek5DTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHR2UWtGRFppeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRGVFSXNUVUZCVFR0cFFrRkRVQ3hEUVVGRExFTkJRVU03WjBKQlEwZ3NUVUZCVFR0aFFVTlFPMWxCUlVRc1MwRkJTeXgxUWtGQmFVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRuUWtGRGFrTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRFdDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhYUVVGWE8yOUNRVU16UWl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWs3YjBKQlEyWXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yOUNRVU5tTEZWQlFWVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRPMjlDUVVOeVJDeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenR2UWtGRGVFSXNUVUZCVFR0dlFrRkRUaXhyUWtGQmEwSXNSVUZCUlR0M1FrRkRiRUlzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4clFrRkJhMEk3ZDBKQlF6bENMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENPM0ZDUVVNelFqdHZRa0ZEUkN4blFrRkJaMElzUlVGQlJUdDNRa0ZEYUVJc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJN2QwSkJRelZDTEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZenR4UWtGRGVrSTdhVUpCUTBZc1EwRkJReXhEUVVGRE8yZENRVU5JTEUxQlFVMDdZVUZEVUR0WlFVVkVMRXRCUVVzc2RVSkJRV2xDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1owSkJRMmhETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRMWdzU1VGQlNTeEZRVUZGTEdsQ1FVRlRMRU5CUVVNc1UwRkJVenR2UWtGRGVrSXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yOUNRVU5tTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU40UWl4TlFVRk5PMmxDUVVOUUxFTkJRVU1zUTBGQlF6dG5Ra0ZEU0N4TlFVRk5PMkZCUTFBN1dVRkZSQ3hMUVVGTExIVkNRVUZwUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFsQlEzaERMRXRCUVVzc2RVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03V1VGRGVFTXNTMEZCU3l4MVFrRkJhVUlzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0blFrRkRia01zVFVGQlRTeFpRVUZaTEVkQlEyaENPMjlDUVVORkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZIWlR0dlFrRkRNVUlzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMjlDUVVObUxGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMjlDUVVONFFpeE5RVUZOTzI5Q1FVZE9MR2xDUVVGcFFpeEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0dlFrRkRla01zUzBGQlN5eEZRVUZGTEVWQlFVVTdhVUpCUTFZc1EwRkJRenRuUWtGRFNpeE5RVUZOTEV0QlFVc3NSMEZCUnl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8yZENRVU51UkN4WlFVRlpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dG5Ra0ZETTBJc1dVRkJXU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRuUWtGRGJFVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dG5Ra0ZETTBJc1RVRkJUVHRoUVVOUU8xbEJSVVFzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dG5Ra0ZEZEVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dHZRa0ZEV0N4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eGxRVUZsTzI5Q1FVTXZRaXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVazdiMEpCUTJZc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdiMEpCUTNoQ0xFMUJRVTA3YVVKQlExQXNRMEZCUXl4RFFVRkRPMmRDUVVOSUxFMUJRVTA3WVVGRFVEdFpRVVZFTEU5QlFVOHNRMEZCUXl4RFFVRkRPMmRDUVVOUUxFbEJRVUVzYlVKQlFWY3NSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRoUVVOdVFqdFRRVU5HTzB0QlEwWTdTVUZGUkN4UFFVRlBMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU03UVVGRGNrSXNRMEZCUXp0QlFYSk1SQ3cwUWtGeFRFTTdRVUZGUkN4VFFVRlRMRzFDUVVGdFFpeERRVU14UWl4SlFVZDNRaXhGUVVONFFpeExRVUZuUXp0SlFVVm9ReXhKUVVGSkxFdEJRVXNzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RlFVRkZPMUZCUjNSQ0xFOUJRVTg3V1VGRFRDeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTzFsQlMycEZMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwN1UwRkxhRVVzUTBGQlF6dExRVU5JTzBsQlJVUXNUMEZCVHp0UlFVTk1MRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzN1VVRkRPVUlzUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhPMHRCUXpGRExFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4blFrRkJaMElzUTBGRGRrSXNTMEZCWjBRc1JVRkRhRVFzVFVGQll6dEpRVVZrTEU5QlFVOHNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVGhDTEVOQlFVTTdRVUZET1VRc1EwRkJRenRCUVVWRUxGTkJRVk1zV1VGQldTeERRVU51UWl4UlFVRnBReXhGUVVOcVF5eE5RVUZqTzBsQlJXUXNUMEZCVHl4UlFVRlJMRU5CUVVNc1VVRkJVU3hGUVVGRkxFMUJRVTBzUTBGQmIwSXNRMEZCUXp0QlFVTjJSQ3hEUVVGRE8wRkJSVVFzVTBGQlV5eE5RVUZOTEVOQlFVTXNTVUZCYVVNc1JVRkJSU3hOUVVGak8wbEJReTlFTEVsQlFVa3NUMEZCVHl4SlFVRkpMRXRCUVVzc1VVRkJVVHRSUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETzBsQlF6RkRMRTlCUVU4c1dVRkJXU3hEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTndReXhEUVVGRE8wRkJSVVFzVTBGQlV5eFpRVUZaTEVOQlFVTXNTVUZCZDBJc1JVRkJSU3hOUVVGak96dEpRVU0xUkN4UFFVRlBPMUZCUTB3c1NVRkJTU3hGUVVGRkxHbENRVUZUTEVOQlFVTXNWVUZCVlR0UlFVTXhRaXhOUVVGTkxFVkJRMG9zVDBGQlR5eEpRVUZKTEVOQlFVTXNUVUZCVFN4TFFVRkxMRkZCUVZFN1dVRkROMElzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5PMWxCUTJJc1EwRkJReXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETzFGQlF6TkRMR1ZCUVdVc1JVRkJSU3hOUVVGQkxFbEJRVWtzUTBGQlF5eGxRVUZsTEcxRFFVRkpMRVZCUVVVN1VVRkRNME1zWVVGQllTeEZRVUZGTEUxQlFVRXNTVUZCU1N4RFFVRkRMR0ZCUVdFc2JVTkJRVWtzUlVGQlJUdFJRVU4yUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU40UWl4TlFVRk5PMHRCUTFBc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRlJDeFRRVUZUTEdkQ1FVRm5RaXhEUVVOMlFpeEpRVUUwUWl4RlFVTTFRaXhOUVVGak8wbEJSV1FzVDBGQlR6dFJRVU5NTEVsQlFVa3NSVUZCUlN4cFFrRkJVeXhEUVVGRExHTkJRV003VVVGRE9VSXNWVUZCVlN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEUxQlFVMHNRMEZCUXp0UlFVTnFSQ3hQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGREwwUXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGVFSXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVE8xRkJRM3BDTEUxQlFVMDdTMEZEVUN4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVVWRUxGTkJRVk1zV1VGQldTeERRVU51UWl4SlFVRTRRaXhGUVVNNVFpeE5RVUZqTzBsQlJXUXNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xRkJRMnBDTEV0QlFVc3NkVUpCUVdsQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZETjBJc1QwRkJUenRuUWtGRFRDeEpRVUZKTEVWQlFVVXNhVUpCUVZNc1EwRkJReXhOUVVGTk8yZENRVU4wUWl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dG5Ra0ZEZUVJc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTzJkQ1FVTnVRaXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVczdaMEpCUTJwQ0xFMUJRVTA3WVVGRFVDeERRVUZETzFOQlEwZzdVVUZEUkN4TFFVRkxMSFZDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMWxCUXpkQ0xFOUJRVTg3WjBKQlEwd3NTVUZCU1N4RlFVRkZMR2xDUVVGVExFTkJRVU1zVFVGQlRUdG5Ra0ZEZEVJc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUTNoQ0xFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3p0blFrRkRha0lzVFVGQlRUdGhRVU5RTEVOQlFVTTdVMEZEU0R0UlFVTkVMRXRCUVVzc2RVSkJRV2xDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRjRU1zVDBGQlR6dG5Ra0ZEVEN4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eGhRVUZoTzJkQ1FVTTNRaXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0blFrRkRlRUlzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxPMmRDUVVOcVFpeFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4N1owSkJRM0pDTEUxQlFVMDdZVUZEVUN4RFFVRkRPMU5CUTBnN1VVRkRSQ3hMUVVGTExIVkNRVUZwUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRelZDTEU5QlFVODdaMEpCUTB3c1NVRkJTU3hGUVVGRkxHbENRVUZUTEVOQlFVTXNTMEZCU3p0blFrRkRja0lzUzBGQlN5eEZRVUZGTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF6dG5Ra0ZEZGtNc1IwRkJSeXhGUVVGRkxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRTFCUVUwc1EwRkJRenRuUWtGRGJrTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03WjBKQlEzaENMRTFCUVUwN1lVRkRVQ3hEUVVGRE8xTkJRMGc3VVVGRFJDeExRVUZMTEhWQ1FVRnBRaXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETzFsQlEzSkRMRTlCUVU4N1owSkJRMHdzU1VGQlNTeEZRVUZGTEdsQ1FVRlRMRU5CUVVNc1kwRkJZenRuUWtGRE9VSXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhKUVVGSk8yZENRVU5tTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNSVUZCUlN4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0blFrRkRia1VzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1owSkJRM2hDTEUxQlFVMDdZVUZEVUN4RFFVRkRPMU5CUTBnN1VVRkRSQ3hQUVVGUExFTkJRVU1zUTBGQlF6dFpRVU5RTEU5QlFVOHNTVUZCUVN4dFFrRkJWeXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlF6RkNPMHRCUTBZN1FVRkRTQ3hEUVVGRE8wRkJSVVFzVTBGQlV5eFJRVUZSTEVOQlFVTXNTVUZCTUVJc1JVRkJSU3hOUVVGak8wbEJRekZFTEU5QlFVODdVVUZEVEN4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzFGQlF6VkNMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVU5tTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZPMWxCUXpGQ0xGRkJRVkVzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlR0blFrRkRhRUlzUzBGQlN5eDFRa0ZCYVVJc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dHZRa0ZEY0VNc1QwRkJUeXhsUVVGbExFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRPMmxDUVVOeVF6dG5Ra0ZEUkN4UFFVRlBMRU5CUVVNc1EwRkJRenR2UWtGRFVDeFBRVUZQTEZsQlFWa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03YVVKQlEyeERPMkZCUTBZN1VVRkRTQ3hEUVVGRExFTkJRVU03VVVGRFJpeFJRVUZSTEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVONFFpeE5RVUZOTzB0QlExQXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExHVkJRV1VzUTBGRGRFSXNTVUZCYVVNc1JVRkRha01zVFVGQll6dEpRVVZrTEU5QlFVODdVVUZEVEN4SlFVRkpMRVZCUVVVc2FVSkJRVk1zUTBGQlF5eGhRVUZoTzFGQlF6ZENMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVU5tTEV0QlFVc3NSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTTdVVUZEZGtNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEZUVJc1RVRkJUVHRMUVVOUUxFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4aFFVRmhMRU5CUVVNc1NVRkJlVUlzUlVGQlJTeE5RVUZqTzBsQlF6bEVMRTlCUVU4N1VVRkRUQ3hKUVVGSkxFVkJRVVVzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMUZCUXpOQ0xFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU03VVVGREwwSXNWVUZCVlN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVWQlFVVXNSVUZCUlN4TlFVRk5MRU5CUVVNN1VVRkRja1FzVVVGQlVTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRlRUlzYTBKQlFXdENMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5zUXl4blFrRkJaMElzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVTdVVUZEZUVNc1VVRkJVU3hGUVVGRkxFVkJRVVU3VVVGRFdpeE5RVUZOTzB0QlExQXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExHbENRVUZwUWl4RFFVTjRRaXhKUVVFMlFpeEZRVU0zUWl4TlFVRmpPMGxCUldRc1QwRkJUenRSUVVOTUxFbEJRVWtzUlVGQlJTeHBRa0ZCVXl4RFFVRkRMR1ZCUVdVN1VVRkRMMElzU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUTJZc1ZVRkJWU3hGUVVGRkxGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRVZCUVVVc1JVRkJSU3hOUVVGTkxFTkJRVU03VVVGRGNrUXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGVFSXNhMEpCUVd0Q0xFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTnNReXhOUVVGTk8wdEJRMUFzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMSGRDUVVGM1FpeERRVU12UWl4SlFVRnZReXhGUVVOd1F5eE5RVUZqTzBsQlJXUXNUMEZCVHp0UlFVTk1MRWxCUVVrc1JVRkJSU3hwUWtGQlV5eERRVUZETEhOQ1FVRnpRanRSUVVOMFF5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVFVGQlRTeERRVUZETzFGQlF5OUNMRlZCUVZVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNTVUZCU1N4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRE8xRkJRM0pFTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRM2hDTEd0Q1FVRnJRaXhGUVVGRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEYkVNc1RVRkJUVHRMUVVOUUxFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4UlFVRlJMRU5CUVVNc1NVRkJhVUk3U1VGRGFrTXNUMEZCVHp0UlFVTk1MRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVUdFJRVU53UWl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTA3UzBGRGFrSXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGblFpeEpRVUZKTEVOQlEyeENMRWRCUVcxQ0xFVkJRMjVDTEVWQlFYbEZMRVZCUTNwRkxGVkJRVEpDTzBsQlJUTkNMRXRCUVVzc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNXVUZCV1N4RFFVRkRMRVZCUVVVN1VVRkROVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRkZPMWxCUTJJc1IwRkJWeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVc5Q0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETVVVN1MwRkRSanRKUVVWRUxFbEJRVWtzVDBGQlR5eEpRVUZKTEVkQlFVY3NSVUZCUlR0UlFVTnNRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8xbEJRelZDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTJ4RU8wdEJRMFk3U1VGRlJDeEpRVUZKTEUxQlFVMHNTVUZCU1N4SFFVRkhMRVZCUVVVN1VVRkRha0lzU1VGQlNTeEhRVUZITEVOQlFVTXNTVUZCU1N4SlFVRkpMRTlCUVU4c1IwRkJSeXhEUVVGRExFbEJRVWtzUzBGQlN5eFJRVUZSTEVsQlFVa3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3V1VGRE4wUXNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdVMEZEYmtJN1MwRkRSanRKUVVWRUxFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRkRUlzUTBGQlF6dEJRWGhDUkN4dlFrRjNRa01pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0xpcXVpZEh0bWxDU1QgPSBleHBvcnRzLkxpcXVpZExpdGVyYWxWYWx1ZXMgPSBleHBvcnRzLkNvbmNyZXRlTm9kZVR5cGVzID0gdm9pZCAwO1xuY29uc3QgZXh0cmFzXzEgPSByZXF1aXJlKFwib2htLWpzL2V4dHJhc1wiKTtcbmNvbnN0IGdyYW1tYXJfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXIvZ3JhbW1hclwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL3BhcnNlci9lcnJvcnNcIik7XG52YXIgQ29uY3JldGVOb2RlVHlwZXM7XG4oZnVuY3Rpb24gKENvbmNyZXRlTm9kZVR5cGVzKSB7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJIdG1sQ29tbWVudFwiXSA9IFwiSHRtbENvbW1lbnRcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxSYXdUYWdcIl0gPSBcIkh0bWxSYXdUYWdcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxWb2lkRWxlbWVudFwiXSA9IFwiSHRtbFZvaWRFbGVtZW50XCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJIdG1sU2VsZkNsb3NpbmdFbGVtZW50XCJdID0gXCJIdG1sU2VsZkNsb3NpbmdFbGVtZW50XCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJIdG1sVGFnT3BlblwiXSA9IFwiSHRtbFRhZ09wZW5cIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkh0bWxUYWdDbG9zZVwiXSA9IFwiSHRtbFRhZ0Nsb3NlXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJBdHRyU2luZ2xlUXVvdGVkXCJdID0gXCJBdHRyU2luZ2xlUXVvdGVkXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJBdHRyRG91YmxlUXVvdGVkXCJdID0gXCJBdHRyRG91YmxlUXVvdGVkXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJBdHRyVW5xdW90ZWRcIl0gPSBcIkF0dHJVbnF1b3RlZFwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiQXR0ckVtcHR5XCJdID0gXCJBdHRyRW1wdHlcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkxpcXVpZERyb3BcIl0gPSBcIkxpcXVpZERyb3BcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkxpcXVpZFJhd1RhZ1wiXSA9IFwiTGlxdWlkUmF3VGFnXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJMaXF1aWRUYWdcIl0gPSBcIkxpcXVpZFRhZ1wiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiTGlxdWlkVGFnT3BlblwiXSA9IFwiTGlxdWlkVGFnT3BlblwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiTGlxdWlkVGFnQ2xvc2VcIl0gPSBcIkxpcXVpZFRhZ0Nsb3NlXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJUZXh0Tm9kZVwiXSA9IFwiVGV4dE5vZGVcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIllBTUxGcm9udG1hdHRlclwiXSA9IFwiWUFNTEZyb250bWF0dGVyXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJMaXF1aWRWYXJpYWJsZVwiXSA9IFwiTGlxdWlkVmFyaWFibGVcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIkxpcXVpZEZpbHRlclwiXSA9IFwiTGlxdWlkRmlsdGVyXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJOYW1lZEFyZ3VtZW50XCJdID0gXCJOYW1lZEFyZ3VtZW50XCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJMaXF1aWRMaXRlcmFsXCJdID0gXCJMaXF1aWRMaXRlcmFsXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJWYXJpYWJsZUxvb2t1cFwiXSA9IFwiVmFyaWFibGVMb29rdXBcIjtcbiAgICBDb25jcmV0ZU5vZGVUeXBlc1tcIlN0cmluZ1wiXSA9IFwiU3RyaW5nXCI7XG4gICAgQ29uY3JldGVOb2RlVHlwZXNbXCJOdW1iZXJcIl0gPSBcIk51bWJlclwiO1xuICAgIENvbmNyZXRlTm9kZVR5cGVzW1wiUmFuZ2VcIl0gPSBcIlJhbmdlXCI7XG59KShDb25jcmV0ZU5vZGVUeXBlcyA9IGV4cG9ydHMuQ29uY3JldGVOb2RlVHlwZXMgfHwgKGV4cG9ydHMuQ29uY3JldGVOb2RlVHlwZXMgPSB7fSkpO1xuZXhwb3J0cy5MaXF1aWRMaXRlcmFsVmFsdWVzID0ge1xuICAgIG5pbDogbnVsbCxcbiAgICBudWxsOiBudWxsLFxuICAgIHRydWU6IHRydWUsXG4gICAgZmFsc2U6IGZhbHNlLFxuICAgIGJsYW5rOiAnJyxcbiAgICBlbXB0eTogJycsXG59O1xuY29uc3QgbWFya3VwID0gKGkpID0+ICh0b2tlbnMpID0+IHRva2Vuc1tpXS5zb3VyY2VTdHJpbmcudHJpbSgpO1xuZnVuY3Rpb24gdG9MaXF1aWRIdG1sQ1NUKHRleHQpIHtcbiAgICBjb25zdCBsb2NTdGFydCA9ICh0b2tlbnMpID0+IHRva2Vuc1swXS5zb3VyY2Uuc3RhcnRJZHg7XG4gICAgY29uc3QgbG9jRW5kID0gKHRva2VucykgPT4gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS5zb3VyY2UuZW5kSWR4O1xuICAgIGNvbnN0IHRleHROb2RlID0ge1xuICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5UZXh0Tm9kZSxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvdXJjZVN0cmluZztcbiAgICAgICAgfSxcbiAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgIGxvY0VuZCxcbiAgICB9O1xuICAgIGNvbnN0IHJlcyA9IGdyYW1tYXJfMS5saXF1aWRIdG1sR3JhbW1hci5tYXRjaCh0ZXh0KTtcbiAgICBpZiAocmVzLmZhaWxlZCgpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5MaXF1aWRIVE1MQ1NUUGFyc2luZ0Vycm9yKHJlcyk7XG4gICAgfVxuICAgIGNvbnN0IG9obUFTVCA9ICgwLCBleHRyYXNfMS50b0FTVCkocmVzLCB7XG4gICAgICAgIEh0bWxDb21tZW50OiB7XG4gICAgICAgICAgICBib2R5OiBtYXJrdXAoMSksXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgSHRtbFJhd1RhZ0ltcGw6IHtcbiAgICAgICAgICAgIHR5cGU6ICdIdG1sUmF3VGFnJyxcbiAgICAgICAgICAgIG5hbWU6IDEsXG4gICAgICAgICAgICBhdHRyTGlzdDogMixcbiAgICAgICAgICAgIGJvZHk6IDQsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgICAgIGJsb2NrU3RhcnRMb2NTdGFydDogKHRva2VucykgPT4gdG9rZW5zWzBdLnNvdXJjZS5zdGFydElkeCxcbiAgICAgICAgICAgIGJsb2NrU3RhcnRMb2NFbmQ6ICh0b2tlbnMpID0+IHRva2Vuc1szXS5zb3VyY2UuZW5kSWR4LFxuICAgICAgICAgICAgYmxvY2tFbmRMb2NTdGFydDogKHRva2VucykgPT4gdG9rZW5zWzVdLnNvdXJjZS5zdGFydElkeCxcbiAgICAgICAgICAgIGJsb2NrRW5kTG9jRW5kOiAodG9rZW5zKSA9PiB0b2tlbnNbNV0uc291cmNlLmVuZElkeCxcbiAgICAgICAgfSxcbiAgICAgICAgSHRtbFZvaWRFbGVtZW50OiB7XG4gICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgYXR0ckxpc3Q6IDMsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgSHRtbFNlbGZDbG9zaW5nRWxlbWVudDoge1xuICAgICAgICAgICAgbmFtZTogMSxcbiAgICAgICAgICAgIGF0dHJMaXN0OiAyLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIEh0bWxUYWdPcGVuOiB7XG4gICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgYXR0ckxpc3Q6IDIsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgSHRtbFRhZ0Nsb3NlOiB7XG4gICAgICAgICAgICBuYW1lOiAxLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIHRhZ05hbWVPckxpcXVpZERyb3A6IDAsXG4gICAgICAgIEF0dHJVbnF1b3RlZDoge1xuICAgICAgICAgICAgbmFtZTogMCxcbiAgICAgICAgICAgIHZhbHVlOiAyLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIEF0dHJTaW5nbGVRdW90ZWQ6IHtcbiAgICAgICAgICAgIG5hbWU6IDAsXG4gICAgICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBBdHRyRG91YmxlUXVvdGVkOiB7XG4gICAgICAgICAgICBuYW1lOiAwLFxuICAgICAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgYXR0ckVtcHR5OiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5BdHRyRW1wdHksXG4gICAgICAgICAgICBuYW1lOiAwLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIGF0dHJEb3VibGVRdW90ZWRWYWx1ZTogMCxcbiAgICAgICAgYXR0clNpbmdsZVF1b3RlZFZhbHVlOiAwLFxuICAgICAgICBhdHRyVW5xdW90ZWRWYWx1ZTogMCxcbiAgICAgICAgYXR0ckRvdWJsZVF1b3RlZFRleHROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgYXR0clNpbmdsZVF1b3RlZFRleHROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgYXR0clVucXVvdGVkVGV4dE5vZGU6IHRleHROb2RlLFxuICAgICAgICBsaXF1aWROb2RlOiAwLFxuICAgICAgICBsaXF1aWRSYXdUYWc6IDAsXG4gICAgICAgIGxpcXVpZFJhd1RhZ0ltcGw6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFJhd1RhZyxcbiAgICAgICAgICAgIG5hbWU6IDMsXG4gICAgICAgICAgICBib2R5OiA3LFxuICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiAxLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogNSxcbiAgICAgICAgICAgIGRlbGltaXRlcldoaXRlc3BhY2VTdGFydDogOSxcbiAgICAgICAgICAgIGRlbGltaXRlcldoaXRlc3BhY2VFbmQ6IDE0LFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgICAgICBibG9ja1N0YXJ0TG9jU3RhcnQ6ICh0b2tlbnMpID0+IHRva2Vuc1swXS5zb3VyY2Uuc3RhcnRJZHgsXG4gICAgICAgICAgICBibG9ja1N0YXJ0TG9jRW5kOiAodG9rZW5zKSA9PiB0b2tlbnNbNl0uc291cmNlLmVuZElkeCxcbiAgICAgICAgICAgIGJsb2NrRW5kTG9jU3RhcnQ6ICh0b2tlbnMpID0+IHRva2Vuc1s4XS5zb3VyY2Uuc3RhcnRJZHgsXG4gICAgICAgICAgICBibG9ja0VuZExvY0VuZDogKHRva2VucykgPT4gdG9rZW5zWzE1XS5zb3VyY2UuZW5kSWR4LFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWRUYWdPcGVuOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRUYWdPcGVuLFxuICAgICAgICAgICAgbmFtZTogMyxcbiAgICAgICAgICAgIG1hcmt1cDogbWFya3VwKDUpLFxuICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiAxLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogNixcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWRUYWdDbG9zZToge1xuICAgICAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkVGFnQ2xvc2UsXG4gICAgICAgICAgICBuYW1lOiA0LFxuICAgICAgICAgICAgd2hpdGVzcGFjZVN0YXJ0OiAxLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZDogNyxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWRUYWc6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFRhZyxcbiAgICAgICAgICAgIG5hbWU6IDMsXG4gICAgICAgICAgICBtYXJrdXA6IG1hcmt1cCg1KSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDYsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkRHJvcDoge1xuICAgICAgICAgICAgdHlwZTogQ29uY3JldGVOb2RlVHlwZXMuTGlxdWlkRHJvcCxcbiAgICAgICAgICAgIG1hcmt1cDogMyxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydDogMSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQ6IDQsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkRHJvcENhc2VzOiAwLFxuICAgICAgICBsaXF1aWRFeHByZXNzaW9uOiAwLFxuICAgICAgICBsaXF1aWREcm9wQmFzZUNhc2U6IChzdykgPT4gc3cuc291cmNlU3RyaW5nLnRyaW1FbmQoKSxcbiAgICAgICAgbGlxdWlkVmFyaWFibGU6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZFZhcmlhYmxlLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogMCxcbiAgICAgICAgICAgIGZpbHRlcnM6IDEsXG4gICAgICAgICAgICByYXdTb3VyY2U6ICh0b2tlbnMpID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2xpY2UobG9jU3RhcnQodG9rZW5zKSwgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAyXS5zb3VyY2UuZW5kSWR4KVxuICAgICAgICAgICAgICAgIC50cmltRW5kKCksXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZDogKHRva2VucykgPT4gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAyXS5zb3VyY2UuZW5kSWR4LFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWRGaWx0ZXI6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZEZpbHRlcixcbiAgICAgICAgICAgIG5hbWU6IDMsXG4gICAgICAgICAgICBhcmdzKG5vZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzWzddLnNvdXJjZVN0cmluZyA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVzWzddLnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBmaWx0ZXJBcmd1bWVudHM6IDAsXG4gICAgICAgIGZpbHRlckFyZ3VtZW50OiAwLFxuICAgICAgICBwb3NpdGlvbmFsQXJndW1lbnQ6IDAsXG4gICAgICAgIG5hbWVkQXJndW1lbnQ6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLk5hbWVkQXJndW1lbnQsXG4gICAgICAgICAgICBuYW1lOiAwLFxuICAgICAgICAgICAgdmFsdWU6IDQsXG4gICAgICAgIH0sXG4gICAgICAgIGxpcXVpZFN0cmluZzogMCxcbiAgICAgICAgbGlxdWlkRG91YmxlUXVvdGVkU3RyaW5nOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5TdHJpbmcsXG4gICAgICAgICAgICBzaW5nbGU6ICgpID0+IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkU2luZ2xlUXVvdGVkU3RyaW5nOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5TdHJpbmcsXG4gICAgICAgICAgICBzaW5nbGU6ICgpID0+IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgICAgIGxvY1N0YXJ0LFxuICAgICAgICAgICAgbG9jRW5kLFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWROdW1iZXI6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLk51bWJlcixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIGxpcXVpZExpdGVyYWw6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLkxpcXVpZExpdGVyYWwsXG4gICAgICAgICAgICB2YWx1ZTogKHRva2VucykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleXdvcmQgPSB0b2tlbnNbMF1cbiAgICAgICAgICAgICAgICAgICAgLnNvdXJjZVN0cmluZztcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwb3J0cy5MaXF1aWRMaXRlcmFsVmFsdWVzW2tleXdvcmRdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGtleXdvcmQ6IDAsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkUmFuZ2U6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLlJhbmdlLFxuICAgICAgICAgICAgc3RhcnQ6IDIsXG4gICAgICAgICAgICBlbmQ6IDYsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbGlxdWlkVmFyaWFibGVMb29rdXA6IHtcbiAgICAgICAgICAgIHR5cGU6IENvbmNyZXRlTm9kZVR5cGVzLlZhcmlhYmxlTG9va3VwLFxuICAgICAgICAgICAgbmFtZTogMCxcbiAgICAgICAgICAgIGxvb2t1cHM6IDEsXG4gICAgICAgICAgICBsb2NTdGFydCxcbiAgICAgICAgICAgIGxvY0VuZCxcbiAgICAgICAgfSxcbiAgICAgICAgbG9va3VwOiAwLFxuICAgICAgICBpbmRleExvb2t1cDogMyxcbiAgICAgICAgZG90TG9va3VwOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5TdHJpbmcsXG4gICAgICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgICAgIGxvY1N0YXJ0OiAobm9kZXMpID0+IG5vZGVzWzJdLnNvdXJjZS5zdGFydElkeCxcbiAgICAgICAgICAgIGxvY0VuZDogKG5vZGVzKSA9PiBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXS5zb3VyY2UuZW5kSWR4LFxuICAgICAgICB9LFxuICAgICAgICBsaXF1aWRJbmxpbmVDb21tZW50OiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5MaXF1aWRUYWcsXG4gICAgICAgICAgICBuYW1lOiAzLFxuICAgICAgICAgICAgbWFya3VwOiBtYXJrdXAoNSksXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQ6IDEsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlRW5kOiA2LFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIFRleHROb2RlOiB0ZXh0Tm9kZSxcbiAgICAgICAgeWFtbEZyb250bWF0dGVyOiB7XG4gICAgICAgICAgICB0eXBlOiBDb25jcmV0ZU5vZGVUeXBlcy5ZQU1MRnJvbnRtYXR0ZXIsXG4gICAgICAgICAgICBib2R5OiAyLFxuICAgICAgICAgICAgbG9jU3RhcnQsXG4gICAgICAgICAgICBsb2NFbmQsXG4gICAgICAgIH0sXG4gICAgICAgIE5vZGUoZnJvbnRtYXR0ZXIsIG5vZGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IGZyb250bWF0dGVyTm9kZSA9IGZyb250bWF0dGVyLnNvdXJjZVN0cmluZy5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICA/IFtdXG4gICAgICAgICAgICAgICAgOiBbZnJvbnRtYXR0ZXIudG9BU1Qoc2VsZi5hcmdzLm1hcHBpbmcpXTtcbiAgICAgICAgICAgIHJldHVybiBmcm9udG1hdHRlck5vZGUuY29uY2F0KG5vZGVzLnRvQVNUKHNlbGYuYXJncy5tYXBwaW5nKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxpc3RPZjogMCxcbiAgICAgICAgbm9uZW1wdHlMaXN0T2YoZmlyc3QsIF9zZXAsIHJlc3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIFtmaXJzdC50b0FTVChzZWxmLmFyZ3MubWFwcGluZyldLmNvbmNhdChyZXN0LnRvQVNUKHNlbGYuYXJncy5tYXBwaW5nKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVtcHR5TGlzdE9mKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBvaG1BU1Q7XG59XG5leHBvcnRzLnRvTGlxdWlkSHRtbENTVCA9IHRvTGlxdWlkSHRtbENTVDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkzTjBMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2YzNKakwzQmhjbk5sY2k5amMzUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlJVRXNNRU5CUVhORE8wRkJRM1JETERoRFFVRnhSRHRCUVVOeVJDdzBRMEZCTkVRN1FVRkZOVVFzU1VGQldTeHBRa0V5UWxnN1FVRXpRa1FzVjBGQldTeHBRa0ZCYVVJN1NVRkRNMElzWjBSQlFUSkNMRU5CUVVFN1NVRkRNMElzT0VOQlFYbENMRU5CUVVFN1NVRkRla0lzZDBSQlFXMURMRU5CUVVFN1NVRkRia01zYzBWQlFXbEVMRU5CUVVFN1NVRkRha1FzWjBSQlFUSkNMRU5CUVVFN1NVRkRNMElzYTBSQlFUWkNMRU5CUVVFN1NVRkROMElzTUVSQlFYRkRMRU5CUVVFN1NVRkRja01zTUVSQlFYRkRMRU5CUVVFN1NVRkRja01zYTBSQlFUWkNMRU5CUVVFN1NVRkROMElzTkVOQlFYVkNMRU5CUVVFN1NVRkRka0lzT0VOQlFYbENMRU5CUVVFN1NVRkRla0lzYTBSQlFUWkNMRU5CUVVFN1NVRkROMElzTkVOQlFYVkNMRU5CUVVFN1NVRkRka0lzYjBSQlFTdENMRU5CUVVFN1NVRkRMMElzYzBSQlFXbERMRU5CUVVFN1NVRkRha01zTUVOQlFYRkNMRU5CUVVFN1NVRkRja0lzZDBSQlFXMURMRU5CUVVFN1NVRkZia01zYzBSQlFXbERMRU5CUVVFN1NVRkRha01zYTBSQlFUWkNMRU5CUVVFN1NVRkROMElzYjBSQlFTdENMRU5CUVVFN1NVRkRMMElzYjBSQlFTdENMRU5CUVVFN1NVRkRMMElzYzBSQlFXbERMRU5CUVVFN1NVRkRha01zYzBOQlFXbENMRU5CUVVFN1NVRkRha0lzYzBOQlFXbENMRU5CUVVFN1NVRkRha0lzYjBOQlFXVXNRMEZCUVR0QlFVTnFRaXhEUVVGRExFVkJNMEpYTEdsQ1FVRnBRaXhIUVVGcVFpeDVRa0ZCYVVJc1MwRkJha0lzZVVKQlFXbENMRkZCTWtJMVFqdEJRVVZaTEZGQlFVRXNiVUpCUVcxQ0xFZEJRVWM3U1VGRGFrTXNSMEZCUnl4RlFVRkZMRWxCUVVrN1NVRkRWQ3hKUVVGSkxFVkJRVVVzU1VGQlNUdEpRVU5XTEVsQlFVa3NSVUZCUlN4SlFVRlpPMGxCUTJ4Q0xFdEJRVXNzUlVGQlJTeExRVUZqTzBsQlEzSkNMRXRCUVVzc1JVRkJSU3hGUVVGUk8wbEJRMllzUzBGQlN5eEZRVUZGTEVWQlFWRTdRMEZEYUVJc1EwRkJRenRCUVhGTlJpeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZqTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1FVRkZhRVlzVTBGQlowSXNaVUZCWlN4RFFVRkRMRWxCUVZrN1NVRkRNVU1zVFVGQlRTeFJRVUZSTEVkQlFVY3NRMEZCUXl4TlFVRmpMRVZCUVVVc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRE8wbEJReTlFTEUxQlFVMHNUVUZCVFN4SFFVRkhMRU5CUVVNc1RVRkJZeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUXpORkxFMUJRVTBzVVVGQlVTeEhRVUZITzFGQlEyWXNTVUZCU1N4RlFVRkZMR2xDUVVGcFFpeERRVUZETEZGQlFWRTdVVUZEYUVNc1MwRkJTeXhGUVVGRk8xbEJRMHdzVDBGQlVTeEpRVUZaTEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUTNCRExFTkJRVU03VVVGRFJDeFJRVUZSTzFGQlExSXNUVUZCVFR0TFFVTlFMRU5CUVVNN1NVRkRSaXhOUVVGTkxFZEJRVWNzUjBGQlJ5d3lRa0ZCYVVJc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZGTVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEVWQlFVVTdVVUZEYUVJc1RVRkJUU3hKUVVGSkxHdERRVUY1UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRekZETzBsQlJVUXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJRU3hqUVVGTExFVkJRVU1zUjBGQlJ5eEZRVUZGTzFGQlEzaENMRmRCUVZjc1JVRkJSVHRaUVVOWUxFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTJZc1VVRkJVVHRaUVVOU0xFMUJRVTA3VTBGRFVEdFJRVVZFTEdOQlFXTXNSVUZCUlR0WlFVTmtMRWxCUVVrc1JVRkJSU3haUVVGWk8xbEJRMnhDTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRFdDeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRkZCUVZFN1dVRkRVaXhOUVVGTk8xbEJRMDRzYTBKQlFXdENMRVZCUVVVc1EwRkJReXhOUVVGWExFVkJRVVVzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVUdFpRVU01UkN4blFrRkJaMElzUlVGQlJTeERRVUZETEUxQlFWY3NSVUZCUlN4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5PMWxCUXpGRUxHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1RVRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkU3V1VGRE5VUXNZMEZCWXl4RlFVRkZMRU5CUVVNc1RVRkJWeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTA3VTBGRGVrUTdVVUZGUkN4bFFVRmxMRVZCUVVVN1dVRkRaaXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5RTEZGQlFWRXNSVUZCUlN4RFFVRkRPMWxCUTFnc1VVRkJVVHRaUVVOU0xFMUJRVTA3VTBGRFVEdFJRVVZFTEhOQ1FVRnpRaXhGUVVGRk8xbEJRM1JDTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRFdDeFJRVUZSTzFsQlExSXNUVUZCVFR0VFFVTlFPMUZCUlVRc1YwRkJWeXhGUVVGRk8xbEJRMWdzU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4UlFVRlJMRVZCUVVVc1EwRkJRenRaUVVOWUxGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4WlFVRlpMRVZCUVVVN1dVRkRXaXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5RTEZGQlFWRTdXVUZEVWl4TlFVRk5PMU5CUTFBN1VVRkZSQ3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRPMUZCUlhSQ0xGbEJRVmtzUlVGQlJUdFpRVU5hTEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRFVpeFJRVUZSTzFsQlExSXNUVUZCVFR0VFFVTlFPMUZCUlVRc1owSkJRV2RDTEVWQlFVVTdXVUZEYUVJc1NVRkJTU3hGUVVGRkxFTkJRVU03V1VGRFVDeExRVUZMTEVWQlFVVXNRMEZCUXp0WlFVTlNMRkZCUVZFN1dVRkRVaXhOUVVGTk8xTkJRMUE3VVVGRlJDeG5Ra0ZCWjBJc1JVRkJSVHRaUVVOb1FpeEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRMUlzVVVGQlVUdFpRVU5TTEUxQlFVMDdVMEZEVUR0UlFVVkVMRk5CUVZNc1JVRkJSVHRaUVVOVUxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhUUVVGVE8xbEJRMnBETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1VVRkJVVHRaUVVOU0xFMUJRVTA3VTBGRFVEdFJRVVZFTEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03VVVGRGVFSXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF6dFJRVU40UWl4cFFrRkJhVUlzUlVGQlJTeERRVUZETzFGQlEzQkNMSGRDUVVGM1FpeEZRVUZGTEZGQlFWRTdVVUZEYkVNc2QwSkJRWGRDTEVWQlFVVXNVVUZCVVR0UlFVTnNReXh2UWtGQmIwSXNSVUZCUlN4UlFVRlJPMUZCUXpsQ0xGVkJRVlVzUlVGQlJTeERRVUZETzFGQlEySXNXVUZCV1N4RlFVRkZMRU5CUVVNN1VVRkRaaXhuUWtGQlowSXNSVUZCUlR0WlFVTm9RaXhKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1dVRkJXVHRaUVVOd1F5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMUFzWlVGQlpTeEZRVUZGTEVOQlFVTTdXVUZEYkVJc1lVRkJZU3hGUVVGRkxFTkJRVU03V1VGRGFFSXNkMEpCUVhkQ0xFVkJRVVVzUTBGQlF6dFpRVU16UWl4elFrRkJjMElzUlVGQlJTeEZRVUZGTzFsQlF6RkNMRkZCUVZFN1dVRkRVaXhOUVVGTk8xbEJRMDRzYTBKQlFXdENMRVZCUVVVc1EwRkJReXhOUVVGakxFVkJRVVVzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVUdFpRVU5xUlN4blFrRkJaMElzUlVGQlJTeERRVUZETEUxQlFXTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5PMWxCUXpkRUxHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1RVRkJZeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkU3V1VGREwwUXNZMEZCWXl4RlFVRkZMRU5CUVVNc1RVRkJZeXhGUVVGRkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTA3VTBGRE4wUTdVVUZGUkN4aFFVRmhMRVZCUVVVN1dVRkRZaXhKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1lVRkJZVHRaUVVOeVF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycENMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEdGQlFXRXNSVUZCUlN4RFFVRkRPMWxCUTJoQ0xGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4alFVRmpMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1kwRkJZenRaUVVOMFF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEdGQlFXRXNSVUZCUlN4RFFVRkRPMWxCUTJoQ0xGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4VFFVRlRMRVZCUVVVN1dVRkRWQ3hKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1UwRkJVenRaUVVOcVF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRTFCUVUwc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEycENMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEdGQlFXRXNSVUZCUlN4RFFVRkRPMWxCUTJoQ0xGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4VlFVRlZMRVZCUVVVN1dVRkRWaXhKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1ZVRkJWVHRaUVVOc1F5eE5RVUZOTEVWQlFVVXNRMEZCUXp0WlFVTlVMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xbEJRMnhDTEdGQlFXRXNSVUZCUlN4RFFVRkRPMWxCUTJoQ0xGRkJRVkU3V1VGRFVpeE5RVUZOTzFOQlExQTdVVUZGUkN4bFFVRmxMRVZCUVVVc1EwRkJRenRSUVVOc1FpeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRE8xRkJRMjVDTEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU1zUlVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJUdFJRVU16UkN4alFVRmpMRVZCUVVVN1dVRkRaQ3hKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1kwRkJZenRaUVVOMFF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0WlFVTmlMRTlCUVU4c1JVRkJSU3hEUVVGRE8xbEJRMVlzVTBGQlV5eEZRVUZGTEVOQlFVTXNUVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkROVUlzU1VGQlNUdHBRa0ZEUkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNN2FVSkJRMmhGTEU5QlFVOHNSVUZCUlR0WlFVTmtMRkZCUVZFN1dVRkhVaXhOUVVGTkxFVkJRVVVzUTBGQlF5eE5RVUZqTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTk8xTkJRM0JGTzFGQlJVUXNXVUZCV1N4RlFVRkZPMWxCUTFvc1NVRkJTU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRmxCUVZrN1dVRkRjRU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdXVUZEVUN4SlFVRkpMRU5CUVVNc1MwRkJZVHRuUWtGSGFFSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zV1VGQldTeExRVUZMTEVWQlFVVXNSVUZCUlR0dlFrRkRhRU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdhVUpCUTFnN2NVSkJRVTA3YjBKQlEwd3NUMEZCVHl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZGTEVsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03YVVKQlEyNUVPMWxCUTBnc1EwRkJRenRUUVVOR08xRkJRMFFzWlVGQlpTeEZRVUZGTEVOQlFVTTdVVUZEYkVJc1kwRkJZeXhGUVVGRkxFTkJRVU03VVVGRGFrSXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dFJRVU55UWl4aFFVRmhMRVZCUVVVN1dVRkRZaXhKUVVGSkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1lVRkJZVHRaUVVOeVF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0WlFVTlFMRXRCUVVzc1JVRkJSU3hEUVVGRE8xTkJRMVE3VVVGRlJDeFpRVUZaTEVWQlFVVXNRMEZCUXp0UlFVTm1MSGRDUVVGM1FpeEZRVUZGTzFsQlEzaENMRWxCUVVrc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4TlFVRk5PMWxCUXpsQ0xFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkxPMWxCUTI1Q0xFdEJRVXNzUlVGQlJTeERRVUZETzFsQlExSXNVVUZCVVR0WlFVTlNMRTFCUVUwN1UwRkRVRHRSUVVORUxIZENRVUYzUWl4RlFVRkZPMWxCUTNoQ0xFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhOUVVGTk8xbEJRemxDTEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSk8xbEJRMnhDTEV0QlFVc3NSVUZCUlN4RFFVRkRPMWxCUTFJc1VVRkJVVHRaUVVOU0xFMUJRVTA3VTBGRFVEdFJRVVZFTEZsQlFWa3NSVUZCUlR0WlFVTmFMRWxCUVVrc1JVRkJSU3hwUWtGQmFVSXNRMEZCUXl4TlFVRk5PMWxCUXpsQ0xFdEJRVXNzUlVGQlJTeERRVUZETzFsQlExSXNVVUZCVVR0WlFVTlNMRTFCUVUwN1UwRkRVRHRSUVVWRUxHRkJRV0VzUlVGQlJUdFpRVU5pTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eGhRVUZoTzFsQlEzSkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFMUJRV01zUlVGQlJTeEZRVUZGTzJkQ1FVTjRRaXhOUVVGTkxFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRPM0ZDUVVOMFFpeFpRVUZuUkN4RFFVRkRPMmRDUVVOd1JDeFBRVUZQTERKQ1FVRnRRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFsQlEzUkRMRU5CUVVNN1dVRkRSQ3hQUVVGUExFVkJRVVVzUTBGQlF6dFpRVU5XTEZGQlFWRTdXVUZEVWl4TlFVRk5PMU5CUTFBN1VVRkZSQ3hYUVVGWExFVkJRVVU3V1VGRFdDeEpRVUZKTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN6dFpRVU0zUWl4TFFVRkxMRVZCUVVVc1EwRkJRenRaUVVOU0xFZEJRVWNzUlVGQlJTeERRVUZETzFsQlEwNHNVVUZCVVR0WlFVTlNMRTFCUVUwN1UwRkRVRHRSUVVWRUxHOUNRVUZ2UWl4RlFVRkZPMWxCUTNCQ0xFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhqUVVGak8xbEJRM1JETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1QwRkJUeXhGUVVGRkxFTkJRVU03V1VGRFZpeFJRVUZSTzFsQlExSXNUVUZCVFR0VFFVTlFPMUZCUlVRc1RVRkJUU3hGUVVGRkxFTkJRVU03VVVGRFZDeFhRVUZYTEVWQlFVVXNRMEZCUXp0UlFVTmtMRk5CUVZNc1JVRkJSVHRaUVVOVUxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhOUVVGTk8xbEJRemxDTEV0QlFVc3NSVUZCUlN4RFFVRkRPMWxCUTFJc1VVRkJVU3hGUVVGRkxFTkJRVU1zUzBGQllTeEZRVUZGTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRTdXVUZEY2tRc1RVRkJUU3hGUVVGRkxFTkJRVU1zUzBGQllTeEZRVUZGTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUVHRUUVVOcVJUdFJRVVZFTEcxQ1FVRnRRaXhGUVVGRk8xbEJRMjVDTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eFRRVUZUTzFsQlEycERMRWxCUVVrc1JVRkJSU3hEUVVGRE8xbEJRMUFzVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRha0lzWlVGQlpTeEZRVUZGTEVOQlFVTTdXVUZEYkVJc1lVRkJZU3hGUVVGRkxFTkJRVU03V1VGRGFFSXNVVUZCVVR0WlFVTlNMRTFCUVUwN1UwRkRVRHRSUVVWRUxGRkJRVkVzUlVGQlJTeFJRVUZSTzFGQlJXeENMR1ZCUVdVc1JVRkJSVHRaUVVObUxFbEJRVWtzUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhsUVVGbE8xbEJRM1pETEVsQlFVa3NSVUZCUlN4RFFVRkRPMWxCUTFBc1VVRkJVVHRaUVVOU0xFMUJRVTA3VTBGRFVEdFJRVVZFTEVsQlFVa3NRMEZCUXl4WFFVRnBRaXhGUVVGRkxFdEJRVmM3V1VGRGFrTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJWeXhEUVVGRE8xbEJRM3BDTEUxQlFVMHNaVUZCWlN4SFFVTnVRaXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRPMmRDUVVOdVF5eERRVUZETEVOQlFVTXNSVUZCUlR0blFrRkRTaXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVVTNReXhQUVVGUExHVkJRV1VzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRhRVVzUTBGQlF6dFJRVWRFTEUxQlFVMHNSVUZCUlN4RFFVRkRPMUZCUTFRc1kwRkJZeXhEUVVGRExFdEJRVlVzUlVGQlJTeEpRVUZUTEVWQlFVVXNTVUZCVXp0WlFVTTNReXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZYTEVOQlFVTTdXVUZEZWtJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZETlVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVNNVFpeERRVUZETzFGQlEwb3NRMEZCUXp0UlFVTkVMRmRCUVZjN1dVRkRWQ3hQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU5hTEVOQlFVTTdTMEZEUml4RFFVRkRMRU5CUVVNN1NVRkZTQ3hQUVVGUExFMUJRWFZDTEVOQlFVTTdRVUZEYWtNc1EwRkJRenRCUVRGVFJDd3dRMEV3VTBNaWZRPT0iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlxdWlkSFRNTEFTVFBhcnNpbmdFcnJvciA9IGV4cG9ydHMuTGlxdWlkSFRNTENTVFBhcnNpbmdFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGxpbmVfY29sdW1uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxpbmUtY29sdW1uXCIpKTtcbmNsYXNzIExpcXVpZEhUTUxDU1RQYXJzaW5nRXJyb3IgZXh0ZW5kcyBTeW50YXhFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob2htKSB7XG4gICAgICAgIHN1cGVyKG9obS5zaG9ydE1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTGlxdWlkSFRNTFBhcnNpbmdFcnJvcic7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gb2htLmlucHV0O1xuICAgICAgICBjb25zdCBlcnJvclBvcyA9IG9obS5fcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uO1xuICAgICAgICBjb25zdCBsaW5lQ29sID0gKDAsIGxpbmVfY29sdW1uXzEuZGVmYXVsdCkoaW5wdXQpLmZyb21JbmRleChNYXRoLm1pbihlcnJvclBvcywgaW5wdXQubGVuZ3RoIC0gMSkpO1xuICAgICAgICBpZiAobGluZUNvbCkge1xuICAgICAgICAgICAgdGhpcy5sb2MgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogbGluZUNvbC5saW5lLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGxpbmVDb2wuY29sLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVDb2wubGluZSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBsaW5lQ29sLmNvbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTGlxdWlkSFRNTENTVFBhcnNpbmdFcnJvciA9IExpcXVpZEhUTUxDU1RQYXJzaW5nRXJyb3I7XG5jbGFzcyBMaXF1aWRIVE1MQVNUUGFyc2luZ0Vycm9yIGV4dGVuZHMgU3ludGF4RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHNvdXJjZSwgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdMaXF1aWRIVE1MUGFyc2luZ0Vycm9yJztcbiAgICAgICAgY29uc3QgbGMgPSAoMCwgbGluZV9jb2x1bW5fMS5kZWZhdWx0KShzb3VyY2UpO1xuICAgICAgICBjb25zdCBzdGFydCA9IGxjLmZyb21JbmRleChzdGFydEluZGV4KTtcbiAgICAgICAgY29uc3QgZW5kID0gbGMuZnJvbUluZGV4KE1hdGgubWluKGVuZEluZGV4LCBzb3VyY2UubGVuZ3RoIC0gMSkpO1xuICAgICAgICB0aGlzLmxvYyA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgbGluZTogc3RhcnQubGluZSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHN0YXJ0LmNvbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBlbmQubGluZSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IGVuZC5jb2wsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlxdWlkSFRNTEFTVFBhcnNpbmdFcnJvciA9IExpcXVpZEhUTUxBU1RQYXJzaW5nRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laWEp5YjNKekxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dkxpNHZjM0pqTDNCaGNuTmxjaTlsY25KdmNuTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRMEVzT0VSQlFYRkRPMEZCVDNKRExFMUJRV0VzZVVKQlFUQkNMRk5CUVZFc1YwRkJWenRKUVVkNFJDeFpRVUZaTEVkQlFXZENPMUZCUXpGQ0xFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkRlRUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4M1FrRkJkMElzUTBGQlF6dFJRVVZ5UXl4TlFVRk5MRXRCUVVzc1IwRkJTU3hIUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETzFGQlEycERMRTFCUVUwc1VVRkJVU3hIUVVGSkxFZEJRVmNzUTBGQlF5eDVRa0ZCZVVJc1EwRkJRenRSUVVONFJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkJMSEZDUVVGVkxFVkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNVMEZCVXl4RFFVTjZReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVU55UXl4RFFVRkRPMUZCUzBZc1NVRkJTU3hQUVVGUExFVkJRVVU3V1VGRFdDeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhPMmRDUVVOVUxFdEJRVXNzUlVGQlJUdHZRa0ZEVEN4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFbEJRVWs3YjBKQlEyeENMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ6dHBRa0ZEY0VJN1owSkJRMFFzUjBGQlJ5eEZRVUZGTzI5Q1FVTklMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zU1VGQlNUdHZRa0ZEYkVJc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eEhRVUZITzJsQ1FVTndRanRoUVVOR0xFTkJRVU03VTBGRFNEdEpRVU5JTEVOQlFVTTdRMEZEUmp0QlFUZENSQ3c0UkVFMlFrTTdRVUZGUkN4TlFVRmhMSGxDUVVFd1FpeFRRVUZSTEZkQlFWYzdTVUZIZUVRc1dVRkRSU3hQUVVGbExFVkJRMllzVFVGQll5eEZRVU5rTEZWQlFXdENMRVZCUTJ4Q0xGRkJRV2RDTzFGQlJXaENMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU5tTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc2QwSkJRWGRDTEVOQlFVTTdVVUZGY2tNc1RVRkJUU3hGUVVGRkxFZEJRVWNzU1VGQlFTeHhRa0ZCVlN4RlFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRemxDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZEZGtNc1RVRkJUU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGTGFFVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSenRaUVVOVUxFdEJRVXNzUlVGQlJUdG5Ra0ZEVEN4SlFVRkpMRVZCUVVVc1MwRkJUU3hEUVVGRExFbEJRVWs3WjBKQlEycENMRTFCUVUwc1JVRkJSU3hMUVVGTkxFTkJRVU1zUjBGQlJ6dGhRVU51UWp0WlFVTkVMRWRCUVVjc1JVRkJSVHRuUWtGRFNDeEpRVUZKTEVWQlFVVXNSMEZCU1N4RFFVRkRMRWxCUVVrN1owSkJRMllzVFVGQlRTeEZRVUZGTEVkQlFVa3NRMEZCUXl4SFFVRkhPMkZCUTJwQ08xTkJRMFlzUTBGQlF6dEpRVU5LTEVOQlFVTTdRMEZEUmp0QlFUbENSQ3c0UkVFNFFrTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZPSURfRUxFTUVOVFMgPSBleHBvcnRzLkJMT0NLUyA9IGV4cG9ydHMubGlxdWlkSHRtbEdyYW1tYXIgPSB2b2lkIDA7XG5jb25zdCBvaG1fanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwib2htLWpzXCIpKTtcbmV4cG9ydHMubGlxdWlkSHRtbEdyYW1tYXIgPSBvaG1fanNfMS5kZWZhdWx0LmdyYW1tYXIocmVxdWlyZSgnLi4vLi4vZ3JhbW1hci9saXF1aWQtaHRtbC5vaG0uanMnKSk7XG5leHBvcnRzLkJMT0NLUyA9IGV4cG9ydHMubGlxdWlkSHRtbEdyYW1tYXIucnVsZXMuYmxvY2tOYW1lLmJvZHkuZmFjdG9yc1swXS50ZXJtcy5tYXAoKHgpID0+IHgub2JqKTtcbmV4cG9ydHMuVk9JRF9FTEVNRU5UUyA9IGV4cG9ydHMubGlxdWlkSHRtbEdyYW1tYXIucnVsZXMudm9pZEVsZW1lbnROYW1lLmJvZHkuZmFjdG9yc1swXS50ZXJtcy5tYXAoKHgpID0+IHguYXJnc1swXS5vYmopO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWjNKaGJXMWhjaTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1TDNOeVl5OXdZWEp6WlhJdlozSmhiVzFoY2k1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGQlFTeHZSRUZCZVVJN1FVRkZXaXhSUVVGQkxHbENRVUZwUWl4SFFVRkhMR2RDUVVGSExFTkJRVU1zVDBGQlR5eERRVU14UXl4UFFVRlBMRU5CUVVNc2EwTkJRV3RETEVOQlFVTXNRMEZETlVNc1EwRkJRenRCUVVkWExGRkJRVUVzVFVGQlRTeEhRVU5xUWl4NVFrRkJhVUlzUTBGQlF5eExRVU51UWl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZOTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRV0VzUTBGQlF6dEJRVWQ0UkN4UlFVRkJMR0ZCUVdFc1IwRkRlRUlzZVVKQlFXbENMRU5CUVVNc1MwRkRia0lzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTjZReXhEUVVGRExFTkJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlEyUXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlcnMgPSBleHBvcnRzLmxpcXVpZEh0bWxBc3RGb3JtYXQgPSBleHBvcnRzLmxpcXVpZEh0bWxMYW5ndWFnZU5hbWUgPSB2b2lkIDA7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9wYXJzZXIvcGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibGlxdWlkSHRtbEFzdEZvcm1hdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFyc2VyXzEubGlxdWlkSHRtbEFzdEZvcm1hdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImxpcXVpZEh0bWxMYW5ndWFnZU5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhcnNlcl8xLmxpcXVpZEh0bWxMYW5ndWFnZU5hbWU7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL3BhcnNlci9hc3RcIiksIGV4cG9ydHMpO1xuZXhwb3J0cy5wYXJzZXJzID0ge1xuICAgIFtwYXJzZXJfMS5saXF1aWRIdG1sTGFuZ3VhZ2VOYW1lXTogcGFyc2VyXzEubGlxdWlkSHRtbFBhcnNlcixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12Y0dGeWMyVnlMMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3UVVGQlFTdzBRMEZMZVVJN1FVRkpVU3h2UjBGT0wwSXNORUpCUVcxQ0xFOUJUU3RDTzBGQlFUTkRMSFZIUVV4UUxDdENRVUZ6UWl4UFFVdFBPMEZCUmk5Q0xDdERRVUUyUWp0QlFVbG9RaXhSUVVGQkxFOUJRVThzUjBGQldUdEpRVU01UWl4RFFVRkRMQ3RDUVVGelFpeERRVUZETEVWQlFVVXNlVUpCUVdkQ08wTkJRek5ETEVOQlFVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxpcXVpZEh0bWxQYXJzZXIgPSBleHBvcnRzLmxpcXVpZEh0bWxMYW5ndWFnZU5hbWUgPSBleHBvcnRzLmxpcXVpZEh0bWxBc3RGb3JtYXQgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYXN0XzEgPSByZXF1aXJlKFwiLi4vcGFyc2VyL2FzdFwiKTtcbmZ1bmN0aW9uIHBhcnNlKHRleHQsIF9wYXJzZXJzLCBfb3B0cykge1xuICAgIHJldHVybiAoMCwgYXN0XzEudG9MaXF1aWRIdG1sQVNUKSh0ZXh0KTtcbn1cbmV4cG9ydHMubGlxdWlkSHRtbEFzdEZvcm1hdCA9ICdsaXF1aWQtaHRtbC1hc3QnO1xuZXhwb3J0cy5saXF1aWRIdG1sTGFuZ3VhZ2VOYW1lID0gJ2xpcXVpZC1odG1sJztcbmV4cG9ydHMubGlxdWlkSHRtbFBhcnNlciA9IHtcbiAgICBwYXJzZSxcbiAgICBhc3RGb3JtYXQ6IGV4cG9ydHMubGlxdWlkSHRtbEFzdEZvcm1hdCxcbiAgICBsb2NTdGFydDogdXRpbHNfMS5sb2NTdGFydCxcbiAgICBsb2NFbmQ6IHV0aWxzXzEubG9jRW5kLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNHRnljMlZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMM0JoY25ObGNpOXdZWEp6WlhJdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUTBFc2JVTkJRVEpETzBGQlF6TkRMSE5EUVVFclJEdEJRVVV2UkN4VFFVRlRMRXRCUVVzc1EwRkRXaXhKUVVGWkxFVkJRMW9zVVVGQmFVSXNSVUZEYWtJc1MwRkJiME03U1VGRmNFTXNUMEZCVHl4SlFVRkJMSEZDUVVGbExFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETDBJc1EwRkJRenRCUVVWWkxGRkJRVUVzYlVKQlFXMUNMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdRVUZGZUVNc1VVRkJRU3h6UWtGQmMwSXNSMEZCUnl4aFFVRmhMRU5CUVVNN1FVRkZka01zVVVGQlFTeG5Ra0ZCWjBJc1IwRkJNa0k3U1VGRGRFUXNTMEZCU3p0SlFVTk1MRk5CUVZNc1JVRkJSU3d5UWtGQmJVSTdTVUZET1VJc1VVRkJVU3hGUVVGU0xHZENRVUZSTzBsQlExSXNUVUZCVFN4RlFVRk9MR05CUVUwN1EwRkRVQ3hEUVVGREluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJpbnRlcnMgPSB2b2lkIDA7XG5jb25zdCBwcmludGVyX2xpcXVpZF9odG1sXzEgPSByZXF1aXJlKFwiLi4vcHJpbnRlci9wcmludGVyLWxpcXVpZC1odG1sXCIpO1xuY29uc3QgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi4vcGFyc2VyXCIpO1xuZXhwb3J0cy5wcmludGVycyA9IHtcbiAgICBbcGFyc2VyXzEubGlxdWlkSHRtbEFzdEZvcm1hdF06IHByaW50ZXJfbGlxdWlkX2h0bWxfMS5wcmludGVyTGlxdWlkSHRtbCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12Y0hKcGJuUmxjaTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGQlFTeDFSVUZCYTBVN1FVRkRiRVVzY1VOQlFTdERPMEZCUld4RExGRkJRVUVzVVVGQlVTeEhRVUZITzBsQlEzUkNMRU5CUVVNc05FSkJRVzFDTEVOQlFVTXNSVUZCUlN4MVEwRkJhVUk3UTBGRGVrTXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdWdtZW50V2l0aENTU1Byb3BlcnRpZXMgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfZXZhbHVhdGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb25zdGFudHMuZXZhbHVhdGVcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmZ1bmN0aW9uIGdldENzc0Rpc3BsYXkobm9kZSwgb3B0aW9ucykge1xuICAgIGlmIChub2RlLnByZXYgJiYgbm9kZS5wcmV2LnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50KSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbm9kZS5wcmV2LmJvZHkubWF0Y2goL15cXHMqZGlzcGxheTpcXHMqKFthLXpdKylcXHMqJC8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuaHRtbFdoaXRlc3BhY2VTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW5saW5lJztcbiAgICAgICAgICAgICAgICBjYXNlICdpZ25vcmUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnICYmIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19ESVNQTEFZX1RBR1Nbbm9kZS5uYW1lXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19ESVNQTEFZX0RFRkFVTFQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlOlxuICAgICAgICAgICAgcmV0dXJuICdpbmxpbmUnO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZzpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuaHRtbFdoaXRlc3BhY2VTZW5zaXRpdml0eSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmljdCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW5saW5lJztcbiAgICAgICAgICAgICAgICBjYXNlICdpZ25vcmUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29uc3RhbnRzX2V2YWx1YXRlXzEuQ1NTX0RJU1BMQVlfTElRVUlEX1RBR1Nbbm9kZS5uYW1lXSB8fCBjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfRElTUExBWV9MSVFVSURfREVGQVVMVCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICAgICAgcmV0dXJuICdpbmxpbmUnO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJEb3VibGVRdW90ZWQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0clNpbmdsZVF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyVW5xdW90ZWQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckVtcHR5OlxuICAgICAgICAgICAgcmV0dXJuICdpbmxpbmUnO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuICdibG9jayc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuRG9jdW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gJ2Jsb2NrJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5ZQU1MRnJvbnRtYXR0ZXI6XG4gICAgICAgICAgICByZXR1cm4gJ2Jsb2NrJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRWYXJpYWJsZTpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRGaWx0ZXI6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTmFtZWRBcmd1bWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRMaXRlcmFsOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlN0cmluZzpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5OdW1iZXI6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuUmFuZ2U6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuVmFyaWFibGVMb29rdXA6XG4gICAgICAgICAgICByZXR1cm4gJ3Nob3VsZCBub3QgYmUgcmVsZXZhbnQnO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROb2RlQ3NzU3R5bGVXaGl0ZVNwYWNlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOiB7XG4gICAgICAgICAgICByZXR1cm4gKCh0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJyAmJiBjb25zdGFudHNfZXZhbHVhdGVfMS5DU1NfV0hJVEVfU1BBQ0VfVEFHU1tub2RlLm5hbWVdKSB8fFxuICAgICAgICAgICAgICAgIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLllBTUxGcm9udG1hdHRlcjpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6XG4gICAgICAgICAgICByZXR1cm4gJ3ByZSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJEb3VibGVRdW90ZWQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0clNpbmdsZVF1b3RlZDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5BdHRyVW5xdW90ZWQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckVtcHR5OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50OlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFZhcmlhYmxlOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEZpbHRlcjpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5OYW1lZEFyZ3VtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZExpdGVyYWw6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuU3RyaW5nOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLk51bWJlcjpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5SYW5nZTpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5WYXJpYWJsZUxvb2t1cDpcbiAgICAgICAgICAgIHJldHVybiAnc2hvdWxkIG5vdCBiZSByZWxldmFudCc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYXNzZXJ0TmV2ZXIpKG5vZGUpO1xuICAgIH1cbn1cbmNvbnN0IGF1Z21lbnRXaXRoQ1NTUHJvcGVydGllcyA9IChvcHRpb25zLCBub2RlKSA9PiB7XG4gICAgY29uc3QgYXVnbWVudGF0aW9ucyA9IHtcbiAgICAgICAgY3NzRGlzcGxheTogZ2V0Q3NzRGlzcGxheShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgY3NzV2hpdGVzcGFjZTogZ2V0Tm9kZUNzc1N0eWxlV2hpdGVTcGFjZShub2RlKSxcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24obm9kZSwgYXVnbWVudGF0aW9ucyk7XG59O1xuZXhwb3J0cy5hdWdtZW50V2l0aENTU1Byb3BlcnRpZXMgPSBhdWdtZW50V2l0aENTU1Byb3BlcnRpZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFZuYldWdWRDMTNhWFJvTFdOemN5MXdjbTl3WlhKMGFXVnpMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpsY0hKdlkyVnpjeTloZFdkdFpXNTBMWGRwZEdndFkzTnpMWEJ5YjNCbGNuUnBaWE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN08wRkJRVUVzTmtSQlR6aENPMEZCUXpsQ0xHMURRVTlwUWp0QlFVTnFRaXh0UTBGQmMwTTdRVUZGZEVNc1UwRkJVeXhoUVVGaExFTkJRM0JDTEVsQlFXbERMRVZCUTJwRExFOUJRVFJDTzBsQlJUVkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWY3NSVUZCUlR0UlFVVjZSQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1EwRkJRenRSUVVOc1JTeEpRVUZKTEV0QlFVc3NSVUZCUlR0WlFVTlVMRTlCUVU4c1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEycENPMHRCUTBZN1NVRkZSQ3hSUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdVVUZEYWtJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTXpRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNaVUZCWlN4RFFVRkRPMUZCUXk5Q0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4elFrRkJjMElzUTBGQlF6dFJRVU4wUXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVJc1VVRkJVU3hQUVVGUExFTkJRVU1zZVVKQlFYbENMRVZCUVVVN1owSkJRM3BETEV0QlFVc3NVVUZCVVR0dlFrRkRXQ3hQUVVGUExGRkJRVkVzUTBGQlF6dG5Ra0ZEYkVJc1MwRkJTeXhSUVVGUk8yOUNRVU5ZTEU5QlFVOHNUMEZCVHl4RFFVRkRPMmRDUVVOcVFpeFBRVUZQTEVOQlFVTXNRMEZCUXp0dlFrRkRVQ3hQUVVGUExFTkJRMHdzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVU3hKUVVGSkxIRkRRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dDNRa0ZET1VRc2QwTkJRVzFDTEVOQlEzQkNMRU5CUVVNN2FVSkJRMGc3WVVGRFJqdFRRVU5HTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3V1VGRGNrSXNUMEZCVHl4UlFVRlJMRU5CUVVNN1VVRkZiRUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNc1EwRkJRenRSUVVONlFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXVHRaUVVONlFpeFJRVUZSTEU5QlFVOHNRMEZCUXl4NVFrRkJlVUlzUlVGQlJUdG5Ra0ZEZWtNc1MwRkJTeXhSUVVGUk8yOUNRVU5ZTEU5QlFVOHNVVUZCVVN4RFFVRkRPMmRDUVVOc1FpeExRVUZMTEZGQlFWRTdiMEpCUTFnc1QwRkJUeXhQUVVGUExFTkJRVU03WjBKQlEycENMRTlCUVU4c1EwRkJReXhEUVVGRE8yOUNRVU5RTEU5QlFVOHNRMEZEVEN3MFEwRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc0swTkJRVEJDTEVOQlEycEZMRU5CUVVNN2FVSkJRMGc3WVVGRFJqdFJRVVZJTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRE5VSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGVkJRVlU3V1VGRGRrSXNUMEZCVHl4UlFVRlJMRU5CUVVNN1VVRkZiRUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEyaERMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRSUVVOb1F5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRelZDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEU5QlFVOHNVVUZCVVN4RFFVRkRPMUZCUld4Q0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCUTNoQ0xFOUJRVThzVDBGQlR5eERRVUZETzFGQlJXcENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFJRVUZSTzFsQlEzSkNMRTlCUVU4c1QwRkJUeXhEUVVGRE8xRkJSV3BDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhsUVVGbE8xbEJRelZDTEU5QlFVOHNUMEZCVHl4RFFVRkRPMUZCUldwQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4alFVRmpMRU5CUVVNN1VVRkRPVUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVNMVFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1lVRkJZU3hEUVVGRE8xRkJRemRDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhoUVVGaExFTkJRVU03VVVGRE4wSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExFMUJRVTBzUTBGQlF6dFJRVU4wUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETzFGQlEzUkNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTTdVVUZEY2tJc1MwRkJTeXhwUWtGQlV5eERRVUZETEdOQlFXTTdXVUZETTBJc1QwRkJUeXgzUWtGQmQwSXNRMEZCUXp0UlFVVnNRenRaUVVORkxFOUJRVThzU1VGQlFTeHRRa0ZCVnl4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRelZDTzBGQlEwZ3NRMEZCUXp0QlFVVkVMRk5CUVZNc2VVSkJRWGxDTEVOQlFVTXNTVUZCYVVNN1NVRkRiRVVzVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMUZCUTJwQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkRNMElzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMR1ZCUVdVc1EwRkJRenRSUVVNdlFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTTdVVUZEZEVNc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMWxCUXpGQ0xFOUJRVThzUTBGRFRDeERRVUZETEU5QlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFbEJRVWtzZVVOQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzJkQ1FVTnNSU3cwUTBGQmRVSXNRMEZEZUVJc1EwRkJRenRUUVVOSU8xRkJSVVFzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRkZCUVZFN1dVRkRja0lzVDBGQlR5dzBRMEZCZFVJc1EwRkJRenRSUVVWcVF5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRE8xRkJReTlDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWk8xbEJRM3BDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMUZCUldZc1MwRkJTeXhwUWtGQlV5eERRVUZETEZOQlFWTTdXVUZEZEVJc1QwRkJUeXcwUTBGQmRVSXNRMEZCUXp0UlFVVnFReXhMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUXpWQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4VlFVRlZPMWxCUTNaQ0xFOUJRVThzTkVOQlFYVkNMRU5CUVVNN1VVRkZha01zUzBGQlN5eHBRa0ZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlEyaERMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eG5Ra0ZCWjBJc1EwRkJRenRSUVVOb1F5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRE8xRkJRelZDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEU5QlFVOHNORU5CUVhWQ0xFTkJRVU03VVVGRmFrTXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmM3V1VGRGVFSXNUMEZCVHl3MFEwRkJkVUlzUTBGQlF6dFJRVVZxUXl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVVVGQlVUdFpRVU55UWl4UFFVRlBMRFJEUVVGMVFpeERRVUZETzFGQlJXcERMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eGpRVUZqTEVOQlFVTTdVVUZET1VJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZsQlFWa3NRMEZCUXp0UlFVTTFRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNZVUZCWVN4RFFVRkRPMUZCUXpkQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4aFFVRmhMRU5CUVVNN1VVRkROMElzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOMFFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRM1JDTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhMUVVGTExFTkJRVU03VVVGRGNrSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExHTkJRV003V1VGRE0wSXNUMEZCVHl4M1FrRkJkMElzUTBGQlF6dFJRVVZzUXp0WlFVTkZMRTlCUVU4c1NVRkJRU3h0UWtGQlZ5eEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpWQ08wRkJRMGdzUTBGQlF6dEJRVVZOTEUxQlFVMHNkMEpCUVhkQ0xFZEJRVEJDTEVOQlF6ZEVMRTlCUVU4c1JVRkRVQ3hKUVVGSkxFVkJRMG9zUlVGQlJUdEpRVU5HTEUxQlFVMHNZVUZCWVN4SFFVRnpRanRSUVVOMlF5eFZRVUZWTEVWQlFVVXNZVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU03VVVGRGVFTXNZVUZCWVN4RlFVRkZMSGxDUVVGNVFpeERRVUZETEVsQlFVa3NRMEZCUXp0TFFVTXZReXhEUVVGRE8wbEJSVVlzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRGNrTXNRMEZCUXl4RFFVRkRPMEZCVmxjc1VVRkJRU3gzUWtGQmQwSXNORUpCVlc1REluMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXVnbWVudFdpdGhGYW1pbHkgPSB2b2lkIDA7XG5jb25zdCBhdWdtZW50V2l0aEZhbWlseSA9IChfb3B0aW9ucywgbm9kZSkgPT4ge1xuICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbiB8fCBbXTtcbiAgICBjb25zdCBhdWdtZW50YXRpb25zID0ge1xuICAgICAgICBmaXJzdENoaWxkOiBjaGlsZHJlblswXSxcbiAgICAgICAgbGFzdENoaWxkOiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSxcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24obm9kZSwgYXVnbWVudGF0aW9ucyk7XG59O1xuZXhwb3J0cy5hdWdtZW50V2l0aEZhbWlseSA9IGF1Z21lbnRXaXRoRmFtaWx5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVhWbmJXVnVkQzEzYVhSb0xXWmhiV2xzZVM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNCeVpYQnliMk5sYzNNdllYVm5iV1Z1ZEMxM2FYUm9MV1poYldsc2VTNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGRlR5eE5RVUZOTEdsQ1FVRnBRaXhIUVVGblFpeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRVZCUVVVc1JVRkJSVHRKUVVNdlJDeE5RVUZOTEZGQlFWRXNSMEZCYzBJc1NVRkJXU3hEUVVGRExGRkJRVkVzU1VGQlNTeEZRVUZGTEVOQlFVTTdTVUZEYUVVc1RVRkJUU3hoUVVGaExFZEJRV1U3VVVGRGFFTXNWVUZCVlN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRrSXNVMEZCVXl4RlFVRkZMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0TFFVTjZReXhEUVVGRE8wbEJSVVlzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRGNrTXNRMEZCUXl4RFFVRkRPMEZCVWxjc1VVRkJRU3hwUWtGQmFVSXNjVUpCVVRWQ0luMD0iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXVnbWVudFdpdGhQYXJlbnQgPSB2b2lkIDA7XG5jb25zdCBhdWdtZW50V2l0aFBhcmVudCA9IChfb3B0aW9ucywgbm9kZSwgcGFyZW50Tm9kZSkgPT4ge1xuICAgIGNvbnN0IGF1Z21lbnRhdGlvbnMgPSB7XG4gICAgICAgIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG5vZGUsIGF1Z21lbnRhdGlvbnMpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCAncmF3U291cmNlJywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc2xpY2UodGhpcy5wb3NpdGlvbi5zdGFydCwgdGhpcy5wb3NpdGlvbi5lbmQpO1xuICAgICAgICB9LFxuICAgIH0pO1xufTtcbmV4cG9ydHMuYXVnbWVudFdpdGhQYXJlbnQgPSBhdWdtZW50V2l0aFBhcmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYVm5iV1Z1ZEMxM2FYUm9MWEJoY21WdWRDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OXdjbWx1ZEdWeUwzQnlaWEJ5YjJObGMzTXZZWFZuYldWdWRDMTNhWFJvTFhCaGNtVnVkQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkZUeXhOUVVGTkxHbENRVUZwUWl4SFFVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNWVUZCVlN4RlFVRkZMRVZCUVVVN1NVRkRNMFVzVFVGQlRTeGhRVUZoTEVkQlFXVTdVVUZEYUVNc1ZVRkJWU3hGUVVGRkxGVkJRVzlETzB0QlEycEVMRU5CUVVNN1NVRkZSaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRKUVVsdVF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hYUVVGWExFVkJRVVU3VVVGRGRrTXNSMEZCUnp0WlFVTkVMRTlCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOdVJTeERRVUZETzB0QlEwWXNRMEZCUXl4RFFVRkRPMEZCUTB3c1EwRkJReXhEUVVGRE8wRkJaRmNzVVVGQlFTeHBRa0ZCYVVJc2NVSkJZelZDSW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdWdtZW50V2l0aFNpYmxpbmdzID0gZXhwb3J0cy5uZXh0ID0gZXhwb3J0cy5wcmV2ID0gdm9pZCAwO1xuY29uc3QgQ09MTEVDVElPTl9LRVlTID0gWydjaGlsZHJlbicsICdhdHRyaWJ1dGVzJywgJ3ZhbHVlJ107XG5mdW5jdGlvbiBwcmV2KG5vZGUpIHtcbiAgICBpZiAoIW5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBwYXJlbnRDb2xsZWN0aW9uKG5vZGUpO1xuICAgIHJldHVybiBjb2xsZWN0aW9uW2NvbGxlY3Rpb24uaW5kZXhPZihub2RlKSAtIDFdO1xufVxuZXhwb3J0cy5wcmV2ID0gcHJldjtcbmZ1bmN0aW9uIG5leHQobm9kZSkge1xuICAgIGlmICghbm9kZS5wYXJlbnROb2RlKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IHBhcmVudENvbGxlY3Rpb24obm9kZSk7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25bY29sbGVjdGlvbi5pbmRleE9mKG5vZGUpICsgMV07XG59XG5leHBvcnRzLm5leHQgPSBuZXh0O1xuZnVuY3Rpb24gcGFyZW50Q29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLnBhcmVudE5vZGUgfHxcbiAgICAgICAgKCduYW1lJyBpbiBub2RlLnBhcmVudE5vZGUgJiYgbm9kZS5wYXJlbnROb2RlLm5hbWUgPT09IG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgQ09MTEVDVElPTl9LRVlTKSB7XG4gICAgICAgIGlmIChrZXkgaW4gbm9kZS5wYXJlbnROb2RlICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG5vZGUucGFyZW50Tm9kZVtrZXldKSkge1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZVtrZXldLmluZGV4T2Yobm9kZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgcGFyZW50IGNvbGxlY3Rpb24gb2Ygbm9kZScpO1xufVxuY29uc3QgYXVnbWVudFdpdGhTaWJsaW5ncyA9IChfb3B0aW9ucywgbm9kZSkgPT4ge1xuICAgIGNvbnN0IGF1Z21lbnRhdGlvbnMgPSB7XG4gICAgICAgIG5leHQ6IG5leHQobm9kZSksXG4gICAgICAgIHByZXY6IHByZXYobm9kZSksXG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG5vZGUsIGF1Z21lbnRhdGlvbnMpO1xufTtcbmV4cG9ydHMuYXVnbWVudFdpdGhTaWJsaW5ncyA9IGF1Z21lbnRXaXRoU2libGluZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZWFZuYldWdWRDMTNhWFJvTFhOcFlteHBibWR6TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNCeWFXNTBaWEl2Y0hKbGNISnZZMlZ6Y3k5aGRXZHRaVzUwTFhkcGRHZ3RjMmxpYkdsdVozTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlVVRXNUVUZCVFN4bFFVRmxMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzV1VGQldTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUlRWRUxGTkJRV2RDTEVsQlFVa3NRMEZCUXl4SlFVRXJRanRKUVVOc1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVN1VVRkJSU3hQUVVGUE8wbEJRemRDTEUxQlFVMHNWVUZCVlN4SFFVRkhMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUXpGRExFOUJRVThzVlVGQlZTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEYkVRc1EwRkJRenRCUVVwRUxHOUNRVWxETzBGQlJVUXNVMEZCWjBJc1NVRkJTU3hEUVVGRExFbEJRU3RDTzBsQlEyeEVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZUdFJRVUZGTEU5QlFVODdTVUZETjBJc1RVRkJUU3hWUVVGVkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03U1VGRE1VTXNUMEZCVHl4VlFVRlZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOc1JDeERRVUZETzBGQlNrUXNiMEpCU1VNN1FVRkZSQ3hUUVVGVExHZENRVUZuUWl4RFFVTjJRaXhKUVVFclFqdEpRVVV2UWl4SlFVTkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlU3VVVGRGFFSXNRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU1zUlVGRE5VUTdVVUZEUVN4UFFVRlBMRVZCUVVVc1EwRkJRenRMUVVOWU8wbEJSVVFzUzBGQlN5eE5RVUZOTEVkQlFVY3NTVUZCU1N4bFFVRmxMRVZCUVVVN1VVRkZha01zU1VGRFJTeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVN1dVRkRkRUlzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUlN4SlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlF6VkRPMWxCUTBFc1NVRkJTeXhKUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlR0blFrRkRkRVFzVDBGQlVTeEpRVUZaTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8yRkJRM1JETzFOQlEwWTdTMEZEUmp0SlFVVkVMRTFCUVUwc1NVRkJTU3hMUVVGTExFTkJRVU1zTUVOQlFUQkRMRU5CUVVNc1EwRkJRenRCUVVNNVJDeERRVUZETzBGQlJVMHNUVUZCVFN4dFFrRkJiVUlzUjBGQmQwSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVU3U1VGRGVrVXNUVUZCVFN4aFFVRmhMRWRCUVdsQ08xRkJRMnhETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVFclFqdFJRVU01UXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQkswSTdTMEZETDBNc1EwRkJRenRKUVVWR0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMR0ZCUVdFc1EwRkJReXhEUVVGRE8wRkJRM0pETEVOQlFVTXNRMEZCUXp0QlFWQlhMRkZCUVVFc2JVSkJRVzFDTEhWQ1FVODVRaUo5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVHJpbW1pbmdJbm5lclJpZ2h0ID0gZXhwb3J0cy5pc1RyaW1taW5nSW5uZXJMZWZ0ID0gZXhwb3J0cy5pc1RyaW1taW5nT3V0ZXJMZWZ0ID0gZXhwb3J0cy5pc1RyaW1taW5nT3V0ZXJSaWdodCA9IGV4cG9ydHMuaXNQYXJlbnROb2RlID0gZXhwb3J0cy5pc0h0bWxOb2RlID0gZXhwb3J0cy5hdWdtZW50V2l0aFdoaXRlc3BhY2VIZWxwZXJzID0gdm9pZCAwO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlc1wiKTtcbmNvbnN0IGNvbnN0YW50c19ldmFsdWF0ZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbnN0YW50cy5ldmFsdWF0ZVwiKTtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4uLy4uL3BhcnNlclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci91dGlsc1wiKTtcbmNvbnN0IGF1Z21lbnRXaXRoV2hpdGVzcGFjZUhlbHBlcnMgPSAoX29wdGlvbnMsIG5vZGUpID0+IHtcbiAgICBjb25zdCBhdWdtZW50YXRpb25zID0ge1xuICAgICAgICBpc0RhbmdsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZTogaXNEYW5nbGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpLFxuICAgICAgICBpc0luZGVudGF0aW9uU2Vuc2l0aXZlOiBpc0luZGVudGF0aW9uU2Vuc2l0aXZlTm9kZShub2RlKSxcbiAgICAgICAgaXNXaGl0ZXNwYWNlU2Vuc2l0aXZlOiBpc1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpLFxuICAgICAgICBpc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlOiBpc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlKSAmJlxuICAgICAgICAgICAgKCFub2RlLnByZXYgfHwgaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUucHJldikpLFxuICAgICAgICBpc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZTogaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpICYmXG4gICAgICAgICAgICAoIW5vZGUubmV4dCB8fCBpc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlTm9kZShub2RlLm5leHQpKSxcbiAgICAgICAgaGFzTGVhZGluZ1doaXRlc3BhY2U6IGhhc0xlYWRpbmdXaGl0ZXNwYWNlKG5vZGUpLFxuICAgICAgICBoYXNUcmFpbGluZ1doaXRlc3BhY2U6IGhhc1RyYWlsaW5nV2hpdGVzcGFjZShub2RlKSxcbiAgICAgICAgaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlOiBoYXNEYW5nbGluZ1doaXRlc3BhY2Uobm9kZSksXG4gICAgfTtcbiAgICBPYmplY3QuYXNzaWduKG5vZGUsIGF1Z21lbnRhdGlvbnMpO1xufTtcbmV4cG9ydHMuYXVnbWVudFdpdGhXaGl0ZXNwYWNlSGVscGVycyA9IGF1Z21lbnRXaXRoV2hpdGVzcGFjZUhlbHBlcnM7XG5mdW5jdGlvbiBpc0RhbmdsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZU5vZGUobm9kZSkge1xuICAgIHJldHVybiAoaXNEYW5nbGluZ1NwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShub2RlLmNzc0Rpc3BsYXkpICYmXG4gICAgICAgICEoMCwgdXRpbHNfMS5pc1NjcmlwdExpa2VUYWcpKG5vZGUpICYmXG4gICAgICAgICFpc1RyaW1taW5nSW5uZXJMZWZ0KG5vZGUpICYmXG4gICAgICAgICFpc1RyaW1taW5nSW5uZXJSaWdodChub2RlKSk7XG59XG5mdW5jdGlvbiBpc1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gKGlzSW5kZW50YXRpb25TZW5zaXRpdmVOb2RlKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIGlzSW5kZW50YXRpb25TZW5zaXRpdmVOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0Tm9kZUNzc1N0eWxlV2hpdGVTcGFjZShub2RlKS5zdGFydHNXaXRoKCdwcmUnKTtcbn1cbmZ1bmN0aW9uIGlzTGVhZGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNUcmltbWluZ091dGVyTGVmdChub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLnByZXYgJiYgaXNUcmltbWluZ091dGVyUmlnaHQobm9kZS5wcmV2KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS5jc3NEaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNQcmVMaWtlTm9kZSkobm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzU2NyaXB0TGlrZVRhZykobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIW5vZGUucHJldiAmJiAobm9kZS5wYXJlbnROb2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50XG4gICAgICAgIHx8ICgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUpXG4gICAgICAgIHx8ICgwLCB1dGlsc18xLmlzU2NyaXB0TGlrZVRhZykobm9kZS5wYXJlbnROb2RlKVxuICAgICAgICB8fCAhaXNJbm5lckxlZnRTcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5wYXJlbnROb2RlLmNzc0Rpc3BsYXkpXG4gICAgICAgIHx8IGlzVHJpbW1pbmdJbm5lckxlZnQobm9kZS5wYXJlbnROb2RlKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5wcmV2ICYmXG4gICAgICAgICFpc091dGVyUmlnaHRXaGl0ZXNwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShub2RlLnByZXYuY3NzRGlzcGxheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzT3V0ZXJMZWZ0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5jc3NEaXNwbGF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmVOb2RlKG5vZGUpIHtcbiAgICBpZiAoaXNUcmltbWluZ091dGVyUmlnaHQobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5uZXh0ICYmIGlzVHJpbW1pbmdPdXRlckxlZnQobm9kZS5uZXh0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS5jc3NEaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNQcmVMaWtlTm9kZSkobm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc18xLmlzU2NyaXB0TGlrZVRhZykobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNIdG1sTm9kZShub2RlKSAmJiB0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJyAmJiBub2RlLm5hbWUgPT09ICdicicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIW5vZGUubmV4dCAmJiAobm9kZS5wYXJlbnROb2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50XG4gICAgICAgIHx8ICgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUpXG4gICAgICAgIHx8ICgwLCB1dGlsc18xLmlzU2NyaXB0TGlrZVRhZykobm9kZS5wYXJlbnROb2RlKVxuICAgICAgICB8fCAhaXNJbm5lclJpZ2h0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkobm9kZS5wYXJlbnROb2RlLmNzc0Rpc3BsYXkpXG4gICAgICAgIHx8IGlzVHJpbW1pbmdJbm5lclJpZ2h0KG5vZGUucGFyZW50Tm9kZSkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUubmV4dCAmJlxuICAgICAgICAhaXNPdXRlckxlZnRXaGl0ZXNwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShub2RlLm5leHQuY3NzRGlzcGxheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzT3V0ZXJSaWdodFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KG5vZGUuY3NzRGlzcGxheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGhhc0RhbmdsaW5nV2hpdGVzcGFjZShub2RlKSB7XG4gICAgaWYgKCFpc1BhcmVudE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJiBub2RlLnNvdXJjZS5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBlbHNlIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnICYmXG4gICAgICAgICgwLCBwYXJzZXJfMS5pc0JyYW5jaGVkVGFnKShub2RlKSAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbHNfMS5pc1doaXRlc3BhY2UpKG5vZGUuc291cmNlLCBub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmQpO1xufVxuZnVuY3Rpb24gaGFzTGVhZGluZ1doaXRlc3BhY2Uobm9kZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaCAmJiAhbm9kZS5wcmV2KSB7XG4gICAgICAgIHJldHVybiBub2RlLmZpcnN0Q2hpbGRcbiAgICAgICAgICAgID8gaGFzTGVhZGluZ1doaXRlc3BhY2Uobm9kZS5maXJzdENoaWxkKVxuICAgICAgICAgICAgOiBoYXNEYW5nbGluZ1doaXRlc3BhY2Uobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbHNfMS5pc1doaXRlc3BhY2UpKG5vZGUuc291cmNlLCBub2RlLnBvc2l0aW9uLnN0YXJ0IC0gMSk7XG59XG5mdW5jdGlvbiBoYXNUcmFpbGluZ1doaXRlc3BhY2Uobm9kZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaCkge1xuICAgICAgICByZXR1cm4gbm9kZS5sYXN0Q2hpbGRcbiAgICAgICAgICAgID8gaGFzVHJhaWxpbmdXaGl0ZXNwYWNlKG5vZGUubGFzdENoaWxkKVxuICAgICAgICAgICAgOiBoYXNEYW5nbGluZ1doaXRlc3BhY2Uobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgdXRpbHNfMS5pc1doaXRlc3BhY2UpKG5vZGUuc291cmNlLCBub2RlLnBvc2l0aW9uLmVuZCk7XG59XG5mdW5jdGlvbiBpc0h0bWxOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gdHlwZXNfMS5IdG1sTm9kZVR5cGVzLmluY2x1ZGVzKG5vZGUudHlwZSk7XG59XG5leHBvcnRzLmlzSHRtbE5vZGUgPSBpc0h0bWxOb2RlO1xuZnVuY3Rpb24gaXNQYXJlbnROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gJ2NoaWxkcmVuJyBpbiBub2RlO1xufVxuZXhwb3J0cy5pc1BhcmVudE5vZGUgPSBpc1BhcmVudE5vZGU7XG5mdW5jdGlvbiBpc1RyaW1taW5nT3V0ZXJSaWdodChub2RlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkUmF3VGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZzpcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gbm9kZS5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBub2RlLndoaXRlc3BhY2VFbmQpID09PSAnLSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3A6XG4gICAgICAgICAgICByZXR1cm4gbm9kZS53aGl0ZXNwYWNlRW5kID09PSAnLSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc1RyaW1taW5nT3V0ZXJSaWdodCA9IGlzVHJpbW1pbmdPdXRlclJpZ2h0O1xuZnVuY3Rpb24gaXNUcmltbWluZ091dGVyTGVmdChub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICAgICAgcmV0dXJuIG5vZGUud2hpdGVzcGFjZVN0YXJ0ID09PSAnLSc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc1RyaW1taW5nT3V0ZXJMZWZ0ID0gaXNUcmltbWluZ091dGVyTGVmdDtcbmZ1bmN0aW9uIGlzVHJpbW1pbmdJbm5lckxlZnQobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkUmF3VGFnOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZzpcbiAgICAgICAgICAgIGlmIChub2RlLmRlbGltaXRlcldoaXRlc3BhY2VFbmQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS53aGl0ZXNwYWNlRW5kID09PSAnLSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOlxuICAgICAgICAgICAgaWYgKCFub2RlLnBhcmVudE5vZGUgfHwgbm9kZS5wYXJlbnROb2RlLnR5cGUgIT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbm9kZS5wcmV2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVHJpbW1pbmdJbm5lckxlZnQobm9kZS5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlLndoaXRlc3BhY2VFbmQgPT09ICctJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWREcm9wOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydHMuaXNUcmltbWluZ0lubmVyTGVmdCA9IGlzVHJpbW1pbmdJbm5lckxlZnQ7XG5mdW5jdGlvbiBpc1RyaW1taW5nSW5uZXJSaWdodChub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICAgICAgaWYgKG5vZGUuZGVsaW1pdGVyV2hpdGVzcGFjZVN0YXJ0ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGVsaW1pdGVyV2hpdGVzcGFjZVN0YXJ0ID09PSAnLSc7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOlxuICAgICAgICAgICAgaWYgKCFub2RlLnBhcmVudE5vZGUgfHwgbm9kZS5wYXJlbnROb2RlLnR5cGUgIT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbm9kZS5uZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVHJpbW1pbmdJbm5lclJpZ2h0KG5vZGUucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXNUcmltbWluZ091dGVyTGVmdChub2RlLm5leHQpO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3A6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZXhwb3J0cy5pc1RyaW1taW5nSW5uZXJSaWdodCA9IGlzVHJpbW1pbmdJbm5lclJpZ2h0O1xuZnVuY3Rpb24gaXNCbG9ja0xpa2VDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpIHtcbiAgICByZXR1cm4gKGNzc0Rpc3BsYXkgPT09ICdibG9jaycgfHxcbiAgICAgICAgY3NzRGlzcGxheSA9PT0gJ2xpc3QtaXRlbScgfHxcbiAgICAgICAgY3NzRGlzcGxheS5zdGFydHNXaXRoKCd0YWJsZScpKTtcbn1cbmZ1bmN0aW9uIGlzSW5uZXJMZWZ0U3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpIHtcbiAgICByZXR1cm4gIWlzQmxvY2tMaWtlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSAmJiBjc3NEaXNwbGF5ICE9PSAnaW5saW5lLWJsb2NrJztcbn1cbmZ1bmN0aW9uIGlzSW5uZXJSaWdodFdoaXRlc3BhY2VTZW5zaXRpdmVDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpIHtcbiAgICByZXR1cm4gIWlzQmxvY2tMaWtlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSAmJiBjc3NEaXNwbGF5ICE9PSAnaW5saW5lLWJsb2NrJztcbn1cbmZ1bmN0aW9uIGlzT3V0ZXJMZWZ0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkge1xuICAgIHJldHVybiAhaXNCbG9ja0xpa2VDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpO1xufVxuZnVuY3Rpb24gaXNPdXRlclJpZ2h0V2hpdGVzcGFjZVNlbnNpdGl2ZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkge1xuICAgIHJldHVybiAhaXNCbG9ja0xpa2VDc3NEaXNwbGF5KGNzc0Rpc3BsYXkpO1xufVxuZnVuY3Rpb24gaXNEYW5nbGluZ1NwYWNlU2Vuc2l0aXZlQ3NzRGlzcGxheShjc3NEaXNwbGF5KSB7XG4gICAgcmV0dXJuICFpc0Jsb2NrTGlrZUNzc0Rpc3BsYXkoY3NzRGlzcGxheSkgJiYgY3NzRGlzcGxheSAhPT0gJ2lubGluZS1ibG9jayc7XG59XG5mdW5jdGlvbiBnZXROb2RlQ3NzU3R5bGVXaGl0ZVNwYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gKChpc0h0bWxOb2RlKG5vZGUpICYmXG4gICAgICAgIHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9UQUdTW25vZGUubmFtZV0pIHx8XG4gICAgICAgIGNvbnN0YW50c19ldmFsdWF0ZV8xLkNTU19XSElURV9TUEFDRV9ERUZBVUxUKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYVm5iV1Z1ZEMxM2FYUm9MWGRvYVhSbGMzQmhZMlV0YUdWc2NHVnljeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwzTnlZeTl3Y21sdWRHVnlMM0J5WlhCeWIyTmxjM012WVhWbmJXVnVkQzEzYVhSb0xYZG9hWFJsYzNCaFkyVXRhR1ZzY0dWeWN5NTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3UVVGRlFTeHRRMEZCSzBRN1FVRkRMMFFzTmtSQlJ6aENPMEZCVXpsQ0xIRkRRVUY1UXp0QlFVTjZReXd5UTBGQkswVTdRVUZSZUVVc1RVRkJUU3cwUWtGQk5FSXNSMEZCYlVNc1EwRkRNVVVzVVVGQlVTeEZRVU5TTEVsQlFVa3NSVUZEU2l4RlFVRkZPMGxCUTBZc1RVRkJUU3hoUVVGaExFZEJRVEJDTzFGQlF6TkRMRFpDUVVFMlFpeEZRVUZGTEdsRFFVRnBReXhEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU4wUlN4elFrRkJjMElzUlVGQlJTd3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGVFUXNjVUpCUVhGQ0xFVkJRVVVzZVVKQlFYbENMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJSWFJFTERSQ1FVRTBRaXhGUVVNeFFpeG5RMEZCWjBNc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGRFTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzYVVOQlFXbERMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlJUbEVMRFpDUVVFMlFpeEZRVU16UWl4cFEwRkJhVU1zUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZEZGtNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NaME5CUVdkRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUXpkRUxHOUNRVUZ2UWl4RlFVRkZMRzlDUVVGdlFpeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTm9SQ3h4UWtGQmNVSXNSVUZCUlN4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEYkVRc2NVSkJRWEZDTEVWQlFVVXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETzB0QlEyNUVMRU5CUVVNN1NVRkZSaXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVOeVF5eERRVUZETEVOQlFVTTdRVUYwUWxjc1VVRkJRU3cwUWtGQk5FSXNaME5CYzBKMlF6dEJRVmxHTEZOQlFWTXNhVU5CUVdsRExFTkJRVU1zU1VGQmMwSTdTVUZETDBRc1QwRkJUeXhEUVVOTUxHdERRVUZyUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03VVVGRGJrUXNRMEZCUXl4SlFVRkJMSFZDUVVGbExFVkJRVU1zU1VGQlNTeERRVUZETzFGQlEzUkNMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUXpGQ0xFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRelZDTEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCWTBRc1UwRkJVeXg1UWtGQmVVSXNRMEZCUXl4SlFVRnpRanRKUVVOMlJDeFBRVUZQTEVOQlJVd3NNRUpCUVRCQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlEycERMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJWVVFzVTBGQlV5d3dRa0ZCTUVJc1EwRkJReXhKUVVGelFqdEpRVU40UkN4UFFVRlBMSGxDUVVGNVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU16UkN4RFFVRkRPMEZCVDBRc1UwRkJVeXhuUTBGQlowTXNRMEZCUXl4SlFVRnpRanRKUVVNNVJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMUZCUTFRc1QwRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdEpRVWRFTEVsQlFVa3NiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdVVUZETjBJc1QwRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdEpRVWRFTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRGFFUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVkRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4SlFVRkpMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeExRVUZMTEUxQlFVMHNSVUZCUlR0UlFVTTNSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQlNVUXNTVUZCU1N4SlFVRkJMSEZDUVVGaExFVkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMUZCUTJ4RExFOUJRVThzU1VGQlNTeERRVUZETzB0QlEySTdTVUZIUkN4SlFVRkpMRWxCUVVFc2RVSkJRV1VzUlVGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0UlFVTjZRaXhQUVVGUExFdEJRVXNzUTBGQlF6dExRVU5rTzBsQldVUXNTVUZEUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGRFdpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZGQlFWRTdWMEZEZUVNc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXp0WFFVTnVRaXhKUVVGQkxIVkNRVUZsTEVWQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenRYUVVOb1F5eERRVUZETEcxRFFVRnRReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRPMWRCUTJoRkxHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGRGVFTXNSVUZEUkR0UlFVTkJMRTlCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMlE3U1VGUFJDeEpRVU5GTEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUTFRc1EwRkJReXg1UTBGQmVVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEZRVU5vUlR0UlFVTkJMRTlCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMlE3U1VGUFJDeEpRVUZKTEVOQlFVTXNkME5CUVhkRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMUZCUXpsRUxFOUJRVThzUzBGQlN5eERRVUZETzB0QlEyUTdTVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJRenRCUVVOa0xFTkJRVU03UVVGM1FrUXNVMEZCVXl4cFEwRkJhVU1zUTBGQlF5eEpRVUZ6UWp0SlFVVXZSQ3hKUVVGSkxHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xRkJRemxDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1NVRkhSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NiVUpCUVcxQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUXk5RExFOUJRVThzUzBGQlN5eERRVUZETzB0QlEyUTdTVUZKUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1MwRkJTeXhOUVVGTkxFVkJRVVU3VVVGRE4wUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVsRUxFbEJRVWtzU1VGQlFTeHhRa0ZCWVN4RlFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJUdFJRVU5zUXl4UFFVRlBMRWxCUVVrc1EwRkJRenRMUVVOaU8wbEJSMFFzU1VGQlNTeEpRVUZCTEhWQ1FVRmxMRVZCUVVNc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRGVrSXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVVsRUxFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhKUVVGSkxFVkJRVVU3VVVGRE0wVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRaRHRKUVdORUxFbEJRMFVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUTFvc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUk8xZEJRM2hETEVsQlFVRXNjVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU03VjBGRGJrSXNTVUZCUVN4MVFrRkJaU3hGUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTTdWMEZEYUVNc1EwRkJReXg1UTBGQmVVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExGVkJRVlVzUTBGQlF6dFhRVU4wUlN4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUTNwRExFVkJRMFE3VVVGRFFTeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCVlVRc1NVRkRSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVU5VTEVOQlFVTXNkME5CUVhkRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkRMMFE3VVVGRFFTeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCVTBRc1NVRkJTU3hEUVVGRExIbERRVUY1UXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJUdFJRVU12UkN4UFFVRlBMRXRCUVVzc1EwRkJRenRMUVVOa08wbEJSMFFzVDBGQlR5eEpRVUZKTEVOQlFVTTdRVUZEWkN4RFFVRkRPMEZCVTBRc1UwRkJVeXh4UWtGQmNVSXNRMEZCUXl4SlFVRnpRanRKUVVOdVJDeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xRkJRM1pDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1UwRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRE0wTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzB0QlF6ZEVPMU5CUVUwc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEZWtJc1QwRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdFRRVUZOTEVsQlEwd3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZOQlFWTTdVVUZEYWtNc1NVRkJRU3h6UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXp0UlFVTnVRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUXpGQ08xRkJRMEVzVDBGQlR5eHhRa0ZCY1VJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZ5eERRVUZETEVOQlFVTTdTMEZEYUVRN1UwRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRSUVVOdVF5eFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCUTBRc1QwRkJUeXhKUVVGQkxHOUNRVUZaTEVWQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGFFVXNRMEZCUXp0QlFVVkVMRk5CUVZNc2IwSkJRVzlDTEVOQlFVTXNTVUZCYzBJN1NVRkZiRVFzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVOMFJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZPMWxCUTNCQ0xFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzFsQlEzWkRMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVOcVF6dEpRVU5FTEU5QlFVOHNTVUZCUVN4dlFrRkJXU3hGUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETlVRc1EwRkJRenRCUVVWRUxGTkJRVk1zY1VKQlFYRkNMRU5CUVVNc1NVRkJjMEk3U1VGRGJrUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RlFVRkZPMUZCUTNoRExFOUJRVThzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEYmtJc1EwRkJReXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03V1VGRGRrTXNRMEZCUXl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTJwRE8wbEJRMFFzVDBGQlR5eEpRVUZCTEc5Q1FVRlpMRVZCUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1JFTEVOQlFVTTdRVUZYUkN4VFFVRm5RaXhWUVVGVkxFTkJRVU1zU1VGQmMwSTdTVUZETDBNc1QwRkJUeXh4UWtGQllTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJWeXhEUVVGRExFTkJRVU03UVVGRGJFUXNRMEZCUXp0QlFVWkVMR2REUVVWRE8wRkJSVVFzVTBGQlowSXNXVUZCV1N4RFFVRkRMRWxCUVhOQ08wbEJRMnBFTEU5QlFVOHNWVUZCVlN4SlFVRkpMRWxCUVVrc1EwRkJRenRCUVVNMVFpeERRVUZETzBGQlJrUXNiME5CUlVNN1FVRkZSQ3hUUVVGblFpeHZRa0ZCYjBJc1EwRkRiRU1zU1VGQmEwTTdPMGxCUld4RExFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRlRUlzVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMUZCUTJwQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkROVUlzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNN1dVRkRkRUlzVDBGQlR5eERRVUZETEUxQlFVRXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeHRRMEZCU1N4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZETzFGQlEzSkZMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzFsQlEzcENMRTlCUVU4c1MwRkJTeXhEUVVGRE8xRkJRMllzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRlZCUVZVN1dVRkRka0lzVDBGQlR5eEpRVUZKTEVOQlFVTXNZVUZCWVN4TFFVRkxMRWRCUVVjc1EwRkJRenRSUVVOd1F6dFpRVU5GTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJoQ08wRkJRMGdzUTBGQlF6dEJRV1pFTEc5RVFXVkRPMEZCUlVRc1UwRkJaMElzYlVKQlFXMUNMRU5CUTJwRExFbEJRV3RETzBsQlJXeERMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEZUVJc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlEycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZETlVJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZOQlFWTXNRMEZCUXp0UlFVTjZRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUXpWQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4VlFVRlZPMWxCUTNaQ0xFOUJRVThzU1VGQlNTeERRVUZETEdWQlFXVXNTMEZCU3l4SFFVRkhMRU5CUVVNN1VVRkRkRU03V1VGRFJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTm9RanRCUVVOSUxFTkJRVU03UVVGaVJDeHJSRUZoUXp0QlFVVkVMRk5CUVdkQ0xHMUNRVUZ0UWl4RFFVTnFReXhKUVVGclF6dEpRVVZzUXl4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETzBsQlEzaENMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVU5xUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zV1VGQldTeERRVUZETzFGQlF6VkNMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTzFsQlEzUkNMRWxCUVVrc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4TFFVRkxMRk5CUVZNN1owSkJRVVVzVDBGQlR5eExRVUZMTEVOQlFVTTdXVUZETlVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zWVVGQllTeExRVUZMTEVkQlFVY3NRMEZCUXp0UlFVTndReXhMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1R0WlFVVjZRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRk5CUVZNc1JVRkJSVHRuUWtGRGNFVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1lVRkRaRHRaUVVkRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMmRDUVVOa0xFOUJRVThzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzJGQlF6ZERPMWxCUjBRc1QwRkJUeXhKUVVGSkxFTkJRVU1zWVVGQllTeExRVUZMTEVkQlFVY3NRMEZCUXp0UlFVTndReXhMUVVGTExHbENRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRPMUZCUXpGQ08xbEJRMFVzVDBGQlR5eExRVUZMTEVOQlFVTTdTMEZEYUVJN1FVRkRTQ3hEUVVGRE8wRkJNVUpFTEd0RVFUQkNRenRCUVVWRUxGTkJRV2RDTEc5Q1FVRnZRaXhEUVVOc1F5eEpRVUZyUXp0SlFVVnNReXhKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVUZGTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGxCUTNoQ0xGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFVTnFRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUXpWQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4VFFVRlRPMWxCUTNSQ0xFbEJRVWtzU1VGQlNTeERRVUZETEhkQ1FVRjNRaXhMUVVGTExGTkJRVk03WjBKQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1dVRkRPVVFzVDBGQlR5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFdEJRVXNzUjBGQlJ5eERRVUZETzFGQlF5OURMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFpRVUZaTzFsQlJYcENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNVMEZCVXl4RlFVRkZPMmRDUVVOd1JTeFBRVUZQTEV0QlFVc3NRMEZCUXp0aFFVTmtPMWxCUjBRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdaMEpCUTJRc1QwRkJUeXh2UWtGQmIwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03WVVGRE9VTTdXVUZIUkN4UFFVRlBMRzFDUVVGdFFpeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVONFF5eExRVUZMTEdsQ1FVRlRMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJRekZDTzFsQlEwVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1MwRkRhRUk3UVVGRFNDeERRVUZETzBGQk1VSkVMRzlFUVRCQ1F6dEJRVVZFTEZOQlFWTXNjVUpCUVhGQ0xFTkJRVU1zVlVGQmEwSTdTVUZETDBNc1QwRkJUeXhEUVVOTUxGVkJRVlVzUzBGQlN5eFBRVUZQTzFGQlEzUkNMRlZCUVZVc1MwRkJTeXhYUVVGWE8xRkJRekZDTEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJReTlDTEVOQlFVTTdRVUZEU2l4RFFVRkRPMEZCUlVRc1UwRkJVeXh0UTBGQmJVTXNRMEZCUXl4VlFVRnJRanRKUVVNM1JDeFBRVUZQTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NWVUZCVlN4TFFVRkxMR05CUVdNc1EwRkJRenRCUVVNM1JTeERRVUZETzBGQlJVUXNVMEZCVXl4NVEwRkJlVU1zUTBGQlF5eFZRVUZyUWp0SlFVTnVSU3hQUVVGUExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzVlVGQlZTeExRVUZMTEdOQlFXTXNRMEZCUXp0QlFVTTNSU3hEUVVGRE8wRkJSVVFzVTBGQlV5eDNRMEZCZDBNc1EwRkJReXhWUVVGclFqdEpRVU5zUlN4UFFVRlBMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkROVU1zUTBGQlF6dEJRVVZFTEZOQlFWTXNlVU5CUVhsRExFTkJRVU1zVlVGQmEwSTdTVUZEYmtVc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRelZETEVOQlFVTTdRVUZGUkN4VFFVRlRMR3REUVVGclF5eERRVUZETEZWQlFXdENPMGxCUXpWRUxFOUJRVThzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeFZRVUZWTEV0QlFVc3NZMEZCWXl4RFFVRkRPMEZCUXpkRkxFTkJRVU03UVVGRlJDeFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExFbEJRWE5DTzBsQlEzWkVMRTlCUVU4c1EwRkRUQ3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEWml4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVUdFJRVU0zUWl4NVEwRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRiRU1zTkVOQlFYVkNMRU5CUTNoQ0xFTkJRVU03UVVGRFNpeERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BVUdNRU5UQVRJT05fUElQRUxJTkUgPSB2b2lkIDA7XG5jb25zdCBhdWdtZW50X3dpdGhfY3NzX3Byb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLWNzcy1wcm9wZXJ0aWVzXCIpO1xuY29uc3QgYXVnbWVudF93aXRoX3BhcmVudF8xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvcHJlcHJvY2Vzcy9hdWdtZW50LXdpdGgtcGFyZW50XCIpO1xuY29uc3QgYXVnbWVudF93aXRoX3NpYmxpbmdzXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci9wcmVwcm9jZXNzL2F1Z21lbnQtd2l0aC1zaWJsaW5nc1wiKTtcbmNvbnN0IGF1Z21lbnRfd2l0aF93aGl0ZXNwYWNlX2hlbHBlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLXdoaXRlc3BhY2UtaGVscGVyc1wiKTtcbmNvbnN0IGF1Z21lbnRfd2l0aF9mYW1pbHlfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByZXByb2Nlc3MvYXVnbWVudC13aXRoLWZhbWlseVwiKTtcbmV4cG9ydHMuQVVHTUVOVEFUSU9OX1BJUEVMSU5FID0gW1xuICAgIGF1Z21lbnRfd2l0aF9wYXJlbnRfMS5hdWdtZW50V2l0aFBhcmVudCxcbiAgICBhdWdtZW50X3dpdGhfc2libGluZ3NfMS5hdWdtZW50V2l0aFNpYmxpbmdzLFxuICAgIGF1Z21lbnRfd2l0aF9mYW1pbHlfMS5hdWdtZW50V2l0aEZhbWlseSxcbiAgICBhdWdtZW50X3dpdGhfY3NzX3Byb3BlcnRpZXNfMS5hdWdtZW50V2l0aENTU1Byb3BlcnRpZXMsXG4gICAgYXVnbWVudF93aXRoX3doaXRlc3BhY2VfaGVscGVyc18xLmF1Z21lbnRXaXRoV2hpdGVzcGFjZUhlbHBlcnMsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZjSEpwYm5SbGNpOXdjbVZ3Y205alpYTnpMMmx1WkdWNExuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVGQkxHdEhRVUUwUmp0QlFVTTFSaXhyUmtGQk5rVTdRVUZETjBVc2MwWkJRV2xHTzBGQlEycEdMREJIUVVGdlJ6dEJRVU53Unl4clJrRkJOa1U3UVVGRmFFVXNVVUZCUVN4eFFrRkJjVUlzUjBGQlJ6dEpRVU51UXl4MVEwRkJhVUk3U1VGRGFrSXNNa05CUVcxQ08wbEJRMjVDTEhWRFFVRnBRanRKUVVOcVFpeHpSRUZCZDBJN1NVRkRlRUlzT0VSQlFUUkNPME5CUXpkQ0xFTkJRVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZXByb2Nlc3MgPSB2b2lkIDA7XG5jb25zdCBBU1QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL3BhcnNlci9hc3RcIikpO1xuY29uc3QgcHJlcHJvY2Vzc18xID0gcmVxdWlyZShcIi4uL3ByaW50ZXIvcHJlcHJvY2Vzc1wiKTtcbmZ1bmN0aW9uIHByZXByb2Nlc3MoYXN0LCBvcHRpb25zKSB7XG4gICAgY29uc3QgYXVnbWVudGF0aW9uUGlwZWxpbmUgPSBwcmVwcm9jZXNzXzEuQVVHTUVOVEFUSU9OX1BJUEVMSU5FLm1hcCgoZm4pID0+IGZuLmJpbmQobnVsbCwgb3B0aW9ucykpO1xuICAgIGZvciAoY29uc3QgYXVnbWVudGF0aW9uIG9mIGF1Z21lbnRhdGlvblBpcGVsaW5lKSB7XG4gICAgICAgIEFTVC53YWxrKGFzdCwgYXVnbWVudGF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGFzdDtcbn1cbmV4cG9ydHMucHJlcHJvY2VzcyA9IHByZXByb2Nlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2ljSEpwYm5RdGNISmxjSEp2WTJWemN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNCeWFXNTBMWEJ5WlhCeWIyTmxjM011ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVUZCTEd0RVFVRnZRenRCUVVWd1F5eHhSRUZCTmtRN1FVRkpOMFFzVTBGQlowSXNWVUZCVlN4RFFVTjRRaXhIUVVGeFFpeEZRVU55UWl4UFFVRTBRanRKUVVVMVFpeE5RVUZOTEc5Q1FVRnZRaXhIUVVGSExHdERRVUZ4UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlF6VkVMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVTjJRaXhEUVVGRE8wbEJSVVlzUzBGQlN5eE5RVUZOTEZsQlFWa3NTVUZCU1N4dlFrRkJiMElzUlVGQlJUdFJRVU12UXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeFpRVUZ0UWl4RFFVRkRMRU5CUVVNN1MwRkRjRU03U1VGRlJDeFBRVUZQTEVkQlFXMUNMRU5CUVVNN1FVRkROMElzUTBGQlF6dEJRV0pFTEdkRFFXRkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByaW50Q2hpbGRyZW4gPSB2b2lkIDA7XG5jb25zdCBwcmV0dGllcl8xID0gcmVxdWlyZShcInByZXR0aWVyXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHNcIik7XG5jb25zdCB0YWdfMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByaW50L3RhZ1wiKTtcbmNvbnN0IHsgYnVpbGRlcnM6IHsgYnJlYWtQYXJlbnQsIGdyb3VwLCBpZkJyZWFrLCBsaW5lLCBzb2Z0bGluZSwgaGFyZGxpbmUgfSwgfSA9IHByZXR0aWVyXzEuZG9jO1xuY29uc3QgeyByZXBsYWNlVGV4dEVuZE9mTGluZSB9ID0gcHJldHRpZXJfMS5kb2MudXRpbHM7XG5mdW5jdGlvbiBwcmludENoaWxkKGNoaWxkUGF0aCwgb3B0aW9ucywgcHJpbnQsIGFyZ3MpIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkUGF0aC5nZXRWYWx1ZSgpO1xuICAgIGlmICgoMCwgdXRpbHNfMi5oYXNQcmV0dGllcklnbm9yZSkoY2hpbGQpKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAoMCwgdGFnXzEucHJpbnRPcGVuaW5nVGFnUHJlZml4KShjaGlsZCwgb3B0aW9ucyksXG4gICAgICAgICAgICAuLi5yZXBsYWNlVGV4dEVuZE9mTGluZShvcHRpb25zLm9yaWdpbmFsVGV4dC5zbGljZSgoMCwgdXRpbHNfMS5sb2NTdGFydCkoY2hpbGQpICtcbiAgICAgICAgICAgICAgICAoY2hpbGQucHJldiAmJiAoMCwgdGFnXzEubmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIpKGNoaWxkLnByZXYpXG4gICAgICAgICAgICAgICAgICAgID8gKDAsIHRhZ18xLnByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKShjaGlsZCkubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIDogMCksICgwLCB1dGlsc18xLmxvY0VuZCkoY2hpbGQpIC1cbiAgICAgICAgICAgICAgICAoY2hpbGQubmV4dCAmJiAoMCwgdGFnXzEubmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKShjaGlsZC5uZXh0KVxuICAgICAgICAgICAgICAgICAgICA/ICgwLCB0YWdfMS5wcmludENsb3NpbmdUYWdFbmRNYXJrZXIpKGNoaWxkLCBvcHRpb25zKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgOiAwKSkpLFxuICAgICAgICAgICAgKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCkoY2hpbGQsIG9wdGlvbnMpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnQoY2hpbGRQYXRoLCBhcmdzKTtcbn1cbmZ1bmN0aW9uIHByaW50QmV0d2VlbkxpbmUocHJldk5vZGUsIG5leHROb2RlKSB7XG4gICAgaWYgKCFwcmV2Tm9kZSB8fCAhbmV4dE5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCBzcGFjZUJldHdlZW5MaW5lc0lzSGFuZGxlZFNvbWV3aGVyZUVsc2UgPSAoKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKShwcmV2Tm9kZSkgJiZcbiAgICAgICAgKCgwLCB1dGlsc18yLmhhc1ByZXR0aWVySWdub3JlKShuZXh0Tm9kZSkgfHxcbiAgICAgICAgICAgIG5leHROb2RlLmZpcnN0Q2hpbGQgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18yLmhhc05vQ2xvc2VNYXJrZXIpKG5leHROb2RlKSB8fFxuICAgICAgICAgICAgKG5leHROb2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgbmV4dE5vZGUuYXR0cmlidXRlcy5sZW5ndGggPiAwKSkpIHx8XG4gICAgICAgIChwcmV2Tm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJlxuICAgICAgICAgICAgKDAsIHV0aWxzXzIuaGFzTm9DbG9zZU1hcmtlcikocHJldk5vZGUpICYmXG4gICAgICAgICAgICAoMCwgdGFnXzEubmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKShuZXh0Tm9kZSkpO1xuICAgIGlmIChzcGFjZUJldHdlZW5MaW5lc0lzSGFuZGxlZFNvbWV3aGVyZUVsc2UpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRVc2VIYXJkbGluZSA9ICFuZXh0Tm9kZS5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlIHx8XG4gICAgICAgICgwLCB1dGlsc18yLnByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzKShuZXh0Tm9kZSkgfHxcbiAgICAgICAgKCgwLCB0YWdfMS5uZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIpKG5leHROb2RlKSAmJlxuICAgICAgICAgICAgcHJldk5vZGUubGFzdENoaWxkICYmXG4gICAgICAgICAgICAoMCwgdGFnXzEubmVlZHNUb0JvcnJvd1BhcmVudENsb3NpbmdUYWdTdGFydE1hcmtlcikocHJldk5vZGUubGFzdENoaWxkKSAmJlxuICAgICAgICAgICAgcHJldk5vZGUubGFzdENoaWxkLmxhc3RDaGlsZCAmJlxuICAgICAgICAgICAgKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIpKHByZXZOb2RlLmxhc3RDaGlsZC5sYXN0Q2hpbGQpKTtcbiAgICBpZiAoc2hvdWxkVXNlSGFyZGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIGhhcmRsaW5lO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dE5vZGUuaGFzTGVhZGluZ1doaXRlc3BhY2UgPyBsaW5lIDogc29mdGxpbmU7XG59XG5mdW5jdGlvbiBwcmludENoaWxkcmVuKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdHRlbXB0aW5nIHRvIHVzZSBwcmludENoaWxkcmVuIG9uIHNvbWV0aGluZyB3aXRob3V0IGNoaWxkcmVuJyk7XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfMi5mb3JjZUJyZWFrQ2hpbGRyZW4pKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBicmVha1BhcmVudCxcbiAgICAgICAgICAgIC4uLnBhdGgubWFwKChjaGlsZFBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBjaGlsZFBhdGguZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2QmV0d2VlbkxpbmUgPSBwcmludEJldHdlZW5MaW5lKGNoaWxkTm9kZS5wcmV2LCBjaGlsZE5vZGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICFwcmV2QmV0d2VlbkxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgICAgIDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZCZXR3ZWVuTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMi5mb3JjZU5leHRFbXB0eUxpbmUpKGNoaWxkTm9kZS5wcmV2KSA/IGhhcmRsaW5lIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBwcmludENoaWxkKGNoaWxkUGF0aCwgb3B0aW9ucywgcHJpbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWRpbmdTcGFjZUdyb3VwSWQ6IHV0aWxzXzIuRk9SQ0VfQlJFQUtfR1JPVVBfSUQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFpbGluZ1NwYWNlR3JvdXBJZDogdXRpbHNfMi5GT1JDRV9CUkVBS19HUk9VUF9JRCxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sICdjaGlsZHJlbicpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBjb25zdCBsZWFkaW5nU3BhY2VHcm91cElkcyA9IG5vZGUuY2hpbGRyZW4ubWFwKChfLCBpKSA9PiBTeW1ib2woYGxlYWRpbmctJHtpfWApKTtcbiAgICBjb25zdCB0cmFpbGluZ1NwYWNlR3JvdXBJZHMgPSBub2RlLmNoaWxkcmVuLm1hcCgoXywgaSkgPT4gU3ltYm9sKGB0cmFpbGluZy0ke2l9YCkpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VCZXR3ZWVuTm9kZSA9IHBhdGgubWFwKChjaGlsZFBhdGgsIGNoaWxkSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlID0gY2hpbGRQYXRoLmdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IGxlYWRpbmdIYXJkbGluZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGVhZGluZ1doaXRlc3BhY2UgPSBbXTtcbiAgICAgICAgY29uc3QgbGVhZGluZ0RlcGVuZGVudFdoaXRlc3BhY2UgPSBbXTtcbiAgICAgICAgY29uc3QgdHJhaWxpbmdXaGl0ZXNwYWNlID0gW107XG4gICAgICAgIGNvbnN0IHRyYWlsaW5nSGFyZGxpbmVzID0gW107XG4gICAgICAgIGNvbnN0IHByZXZCZXR3ZWVuTGluZSA9IHByaW50QmV0d2VlbkxpbmUoY2hpbGROb2RlLnByZXYsIGNoaWxkTm9kZSk7XG4gICAgICAgIGNvbnN0IG5leHRCZXR3ZWVuTGluZSA9IHByaW50QmV0d2VlbkxpbmUoY2hpbGROb2RlLCBjaGlsZE5vZGUubmV4dCk7XG4gICAgICAgIGlmICgoMCwgdXRpbHNfMi5pc1RleHRMaWtlTm9kZSkoY2hpbGROb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsZWFkaW5nSGFyZGxpbmVzLFxuICAgICAgICAgICAgICAgIGxlYWRpbmdXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgIGxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgIHRyYWlsaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgICAgICAgICB0cmFpbGluZ0hhcmRsaW5lcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZCZXR3ZWVuTGluZSkge1xuICAgICAgICAgICAgaWYgKCgwLCB1dGlsc18yLmZvcmNlTmV4dEVtcHR5TGluZSkoY2hpbGROb2RlLnByZXYpKSB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ0hhcmRsaW5lcy5wdXNoKGhhcmRsaW5lLCBoYXJkbGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcmV2QmV0d2VlbkxpbmUgPT09IGhhcmRsaW5lKSB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ0hhcmRsaW5lcy5wdXNoKGhhcmRsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5pc1RleHRMaWtlTm9kZSkoY2hpbGROb2RlLnByZXYpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5pc0xpcXVpZE5vZGUpKGNoaWxkTm9kZSkgJiYgcHJldkJldHdlZW5MaW5lID09PSBzb2Z0bGluZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZ0RlcGVuZGVudFdoaXRlc3BhY2UucHVzaChwcmV2QmV0d2VlbkxpbmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZ1doaXRlc3BhY2UucHVzaChwcmV2QmV0d2VlbkxpbmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nV2hpdGVzcGFjZS5wdXNoKGlmQnJlYWsoJycsIHNvZnRsaW5lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiB0cmFpbGluZ1NwYWNlR3JvdXBJZHNbY2hpbGRJbmRleCAtIDFdLFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0QmV0d2VlbkxpbmUpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5mb3JjZU5leHRFbXB0eUxpbmUpKGNoaWxkTm9kZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNUZXh0TGlrZU5vZGUpKGNoaWxkTm9kZS5uZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZ0hhcmRsaW5lcy5wdXNoKGhhcmRsaW5lLCBoYXJkbGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dEJldHdlZW5MaW5lID09PSBoYXJkbGluZSkge1xuICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMi5pc1RleHRMaWtlTm9kZSkoY2hpbGROb2RlLm5leHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nSGFyZGxpbmVzLnB1c2goaGFyZGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWlsaW5nV2hpdGVzcGFjZS5wdXNoKG5leHRCZXR3ZWVuTGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlYWRpbmdIYXJkbGluZXMsXG4gICAgICAgICAgICBsZWFkaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgICAgIGxlYWRpbmdEZXBlbmRlbnRXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgdHJhaWxpbmdXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgdHJhaWxpbmdIYXJkbGluZXMsXG4gICAgICAgIH07XG4gICAgfSwgJ2NoaWxkcmVuJyk7XG4gICAgcmV0dXJuIHBhdGgubWFwKChjaGlsZFBhdGgsIGNoaWxkSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgeyBsZWFkaW5nSGFyZGxpbmVzLCBsZWFkaW5nV2hpdGVzcGFjZSwgbGVhZGluZ0RlcGVuZGVudFdoaXRlc3BhY2UsIHRyYWlsaW5nV2hpdGVzcGFjZSwgdHJhaWxpbmdIYXJkbGluZXMsIH0gPSB3aGl0ZXNwYWNlQmV0d2Vlbk5vZGVbY2hpbGRJbmRleF07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi5sZWFkaW5nSGFyZGxpbmVzLFxuICAgICAgICAgICAgZ3JvdXAoW1xuICAgICAgICAgICAgICAgIC4uLmxlYWRpbmdXaGl0ZXNwYWNlLFxuICAgICAgICAgICAgICAgIGdyb3VwKFtcbiAgICAgICAgICAgICAgICAgICAgLi4ubGVhZGluZ0RlcGVuZGVudFdoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIHByaW50Q2hpbGQoY2hpbGRQYXRoLCBvcHRpb25zLCBwcmludCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZ1NwYWNlR3JvdXBJZDogbGVhZGluZ1NwYWNlR3JvdXBJZCh3aGl0ZXNwYWNlQmV0d2Vlbk5vZGUsIGNoaWxkSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmdTcGFjZUdyb3VwSWQ6IHRyYWlsaW5nU3BhY2VHcm91cElkKHdoaXRlc3BhY2VCZXR3ZWVuTm9kZSwgY2hpbGRJbmRleCksXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAuLi50cmFpbGluZ1doaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgXSwge1xuICAgICAgICAgICAgICAgICAgICBpZDogdHJhaWxpbmdTcGFjZUdyb3VwSWRzW2NoaWxkSW5kZXhdLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSwge1xuICAgICAgICAgICAgICAgIGlkOiBsZWFkaW5nU3BhY2VHcm91cElkc1tjaGlsZEluZGV4XSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLi4udHJhaWxpbmdIYXJkbGluZXMsXG4gICAgICAgIF07XG4gICAgfSwgJ2NoaWxkcmVuJyk7XG4gICAgZnVuY3Rpb24gbGVhZGluZ1NwYWNlR3JvdXBJZCh3aGl0ZXNwYWNlQmV0d2Vlbk5vZGUsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3MubGVhZGluZ1NwYWNlR3JvdXBJZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2ID0gd2hpdGVzcGFjZUJldHdlZW5Ob2RlW2luZGV4IC0gMV07XG4gICAgICAgIGNvbnN0IGN1cnIgPSB3aGl0ZXNwYWNlQmV0d2Vlbk5vZGVbaW5kZXhdO1xuICAgICAgICBjb25zdCBncm91cElkcyA9IFtdO1xuICAgICAgICBpZiAoISgwLCB1dGlsc18yLmlzRW1wdHkpKHByZXYudHJhaWxpbmdIYXJkbGluZXMpIHx8ICEoMCwgdXRpbHNfMi5pc0VtcHR5KShjdXJyLmxlYWRpbmdIYXJkbGluZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbHNfMi5GT1JDRV9CUkVBS19HUk9VUF9JRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCB1dGlsc18yLmlzRW1wdHkpKHByZXYudHJhaWxpbmdXaGl0ZXNwYWNlKSkge1xuICAgICAgICAgICAgZ3JvdXBJZHMucHVzaCh0cmFpbGluZ1NwYWNlR3JvdXBJZHNbaW5kZXggLSAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfMi5pc0VtcHR5KShjdXJyLmxlYWRpbmdXaGl0ZXNwYWNlKSkge1xuICAgICAgICAgICAgZ3JvdXBJZHMucHVzaChsZWFkaW5nU3BhY2VHcm91cElkc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKDAsIHV0aWxzXzIuaXNFbXB0eSkoY3Vyci5sZWFkaW5nRGVwZW5kZW50V2hpdGVzcGFjZSkpIHtcbiAgICAgICAgICAgIGdyb3VwSWRzLnB1c2godHJhaWxpbmdTcGFjZUdyb3VwSWRzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCB1dGlsc18yLmlzRW1wdHkpKGdyb3VwSWRzKSkge1xuICAgICAgICAgICAgZ3JvdXBJZHMucHVzaCh1dGlsc18yLkZPUkNFX0ZMQVRfR1JPVVBfSUQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBncm91cElkcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhaWxpbmdTcGFjZUdyb3VwSWQod2hpdGVzcGFjZUJldHdlZW5Ob2RlLCBpbmRleCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IHdoaXRlc3BhY2VCZXR3ZWVuTm9kZS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJncy50cmFpbGluZ1NwYWNlR3JvdXBJZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyID0gd2hpdGVzcGFjZUJldHdlZW5Ob2RlW2luZGV4XTtcbiAgICAgICAgY29uc3QgbmV4dCA9IHdoaXRlc3BhY2VCZXR3ZWVuTm9kZVtpbmRleCArIDFdO1xuICAgICAgICBjb25zdCBncm91cElkcyA9IFtdO1xuICAgICAgICBpZiAoISgwLCB1dGlsc18yLmlzRW1wdHkpKGN1cnIudHJhaWxpbmdIYXJkbGluZXMpIHx8ICEoMCwgdXRpbHNfMi5pc0VtcHR5KShuZXh0LmxlYWRpbmdIYXJkbGluZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbHNfMi5GT1JDRV9CUkVBS19HUk9VUF9JRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCB1dGlsc18yLmlzRW1wdHkpKGN1cnIudHJhaWxpbmdXaGl0ZXNwYWNlKSkge1xuICAgICAgICAgICAgZ3JvdXBJZHMucHVzaCh0cmFpbGluZ1NwYWNlR3JvdXBJZHNbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKDAsIHV0aWxzXzIuaXNFbXB0eSkoZ3JvdXBJZHMpKSB7XG4gICAgICAgICAgICBncm91cElkcy5wdXNoKHV0aWxzXzIuRk9SQ0VfRkxBVF9HUk9VUF9JRCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdyb3VwSWRzO1xuICAgIH1cbn1cbmV4cG9ydHMucHJpbnRDaGlsZHJlbiA9IHByaW50Q2hpbGRyZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMmhwYkdSeVpXNHVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZjSEpwYm5SbGNpOXdjbWx1ZEM5amFHbHNaSEpsYmk1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4MVEwRkJkME03UVVGRGVFTXNiVU5CUVRKRE8wRkJRek5ETEcxRFFVOXBRanRCUVVOcVFpd3lRMEZYZVVJN1FVRkRla0lzTmtOQlVUWkNPMEZCUlRkQ0xFMUJRVTBzUlVGRFNpeFJRVUZSTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVOd1JTeEhRVUZITEdOQlFVY3NRMEZCUXp0QlFVTlNMRTFCUVUwc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4SFFVRkhMR05CUVVjc1EwRkJReXhMUVVGWkxFTkJRVU03UVVGRmJFUXNVMEZCVXl4VlFVRlZMRU5CUTJwQ0xGTkJRWGRDTEVWQlEzaENMRTlCUVRSQ0xFVkJRelZDTEV0QlFXOUNMRVZCUTNCQ0xFbEJRWFZDTzBsQlJYWkNMRTFCUVUwc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVVnVReXhKUVVGSkxFbEJRVUVzZVVKQlFXbENMRVZCUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3VVVGRE5VSXNUMEZCVHp0WlFVTk1MRWxCUVVFc01rSkJRWEZDTEVWQlFVTXNTMEZCU3l4RlFVRkZMRTlCUVU4c1EwRkJRenRaUVVOeVF5eEhRVUZITEc5Q1FVRnZRaXhEUVVOeVFpeFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkRlRUlzU1VGQlFTeG5Ra0ZCVVN4RlFVRkRMRXRCUVVzc1EwRkJRenRuUWtGRFlpeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJRU3cwUTBGQmMwTXNSVUZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8yOUNRVU12UkN4RFFVRkRMRU5CUVVNc1NVRkJRU3huUTBGQk1FSXNSVUZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhOUVVGTk8yOUNRVU14UXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRMUlzU1VGQlFTeGpRVUZOTEVWQlFVTXNTMEZCU3l4RFFVRkRPMmRDUVVOWUxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkJMREJEUVVGdlF5eEZRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNN2IwSkJRemRFTEVOQlFVTXNRMEZCUXl4SlFVRkJMRGhDUVVGM1FpeEZRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTk8yOUNRVU5xUkN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRMVFzUTBGRFJqdFpRVU5FTEVsQlFVRXNNa0pCUVhGQ0xFVkJRVU1zUzBGQlN5eEZRVUZGTEU5QlFVOHNRMEZCUXp0VFFVTjBReXhEUVVGRE8wdEJRMGc3U1VGRlJDeFBRVUZQTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGFFTXNRMEZCUXp0QlFVVkVMRk5CUVZNc1owSkJRV2RDTEVOQlEzWkNMRkZCUVc5RExFVkJRM0JETEZGQlFXOURPMGxCUlhCRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4UlFVRlJPMUZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU03U1VGRmRFTXNUVUZCVFN4MVEwRkJkVU1zUjBGRE0wTXNRMEZCUXl4SlFVRkJMRFJEUVVGelF5eEZRVUZETEZGQlFWRXNRMEZCUXp0UlFVTXZReXhEUVVGRExFbEJRVUVzZVVKQlFXbENMRVZCUVVNc1VVRkJVU3hEUVVGRE8xbEJUVEZDTEZGQlFWRXNRMEZCUXl4VlFVRlZPMWxCVFc1Q0xFbEJRVUVzZDBKQlFXZENMRVZCUVVNc1VVRkJVU3hEUVVGRE8xbEJUVEZDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdaMEpCUTNSRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGUGRrTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNWMEZCVnp0WlFVTjBReXhKUVVGQkxIZENRVUZuUWl4RlFVRkRMRkZCUVZFc1EwRkJRenRaUVVNeFFpeEpRVUZCTERCRFFVRnZReXhGUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZGY0VRc1NVRkJTU3gxUTBGQmRVTXNSVUZCUlR0UlFVTXpReXhQUVVGUExFVkJRVVVzUTBGQlF6dExRVU5ZTzBsQlJVUXNUVUZCVFN4cFFrRkJhVUlzUjBGRGNrSXNRMEZCUXl4UlFVRlJMRU5CUVVNc05FSkJRVFJDTzFGQlEzUkRMRWxCUVVFc2NVTkJRVFpDTEVWQlFVTXNVVUZCVVN4RFFVRkRPMUZCVDNaRExFTkJRVU1zU1VGQlFTd3dRMEZCYjBNc1JVRkJReXhSUVVGUkxFTkJRVU03V1VGRE4wTXNVVUZCVVN4RFFVRkRMRk5CUVZNN1dVRkRiRUlzU1VGQlFTdzRRMEZCZDBNc1JVRkJReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETzFsQlF6VkVMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zVTBGQlV6dFpRVU0xUWl4SlFVRkJMRGhEUVVGM1F5eEZRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVUxUlN4SlFVRkpMR2xDUVVGcFFpeEZRVUZGTzFGQlEzSkNMRTlCUVU4c1VVRkJVU3hEUVVGRE8wdEJRMnBDTzBsQlJVUXNUMEZCVHl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETzBGQlEzcEVMRU5CUVVNN1FVRjNRMFFzVTBGQlowSXNZVUZCWVN4RFFVTXpRaXhKUVVFd1FpeEZRVU14UWl4UFFVRTBRaXhGUVVNMVFpeExRVUZ2UWl4RlFVTndRaXhKUVVGMVFqdEpRVVYyUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZGTjBJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYkVJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGRFlpd3JSRUZCSzBRc1EwRkRhRVVzUTBGQlF6dExRVU5JTzBsQlJVUXNTVUZCU1N4SlFVRkJMREJDUVVGclFpeEZRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUXpWQ0xFOUJRVTg3V1VGRFRDeFhRVUZYTzFsQlJWZ3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVTdaMEpCUTNoQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRuUWtGRGRrTXNUVUZCVFN4bFFVRmxMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VVc1QwRkJUenR2UWtGRFRDeERRVUZETEdWQlFXVTdkMEpCUTJRc1EwRkJReXhEUVVGRExFVkJRVVU3ZDBKQlEwb3NRMEZCUXl4RFFVRkRPelJDUVVORkxHVkJRV1U3TkVKQlEyWXNTVUZCUVN3d1FrRkJhMElzUlVGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0NVFrRkRia1E3YjBKQlEwd3NWVUZCVlN4RFFVRkRMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTzNkQ1FVTndReXh0UWtGQmJVSXNSVUZCUlN3MFFrRkJiMEk3ZDBKQlEzcERMRzlDUVVGdlFpeEZRVUZGTERSQ1FVRnZRanR4UWtGRE0wTXNRMEZCUXp0cFFrRkRTQ3hEUVVGRE8xbEJRMG9zUTBGQlF5eEZRVUZGTEZWQlFWVXNRMEZCUXp0VFFVTm1MRU5CUVVNN1MwRkRTRHRKUVVWRUxFMUJRVTBzYjBKQlFXOUNMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGRGRFUXNUVUZCVFN4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGRGRrSXNRMEZCUXp0SlFVTkdMRTFCUVUwc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkRka1FzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkRlRUlzUTBGQlF6dEpRVzFDUml4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUTNCRExFTkJRMFVzVTBGQmEwTXNSVUZEYkVNc1ZVRkJhMElzUlVGRFN5eEZRVUZGTzFGQlEzcENMRTFCUVUwc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0UlFVVjJReXhOUVVGTkxHZENRVUZuUWl4SFFVRnpRaXhGUVVGRkxFTkJRVU03VVVGREwwTXNUVUZCVFN4cFFrRkJhVUlzUjBGQmFVSXNSVUZCUlN4RFFVRkRPMUZCUXpORExFMUJRVTBzTUVKQlFUQkNMRWRCUVRSQ0xFVkJRVVVzUTBGQlF6dFJRVU12UkN4TlFVRk5MR3RDUVVGclFpeEhRVUZwUWl4RlFVRkZMRU5CUVVNN1VVRkROVU1zVFVGQlRTeHBRa0ZCYVVJc1IwRkJjMElzUlVGQlJTeERRVUZETzFGQlJXaEVMRTFCUVUwc1pVRkJaU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdVVUZEY0VVc1RVRkJUU3hsUVVGbExFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRkxGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVVndSU3hKUVVGSkxFbEJRVUVzYzBKQlFXTXNSVUZCUXl4VFFVRlRMRU5CUVVNc1JVRkJSVHRaUVVNM1FpeFBRVUZQTzJkQ1FVTk1MR2RDUVVGblFqdG5Ra0ZEYUVJc2FVSkJRV2xDTzJkQ1FVTnFRaXd3UWtGQk1FSTdaMEpCUXpGQ0xHdENRVUZyUWp0blFrRkRiRUlzYVVKQlFXbENPMkZCUTJ4Q0xFTkJRVU03VTBGRFNEdFJRVVZFTEVsQlFVa3NaVUZCWlN4RlFVRkZPMWxCUTI1Q0xFbEJRVWtzU1VGQlFTd3dRa0ZCYTBJc1JVRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdaMEpCUTNSRExHZENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdZVUZETTBNN2FVSkJRVTBzU1VGQlNTeGxRVUZsTEV0QlFVc3NVVUZCVVN4RlFVRkZPMmRDUVVOMlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdZVUZEYWtNN2FVSkJRVTA3WjBKQlEwd3NTVUZCU1N4SlFVRkJMSE5DUVVGakxFVkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMjlDUVVOc1F5eEpRVUZKTEVsQlFVRXNiMEpCUVZrc1JVRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeGxRVUZsTEV0QlFVc3NVVUZCVVN4RlFVRkZPM2RDUVVNelJDd3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRemRDTEdWQlFXdERMRU5CUTI1RExFTkJRVU03Y1VKQlEwZzdlVUpCUVUwN2QwSkJRMHdzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRVzlETEVOQlFVTXNRMEZCUXp0eFFrRkRPVVE3YVVKQlEwWTdjVUpCUVUwN2IwSkJTMHdzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVOd1FpeFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZMRkZCUVZFc1JVRkJSVHQzUWtGRGNFSXNUMEZCVHl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNN2NVSkJReTlETEVOQlFVTXNRMEZEU0N4RFFVRkRPMmxDUVVOSU8yRkJRMFk3VTBGRFJqdFJRVVZFTEVsQlFVa3NaVUZCWlN4RlFVRkZPMWxCUTI1Q0xFbEJRVWtzU1VGQlFTd3dRa0ZCYTBJc1JVRkJReXhUUVVGVExFTkJRVU1zUlVGQlJUdG5Ra0ZEYWtNc1NVRkJTU3hKUVVGQkxITkNRVUZqTEVWQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8yOUNRVU5zUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8ybENRVU0xUXp0aFFVTkdPMmxDUVVGTkxFbEJRVWtzWlVGQlpTeExRVUZMTEZGQlFWRXNSVUZCUlR0blFrRkRka01zU1VGQlNTeEpRVUZCTEhOQ1FVRmpMRVZCUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzI5Q1FVTnNReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03YVVKQlEyeERPMkZCUlVZN2FVSkJRVTA3WjBKQlIwd3NhMEpCUVd0Q0xFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXOURMRU5CUVVNc1EwRkJRenRoUVVNdlJEdFRRVU5HTzFGQlJVUXNUMEZCVHp0WlFVTk1MR2RDUVVGblFqdFpRVU5vUWl4cFFrRkJhVUk3V1VGRGFrSXNNRUpCUVRCQ08xbEJRekZDTEd0Q1FVRnJRanRaUVVOc1FpeHBRa0ZCYVVJN1UwRkRUeXhEUVVGRE8wbEJRemRDTEVOQlFVTXNSVUZEUkN4VlFVRlZMRU5CUTFnc1EwRkJRenRKUVVWR0xFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFVkJRVVVzUlVGQlJUdFJRVU40UXl4TlFVRk5MRVZCUTBvc1owSkJRV2RDTEVWQlEyaENMR2xDUVVGcFFpeEZRVU5xUWl3d1FrRkJNRUlzUlVGRE1VSXNhMEpCUVd0Q0xFVkJRMnhDTEdsQ1FVRnBRaXhIUVVOc1FpeEhRVUZITEhGQ1FVRnhRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzFGQlJYUkRMRTlCUVU4N1dVRkRUQ3hIUVVGSExHZENRVUZuUWp0WlFVTnVRaXhMUVVGTExFTkJRMGc3WjBKQlEwVXNSMEZCUnl4cFFrRkJhVUk3WjBKQlEzQkNMRXRCUVVzc1EwRkRTRHR2UWtGRFJTeEhRVUZITERCQ1FVRXdRanR2UWtGRE4wSXNWVUZCVlN4RFFVRkRMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTzNkQ1FVTndReXh0UWtGQmJVSXNSVUZCUlN4dFFrRkJiVUlzUTBGRGRFTXNjVUpCUVhGQ0xFVkJRM0pDTEZWQlFWVXNRMEZEV0R0M1FrRkRSQ3h2UWtGQmIwSXNSVUZCUlN4dlFrRkJiMElzUTBGRGVFTXNjVUpCUVhGQ0xFVkJRM0pDTEZWQlFWVXNRMEZEV0R0eFFrRkRSaXhEUVVGRE8yOUNRVU5HTEVkQlFVY3NhMEpCUVd0Q08ybENRVU4wUWl4RlFVTkVPMjlDUVVORkxFVkJRVVVzUlVGQlJTeHhRa0ZCY1VJc1EwRkJReXhWUVVGVkxFTkJRVU03YVVKQlEzUkRMRU5CUTBZN1lVRkRSaXhGUVVORU8yZENRVU5GTEVWQlFVVXNSVUZCUlN4dlFrRkJiMElzUTBGQlF5eFZRVUZWTEVOQlFVTTdZVUZEY2tNc1EwRkRSanRaUVVORUxFZEJRVWNzYVVKQlFXbENPMU5CUTNKQ0xFTkJRVU03U1VGRFNpeERRVUZETEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1NVRkZaaXhUUVVGVExHMUNRVUZ0UWl4RFFVTXhRaXh4UWtGQk9FTXNSVUZET1VNc1MwRkJZVHRSUVVWaUxFbEJRVWtzUzBGQlN5eExRVUZMTEVOQlFVTXNSVUZCUlR0WlFVTm1MRTlCUVU4c1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMU5CUTJwRE8xRkJSVVFzVFVGQlRTeEpRVUZKTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpsRExFMUJRVTBzU1VGQlNTeEhRVUZITEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlF6RkRMRTFCUVUwc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVVZ3UWl4SlFVRkpMRU5CUVVNc1NVRkJRU3hsUVVGUExFVkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZCTEdWQlFVOHNSVUZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSVUZCUlR0WlFVTjJSU3hQUVVGUExEUkNRVUZ2UWl4RFFVRkRPMU5CUXpkQ08xRkJSVVFzU1VGQlNTeERRVUZETEVsQlFVRXNaVUZCVHl4RlFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RlFVRkZPMWxCUTNKRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRha1E3VVVGRlJDeEpRVUZKTEVOQlFVTXNTVUZCUVN4bFFVRlBMRVZCUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRVZCUVVVN1dVRkRjRU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUXpWRE8xRkJSVVFzU1VGQlNTeERRVUZETEVsQlFVRXNaVUZCVHl4RlFVRkRMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4RlFVRkZPMWxCUXpkRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTTNRenRSUVVWRUxFbEJRVWtzU1VGQlFTeGxRVUZQTEVWQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVN1dVRkRja0lzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl3eVFrRkJiVUlzUTBGQlF5eERRVUZETzFOQlEzQkRPMUZCUlVRc1QwRkJUeXhSUVVGUkxFTkJRVU03U1VGRGJFSXNRMEZCUXp0SlFVVkVMRk5CUVZNc2IwSkJRVzlDTEVOQlF6TkNMSEZDUVVFNFF5eEZRVU01UXl4TFFVRmhPMUZCUldJc1NVRkJTU3hMUVVGTExFdEJRVXNzY1VKQlFYRkNMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdFpRVU01UXl4UFFVRlBMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0VFFVTnNRenRSUVVWRUxFMUJRVTBzU1VGQlNTeEhRVUZITEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlF6RkRMRTFCUVUwc1NVRkJTU3hIUVVGSExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU01UXl4TlFVRk5MRkZCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRmNFSXNTVUZCU1N4RFFVRkRMRWxCUVVFc1pVRkJUeXhGUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlFTeGxRVUZQTEVWQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVWQlFVVTdXVUZEZGtVc1QwRkJUeXcwUWtGQmIwSXNRMEZCUXp0VFFVTTNRanRSUVVWRUxFbEJRVWtzUTBGQlF5eEpRVUZCTEdWQlFVOHNSVUZCUXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlR0WlFVTnlReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETjBNN1VVRkZSQ3hKUVVGSkxFbEJRVUVzWlVGQlR5eEZRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMWxCUTNKQ0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNNa0pCUVcxQ0xFTkJRVU1zUTBGQlF6dFRRVU53UXp0UlFVVkVMRTlCUVU4c1VVRkJVU3hEUVVGRE8wbEJRMnhDTEVOQlFVTTdRVUZEU0N4RFFVRkRPMEZCZEZCRUxITkRRWE5RUXlKOSIsIid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJpbnRFbGVtZW50ID0gdm9pZCAwO1xuY29uc3QgcHJldHRpZXJfMSA9IHJlcXVpcmUoXCJwcmV0dGllclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vcHJpbnRlci91dGlsc1wiKTtcbmNvbnN0IHRhZ18xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvcHJpbnQvdGFnXCIpO1xuY29uc3QgY2hpbGRyZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByaW50L2NoaWxkcmVuXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlc1wiKTtcbmNvbnN0IHsgYnVpbGRlcnM6IHsgYnJlYWtQYXJlbnQsIGRlZGVudFRvUm9vdCwgZ3JvdXAsIGluZGVudCwgbGluZSwgc29mdGxpbmUgfSwgfSA9IHByZXR0aWVyXzEuZG9jO1xuY29uc3QgeyByZXBsYWNlVGV4dEVuZE9mTGluZSB9ID0gcHJldHRpZXJfMS5kb2MudXRpbHM7XG5mdW5jdGlvbiBwcmludEVsZW1lbnQocGF0aCwgb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGlmICgoMCwgdXRpbHNfMS5oYXNOb0Nsb3NlTWFya2VyKShub2RlKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZ3JvdXAoKDAsIHRhZ18xLnByaW50T3BlbmluZ1RhZykocGF0aCwgb3B0aW9ucywgcHJpbnQpKSxcbiAgICAgICAgICAgIC4uLigwLCB0YWdfMS5wcmludENsb3NpbmdUYWcpKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICAgICAgKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCkobm9kZSwgb3B0aW9ucyksXG4gICAgICAgIF07XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfMS5zaG91bGRQcmVzZXJ2ZUNvbnRlbnQpKG5vZGUsIG9wdGlvbnMpIHx8XG4gICAgICAgIG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFJhd05vZGUpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWdQcmVmaXgpKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICAgICAgZ3JvdXAoKDAsIHRhZ18xLnByaW50T3BlbmluZ1RhZykocGF0aCwgb3B0aW9ucywgcHJpbnQpKSxcbiAgICAgICAgICAgIC4uLnJlcGxhY2VUZXh0RW5kT2ZMaW5lKCgwLCB0YWdfMS5nZXROb2RlQ29udGVudCkobm9kZSwgb3B0aW9ucykpLFxuICAgICAgICAgICAgLi4uKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZykobm9kZSwgb3B0aW9ucyksXG4gICAgICAgICAgICAoMCwgdGFnXzEucHJpbnRDbG9zaW5nVGFnU3VmZml4KShub2RlLCBvcHRpb25zKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgYXR0ckdyb3VwSWQgPSBTeW1ib2woJ2VsZW1lbnQtYXR0ci1ncm91cC1pZCcpO1xuICAgIGNvbnN0IGVsZW1lbnRHcm91cElkID0gU3ltYm9sKCdlbGVtZW50LWdyb3VwLWlkJyk7XG4gICAgY29uc3QgcHJpbnRUYWcgPSAoZG9jKSA9PiBncm91cChbXG4gICAgICAgIGdyb3VwKCgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWcpKHBhdGgsIG9wdGlvbnMsIHByaW50KSwgeyBpZDogYXR0ckdyb3VwSWQgfSksXG4gICAgICAgIGRvYyxcbiAgICAgICAgKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZykobm9kZSwgb3B0aW9ucyksXG4gICAgXSwgeyBpZDogZWxlbWVudEdyb3VwSWQgfSk7XG4gICAgY29uc3QgcHJpbnRMaW5lQmVmb3JlQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICAgIGlmIChub2RlLmZpcnN0Q2hpbGQuaGFzTGVhZGluZ1doaXRlc3BhY2UgJiZcbiAgICAgICAgICAgIG5vZGUuZmlyc3RDaGlsZC5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5maXJzdENoaWxkLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlICYmXG4gICAgICAgICAgICBub2RlLmlzV2hpdGVzcGFjZVNlbnNpdGl2ZSAmJlxuICAgICAgICAgICAgbm9kZS5pc0luZGVudGF0aW9uU2Vuc2l0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVkZW50VG9Sb290KHNvZnRsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc29mdGxpbmU7XG4gICAgfTtcbiAgICBjb25zdCBwcmludExpbmVBZnRlckNoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZWVkc1RvQm9ycm93ID0gbm9kZS5uZXh0XG4gICAgICAgICAgICA/ICgwLCB0YWdfMS5uZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIpKG5vZGUubmV4dClcbiAgICAgICAgICAgIDogKDAsIHRhZ18xLm5lZWRzVG9Cb3Jyb3dMYXN0Q2hpbGRDbG9zaW5nVGFnRW5kTWFya2VyKShub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICBpZiAobmVlZHNUb0JvcnJvdykge1xuICAgICAgICAgICAgaWYgKG5vZGUubGFzdENoaWxkLmhhc1RyYWlsaW5nV2hpdGVzcGFjZSAmJlxuICAgICAgICAgICAgICAgIG5vZGUubGFzdENoaWxkLmlzVHJhaWxpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5sYXN0Q2hpbGQuaGFzVHJhaWxpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgICAgICBub2RlLmxhc3RDaGlsZC5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvZnRsaW5lO1xuICAgIH07XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwcmludFRhZyhub2RlLmhhc0RhbmdsaW5nV2hpdGVzcGFjZSAmJiBub2RlLmlzRGFuZ2xpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlXG4gICAgICAgICAgICA/IGxpbmVcbiAgICAgICAgICAgIDogJycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRUYWcoW1xuICAgICAgICAoMCwgdXRpbHNfMS5mb3JjZUJyZWFrQ29udGVudCkobm9kZSkgPyBicmVha1BhcmVudCA6ICcnLFxuICAgICAgICBpbmRlbnQoW1xuICAgICAgICAgICAgcHJpbnRMaW5lQmVmb3JlQ2hpbGRyZW4oKSxcbiAgICAgICAgICAgICgwLCBjaGlsZHJlbl8xLnByaW50Q2hpbGRyZW4pKHBhdGgsIG9wdGlvbnMsIHByaW50LCB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ1NwYWNlR3JvdXBJZDogZWxlbWVudEdyb3VwSWQsXG4gICAgICAgICAgICAgICAgdHJhaWxpbmdTcGFjZUdyb3VwSWQ6IGVsZW1lbnRHcm91cElkLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuICAgICAgICBwcmludExpbmVBZnRlckNoaWxkcmVuKCksXG4gICAgXSk7XG59XG5leHBvcnRzLnByaW50RWxlbWVudCA9IHByaW50RWxlbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpXeGxiV1Z1ZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNCeWFXNTBMMlZzWlcxbGJuUXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1dVRkJXU3hEUVVGRE96czdRVUZGWWl4MVEwRkJOa003UVVGRE4wTXNNa05CU1hsQ08wRkJRM3BDTERaRFFWRTJRanRCUVVNM1FpeDFSRUZCZVVRN1FVRkRla1FzYlVOQlRXbENPMEZCUldwQ0xFMUJRVTBzUlVGRFNpeFJRVUZSTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1dVRkJXU3hGUVVGRkxFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVOMlJTeEhRVUZITEdOQlFVY3NRMEZCUXp0QlFVTlNMRTFCUVUwc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4SFFVRkhMR05CUVVjc1EwRkJReXhMUVVGWkxFTkJRVU03UVVGRmJFUXNVMEZCWjBJc1dVRkJXU3hEUVVNeFFpeEpRVUUyUXl4RlFVTTNReXhQUVVFMFFpeEZRVU0xUWl4TFFVRnZRanRKUVVWd1FpeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03U1VGRk4wSXNTVUZCU1N4SlFVRkJMSGRDUVVGblFpeEZRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUlRGQ0xFOUJRVTg3V1VGRFRDeExRVUZMTEVOQlFVTXNTVUZCUVN4eFFrRkJaU3hGUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkROVU1zUjBGQlJ5eEpRVUZCTEhGQ1FVRmxMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFpRVU5xUXl4SlFVRkJMREpDUVVGeFFpeEZRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNN1UwRkRja01zUTBGQlF6dExRVU5JTzBsQlJVUXNTVUZEUlN4SlFVRkJMRFpDUVVGeFFpeEZRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRjRU1zU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmNzUlVGRGJrTTdVVUZEUVN4UFFVRlBPMWxCUTB3c1NVRkJRU3d5UWtGQmNVSXNSVUZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRE8xbEJRM0JETEV0QlFVc3NRMEZCUXl4SlFVRkJMSEZDUVVGbExFVkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVNMVF5eEhRVUZITEc5Q1FVRnZRaXhEUVVGRExFbEJRVUVzYjBKQlFXTXNSVUZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03V1VGRGRFUXNSMEZCUnl4SlFVRkJMSEZDUVVGbExFVkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXp0WlFVTnFReXhKUVVGQkxESkNRVUZ4UWl4RlFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU03VTBGRGNrTXNRMEZCUXp0TFFVTklPMGxCUlVRc1RVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExFTkJRVU03U1VGRGNFUXNUVUZCVFN4alFVRmpMRWRCUVVjc1RVRkJUU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1NVRkZiRVFzVFVGQlRTeFJRVUZSTEVkQlFVY3NRMEZCUXl4SFFVRlJMRVZCUVVVc1JVRkJSU3hEUVVNMVFpeExRVUZMTEVOQlEwZzdVVUZEUlN4TFFVRkxMRU5CUVVNc1NVRkJRU3h4UWtGQlpTeEZRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNN1VVRkRha1VzUjBGQlJ6dFJRVU5JTEVsQlFVRXNjVUpCUVdVc1JVRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETzB0QlF5OUNMRVZCUTBRc1JVRkJSU3hGUVVGRkxFVkJRVVVzWTBGQll5eEZRVUZGTEVOQlEzWkNMRU5CUVVNN1NVRkZTaXhOUVVGTkxIVkNRVUYxUWl4SFFVRkhMRWRCUVVjc1JVRkJSVHRSUVVOdVF5eEpRVU5GTEVsQlFVa3NRMEZCUXl4VlFVRlhMRU5CUVVNc2IwSkJRVzlDTzFsQlEzSkRMRWxCUVVrc1EwRkJReXhWUVVGWExFTkJRVU1zTkVKQlFUUkNMRVZCUXpkRE8xbEJRMEVzVDBGQlR5eEpRVUZKTEVOQlFVTTdVMEZEWWp0UlFVVkVMRWxCUTBVc1NVRkJTU3hEUVVGRExGVkJRVmNzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUk8xbEJRelZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUk3V1VGRE1VSXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEZRVU16UWp0WlFVTkJMRTlCUVU4c1dVRkJXU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFOQlF5OUNPMUZCUTBRc1QwRkJUeXhSUVVGUkxFTkJRVU03U1VGRGJFSXNRMEZCUXl4RFFVRkRPMGxCUlVZc1RVRkJUU3h6UWtGQmMwSXNSMEZCUnl4SFFVRkhMRVZCUVVVN1VVRkRiRU1zVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrN1dVRkROMElzUTBGQlF5eERRVUZETEVsQlFVRXNNRU5CUVc5RExFVkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnFSQ3hEUVVGRExFTkJRVU1zU1VGQlFTd3JRMEZCZVVNc1JVRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZ5eERRVUZETEVOQlFVTTdVVUZEYUVVc1NVRkJTU3hoUVVGaExFVkJRVVU3V1VGRGFrSXNTVUZEUlN4SlFVRkpMRU5CUVVNc1UwRkJWU3hEUVVGRExIRkNRVUZ4UWp0blFrRkRja01zU1VGQlNTeERRVUZETEZOQlFWVXNRMEZCUXl3MlFrRkJOa0lzUlVGRE4wTTdaMEpCUTBFc1QwRkJUeXhIUVVGSExFTkJRVU03WVVGRFdqdFpRVU5FTEU5QlFVOHNSVUZCUlN4RFFVRkRPMU5CUTFnN1VVRkRSQ3hKUVVORkxFbEJRVWtzUTBGQlF5eFRRVUZWTEVOQlFVTXNjVUpCUVhGQ08xbEJRM0pETEVsQlFVa3NRMEZCUXl4VFFVRlZMRU5CUVVNc05rSkJRVFpDTEVWQlF6ZERPMWxCUTBFc1QwRkJUeXhKUVVGSkxFTkJRVU03VTBGRFlqdFJRVU5FTEU5QlFVOHNVVUZCVVN4RFFVRkRPMGxCUTJ4Q0xFTkJRVU1zUTBGQlF6dEpRVVZHTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlF6bENMRTlCUVU4c1VVRkJVU3hEUVVOaUxFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zTmtKQlFUWkNPMWxCUXpsRUxFTkJRVU1zUTBGQlF5eEpRVUZKTzFsQlEwNHNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkRVQ3hEUVVGRE8wdEJRMGc3U1VGRlJDeFBRVUZQTEZGQlFWRXNRMEZCUXp0UlFVTmtMRWxCUVVFc2VVSkJRV2xDTEVWQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0UlFVTXhReXhOUVVGTkxFTkJRVU03V1VGRFRDeDFRa0ZCZFVJc1JVRkJSVHRaUVVONlFpeEpRVUZCTEhkQ1FVRmhMRVZCUVVNc1NVRkJORUlzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZPMmRDUVVNeFJDeHRRa0ZCYlVJc1JVRkJSU3hqUVVGak8yZENRVU51UXl4dlFrRkJiMElzUlVGQlJTeGpRVUZqTzJGQlEzSkRMRU5CUVVNN1UwRkRTQ3hEUVVGRE8xRkJRMFlzYzBKQlFYTkNMRVZCUVVVN1MwRkRla0lzUTBGQlF5eERRVUZETzBGQlEwd3NRMEZCUXp0QlFYSkhSQ3h2UTBGeFIwTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByaW50TGlxdWlkQnJhbmNoID0gZXhwb3J0cy5wcmludExpcXVpZFRhZyA9IGV4cG9ydHMucHJpbnRMaXF1aWRCbG9ja0VuZCA9IGV4cG9ydHMucHJpbnRMaXF1aWRCbG9ja1N0YXJ0ID0gZXhwb3J0cy5wcmludExpcXVpZERyb3AgPSB2b2lkIDA7XG5jb25zdCBwcmV0dGllcl8xID0gcmVxdWlyZShcInByZXR0aWVyXCIpO1xuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi90eXBlc1wiKTtcbmNvbnN0IGFzdF8xID0gcmVxdWlyZShcIi4uLy4uL3BhcnNlci9hc3RcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgdXRpbHNfMiA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3V0aWxzXCIpO1xuY29uc3QgY2hpbGRyZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3ByaW50L2NoaWxkcmVuXCIpO1xuY29uc3QgTElRVUlEX1RBR1NfVEhBVF9BTFdBWVNfQlJFQUsgPSBbJ2ZvcicsICdjYXNlJ107XG5jb25zdCB7IGJ1aWxkZXJzIH0gPSBwcmV0dGllcl8xLmRvYztcbmNvbnN0IHsgZ3JvdXAsIGhhcmRsaW5lLCBpZkJyZWFrLCBpbmRlbnQsIGpvaW4sIGxpbmUsIHNvZnRsaW5lIH0gPSBidWlsZGVycztcbmZ1bmN0aW9uIHByaW50TGlxdWlkRHJvcChwYXRoLCBfb3B0aW9ucywgcHJpbnQsIHsgbGVhZGluZ1NwYWNlR3JvdXBJZCwgdHJhaWxpbmdTcGFjZUdyb3VwSWQgfSkge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgY29uc3Qgd2hpdGVzcGFjZVN0YXJ0ID0gKDAsIHV0aWxzXzIuZ2V0V2hpdGVzcGFjZVRyaW0pKG5vZGUud2hpdGVzcGFjZVN0YXJ0LCAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2UpKG5vZGUpLCBsZWFkaW5nU3BhY2VHcm91cElkKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlRW5kID0gKDAsIHV0aWxzXzIuZ2V0V2hpdGVzcGFjZVRyaW0pKG5vZGUud2hpdGVzcGFjZUVuZCwgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZlRyYWlsaW5nV2hpdGVzcGFjZSkobm9kZSksIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICBpZiAodHlwZW9mIG5vZGUubWFya3VwICE9PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCB3aGl0ZXNwYWNlID0gbm9kZS5tYXJrdXAuZmlsdGVycy5sZW5ndGggPiAwID8gbGluZSA6ICcgJztcbiAgICAgICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgICAgICd7eycsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICBpbmRlbnQoW3doaXRlc3BhY2UsIHBhdGguY2FsbChwcmludCwgJ21hcmt1cCcpXSksXG4gICAgICAgICAgICB3aGl0ZXNwYWNlLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZCxcbiAgICAgICAgICAgICd9fScsXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBjb25zdCBsaW5lcyA9ICgwLCB1dGlsc18yLm1hcmt1cExpbmVzKShub2RlLm1hcmt1cCk7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgICAgICd7eycsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICBpbmRlbnQoW2hhcmRsaW5lLCBqb2luKGhhcmRsaW5lLCBsaW5lcy5tYXAodXRpbHNfMi50cmltKSldKSxcbiAgICAgICAgICAgIGhhcmRsaW5lLFxuICAgICAgICAgICAgd2hpdGVzcGFjZUVuZCxcbiAgICAgICAgICAgICd9fScsXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAne3snLFxuICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICcgJyxcbiAgICAgICAgbm9kZS5tYXJrdXAsXG4gICAgICAgICcgJyxcbiAgICAgICAgd2hpdGVzcGFjZUVuZCxcbiAgICAgICAgJ319JyxcbiAgICBdKTtcbn1cbmV4cG9ydHMucHJpbnRMaXF1aWREcm9wID0gcHJpbnRMaXF1aWREcm9wO1xuZnVuY3Rpb24gcHJpbnRMaXF1aWRCbG9ja1N0YXJ0KHBhdGgsIGxlYWRpbmdTcGFjZUdyb3VwSWQsIHRyYWlsaW5nU3BhY2VHcm91cElkKSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUubmFtZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGxpbmVzID0gKDAsIHV0aWxzXzIubWFya3VwTGluZXMpKG5vZGUubWFya3VwKTtcbiAgICBjb25zdCB3aGl0ZXNwYWNlU3RhcnQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkobm9kZS53aGl0ZXNwYWNlU3RhcnQsIG5lZWRzQmxvY2tTdGFydExlYWRpbmdXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhayhub2RlKSwgbGVhZGluZ1NwYWNlR3JvdXBJZCk7XG4gICAgY29uc3Qgd2hpdGVzcGFjZUVuZCA9ICgwLCB1dGlsc18yLmdldFdoaXRlc3BhY2VUcmltKShub2RlLndoaXRlc3BhY2VFbmQsIG5lZWRzQmxvY2tTdGFydFRyYWlsaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSksIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICBpZiAobm9kZS5uYW1lID09PSAnbGlxdWlkJykge1xuICAgICAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAgICAgJ3slJyxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VTdGFydCxcbiAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgICAgIGluZGVudChbaGFyZGxpbmUsIGpvaW4oaGFyZGxpbmUsICgwLCB1dGlsc18yLnJlaW5kZW50KShsaW5lcywgdHJ1ZSkpXSksXG4gICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAnJX0nLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgICAgICd7JScsXG4gICAgICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgICAgICBpbmRlbnQoW2hhcmRsaW5lLCBub2RlLm5hbWUsICcgJywgam9pbihoYXJkbGluZSwgbGluZXMubWFwKHV0aWxzXzIudHJpbSkpXSksXG4gICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAnJX0nLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgY29uc3QgbWFya3VwID0gbm9kZS5tYXJrdXA7XG4gICAgcmV0dXJuIGdyb3VwKFtcbiAgICAgICAgJ3slJyxcbiAgICAgICAgd2hpdGVzcGFjZVN0YXJ0LFxuICAgICAgICAnICcsXG4gICAgICAgIG5vZGUubmFtZSxcbiAgICAgICAgbWFya3VwID8gYCAke21hcmt1cH1gIDogJycsXG4gICAgICAgICcgJyxcbiAgICAgICAgd2hpdGVzcGFjZUVuZCxcbiAgICAgICAgJyV9JyxcbiAgICBdKTtcbn1cbmV4cG9ydHMucHJpbnRMaXF1aWRCbG9ja1N0YXJ0ID0gcHJpbnRMaXF1aWRCbG9ja1N0YXJ0O1xuZnVuY3Rpb24gcHJpbnRMaXF1aWRCbG9ja0VuZChwYXRoLCBsZWFkaW5nU3BhY2VHcm91cElkLCB0cmFpbGluZ1NwYWNlR3JvdXBJZCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4gfHwgIW5vZGUuYmxvY2tFbmRQb3NpdGlvbilcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VTdGFydCA9ICgwLCB1dGlsc18yLmdldFdoaXRlc3BhY2VUcmltKSgoX2EgPSBub2RlLmRlbGltaXRlcldoaXRlc3BhY2VTdGFydCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycsIG5lZWRzQmxvY2tFbmRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSksIGxlYWRpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGNvbnN0IHdoaXRlc3BhY2VFbmQgPSAoMCwgdXRpbHNfMi5nZXRXaGl0ZXNwYWNlVHJpbSkoKF9iID0gbm9kZS5kZWxpbWl0ZXJXaGl0ZXNwYWNlRW5kKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAnJywgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZlRyYWlsaW5nV2hpdGVzcGFjZSkobm9kZSksIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAneyUnLFxuICAgICAgICB3aGl0ZXNwYWNlU3RhcnQsXG4gICAgICAgIGAgZW5kJHtub2RlLm5hbWV9IGAsXG4gICAgICAgIHdoaXRlc3BhY2VFbmQsXG4gICAgICAgICclfScsXG4gICAgXSk7XG59XG5leHBvcnRzLnByaW50TGlxdWlkQmxvY2tFbmQgPSBwcmludExpcXVpZEJsb2NrRW5kO1xuZnVuY3Rpb24gcHJpbnRMaXF1aWRUYWcocGF0aCwgb3B0aW9ucywgcHJpbnQsIHsgbGVhZGluZ1NwYWNlR3JvdXBJZCwgdHJhaWxpbmdTcGFjZUdyb3VwSWQgfSA9IHt9KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4gfHwgIW5vZGUuYmxvY2tFbmRQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gcHJpbnRMaXF1aWRCbG9ja1N0YXJ0KHBhdGgsIGxlYWRpbmdTcGFjZUdyb3VwSWQsIHRyYWlsaW5nU3BhY2VHcm91cElkKTtcbiAgICB9XG4gICAgY29uc3QgdGFnR3JvdXBJZCA9IFN5bWJvbCgndGFnLWdyb3VwJyk7XG4gICAgY29uc3QgYmxvY2tTdGFydCA9IHByaW50TGlxdWlkQmxvY2tTdGFydChwYXRoLCBsZWFkaW5nU3BhY2VHcm91cElkLCB0YWdHcm91cElkKTtcbiAgICBjb25zdCBibG9ja0VuZCA9IHByaW50TGlxdWlkQmxvY2tFbmQocGF0aCwgdGFnR3JvdXBJZCwgdHJhaWxpbmdTcGFjZUdyb3VwSWQpO1xuICAgIGxldCBib2R5ID0gW107XG4gICAgaWYgKCgwLCBhc3RfMS5pc0JyYW5jaGVkVGFnKShub2RlKSkge1xuICAgICAgICBib2R5ID0gY2xlYW5Eb2MocGF0aC5tYXAoKHApID0+IHByaW50KHAsIHtcbiAgICAgICAgICAgIGxlYWRpbmdTcGFjZUdyb3VwSWQ6IHRhZ0dyb3VwSWQsXG4gICAgICAgICAgICB0cmFpbGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgfSksICdjaGlsZHJlbicpKTtcbiAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ2Nhc2UnKVxuICAgICAgICAgICAgYm9keSA9IGluZGVudChib2R5KTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJvZHkgPSBpbmRlbnQoW1xuICAgICAgICAgICAgaW5uZXJMZWFkaW5nV2hpdGVzcGFjZShub2RlKSxcbiAgICAgICAgICAgICgwLCBjaGlsZHJlbl8xLnByaW50Q2hpbGRyZW4pKHBhdGgsIG9wdGlvbnMsIHByaW50LCB7XG4gICAgICAgICAgICAgICAgbGVhZGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgICAgICAgICB0cmFpbGluZ1NwYWNlR3JvdXBJZDogdGFnR3JvdXBJZCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGdyb3VwKFtibG9ja1N0YXJ0LCBib2R5LCBpbm5lclRyYWlsaW5nV2hpdGVzcGFjZShub2RlKSwgYmxvY2tFbmRdLCB7XG4gICAgICAgIGlkOiB0YWdHcm91cElkLFxuICAgICAgICBzaG91bGRCcmVhazogTElRVUlEX1RBR1NfVEhBVF9BTFdBWVNfQlJFQUsuaW5jbHVkZXMobm9kZS5uYW1lKSB8fFxuICAgICAgICAgICAgKDAsIHV0aWxzXzIub3JpZ2luYWxseUhhZExpbmVCcmVha3MpKHBhdGgsIG9wdGlvbnMpIHx8XG4gICAgICAgICAgICBpc0F0dHJpYnV0ZU5vZGUobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18yLmlzRGVlcGx5TmVzdGVkKShub2RlKSxcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJpbnRMaXF1aWRUYWcgPSBwcmludExpcXVpZFRhZztcbmZ1bmN0aW9uIGlzQXR0cmlidXRlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMi5pc0h0bWxOb2RlKShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5hdHRyaWJ1dGVzLmluZGV4T2Yobm9kZSkgIT09IC0xKTtcbn1cbmZ1bmN0aW9uIGlubmVyTGVhZGluZ1doaXRlc3BhY2Uobm9kZSkge1xuICAgIGlmICghbm9kZS5maXJzdENoaWxkKSB7XG4gICAgICAgIGlmIChub2RlLmlzRGFuZ2xpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlICYmIG5vZGUuaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5maXJzdENoaWxkLmhhc0xlYWRpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgIG5vZGUuZmlyc3RDaGlsZC5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlKSB7XG4gICAgICAgIHJldHVybiBsaW5lO1xuICAgIH1cbiAgICByZXR1cm4gc29mdGxpbmU7XG59XG5mdW5jdGlvbiBpbm5lclRyYWlsaW5nV2hpdGVzcGFjZShub2RlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoIHx8XG4gICAgICAgICFub2RlLmJsb2NrRW5kUG9zaXRpb24gfHxcbiAgICAgICAgIW5vZGUubGFzdENoaWxkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKG5vZGUubGFzdENoaWxkLmhhc1RyYWlsaW5nV2hpdGVzcGFjZSAmJlxuICAgICAgICBub2RlLmxhc3RDaGlsZC5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSkge1xuICAgICAgICByZXR1cm4gbGluZTtcbiAgICB9XG4gICAgcmV0dXJuIHNvZnRsaW5lO1xufVxuZnVuY3Rpb24gcHJpbnRMaXF1aWREZWZhdWx0QnJhbmNoKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKSB7XG4gICAgY29uc3QgYnJhbmNoID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IHBhcmVudE5vZGUgPSBwYXRoLmdldFBhcmVudE5vZGUoKTtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZVNwYWNlID0gKDAsIHV0aWxzXzIuaXNFbXB0eSkoYnJhbmNoLmNoaWxkcmVuKSAmJiBwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMTtcbiAgICBpZiAoc2hvdWxkQ29sbGFwc2VTcGFjZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGlzQnJhbmNoRW1wdHlXaXRob3V0U3BhY2UgPSAoMCwgdXRpbHNfMi5pc0VtcHR5KShicmFuY2guY2hpbGRyZW4pICYmICFicmFuY2guaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlO1xuICAgIGlmIChpc0JyYW5jaEVtcHR5V2l0aG91dFNwYWNlKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgaWYgKGJyYW5jaC5oYXNEYW5nbGluZ1doaXRlc3BhY2UpIHtcbiAgICAgICAgcmV0dXJuIGlmQnJlYWsoJycsICcgJyk7XG4gICAgfVxuICAgIHJldHVybiBpbmRlbnQoW1xuICAgICAgICBpbm5lckxlYWRpbmdXaGl0ZXNwYWNlKHBhcmVudE5vZGUpLFxuICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyksXG4gICAgXSk7XG59XG5mdW5jdGlvbiBwcmludExpcXVpZEJyYW5jaChwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncykge1xuICAgIGNvbnN0IGJyYW5jaCA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBpc0RlZmF1bHRCcmFuY2ggPSAhYnJhbmNoLm5hbWU7XG4gICAgaWYgKGlzRGVmYXVsdEJyYW5jaCkge1xuICAgICAgICByZXR1cm4gcHJpbnRMaXF1aWREZWZhdWx0QnJhbmNoKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKTtcbiAgICB9XG4gICAgY29uc3QgbGVmdFNpYmxpbmcgPSBicmFuY2gucHJldjtcbiAgICBjb25zdCBzaG91bGRDb2xsYXBzZVNwYWNlID0gbGVmdFNpYmxpbmcgJiYgKDAsIHV0aWxzXzIuaXNFbXB0eSkobGVmdFNpYmxpbmcuY2hpbGRyZW4pO1xuICAgIGNvbnN0IG91dGVyTGVhZGluZ1doaXRlc3BhY2UgPSBicmFuY2guaGFzTGVhZGluZ1doaXRlc3BhY2UgJiYgIXNob3VsZENvbGxhcHNlU3BhY2UgPyBsaW5lIDogc29mdGxpbmU7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgb3V0ZXJMZWFkaW5nV2hpdGVzcGFjZSxcbiAgICAgICAgcHJpbnRMaXF1aWRCbG9ja1N0YXJ0KHBhdGgsIGFyZ3MubGVhZGluZ1NwYWNlR3JvdXBJZCwgYXJncy50cmFpbGluZ1NwYWNlR3JvdXBJZCksXG4gICAgICAgIGluZGVudChbXG4gICAgICAgICAgICBpbm5lckxlYWRpbmdXaGl0ZXNwYWNlKGJyYW5jaCksXG4gICAgICAgICAgICAoMCwgY2hpbGRyZW5fMS5wcmludENoaWxkcmVuKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyksXG4gICAgICAgIF0pLFxuICAgIF07XG59XG5leHBvcnRzLnByaW50TGlxdWlkQnJhbmNoID0gcHJpbnRMaXF1aWRCcmFuY2g7XG5mdW5jdGlvbiBuZWVkc0Jsb2NrU3RhcnRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOiB7XG4gICAgICAgICAgICByZXR1cm4gKCFpc0F0dHJpYnV0ZU5vZGUobm9kZSkgJiYgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRCcmFuY2g6IHtcbiAgICAgICAgICAgIHJldHVybiAoIWlzQXR0cmlidXRlTm9kZShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18xLmFzc2VydE5ldmVyKShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIG5lZWRzQmxvY2tTdGFydFRyYWlsaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsobm9kZSkge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOiB7XG4gICAgICAgICAgICBpZiAoKDAsIGFzdF8xLmlzQnJhbmNoZWRUYWcpKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lZWRzQmxvY2tTdGFydExlYWRpbmdXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhayhub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmlzRW1wdHkpKG5vZGUuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mRGFuZ2xpbmdXaGl0ZXNwYWNlKShub2RlKVxuICAgICAgICAgICAgICAgIDogKDAsIHV0aWxzXzIuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkQnJhbmNoOiB7XG4gICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGVOb2RlKG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5maXJzdENoaWxkXG4gICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfMi5oYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2UpKG5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgICAgICAgICA6ICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZEYW5nbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfMS5hc3NlcnROZXZlcikobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBuZWVkc0Jsb2NrRW5kTGVhZGluZ1doaXRlc3BhY2VTdHJpcHBpbmdPbkJyZWFrKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgb25seSBjYWxsIG5lZWRzQmxvY2tFbmRMZWFkaW5nV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsgZm9yIHRhZ3MgdGhhdCBoYXZlIGNsb3NpbmcgdGFncycpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0F0dHJpYnV0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIGlmICgoMCwgYXN0XzEuaXNCcmFuY2hlZFRhZykobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUubGFzdENoaWxkKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoKDAsIHV0aWxzXzIuaXNFbXB0eSkobm9kZS5jaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZEYW5nbGluZ1doaXRlc3BhY2UpKG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc18yLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUubGFzdENoaWxkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhbkRvYyhkb2MpIHtcbiAgICByZXR1cm4gZG9jLmZpbHRlcigoeCkgPT4geCAhPT0gJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYkdseGRXbGtMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpwYm5RdmJHbHhkV2xrTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096dEJRVUZCTEhWRFFVRTJRenRCUVVNM1F5eHRRMEZUYVVJN1FVRkRha0lzYzBOQlFUWkRPMEZCUXpkRExHMURRVUZ6UXp0QlFVVjBReXd5UTBGWmVVSTdRVUZGZWtJc2RVUkJRWGxFTzBGQlJYcEVMRTFCUVUwc05rSkJRVFpDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRmRFUXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVGSExHTkJRVWNzUTBGQlF6dEJRVU42UWl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzVVVGQlVTeEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUlRWRkxGTkJRV2RDTEdWQlFXVXNRMEZETjBJc1NVRkJiVUlzUlVGRGJrSXNVVUZCTmtJc1JVRkROMElzUzBGQmIwSXNSVUZEY0VJc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4dlFrRkJiMElzUlVGQmNVSTdTVUZGYUVVc1RVRkJUU3hKUVVGSkxFZEJRV1VzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCWjBJc1EwRkJRenRKUVVOMlJDeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkJMSGxDUVVGcFFpeEZRVU4yUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hGUVVOd1FpeEpRVUZCTERSRFFVRnZReXhGUVVGRExFbEJRVWtzUTBGQlF5eEZRVU14UXl4dFFrRkJiVUlzUTBGRGNFSXNRMEZCUXp0SlFVTkdMRTFCUVUwc1lVRkJZU3hIUVVGSExFbEJRVUVzZVVKQlFXbENMRVZCUTNKRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlEyeENMRWxCUVVFc05rTkJRWEZETEVWQlFVTXNTVUZCU1N4RFFVRkRMRVZCUXpORExHOUNRVUZ2UWl4RFFVTnlRaXhEUVVGRE8wbEJSVVlzU1VGQlNTeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk8xRkJRMjVETEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRPMUZCUXk5RUxFOUJRVThzUzBGQlN5eERRVUZETzFsQlExZ3NTVUZCU1R0WlFVTktMR1ZCUVdVN1dVRkRaaXhOUVVGTkxFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTm9SQ3hWUVVGVk8xbEJRMVlzWVVGQllUdFpRVU5pTEVsQlFVazdVMEZEVEN4RFFVRkRMRU5CUVVNN1MwRkRTanRKUVVkRUxFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVRXNiVUpCUVZjc1JVRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdTVUZEZGtNc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0UlFVTndRaXhQUVVGUExFdEJRVXNzUTBGQlF6dFpRVU5ZTEVsQlFVazdXVUZEU2l4bFFVRmxPMWxCUTJZc1RVRkJUU3hEUVVGRExFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRia1FzVVVGQlVUdFpRVU5TTEdGQlFXRTdXVUZEWWl4SlFVRkpPMU5CUTB3c1EwRkJReXhEUVVGRE8wdEJRMG83U1VGRlJDeFBRVUZQTEV0QlFVc3NRMEZCUXp0UlFVTllMRWxCUVVrN1VVRkRTaXhsUVVGbE8xRkJRMllzUjBGQlJ6dFJRVU5JTEVsQlFVa3NRMEZCUXl4TlFVRk5PMUZCUTFnc1IwRkJSenRSUVVOSUxHRkJRV0U3VVVGRFlpeEpRVUZKTzB0QlEwd3NRMEZCUXl4RFFVRkRPMEZCUTB3c1EwRkJRenRCUVhCRVJDd3dRMEZ2UkVNN1FVRkZSQ3hUUVVGblFpeHhRa0ZCY1VJc1EwRkRia01zU1VGQmRVTXNSVUZEZGtNc2JVSkJRV3RFTEVWQlEyeEVMRzlDUVVGdFJEdEpRVVZ1UkN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZETjBJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkZNVUlzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCUVN4dFFrRkJWeXhGUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVVjJReXhOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEhsQ1FVRnBRaXhGUVVOMlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVTndRaXhuUkVGQlowUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkRkRVFzYlVKQlFXMUNMRU5CUTNCQ0xFTkJRVU03U1VGRFJpeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkJMSGxDUVVGcFFpeEZRVU55UXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVOc1FpeHBSRUZCYVVRc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGRGRrUXNiMEpCUVc5Q0xFTkJRM0pDTEVOQlFVTTdTVUZGUml4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVTeEZRVUZGTzFGQlF6RkNMRTlCUVU4c1MwRkJTeXhEUVVGRE8xbEJRMWdzU1VGQlNUdFpRVU5LTEdWQlFXVTdXVUZEWml4SFFVRkhPMWxCUTBnc1NVRkJTU3hEUVVGRExFbEJRVWs3V1VGRFZDeE5RVUZOTEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZCTEdkQ1FVRlJMRVZCUVVNc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTjZSQ3hSUVVGUk8xbEJRMUlzWVVGQllUdFpRVU5pTEVsQlFVazdVMEZEVEN4RFFVRkRMRU5CUVVNN1MwRkRTanRKUVVWRUxFbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVN1VVRkRjRUlzVDBGQlR5eExRVUZMTEVOQlFVTTdXVUZEV0N4SlFVRkpPMWxCUTBvc1pVRkJaVHRaUVVObUxFMUJRVTBzUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUTI1RkxGRkJRVkU3V1VGRFVpeGhRVUZoTzFsQlEySXNTVUZCU1R0VFFVTk1MRU5CUVVNc1EwRkJRenRMUVVOS08wbEJSVVFzVFVGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVNelFpeFBRVUZQTEV0QlFVc3NRMEZCUXp0UlFVTllMRWxCUVVrN1VVRkRTaXhsUVVGbE8xRkJRMllzUjBGQlJ6dFJRVU5JTEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUTFRc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEUxQlFVMHNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRekZDTEVkQlFVYzdVVUZEU0N4aFFVRmhPMUZCUTJJc1NVRkJTVHRMUVVOTUxFTkJRVU1zUTBGQlF6dEJRVU5NTEVOQlFVTTdRVUY0UkVRc2MwUkJkMFJETzBGQlJVUXNVMEZCWjBJc2JVSkJRVzFDTEVOQlEycERMRWxCUVhkQ0xFVkJRM2hDTEcxQ1FVRnJSQ3hGUVVOc1JDeHZRa0ZCYlVRN08wbEJSVzVFTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU0zUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VVVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXp0SlFVTjRSQ3hOUVVGTkxHVkJRV1VzUjBGQlJ5eEpRVUZCTEhsQ1FVRnBRaXhGUVVOMlF5eE5RVUZCTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzYlVOQlFVa3NSVUZCUlN4RlFVTnVReXc0UTBGQk9FTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkRjRVFzYlVKQlFXMUNMRU5CUTNCQ0xFTkJRVU03U1VGRFJpeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkJMSGxDUVVGcFFpeEZRVU55UXl4TlFVRkJMRWxCUVVrc1EwRkJReXh6UWtGQmMwSXNiVU5CUVVrc1JVRkJSU3hGUVVOcVF5eEpRVUZCTERaRFFVRnhReXhGUVVGRExFbEJRVWtzUTBGQlF5eEZRVU16UXl4dlFrRkJiMElzUTBGRGNrSXNRMEZCUXp0SlFVTkdMRTlCUVU4c1MwRkJTeXhEUVVGRE8xRkJRMWdzU1VGQlNUdFJRVU5LTEdWQlFXVTdVVUZEWml4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWM3VVVGRGJrSXNZVUZCWVR0UlFVTmlMRWxCUVVrN1MwRkRUQ3hEUVVGRExFTkJRVU03UVVGRFRDeERRVUZETzBGQmVFSkVMR3RFUVhkQ1F6dEJRVVZFTEZOQlFXZENMR05CUVdNc1EwRkROVUlzU1VGQmQwSXNSVUZEZUVJc1QwRkJORUlzUlVGRE5VSXNTMEZCYjBJc1JVRkRjRUlzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3h2UWtGQmIwSXNTMEZCZDBJc1JVRkJSVHRKUVVWeVJTeE5RVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03U1VGRE4wSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3VVVGRE5VTXNUMEZCVHl4eFFrRkJjVUlzUTBGRE1VSXNTVUZCU1N4RlFVTktMRzFDUVVGdFFpeEZRVU51UWl4dlFrRkJiMElzUTBGRGNrSXNRMEZCUXp0TFFVTklPMGxCUTBRc1RVRkJUU3hWUVVGVkxFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMGxCUTNaRExFMUJRVTBzVlVGQlZTeEhRVUZITEhGQ1FVRnhRaXhEUVVOMFF5eEpRVUZKTEVWQlEwb3NiVUpCUVcxQ0xFVkJRMjVDTEZWQlFWVXNRMEZEV0N4RFFVRkRPMGxCUTBZc1RVRkJUU3hSUVVGUkxFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1NVRkJTU3hGUVVGRkxGVkJRVlVzUlVGQlJTeHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wbEJSVGRGTEVsQlFVa3NTVUZCU1N4SFFVRlJMRVZCUVVVc1EwRkJRenRKUVVWdVFpeEpRVUZKTEVsQlFVRXNiVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdFJRVU4yUWl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVOaUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlEwNHNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVOS0xFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVTdXVUZEVUN4dFFrRkJiVUlzUlVGQlJTeFZRVUZWTzFsQlF5OUNMRzlDUVVGdlFpeEZRVUZGTEZWQlFWVTdVMEZEYWtNc1EwRkJReXhGUVVOS0xGVkJRVlVzUTBGRFdDeERRVU5HTEVOQlFVTTdVVUZEUml4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRUdFpRVUZGTEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGREwwTTdVMEZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0UlFVTnVReXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETzFsQlExb3NjMEpCUVhOQ0xFTkJRVU1zU1VGQlNTeERRVUZETzFsQlF6VkNMRWxCUVVFc2QwSkJRV0VzUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSVHRuUWtGRGJFTXNiVUpCUVcxQ0xFVkJRVVVzVlVGQlZUdG5Ra0ZETDBJc2IwSkJRVzlDTEVWQlFVVXNWVUZCVlR0aFFVTnFReXhEUVVGRE8xTkJRMGdzUTBGQlF5eERRVUZETzB0QlEwbzdTVUZGUkN4UFFVRlBMRXRCUVVzc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVWQlFVVXNkVUpCUVhWQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRVZCUVVVN1VVRkRlRVVzUlVGQlJTeEZRVUZGTEZWQlFWVTdVVUZEWkN4WFFVRlhMRVZCUTFRc05rSkJRVFpDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRGFrUXNTVUZCUVN3clFrRkJkVUlzUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMWxCUTNSRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZEY2tJc1NVRkJRU3h6UWtGQll5eEZRVUZETEVsQlFVa3NRMEZCUXp0TFFVTjJRaXhEUVVGRExFTkJRVU03UVVGRFRDeERRVUZETzBGQmRFUkVMSGREUVhORVF6dEJRVVZFTEZOQlFWTXNaVUZCWlN4RFFVRkRMRWxCUVdVN1NVRkRkRU1zVDBGQlR5eERRVU5NTEVsQlFVRXNhMEpCUVZVc1JVRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzFGQlF6TkNMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGRGFFUXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGVExITkNRVUZ6UWl4RFFVRkRMRWxCUVRoQ08wbEJRelZFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xRkJRM0JDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFpRVU53UlN4UFFVRlBMRWxCUVVrc1EwRkJRenRUUVVOaU8yRkJRVTA3V1VGRFRDeFBRVUZQTEVWQlFVVXNRMEZCUXp0VFFVTllPMHRCUTBZN1NVRkZSQ3hKUVVORkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNiMEpCUVc5Q08xRkJRM0JETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc05FSkJRVFJDTEVWQlF6VkRPMUZCUTBFc1QwRkJUeXhKUVVGSkxFTkJRVU03UzBGRFlqdEpRVVZFTEU5QlFVOHNVVUZCVVN4RFFVRkRPMEZCUTJ4Q0xFTkJRVU03UVVGRlJDeFRRVUZUTEhWQ1FVRjFRaXhEUVVGRExFbEJRVGhDTzBsQlF6ZEVMRWxCUTBVc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmxCUVZrN1VVRkRjRU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ08xRkJRM1JDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkRaanRSUVVOQkxFOUJRVThzUlVGQlJTeERRVUZETzB0QlExZzdTVUZGUkN4SlFVTkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zY1VKQlFYRkNPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNOa0pCUVRaQ0xFVkJRelZETzFGQlEwRXNUMEZCVHl4SlFVRkpMRU5CUVVNN1MwRkRZanRKUVVWRUxFOUJRVThzVVVGQlVTeERRVUZETzBGQlEyeENMRU5CUVVNN1FVRkZSQ3hUUVVGVExIZENRVUYzUWl4RFFVTXZRaXhKUVVFeVFpeEZRVU16UWl4UFFVRTBRaXhGUVVNMVFpeExRVUZ2UWl4RlFVTndRaXhKUVVGMVFqdEpRVVYyUWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdTVUZETDBJc1RVRkJUU3hWUVVGVkxFZEJRV01zU1VGQlNTeERRVUZETEdGQlFXRXNSVUZCVXl4RFFVRkRPMGxCVFRGRUxFMUJRVTBzYlVKQlFXMUNMRWRCUTNaQ0xFbEJRVUVzWlVGQlR5eEZRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hWUVVGVkxFTkJRVU1zVVVGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRhRVVzU1VGQlNTeHRRa0ZCYlVJN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVTF1UXl4TlFVRk5MSGxDUVVGNVFpeEhRVU0zUWl4SlFVRkJMR1ZCUVU4c1JVRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdTVUZETlVRc1NVRkJTU3g1UWtGQmVVSTdVVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVUxNlF5eEpRVUZKTEUxQlFVMHNRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFJRVU5vUXl4UFFVRlBMRTlCUVU4c1EwRkJReXhGUVVGRkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTMEZEZWtJN1NVRkpSQ3hQUVVGUExFMUJRVTBzUTBGQlF6dFJRVU5hTEhOQ1FVRnpRaXhEUVVGRExGVkJRVlVzUTBGQlF6dFJRVU5zUXl4SlFVRkJMSGRDUVVGaExFVkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRE8wdEJRekZETEVOQlFVTXNRMEZCUXp0QlFVTk1MRU5CUVVNN1FVRkZSQ3hUUVVGblFpeHBRa0ZCYVVJc1EwRkRMMElzU1VGQk1rSXNSVUZETTBJc1QwRkJORUlzUlVGRE5VSXNTMEZCYjBJc1JVRkRjRUlzU1VGQmRVSTdTVUZGZGtJc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMGxCUXk5Q0xFMUJRVTBzWlVGQlpTeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJRenRKUVVWeVF5eEpRVUZKTEdWQlFXVXNSVUZCUlR0UlFVTnVRaXhQUVVGUExIZENRVUYzUWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpkRU8wbEJSVVFzVFVGQlRTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVdkRExFTkJRVU03U1VGSk5VUXNUVUZCVFN4dFFrRkJiVUlzUjBGQlJ5eFhRVUZYTEVsQlFVa3NTVUZCUVN4bFFVRlBMRVZCUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBsQlEzcEZMRTFCUVUwc2MwSkJRWE5DTEVkQlF6RkNMRTFCUVUwc1EwRkJReXh2UWtGQmIwSXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF6dEpRVVY0UlN4UFFVRlBPMUZCUTB3c2MwSkJRWE5DTzFGQlEzUkNMSEZDUVVGeFFpeERRVU51UWl4SlFVRTJRaXhGUVVNM1FpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFVkJRM2hDTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGRE1VSTdVVUZEUkN4TlFVRk5MRU5CUVVNN1dVRkRUQ3h6UWtGQmMwSXNRMEZCUXl4TlFVRk5MRU5CUVVNN1dVRkRPVUlzU1VGQlFTeDNRa0ZCWVN4RlFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXp0VFFVTXhReXhEUVVGRE8wdEJRMGdzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZxUTBRc09FTkJhVU5ETzBGQlJVUXNVMEZCVXl4blJFRkJaMFFzUTBGRGRrUXNTVUZCT0VJN1NVRkZPVUlzVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMUZCUTJwQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRaUVVONFFpeFBRVUZQTEVOQlEwd3NRMEZCUXl4bFFVRmxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlFTdzBRMEZCYjBNc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGRGNrVXNRMEZCUXp0VFFVTklPMUZCUTBRc1MwRkJTeXhwUWtGQlV5eERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMWxCUXpOQ0xFOUJRVThzUTBGRFRDeERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJkMElzUTBGQlF6dG5Ra0ZETDBNc1NVRkJRU3cwUTBGQmIwTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkRNME1zUTBGQlF6dFRRVU5JTzFGQlEwUXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRVQ3hQUVVGUExFbEJRVUVzYlVKQlFWY3NSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVNeFFqdExRVU5HTzBGQlEwZ3NRMEZCUXp0QlFVVkVMRk5CUVZNc2FVUkJRV2xFTEVOQlEzaEVMRWxCUVRoQ08wbEJSVGxDTEZGQlFWRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVOcVFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRGVFSXNTVUZCU1N4SlFVRkJMRzFDUVVGaExFVkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVTdaMEpCUTNaQ0xFOUJRVThzWjBSQlFXZEVMRU5CUTNKRUxFbEJRVWtzUTBGQlF5eFZRVUV5UWl4RFFVTnFReXhEUVVGRE8yRkJRMGc3V1VGRlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSVHRuUWtGRGJFSXNUMEZCVHl4SlFVRkJMRFpEUVVGeFF5eEZRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMkZCUTNCRU8xbEJSVVFzVDBGQlR5eEpRVUZCTEdWQlFVOHNSVUZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8yZENRVU16UWl4RFFVRkRMRU5CUVVNc1NVRkJRU3cyUTBGQmNVTXNSVUZCUXl4SlFVRkpMRU5CUVVNN1owSkJRemRETEVOQlFVTXNRMEZCUXl4SlFVRkJMRFJEUVVGdlF5eEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlhMRU5CUVVNc1EwRkJRenRUUVVNMVJEdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFpRVU16UWl4SlFVRkpMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQmQwSXNRMEZCUXl4RlFVRkZPMmRDUVVOc1JDeFBRVUZQTEV0QlFVc3NRMEZCUXp0aFFVTmtPMWxCUlVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZUdG5Ra0ZEY0VJc1EwRkJReXhEUVVGRExFbEJRVUVzTkVOQlFXOURMRVZCUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF6dG5Ra0ZEZGtRc1EwRkJReXhEUVVGRExFbEJRVUVzTmtOQlFYRkRMRVZCUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VTBGRGFrUTdVVUZGUkN4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVOUUxFOUJRVThzU1VGQlFTeHRRa0ZCVnl4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRekZDTzB0QlEwWTdRVUZEU0N4RFFVRkRPMEZCUlVRc1UwRkJVeXc0UTBGQk9FTXNRMEZCUXl4SlFVRmxPMGxCUTNKRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMUZCUTJ4Q0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlEySXNhVWRCUVdsSExFTkJRMnhITEVOQlFVTTdTMEZEU0R0VFFVRk5MRWxCUVVrc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzFGQlEyaERMRTlCUVU4c1MwRkJTeXhEUVVGRE8wdEJRMlE3VTBGQlRTeEpRVUZKTEVsQlFVRXNiVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdFJRVU01UWl4UFFVRlBMRWxCUVVFc05rTkJRWEZETEVWQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZVc1EwRkJReXhEUVVGRE8wdEJReTlFTzFOQlFVMHNTVUZCU1N4SlFVRkJMR1ZCUVU4c1JVRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdVVUZEYWtNc1QwRkJUeXhKUVVGQkxEWkRRVUZ4UXl4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRM0JFTzFOQlFVMDdVVUZEVEN4UFFVRlBMRWxCUVVFc05rTkJRWEZETEVWQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZVc1EwRkJReXhEUVVGRE8wdEJReTlFTzBGQlEwZ3NRMEZCUXp0QlFVVkVMRk5CUVZNc1VVRkJVU3hEUVVGRExFZEJRVlU3U1VGRE1VSXNUMEZCVHl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGNrTXNRMEZCUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXROb2RlQ29udGVudCA9IGV4cG9ydHMucHJpbnRPcGVuaW5nVGFnRW5kTWFya2VyID0gZXhwb3J0cy5wcmludE9wZW5pbmdUYWdTdGFydE1hcmtlciA9IGV4cG9ydHMucHJpbnRPcGVuaW5nVGFnUHJlZml4ID0gZXhwb3J0cy5wcmludE9wZW5pbmdUYWdTdGFydCA9IGV4cG9ydHMucHJpbnRPcGVuaW5nVGFnID0gZXhwb3J0cy5uZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlciA9IGV4cG9ydHMubmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIgPSBleHBvcnRzLm5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIgPSBleHBvcnRzLm5lZWRzVG9Cb3Jyb3dMYXN0Q2hpbGRDbG9zaW5nVGFnRW5kTWFya2VyID0gZXhwb3J0cy5uZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIgPSBleHBvcnRzLnByaW50Q2xvc2luZ1RhZ0VuZE1hcmtlciA9IGV4cG9ydHMucHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIgPSBleHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCA9IGV4cG9ydHMucHJpbnRDbG9zaW5nVGFnRW5kID0gZXhwb3J0cy5wcmludENsb3NpbmdUYWdTdGFydCA9IGV4cG9ydHMucHJpbnRDbG9zaW5nVGFnID0gdm9pZCAwO1xuY29uc3QgcHJldHRpZXJfMSA9IHJlcXVpcmUoXCJwcmV0dGllclwiKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHNcIik7XG5jb25zdCB7IGJ1aWxkZXJzOiB7IGJyZWFrUGFyZW50LCBpbmRlbnQsIGpvaW4sIGxpbmUsIHNvZnRsaW5lLCBoYXJkbGluZSB9LCB9ID0gcHJldHRpZXJfMS5kb2M7XG5jb25zdCB7IHJlcGxhY2VUZXh0RW5kT2ZMaW5lIH0gPSBwcmV0dGllcl8xLmRvYy51dGlscztcbmZ1bmN0aW9uIHByaW50Q2xvc2luZ1RhZyhub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgKDAsIHV0aWxzXzEuaGFzTm9DbG9zZU1hcmtlcikobm9kZSkgPyAnJyA6IHByaW50Q2xvc2luZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBwcmludENsb3NpbmdUYWdFbmQobm9kZSwgb3B0aW9ucyksXG4gICAgXTtcbn1cbmV4cG9ydHMucHJpbnRDbG9zaW5nVGFnID0gcHJpbnRDbG9zaW5nVGFnO1xuZnVuY3Rpb24gcHJpbnRDbG9zaW5nVGFnU3RhcnQobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUubGFzdENoaWxkKVxuICAgICAgICA/ICcnXG4gICAgICAgIDogW1xuICAgICAgICAgICAgcHJpbnRDbG9zaW5nVGFnUHJlZml4KG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICAgICAgcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSwgb3B0aW9ucyksXG4gICAgICAgIF07XG59XG5leHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N0YXJ0ID0gcHJpbnRDbG9zaW5nVGFnU3RhcnQ7XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWdFbmQobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAobm9kZS5uZXh0XG4gICAgICAgID8gbmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUubmV4dClcbiAgICAgICAgOiBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlLnBhcmVudE5vZGUpKVxuICAgICAgICA/ICcnXG4gICAgICAgIDogW1xuICAgICAgICAgICAgcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICAgICAgcHJpbnRDbG9zaW5nVGFnU3VmZml4KG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBdO1xufVxuZXhwb3J0cy5wcmludENsb3NpbmdUYWdFbmQgPSBwcmludENsb3NpbmdUYWdFbmQ7XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWdQcmVmaXgobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlKVxuICAgICAgICA/IHByaW50Q2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlLmxhc3RDaGlsZCwgb3B0aW9ucylcbiAgICAgICAgOiAnJztcbn1cbmZ1bmN0aW9uIHByaW50Q2xvc2luZ1RhZ1N1ZmZpeChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSlcbiAgICAgICAgPyBwcmludENsb3NpbmdUYWdTdGFydE1hcmtlcihub2RlLnBhcmVudE5vZGUsIG9wdGlvbnMpXG4gICAgICAgIDogbmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIobm9kZSlcbiAgICAgICAgICAgID8gcHJpbnRPcGVuaW5nVGFnU3RhcnRNYXJrZXIobm9kZS5uZXh0KVxuICAgICAgICAgICAgOiAnJztcbn1cbmV4cG9ydHMucHJpbnRDbG9zaW5nVGFnU3VmZml4ID0gcHJpbnRDbG9zaW5nVGFnU3VmZml4O1xuZnVuY3Rpb24gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmIChzaG91bGROb3RQcmludENsb3NpbmdUYWcobm9kZSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8LyR7bm9kZS5uYW1lfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5uYW1lLm1hcmt1cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDwve3sgJHtub2RlLm5hbWUubWFya3VwLnRyaW0oKX0gfX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8L3t7ICR7bm9kZS5uYW1lLm1hcmt1cC5yYXdTb3VyY2V9IH19YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG5leHBvcnRzLnByaW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyID0gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXI7XG5mdW5jdGlvbiBwcmludENsb3NpbmdUYWdFbmRNYXJrZXIobm9kZSwgb3B0aW9ucykge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGlmIChzaG91bGROb3RQcmludENsb3NpbmdUYWcobm9kZSwgb3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiAnLz4nO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJz4nO1xuICAgIH1cbn1cbmV4cG9ydHMucHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyID0gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyO1xuZnVuY3Rpb24gc2hvdWxkTm90UHJpbnRDbG9zaW5nVGFnKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKCEoMCwgdXRpbHNfMS5oYXNOb0Nsb3NlTWFya2VyKShub2RlKSAmJlxuICAgICAgICAhbm9kZS5ibG9ja0VuZFBvc2l0aW9uICYmXG4gICAgICAgICgoMCwgdXRpbHNfMS5oYXNQcmV0dGllcklnbm9yZSkobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18xLnNob3VsZFByZXNlcnZlQ29udGVudCkobm9kZS5wYXJlbnROb2RlLCBvcHRpb25zKSkpO1xufVxuZnVuY3Rpb24gbmVlZHNUb0JvcnJvd1ByZXZDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUpIHtcbiAgICByZXR1cm4gKCEoMCwgdXRpbHNfMS5pc0xpcXVpZE5vZGUpKG5vZGUpICYmXG4gICAgICAgIG5vZGUucHJldiAmJlxuICAgICAgICAoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlLnByZXYpICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZMZWFkaW5nV2hpdGVzcGFjZSkobm9kZSkpO1xufVxuZXhwb3J0cy5uZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIgPSBuZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlKSAmJlxuICAgICAgICBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICAoMCwgdXRpbHNfMS5oYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlKShub2RlLmxhc3RDaGlsZCkgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaXNIdG1sTm9kZSkoKDAsIHV0aWxzXzEuZ2V0TGFzdERlc2NlbmRhbnQpKG5vZGUubGFzdENoaWxkKSkgJiZcbiAgICAgICAgISgwLCB1dGlsc18xLmlzUHJlTGlrZU5vZGUpKG5vZGUpKTtcbn1cbmV4cG9ydHMubmVlZHNUb0JvcnJvd0xhc3RDaGlsZENsb3NpbmdUYWdFbmRNYXJrZXIgPSBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcjtcbmZ1bmN0aW9uIG5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiAoKDAsIHV0aWxzXzEuaXNIdG1sTm9kZSkobm9kZS5wYXJlbnROb2RlKSAmJlxuICAgICAgICAhbm9kZS5uZXh0ICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpICYmXG4gICAgICAgICEoMCwgdXRpbHNfMS5pc0xpcXVpZE5vZGUpKG5vZGUpICYmXG4gICAgICAgICgoMCwgdXRpbHNfMS5pc1RleHRMaWtlTm9kZSkoKDAsIHV0aWxzXzEuZ2V0TGFzdERlc2NlbmRhbnQpKG5vZGUpKSB8fFxuICAgICAgICAgICAgKDAsIHV0aWxzXzEuaXNMaXF1aWROb2RlKSgoMCwgdXRpbHNfMS5nZXRMYXN0RGVzY2VuZGFudCkobm9kZSkpKSk7XG59XG5leHBvcnRzLm5lZWRzVG9Cb3Jyb3dQYXJlbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIgPSBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyO1xuZnVuY3Rpb24gbmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5uZXh0ICYmXG4gICAgICAgICgwLCB1dGlsc18xLmlzSHRtbE5vZGUpKG5vZGUubmV4dCkgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaXNUZXh0TGlrZU5vZGUpKG5vZGUpICYmXG4gICAgICAgICgwLCB1dGlsc18xLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UpKG5vZGUpKTtcbn1cbmV4cG9ydHMubmVlZHNUb0JvcnJvd05leHRPcGVuaW5nVGFnU3RhcnRNYXJrZXIgPSBuZWVkc1RvQm9ycm93TmV4dE9wZW5pbmdUYWdTdGFydE1hcmtlcjtcbmZ1bmN0aW9uIGdldFByZXR0aWVySWdub3JlQXR0cmlidXRlQ29tbWVudERhdGEodmFsdWUpIHtcbiAgICBjb25zdCBtYXRjaCA9IHZhbHVlLnRyaW0oKS5tYXRjaCgvXnByZXR0aWVyLWlnbm9yZS1hdHRyaWJ1dGUoPzpcXHMrKC4rKSk/JC9zKTtcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFtYXRjaFsxXSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoWzFdLnNwbGl0KC9cXHMrLyk7XG59XG5mdW5jdGlvbiBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlKSB7XG4gICAgcmV0dXJuICgoMCwgdXRpbHNfMS5pc0h0bWxOb2RlKShub2RlLnBhcmVudE5vZGUpICYmXG4gICAgICAgICFub2RlLnByZXYgJiZcbiAgICAgICAgKDAsIHV0aWxzXzEuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKShub2RlKSAmJlxuICAgICAgICAhKDAsIHV0aWxzXzEuaXNMaXF1aWROb2RlKShub2RlKSk7XG59XG5leHBvcnRzLm5lZWRzVG9Cb3Jyb3dQYXJlbnRPcGVuaW5nVGFnRW5kTWFya2VyID0gbmVlZHNUb0JvcnJvd1BhcmVudE9wZW5pbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZXMocGF0aCwgb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IHsgbG9jU3RhcnQsIGxvY0VuZCB9ID0gb3B0aW9ucztcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNIdG1sQ29tbWVudCkobm9kZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAoISgwLCB1dGlsc18xLmlzTm9uRW1wdHlBcnJheSkobm9kZS5hdHRyaWJ1dGVzKSkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSlcbiAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAnICdcbiAgICAgICAgICAgIDogJyc7XG4gICAgfVxuICAgIGNvbnN0IGlnbm9yZUF0dHJpYnV0ZURhdGEgPSBub2RlLnByZXYgJiZcbiAgICAgICAgbm9kZS5wcmV2LnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50ICYmXG4gICAgICAgIGdldFByZXR0aWVySWdub3JlQXR0cmlidXRlQ29tbWVudERhdGEobm9kZS5wcmV2LmJvZHkpO1xuICAgIGNvbnN0IGhhc1ByZXR0aWVySWdub3JlQXR0cmlidXRlID0gdHlwZW9mIGlnbm9yZUF0dHJpYnV0ZURhdGEgPT09ICdib29sZWFuJ1xuICAgICAgICA/ICgpID0+IGlnbm9yZUF0dHJpYnV0ZURhdGFcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGlnbm9yZUF0dHJpYnV0ZURhdGEpXG4gICAgICAgICAgICA/IChhdHRyaWJ1dGUpID0+IGlnbm9yZUF0dHJpYnV0ZURhdGEuaW5jbHVkZXMoYXR0cmlidXRlLnJhd05hbWUpXG4gICAgICAgICAgICA6ICgpID0+IGZhbHNlO1xuICAgIGNvbnN0IHByaW50ZWRBdHRyaWJ1dGVzID0gcGF0aC5tYXAoKGF0dHJpYnV0ZVBhdGgpID0+IHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlUGF0aC5nZXRWYWx1ZSgpO1xuICAgICAgICByZXR1cm4gaGFzUHJldHRpZXJJZ25vcmVBdHRyaWJ1dGUoYXR0cmlidXRlKVxuICAgICAgICAgICAgPyByZXBsYWNlVGV4dEVuZE9mTGluZShvcHRpb25zLm9yaWdpbmFsVGV4dC5zbGljZShsb2NTdGFydChhdHRyaWJ1dGUpLCBsb2NFbmQoYXR0cmlidXRlKSkpXG4gICAgICAgICAgICA6IHByaW50KGF0dHJpYnV0ZVBhdGgpO1xuICAgIH0sICdhdHRyaWJ1dGVzJyk7XG4gICAgY29uc3QgZm9yY2VOb3RUb0JyZWFrQXR0ckNvbnRlbnQgPSAob3B0aW9ucy5zaW5nbGVMaW5lTGlua1RhZ3MgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgbm9kZS5uYW1lID09PSAnbGluaycpIHx8XG4gICAgICAgICgoKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSkgfHxcbiAgICAgICAgICAgICgwLCB1dGlsc18xLmlzVm9pZEVsZW1lbnQpKG5vZGUpIHx8XG4gICAgICAgICAgICAoKDAsIHV0aWxzXzEuaXNIdG1sRWxlbWVudCkobm9kZSkgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwKSkgJiZcbiAgICAgICAgICAgIG5vZGUuYXR0cmlidXRlcyAmJlxuICAgICAgICAgICAgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAgICAgISgwLCB1dGlsc18xLmlzTXVsdGlsaW5lTGlxdWlkVGFnKShub2RlLmF0dHJpYnV0ZXNbMF0pKTtcbiAgICBjb25zdCBmb3JjZUJyZWFrQXR0ckNvbnRlbnQgPSBub2RlLnNvdXJjZVxuICAgICAgICAuc2xpY2Uobm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uc3RhcnQsIG5vZGUuYmxvY2tTdGFydFBvc2l0aW9uLmVuZClcbiAgICAgICAgLmluZGV4T2YoJ1xcbicpICE9PSAtMTtcbiAgICBjb25zdCBhdHRyaWJ1dGVMaW5lID0gZm9yY2VOb3RUb0JyZWFrQXR0ckNvbnRlbnRcbiAgICAgICAgPyAnICdcbiAgICAgICAgOiBvcHRpb25zLnNpbmdsZUF0dHJpYnV0ZVBlckxpbmUgJiYgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aCA+IDFcbiAgICAgICAgICAgID8gaGFyZGxpbmVcbiAgICAgICAgICAgIDogbGluZTtcbiAgICBjb25zdCBwYXJ0cyA9IFtcbiAgICAgICAgaW5kZW50KFtcbiAgICAgICAgICAgIGZvcmNlTm90VG9CcmVha0F0dHJDb250ZW50ID8gJyAnIDogbGluZSxcbiAgICAgICAgICAgIGZvcmNlQnJlYWtBdHRyQ29udGVudCA/IGJyZWFrUGFyZW50IDogJycsXG4gICAgICAgICAgICBqb2luKGF0dHJpYnV0ZUxpbmUsIHByaW50ZWRBdHRyaWJ1dGVzKSxcbiAgICAgICAgXSksXG4gICAgXTtcbiAgICBpZiAoKG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlLmZpcnN0Q2hpbGQpKSB8fFxuICAgICAgICAoKDAsIHV0aWxzXzEuaGFzTm9DbG9zZU1hcmtlcikobm9kZSkgJiZcbiAgICAgICAgICAgIG5lZWRzVG9Cb3Jyb3dMYXN0Q2hpbGRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUucGFyZW50Tm9kZSkpIHx8XG4gICAgICAgIGZvcmNlTm90VG9CcmVha0F0dHJDb250ZW50KSB7XG4gICAgICAgIHBhcnRzLnB1c2goKDAsIHV0aWxzXzEuaXNTZWxmQ2xvc2luZykobm9kZSkgPyAnICcgOiAnJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJ0cy5wdXNoKG9wdGlvbnMuYnJhY2tldFNhbWVMaW5lXG4gICAgICAgICAgICA/ICgwLCB1dGlsc18xLmlzU2VsZkNsb3NpbmcpKG5vZGUpXG4gICAgICAgICAgICAgICAgPyAnICdcbiAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICA6ICgwLCB1dGlsc18xLmlzU2VsZkNsb3NpbmcpKG5vZGUpXG4gICAgICAgICAgICAgICAgPyBsaW5lXG4gICAgICAgICAgICAgICAgOiBzb2Z0bGluZSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ0VuZChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50T3BlbmluZ1RhZ0VuZE1hcmtlcihub2RlLmZpcnN0Q2hpbGQpXG4gICAgICAgID8gJydcbiAgICAgICAgOiBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZSk7XG59XG5mdW5jdGlvbiBwcmludE9wZW5pbmdUYWcocGF0aCwgb3B0aW9ucywgcHJpbnQpIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIHJldHVybiBbXG4gICAgICAgIHByaW50T3BlbmluZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBwcmludEF0dHJpYnV0ZXMocGF0aCwgb3B0aW9ucywgcHJpbnQpLFxuICAgICAgICAoMCwgdXRpbHNfMS5oYXNOb0Nsb3NlTWFya2VyKShub2RlKSA/ICcnIDogcHJpbnRPcGVuaW5nVGFnRW5kKG5vZGUpLFxuICAgIF07XG59XG5leHBvcnRzLnByaW50T3BlbmluZ1RhZyA9IHByaW50T3BlbmluZ1RhZztcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1N0YXJ0KG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbm9kZS5wcmV2ICYmIG5lZWRzVG9Cb3Jyb3dOZXh0T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUucHJldilcbiAgICAgICAgPyAnJ1xuICAgICAgICA6IFtwcmludE9wZW5pbmdUYWdQcmVmaXgobm9kZSwgb3B0aW9ucyksIHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpXTtcbn1cbmV4cG9ydHMucHJpbnRPcGVuaW5nVGFnU3RhcnQgPSBwcmludE9wZW5pbmdUYWdTdGFydDtcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1ByZWZpeChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5lZWRzVG9Cb3Jyb3dQYXJlbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUpXG4gICAgICAgID8gcHJpbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgOiBuZWVkc1RvQm9ycm93UHJldkNsb3NpbmdUYWdFbmRNYXJrZXIobm9kZSlcbiAgICAgICAgICAgID8gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUucHJldiwgb3B0aW9ucylcbiAgICAgICAgICAgIDogJyc7XG59XG5leHBvcnRzLnByaW50T3BlbmluZ1RhZ1ByZWZpeCA9IHByaW50T3BlbmluZ1RhZ1ByZWZpeDtcbmZ1bmN0aW9uIHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuICc8IS0tJztcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDpcbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sUmF3Tm9kZTpcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5uYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPCR7bm9kZS5uYW1lfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygbm9kZS5uYW1lLm1hcmt1cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDx7eyAke25vZGUubmFtZS5tYXJrdXAudHJpbSgpfSB9fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDx7eyAke25vZGUubmFtZS5tYXJrdXAucmF3U291cmNlfSB9fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludE9wZW5pbmdUYWdTdGFydE1hcmtlciA9IHByaW50T3BlbmluZ1RhZ1N0YXJ0TWFya2VyO1xuZnVuY3Rpb24gcHJpbnRPcGVuaW5nVGFnRW5kTWFya2VyKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuICctLT4nO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFZvaWRFbGVtZW50OlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxFbGVtZW50OlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlOlxuICAgICAgICAgICAgcmV0dXJuICc+JztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnPic7XG4gICAgfVxufVxuZXhwb3J0cy5wcmludE9wZW5pbmdUYWdFbmRNYXJrZXIgPSBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXI7XG5mdW5jdGlvbiBnZXROb2RlQ29udGVudChub2RlLCBvcHRpb25zKSB7XG4gICAgbGV0IHN0YXJ0ID0gbm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kO1xuICAgIGlmIChub2RlLmZpcnN0Q2hpbGQgJiZcbiAgICAgICAgbmVlZHNUb0JvcnJvd1BhcmVudE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZS5maXJzdENoaWxkKSkge1xuICAgICAgICBzdGFydCAtPSBwcmludE9wZW5pbmdUYWdFbmRNYXJrZXIobm9kZSkubGVuZ3RoO1xuICAgIH1cbiAgICBsZXQgZW5kID0gbm9kZS5ibG9ja0VuZFBvc2l0aW9uLnN0YXJ0O1xuICAgIGlmIChub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93UGFyZW50Q2xvc2luZ1RhZ1N0YXJ0TWFya2VyKG5vZGUubGFzdENoaWxkKSkge1xuICAgICAgICBlbmQgKz0gcHJpbnRDbG9zaW5nVGFnU3RhcnRNYXJrZXIobm9kZSwgb3B0aW9ucykubGVuZ3RoO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICBuZWVkc1RvQm9ycm93TGFzdENoaWxkQ2xvc2luZ1RhZ0VuZE1hcmtlcihub2RlKSkge1xuICAgICAgICBlbmQgLT0gcHJpbnRDbG9zaW5nVGFnRW5kTWFya2VyKG5vZGUubGFzdENoaWxkLCBvcHRpb25zKS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLm9yaWdpbmFsVGV4dC5zbGljZShzdGFydCwgZW5kKTtcbn1cbmV4cG9ydHMuZ2V0Tm9kZUNvbnRlbnQgPSBnZXROb2RlQ29udGVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRHRm5MbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZMaTR2TGk0dmMzSmpMM0J5YVc1MFpYSXZjSEpwYm5RdmRHRm5MblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0QlFVRkJMSFZEUVVFMlF6dEJRVU0zUXl4dFEwRlRhVUk3UVVGRGFrSXNNa05CYVVKNVFqdEJRVVY2UWl4TlFVRk5MRVZCUTBvc1VVRkJVU3hGUVVGRkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNSMEZEYkVVc1IwRkJSeXhqUVVGSExFTkJRVU03UVVGRFVpeE5RVUZOTEVWQlFVVXNiMEpCUVc5Q0xFVkJRVVVzUjBGQlJ5eGpRVUZITEVOQlFVTXNTMEZCV1N4RFFVRkRPMEZCUld4RUxGTkJRV2RDTEdWQlFXVXNRMEZETjBJc1NVRkJiMElzUlVGRGNFSXNUMEZCTkVJN1NVRkZOVUlzVDBGQlR6dFJRVU5NTEVsQlFVRXNkMEpCUVdkQ0xFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU5xUlN4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMHRCUTJ4RExFTkJRVU03UVVGRFNpeERRVUZETzBGQlVrUXNNRU5CVVVNN1FVRkZSQ3hUUVVGblFpeHZRa0ZCYjBJc1EwRkRiRU1zU1VGQmIwSXNSVUZEY0VJc1QwRkJORUk3U1VGRk5VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1UwRkJVenRSUVVOdVFpeDNRMEZCZDBNc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEzaEVMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRMG9zUTBGQlF5eERRVUZETzFsQlEwVXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXp0WlFVTndReXd3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRE8xTkJRekZETEVOQlFVTTdRVUZEVWl4RFFVRkRPMEZCV0VRc2IwUkJWME03UVVGRlJDeFRRVUZuUWl4clFrRkJhMElzUTBGRGFFTXNTVUZCYjBJc1JVRkRjRUlzVDBGQk5FSTdTVUZGTlVJc1QwRkJUeXhEUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExQXNRMEZCUXl4RFFVRkRMRzlEUVVGdlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRha1FzUTBGQlF5eERRVUZETEhsRFFVRjVReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZYTEVOQlFVTXNRMEZEYUVVN1VVRkRReXhEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU5LTEVOQlFVTXNRMEZCUXp0WlFVTkZMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNN1dVRkRka01zY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dFRRVU55UXl4RFFVRkRPMEZCUTFJc1EwRkJRenRCUVdSRUxHZEVRV05ETzBGQlJVUXNVMEZCVXl4eFFrRkJjVUlzUTBGRE5VSXNTVUZCYjBJc1JVRkRjRUlzVDBGQk5FSTdTVUZGTlVJc1QwRkJUeXg1UTBGQmVVTXNRMEZCUXl4SlFVRkpMRU5CUVVNN1VVRkRjRVFzUTBGQlF5eERRVUZETEhkQ1FVRjNRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTI1RUxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdRVUZEVkN4RFFVRkRPMEZCUlVRc1UwRkJaMElzY1VKQlFYRkNMRU5CUTI1RExFbEJRVzlDTEVWQlEzQkNMRTlCUVRSQ08wbEJSVFZDTEU5QlFVOHNkME5CUVhkRExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyNUVMRU5CUVVNc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU4wUkN4RFFVRkRMRU5CUVVNc2MwTkJRWE5ETEVOQlFVTXNTVUZCU1N4RFFVRkRPMWxCUXpsRExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlEzWkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRFZDeERRVUZETzBGQlZFUXNjMFJCVTBNN1FVRkZSQ3hUUVVGblFpd3dRa0ZCTUVJc1EwRkRlRU1zU1VGQlowTXNSVUZEYUVNc1QwRkJORUk3U1VGRk5VSXNTVUZCU1N4RFFVRkRMRWxCUVVrN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVVZ5UWl4SlFVRkpMSGRDUVVGM1FpeERRVUZETEVsQlFVa3NSVUZCUlN4UFFVRlBMRU5CUVVNc1JVRkJSVHRSUVVNelF5eFBRVUZQTEVWQlFVVXNRMEZCUXp0TFFVTllPMGxCUTBRc1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFGQlIycENMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdVVUZETTBJc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdXVUZKZUVJc1NVRkJTU3hQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRkZPMmRDUVVOcVF5eFBRVUZQTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8yRkJRM3BDTzJsQ1FVRk5MRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNTMEZCU3l4UlFVRlJMRVZCUVVVN1owSkJReTlETEU5QlFVOHNVVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRPMkZCUXpkRE8ybENRVUZOTzJkQ1FVTk1MRTlCUVU4c1VVRkJVU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRXRCUVVzc1EwRkJRenRoUVVOb1JEdFJRVU5JTzFsQlEwVXNUMEZCVHl4RlFVRkZMRU5CUVVNN1MwRkRZanRCUVVOSUxFTkJRVU03UVVFelFrUXNaMFZCTWtKRE8wRkJSVVFzVTBGQlowSXNkMEpCUVhkQ0xFTkJRM1JETEVsQlFXZERMRVZCUTJoRExFOUJRVFJDTzBsQlJUVkNMRWxCUVVrc1EwRkJReXhKUVVGSk8xRkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTTdTVUZEY2tJc1NVRkJTU3gzUWtGQmQwSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFVkJRVVU3VVVGRE0wTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1MwRkRXRHRKUVVWRUxGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0UlFWRnFRaXhMUVVGTExHbENRVUZUTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dFpRVXR5UXl4UFFVRlBMRWxCUVVrc1EwRkJRenRUUVVOaU8xRkJSVVE3V1VGRFJTeFBRVUZQTEVkQlFVY3NRMEZCUXp0TFFVTmtPMEZCUTBnc1EwRkJRenRCUVRWQ1JDdzBSRUUwUWtNN1FVRkZSQ3hUUVVGVExIZENRVUYzUWl4RFFVTXZRaXhKUVVGdlFpeEZRVU53UWl4UFFVRTBRanRKUVVVMVFpeFBRVUZQTEVOQlEwd3NRMEZCUXl4SlFVRkJMSGRDUVVGblFpeEZRVUZETEVsQlFVa3NRMEZCUXp0UlFVTjJRaXhEUVVGRkxFbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJN1VVRkRMMElzUTBGQlF5eEpRVUZCTEhsQ1FVRnBRaXhGUVVGRExFbEJRVWtzUTBGQlF6dFpRVU4wUWl4SlFVRkJMRFpDUVVGeFFpeEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGRGNFUXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRkZSQ3hUUVVGblFpeHZRMEZCYjBNc1EwRkJReXhKUVVGdlFqdEpRVlYyUlN4UFFVRlBMRU5CUTB3c1EwRkJReXhKUVVGQkxHOUNRVUZaTEVWQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlJWUXNTVUZCUVN4clFrRkJWU3hGUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdVVUZEY2tJc1NVRkJRU3cwUTBGQmIwTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkRNME1zUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZxUWtRc2IwWkJhVUpETzBGQlJVUXNVMEZCWjBJc2VVTkJRWGxETEVOQlEzWkVMRWxCUVc5Q08wbEJVM0JDTEU5QlFVOHNRMEZEVEN4SlFVRkJMR3RDUVVGVkxFVkJRVU1zU1VGQlNTeERRVUZETzFGQlEyaENMRWxCUVVrc1EwRkJReXhUUVVGVE8xRkJRMlFzU1VGQlFTdzJRMEZCY1VNc1JVRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlEzSkVMRWxCUVVFc2EwSkJRVlVzUlVGQlF5eEpRVUZCTEhsQ1FVRnBRaXhGUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTTNReXhEUVVGRExFbEJRVUVzY1VKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNc1EwRkRja0lzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZxUWtRc09FWkJhVUpETzBGQlJVUXNVMEZCWjBJc2QwTkJRWGRETEVOQlFVTXNTVUZCYjBJN1NVRlpNMFVzVDBGQlR5eERRVU5NTEVsQlFVRXNhMEpCUVZVc1JVRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETzFGQlF6TkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWs3VVVGRFZpeEpRVUZCTERaRFFVRnhReXhGUVVGRExFbEJRVWtzUTBGQlF6dFJRVU16UXl4RFFVRkRMRWxCUVVFc2IwSkJRVmtzUlVGQlF5eEpRVUZKTEVOQlFVTTdVVUZEYmtJc1EwRkJReXhKUVVGQkxITkNRVUZqTEVWQlFVTXNTVUZCUVN4NVFrRkJhVUlzUlVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0WlFVTjBReXhKUVVGQkxHOUNRVUZaTEVWQlFVTXNTVUZCUVN4NVFrRkJhVUlzUlVGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUTNwRExFTkJRVU03UVVGRFNpeERRVUZETzBGQmNFSkVMRFJHUVc5Q1F6dEJRVVZFTEZOQlFXZENMSE5EUVVGelF5eERRVUZETEVsQlFXOUNPMGxCVFhwRkxFOUJRVThzUTBGRFRDeEpRVUZKTEVOQlFVTXNTVUZCU1R0UlFVTlVMRWxCUVVFc2EwSkJRVlVzUlVGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNKQ0xFbEJRVUVzYzBKQlFXTXNSVUZCUXl4SlFVRkpMRU5CUVVNN1VVRkRjRUlzU1VGQlFTdzJRMEZCY1VNc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGRE5VTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRmFSQ3gzUmtGWlF6dEJRVVZFTEZOQlFWTXNjVU5CUVhGRExFTkJRVU1zUzBGQllUdEpRVU14UkN4TlFVRk5MRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMREJEUVVFd1F5eERRVUZETEVOQlFVTTdTVUZGTjBVc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFJRVU5XTEU5QlFVOHNTMEZCU3l4RFFVRkRPMHRCUTJRN1NVRkZSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMUZCUTJJc1QwRkJUeXhKUVVGSkxFTkJRVU03UzBGRFlqdEpRVVZFTEU5QlFVOHNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXZRaXhEUVVGRE8wRkJSVVFzVTBGQlowSXNjME5CUVhORExFTkJRVU1zU1VGQmIwSTdTVUZWZWtVc1QwRkJUeXhEUVVOTUxFbEJRVUVzYTBKQlFWVXNSVUZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJRek5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrN1VVRkRWaXhKUVVGQkxEUkRRVUZ2UXl4RlFVRkRMRWxCUVVrc1EwRkJRenRSUVVNeFF5eERRVUZETEVsQlFVRXNiMEpCUVZrc1JVRkJReXhKUVVGSkxFTkJRVU1zUTBGRGNFSXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRm9Ra1FzZDBaQlowSkRPMEZCUlVRc1UwRkJVeXhsUVVGbExFTkJRM1JDTEVsQlFYVkNMRVZCUTNaQ0xFOUJRVFJDTEVWQlF6VkNMRXRCUVc5Q08wbEJSWEJDTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU0zUWl4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxFMUJRVTBzUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXp0SlFVVnlReXhKUVVGSkxFbEJRVUVzY1VKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNN1VVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVVZ1UXl4SlFVRkpMRU5CUVVNc1NVRkJRU3gxUWtGQlpTeEZRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSVHRSUVVOeVF5eFBRVUZQTEVsQlFVRXNjVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU03V1VGRGVFSXNRMEZCUXp0blFrRkpReXhIUVVGSE8xbEJRMHdzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXp0TFFVTlNPMGxCUlVRc1RVRkJUU3h0UWtGQmJVSXNSMEZEZGtJc1NVRkJTU3hEUVVGRExFbEJRVWs3VVVGRFZDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdVVUZEZUVNc2NVTkJRWEZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVVY0UkN4TlFVRk5MREJDUVVFd1FpeEhRVU01UWl4UFFVRlBMRzFDUVVGdFFpeExRVUZMTEZOQlFWTTdVVUZEZEVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEcxQ1FVRnRRanRSUVVNelFpeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0WlFVTndReXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZqTEVWQlFVVXNSVUZCUlN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRE8xbEJRM0pGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU03U1VGRmJFSXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1lVRkJZU3hGUVVGRkxFVkJRVVU3VVVGRGJrUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1lVRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzFGQlF6TkRMRTlCUVU4c01FSkJRVEJDTEVOQlFVTXNVMEZCVXl4RFFVRkRPMWxCUXpGRExFTkJRVU1zUTBGQlF5eHZRa0ZCYjBJc1EwRkRiRUlzVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVOdVJUdFpRVU5JTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03U1VGRE0wSXNRMEZCUXl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGRE8wbEJSV3BDTEUxQlFVMHNNRUpCUVRCQ0xFZEJRemxDTEVOQlFVTXNUMEZCVHl4RFFVRkRMR3RDUVVGclFqdFJRVU42UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVUdFJRVU0zUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFMUJRVTBzUTBGQlF6dFJRVU4yUWl4RFFVRkRMRU5CUVVNc1NVRkJRU3h4UWtGQllTeEZRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnVRaXhKUVVGQkxIRkNRVUZoTEVWQlFVTXNTVUZCU1N4RFFVRkRPMWxCUTI1Q0xFTkJRVU1zU1VGQlFTeHhRa0ZCWVN4RlFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMnhFTEVsQlFVa3NRMEZCUXl4VlFVRlZPMWxCUTJZc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eE5RVUZOTEV0QlFVc3NRMEZCUXp0WlFVTTFRaXhEUVVGRExFbEJRVUVzTkVKQlFXOUNMRVZCUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZMME1zVFVGQlRTeHhRa0ZCY1VJc1IwRkRla0lzU1VGQlNTeERRVUZETEUxQlFVMDdVMEZEVWl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRE8xTkJRMnBGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVVV4UWl4TlFVRk5MR0ZCUVdFc1IwRkJSeXd3UWtGQk1FSTdVVUZET1VNc1EwRkJReXhEUVVGRExFZEJRVWM3VVVGRFRDeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMSE5DUVVGelFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03V1VGRE9VUXNRMEZCUXl4RFFVRkRMRkZCUVZFN1dVRkRWaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzBsQlJWUXNUVUZCVFN4TFFVRkxMRWRCUVZVN1VVRkRia0lzVFVGQlRTeERRVUZETzFsQlEwd3NNRUpCUVRCQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTVHRaUVVOMlF5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZPMWxCUTNoRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU03VTBGRGRrTXNRMEZCUXp0TFFVTklMRU5CUVVNN1NVRkZSaXhKUVU5RkxFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdVVUZEWkN4elEwRkJjME1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRlBNVVFzUTBGQlF5eEpRVUZCTEhkQ1FVRm5RaXhGUVVGRExFbEJRVWtzUTBGQlF6dFpRVU55UWl4NVEwRkJlVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVnl4RFFVRkRMRU5CUVVNN1VVRkRPVVFzTUVKQlFUQkNMRVZCUXpGQ08xRkJRMEVzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkJMSEZDUVVGaExFVkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTMEZETlVNN1UwRkJUVHRSUVVOTUxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlExSXNUMEZCVHl4RFFVRkRMR1ZCUVdVN1dVRkRja0lzUTBGQlF5eERRVUZETEVsQlFVRXNjVUpCUVdFc1JVRkJReXhKUVVGSkxFTkJRVU03WjBKQlEyNUNMRU5CUVVNc1EwRkJReXhIUVVGSE8yZENRVU5NTEVOQlFVTXNRMEZCUXl4RlFVRkZPMWxCUTA0c1EwRkJReXhEUVVGRExFbEJRVUVzY1VKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNN1owSkJRM0pDTEVOQlFVTXNRMEZCUXl4SlFVRkpPMmRDUVVOT0xFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlEySXNRMEZCUXp0TFFVTklPMGxCUlVRc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQlJVUXNVMEZCVXl4clFrRkJhMElzUTBGQlF5eEpRVUZ2UWp0SlFVTTVReXhQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTzFGQlEzQkNMSE5EUVVGelF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNN1VVRkRka1FzUTBGQlF5eERRVUZETEVWQlFVVTdVVUZEU2l4RFFVRkRMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRja01zUTBGQlF6dEJRVVZFTEZOQlFXZENMR1ZCUVdVc1EwRkROMElzU1VGQmRVSXNSVUZEZGtJc1QwRkJORUlzUlVGRE5VSXNTMEZCYjBJN1NVRkZjRUlzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wbEJSVGRDTEU5QlFVODdVVUZEVEN4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTI1RExHVkJRV1VzUTBGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJRenRSUVVOeVF5eEpRVUZCTEhkQ1FVRm5RaXhGUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRWxCUVVrc1EwRkJRenRMUVVOMlJDeERRVUZETzBGQlEwb3NRMEZCUXp0QlFWcEVMREJEUVZsRE8wRkJSVVFzVTBGQlowSXNiMEpCUVc5Q0xFTkJRMnhETEVsQlFXOUNMRVZCUTNCQ0xFOUJRVFJDTzBsQlJUVkNMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeHpRMEZCYzBNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEyNUZMRU5CUVVNc1EwRkJReXhGUVVGRk8xRkJRMG9zUTBGQlF5eERRVUZETEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RlFVRkZMREJDUVVFd1FpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRMMFVzUTBGQlF6dEJRVkJFTEc5RVFVOURPMEZCUlVRc1UwRkJaMElzY1VKQlFYRkNMRU5CUTI1RExFbEJRVzlDTEVWQlEzQkNMRTlCUVRSQ08wbEJSVFZDTEU5QlFVOHNjME5CUVhORExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEycEVMRU5CUVVNc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRE8xRkJRek5ETEVOQlFVTXNRMEZCUXl4dlEwRkJiME1zUTBGQlF5eEpRVUZKTEVOQlFVTTdXVUZETlVNc1EwRkJReXhEUVVGRExIZENRVUYzUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzVDBGQlR5eERRVUZETzFsQlF6bERMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU03UVVGRFZDeERRVUZETzBGQlZFUXNjMFJCVTBNN1FVRkhSQ3hUUVVGblFpd3dRa0ZCTUVJc1EwRkJReXhKUVVGblF6dEpRVU42UlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRSUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBsQlEzSkNMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVlZxUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU40UWl4UFFVRlBMRTFCUVUwc1EwRkJRenRSUVVOb1FpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRE8xRkJRek5DTEV0QlFVc3NhVUpCUVZNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0UlFVTjBReXhMUVVGTExHbENRVUZUTEVOQlFVTXNaVUZCWlN4RFFVRkRPMUZCUXk5Q0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCU1hoQ0xFbEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGRGFrTXNUMEZCVHl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6dGhRVU40UWp0cFFrRkJUU3hKUVVGSkxFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk8yZENRVU12UXl4UFFVRlBMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1EwRkJRenRoUVVNMVF6dHBRa0ZCVFR0blFrRkRUQ3hQUVVGUExFOUJRVThzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhMUVVGTExFTkJRVU03WVVGREwwTTdVVUZEU0R0WlFVTkZMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMkk3UVVGRFNDeERRVUZETzBGQkwwSkVMR2RGUVN0Q1F6dEJRVVZFTEZOQlFXZENMSGRDUVVGM1FpeERRVUZETEVsQlFXZERPMGxCUTNaRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNN1NVRkRja0lzVVVGQlVTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZPMUZCUjJwQ0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCUTNoQ0xFOUJRVThzUzBGQlN5eERRVUZETzFGQlEyWXNTMEZCU3l4cFFrRkJVeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRPMUZCUTNSRExFdEJRVXNzYVVKQlFWTXNRMEZCUXl4bFFVRmxPMWxCUXpWQ0xFOUJRVThzUlVGQlJTeERRVUZETzFGQlExb3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF6dFJRVU16UWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU40UWl4UFFVRlBMRWRCUVVjc1EwRkJRenRSUVVOaU8xbEJRMFVzVDBGQlR5eEhRVUZITEVOQlFVTTdTMEZEWkR0QlFVTklMRU5CUVVNN1FVRm9Ra1FzTkVSQlowSkRPMEZCUlVRc1UwRkJaMElzWTBGQll5eERRVU0xUWl4SlFVZERMRVZCUTBRc1QwRkJORUk3U1VGRk5VSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJRenRKUVVONFF5eEpRVU5GTEVsQlFVa3NRMEZCUXl4VlFVRlZPMUZCUTJZc2MwTkJRWE5ETEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVOMlJEdFJRVU5CTEV0QlFVc3NTVUZCU1N4M1FrRkJkMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1MwRkRhRVE3U1VGRlJDeEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNSRExFbEJRMFVzU1VGQlNTeERRVUZETEZOQlFWTTdVVUZEWkN4M1EwRkJkME1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUTNoRU8xRkJRMEVzUjBGQlJ5eEpRVUZKTERCQ1FVRXdRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNN1MwRkRla1E3VTBGQlRTeEpRVU5NTEVsQlFVa3NRMEZCUXl4VFFVRlRPMUZCUTJRc2VVTkJRWGxETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUXk5RE8xRkJRMEVzUjBGQlJ5eEpRVUZKTEhkQ1FVRjNRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8wdEJRMnBGTzBsQlJVUXNUMEZCVHl4UFFVRlBMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRhRVFzUTBGQlF6dEJRVGRDUkN4M1EwRTJRa01pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludGVyTGlxdWlkSHRtbCA9IHZvaWQgMDtcbmNvbnN0IHByZXR0aWVyXzEgPSByZXF1aXJlKFwicHJldHRpZXJcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL3R5cGVzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IHByaW50X3ByZXByb2Nlc3NfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50LXByZXByb2Nlc3NcIik7XG5jb25zdCB1dGlsc18yID0gcmVxdWlyZShcIi4uL3ByaW50ZXIvdXRpbHNcIik7XG5jb25zdCBlbGVtZW50XzEgPSByZXF1aXJlKFwiLi4vcHJpbnRlci9wcmludC9lbGVtZW50XCIpO1xuY29uc3QgdGFnXzEgPSByZXF1aXJlKFwiLi4vcHJpbnRlci9wcmludC90YWdcIik7XG5jb25zdCBsaXF1aWRfMSA9IHJlcXVpcmUoXCIuLi9wcmludGVyL3ByaW50L2xpcXVpZFwiKTtcbmNvbnN0IGNoaWxkcmVuXzEgPSByZXF1aXJlKFwiLi4vcHJpbnRlci9wcmludC9jaGlsZHJlblwiKTtcbmNvbnN0IHsgYnVpbGRlcnMgfSA9IHByZXR0aWVyXzEuZG9jO1xuY29uc3QgeyBmaWxsLCBncm91cCwgaGFyZGxpbmUsIGluZGVudCwgam9pbiwgbGluZSwgc29mdGxpbmUgfSA9IGJ1aWxkZXJzO1xuY29uc3QgeyByZXBsYWNlVGV4dEVuZE9mTGluZSB9ID0gcHJldHRpZXJfMS5kb2MudXRpbHM7XG5mdW5jdGlvbiBnZXRTY2hlbWEoY29udGVudHMsIG9wdGlvbnMpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gW0pTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UoY29udGVudHMpLCBudWxsLCBvcHRpb25zLnRhYldpZHRoKSwgdHJ1ZV07XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBbY29udGVudHMsIGZhbHNlXTtcbiAgICB9XG59XG5mdW5jdGlvbiBwcmludEF0dHJpYnV0ZXMocGF0aCwgX29wdGlvbnMsIHByaW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBpZiAoKDAsIHV0aWxzXzIuaXNFbXB0eSkobm9kZS5hdHRyaWJ1dGVzKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiBncm91cChbXG4gICAgICAgIGluZGVudChbXG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgam9pbihsaW5lLCBwYXRoLm1hcCgocCkgPT4gcHJpbnQocCksICdhdHRyaWJ1dGVzJykpLFxuICAgICAgICBdKSxcbiAgICAgICAgc29mdGxpbmUsXG4gICAgXSwge1xuICAgICAgICBzaG91bGRCcmVhazogKDAsIHV0aWxzXzIuaGFzTGluZUJyZWFrSW5SYW5nZSkobm9kZS5zb3VyY2UsIG5vZGUuYmxvY2tTdGFydFBvc2l0aW9uLnN0YXJ0LCBub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmQpLFxuICAgIH0pO1xufVxuY29uc3Qgb3Bwb3NpdGVRdW90ZXMgPSB7XG4gICAgJ1wiJzogXCInXCIsXG4gICAgXCInXCI6ICdcIicsXG59O1xuZnVuY3Rpb24gcHJpbnRBdHRyaWJ1dGUocGF0aCwgb3B0aW9ucywgX3ByaW50KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBjb25zdCBhdHRyR3JvdXBJZCA9IFN5bWJvbCgnYXR0ci1ncm91cC1pZCcpO1xuICAgIGNvbnN0IHZhbHVlID0gbm9kZS5zb3VyY2Uuc2xpY2Uobm9kZS5hdHRyaWJ1dGVQb3NpdGlvbi5zdGFydCwgbm9kZS5hdHRyaWJ1dGVQb3NpdGlvbi5lbmQpO1xuICAgIGNvbnN0IHByZWZlcnJlZFF1b3RlID0gb3B0aW9ucy5zaW5nbGVRdW90ZSA/IGAnYCA6IGBcImA7XG4gICAgY29uc3QgYXR0cmlidXRlVmFsdWVDb250YWluc1F1b3RlID0gISFub2RlLnZhbHVlLmZpbmQoKHZhbHVlTm9kZSkgPT4gKDAsIHV0aWxzXzIuaXNUZXh0TGlrZU5vZGUpKHZhbHVlTm9kZSkgJiYgdmFsdWVOb2RlLnZhbHVlLmluY2x1ZGVzKHByZWZlcnJlZFF1b3RlKSk7XG4gICAgY29uc3QgcXVvdGUgPSBhdHRyaWJ1dGVWYWx1ZUNvbnRhaW5zUXVvdGVcbiAgICAgICAgPyBvcHBvc2l0ZVF1b3Rlc1twcmVmZXJyZWRRdW90ZV1cbiAgICAgICAgOiBwcmVmZXJyZWRRdW90ZTtcbiAgICByZXR1cm4gW1xuICAgICAgICBub2RlLm5hbWUsXG4gICAgICAgICc9JyxcbiAgICAgICAgcXVvdGUsXG4gICAgICAgICgwLCB1dGlsc18yLmhhc0xpbmVCcmVha0luUmFuZ2UpKG5vZGUuc291cmNlLCBub2RlLmF0dHJpYnV0ZVBvc2l0aW9uLnN0YXJ0LCBub2RlLmF0dHJpYnV0ZVBvc2l0aW9uLmVuZClcbiAgICAgICAgICAgID8gZ3JvdXAoW1xuICAgICAgICAgICAgICAgIGluZGVudChbXG4gICAgICAgICAgICAgICAgICAgIHNvZnRsaW5lLFxuICAgICAgICAgICAgICAgICAgICBqb2luKGhhcmRsaW5lLCAoMCwgdXRpbHNfMi5yZWluZGVudCkoKDAsIHV0aWxzXzIuYm9keUxpbmVzKSh2YWx1ZSksIHRydWUpKSxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBzb2Z0bGluZSxcbiAgICAgICAgICAgIF0sIHsgaWQ6IGF0dHJHcm91cElkIH0pXG4gICAgICAgICAgICA6IHZhbHVlLFxuICAgICAgICBxdW90ZSxcbiAgICBdO1xufVxuZnVuY3Rpb24gaXNZYW1sRnJvbnRNYXR0ZXIobm9kZSkge1xuICAgIHJldHVybiAobm9kZS5wYXJlbnROb2RlICYmXG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudCAmJlxuICAgICAgICAhbm9kZS5wcmV2ICYmXG4gICAgICAgIC9eLS0tXFxyP1xcbi8udGVzdChub2RlLnZhbHVlKSk7XG59XG5mdW5jdGlvbiBwcmludFRleHROb2RlKHBhdGgsIG9wdGlvbnMsIF9wcmludCkge1xuICAgIGNvbnN0IG5vZGUgPSBwYXRoLmdldFZhbHVlKCk7XG4gICAgaWYgKGlzWWFtbEZyb250TWF0dGVyKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgICBpZiAobm9kZS52YWx1ZS5tYXRjaCgvXlxccyokLykpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCB0ZXh0ID0gbm9kZS52YWx1ZTtcbiAgICBjb25zdCBwYXJhZ3JhcGhzID0gdGV4dFxuICAgICAgICAuc3BsaXQoLyhcXHI/XFxuKXsyLH0vKVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5tYXAoKGN1cnIpID0+IHtcbiAgICAgICAgbGV0IGRvYyA9IFtdO1xuICAgICAgICBjb25zdCB3b3JkcyA9IGN1cnIudHJpbSgpLnNwbGl0KC9cXHMrL2cpO1xuICAgICAgICBsZXQgaXNGaXJzdCA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd29yZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmQgPSB3b3Jkc1tqXTtcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgICAgICAgaXNGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jLnB1c2gobGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb2MucHVzaCh3b3JkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsbChkb2MpO1xuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICAgICgwLCB0YWdfMS5wcmludE9wZW5pbmdUYWdQcmVmaXgpKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgICBqb2luKGhhcmRsaW5lLCBwYXJhZ3JhcGhzKSxcbiAgICAgICAgKDAsIHRhZ18xLnByaW50Q2xvc2luZ1RhZ1N1ZmZpeCkobm9kZSwgb3B0aW9ucyksXG4gICAgXTtcbn1cbmZ1bmN0aW9uIHByaW50Tm9kZShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyA9IHt9KSB7XG4gICAgY29uc3Qgbm9kZSA9IHBhdGguZ2V0VmFsdWUoKTtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50OiB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICgwLCBjaGlsZHJlbl8xLnByaW50Q2hpbGRyZW4pKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKSxcbiAgICAgICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBlbGVtZW50XzEucHJpbnRFbGVtZW50KShwYXRoLCBvcHRpb25zLCBwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sVm9pZEVsZW1lbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZWxlbWVudF8xLnByaW50RWxlbWVudCkocGF0aCwgb3B0aW9ucywgcHJpbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbFNlbGZDbG9zaW5nRWxlbWVudDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBlbGVtZW50XzEucHJpbnRFbGVtZW50KShwYXRoLCBvcHRpb25zLCBwcmludCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sUmF3Tm9kZToge1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSAoMCwgdXRpbHNfMi5ib2R5TGluZXMpKG5vZGUuYm9keSk7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRTa2lwRmlyc3RMaW5lID0gIW5vZGUuc291cmNlW25vZGUuYmxvY2tTdGFydFBvc2l0aW9uLmVuZF0ubWF0Y2goL1xccnxcXG4vKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBsaW5lcy5sZW5ndGggPiAwICYmIGxpbmVzWzBdICE9PSAnJ1xuICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICBpbmRlbnQoW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFyZGxpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBqb2luKGhhcmRsaW5lLCAoMCwgdXRpbHNfMi5yZWluZGVudCkobGluZXMsIHNob3VsZFNraXBGaXJzdExpbmUpKSxcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIGhhcmRsaW5lLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICA6IFtzb2Z0bGluZV07XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXAoW1xuICAgICAgICAgICAgICAgIGdyb3VwKFtcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHByaW50QXR0cmlidXRlcyhwYXRoLCBvcHRpb25zLCBwcmludCksXG4gICAgICAgICAgICAgICAgICAgICc+JyxcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgIFsnPC8nLCBub2RlLm5hbWUsICc+J10sXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZERyb3A6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgbGlxdWlkXzEucHJpbnRMaXF1aWREcm9wKShwYXRoLCBvcHRpb25zLCBwcmludCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRSYXdUYWc6IHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gKDAsIHV0aWxzXzIuYm9keUxpbmVzKShub2RlLmJvZHkpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkU2tpcEZpcnN0TGluZSA9ICFub2RlLnNvdXJjZVtub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmRdLm1hdGNoKC9cXHJ8XFxuLyk7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gKDAsIHV0aWxzXzIucmVpbmRlbnQpKGxpbmVzLCBzaG91bGRTa2lwRmlyc3RMaW5lKTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrU3RhcnQgPSBncm91cChbXG4gICAgICAgICAgICAgICAgJ3slJyxcbiAgICAgICAgICAgICAgICBub2RlLndoaXRlc3BhY2VTdGFydCxcbiAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICBub2RlLndoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAgICAgJyV9JyxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgY29uc3QgYmxvY2tFbmQgPSBbXG4gICAgICAgICAgICAgICAgJ3slJyxcbiAgICAgICAgICAgICAgICBub2RlLndoaXRlc3BhY2VTdGFydCxcbiAgICAgICAgICAgICAgICAnICcsXG4gICAgICAgICAgICAgICAgJ2VuZCcsXG4gICAgICAgICAgICAgICAgbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgICcgJyxcbiAgICAgICAgICAgICAgICBub2RlLndoaXRlc3BhY2VFbmQsXG4gICAgICAgICAgICAgICAgJyV9JyxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAobm9kZS5uYW1lID09PSAnc2NoZW1hJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IFtzY2hlbWEsIGlzVmFsaWRdID0gZ2V0U2NoZW1hKG5vZGUuYm9keSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVwbGFjZVRleHRFbmRPZkxpbmUoc2NoZW1hLCBoYXJkbGluZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9ja0VuZCxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IFtoYXJkbGluZSwgLi4ucmVwbGFjZVRleHRFbmRPZkxpbmUoc2NoZW1hLCBoYXJkbGluZSldO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaW5kZW50U2NoZW1hID8gaW5kZW50KGJvZHkpIDogYm9keSxcbiAgICAgICAgICAgICAgICAgICAgaGFyZGxpbmUsXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrRW5kLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISgwLCB1dGlsc18yLmhhc0xpbmVCcmVha0luUmFuZ2UpKG5vZGUuc291cmNlLCBub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmQsIG5vZGUuYmxvY2tFbmRQb3NpdGlvbi5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBibG9ja1N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBub2RlLnNvdXJjZS5zbGljZShub2RlLmJsb2NrU3RhcnRQb3NpdGlvbi5lbmQsIG5vZGUuYmxvY2tFbmRQb3NpdGlvbi5zdGFydCksXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrRW5kLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGJsb2NrU3RhcnQsXG4gICAgICAgICAgICAgICAgaW5kZW50KFtoYXJkbGluZSwgam9pbihoYXJkbGluZSwgYm9keSldKSxcbiAgICAgICAgICAgICAgICBoYXJkbGluZSxcbiAgICAgICAgICAgICAgICBibG9ja0VuZCxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5MaXF1aWRUYWc6IHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgbGlxdWlkXzEucHJpbnRMaXF1aWRUYWcpKHBhdGgsIG9wdGlvbnMsIHByaW50LCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZEJyYW5jaDoge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBsaXF1aWRfMS5wcmludExpcXVpZEJyYW5jaCkocGF0aCwgb3B0aW9ucywgcHJpbnQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckVtcHR5OiB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0clVucXVvdGVkOlxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkF0dHJTaW5nbGVRdW90ZWQ6XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuQXR0ckRvdWJsZVF1b3RlZDoge1xuICAgICAgICAgICAgcmV0dXJuIHByaW50QXR0cmlidXRlKHBhdGgsIG9wdGlvbnMsIHByaW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OiB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICc8IS0tJyxcbiAgICAgICAgICAgICAgICBncm91cChbXG4gICAgICAgICAgICAgICAgICAgIGluZGVudChbbGluZSwgam9pbihoYXJkbGluZSwgKDAsIHV0aWxzXzIucmVpbmRlbnQpKCgwLCB1dGlsc18yLmJvZHlMaW5lcykobm9kZS5ib2R5KSwgdHJ1ZSkpXSksXG4gICAgICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgJy0tPicsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVmFyaWFibGU6IHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwYXRoLmNhbGwocHJpbnQsICdleHByZXNzaW9uJyk7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9ICcnO1xuICAgICAgICAgICAgaWYgKG5vZGUuZmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgbGluZSxcbiAgICAgICAgICAgICAgICAgICAgam9pbihsaW5lLCBwYXRoLm1hcCgocCkgPT4gcHJpbnQocCksICdmaWx0ZXJzJykpLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW25hbWUsIGZpbHRlcnNdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkRmlsdGVyOiB7XG4gICAgICAgICAgICBsZXQgYXJncyA9IFtdO1xuICAgICAgICAgICAgaWYgKG5vZGUuYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJpbnRlZCA9IHBhdGgubWFwKChwKSA9PiBwcmludChwKSwgJ2FyZ3MnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRQcmludEZpcnN0QXJndW1lbnRTYW1lTGluZSA9IG5vZGUuYXJnc1swXS50eXBlICE9PSB0eXBlc18xLk5vZGVUeXBlcy5OYW1lZEFyZ3VtZW50O1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRQcmludEZpcnN0QXJndW1lbnRTYW1lTGluZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBbZmlyc3REb2MsIC4uLnJlc3RdID0gcHJpbnRlZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdERvYyA9ICgwLCB1dGlsc18yLmlzRW1wdHkpKHJlc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGluZGVudChbJywnLCBsaW5lLCBqb2luKFsnLCcsIGxpbmVdLCByZXN0KV0pO1xuICAgICAgICAgICAgICAgICAgICBhcmdzID0gWyc6ICcsIGZpcnN0RG9jLCByZXN0RG9jXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBbJzonLCBpbmRlbnQoW2xpbmUsIGpvaW4oWycsJywgbGluZV0sIHByaW50ZWQpXSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBncm91cChbJ3wgJywgbm9kZS5uYW1lLCAuLi5hcmdzXSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5OYW1lZEFyZ3VtZW50OiB7XG4gICAgICAgICAgICByZXR1cm4gW25vZGUubmFtZSwgJzogJywgcGF0aC5jYWxsKHByaW50LCAndmFsdWUnKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5UZXh0Tm9kZToge1xuICAgICAgICAgICAgcmV0dXJuIHByaW50VGV4dE5vZGUocGF0aCwgb3B0aW9ucywgcHJpbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuWUFNTEZyb250bWF0dGVyOiB7XG4gICAgICAgICAgICByZXR1cm4gWyctLS0nLCBoYXJkbGluZSwgbm9kZS5ib2R5LCAnLS0tJ107XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0eXBlc18xLk5vZGVUeXBlcy5TdHJpbmc6IHtcbiAgICAgICAgICAgIGNvbnN0IHByZWZlcnJlZFF1b3RlID0gb3B0aW9ucy5saXF1aWRTaW5nbGVRdW90ZSA/IGAnYCA6IGBcImA7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUhhc1F1b3RlcyA9IG5vZGUudmFsdWUuaW5jbHVkZXMocHJlZmVycmVkUXVvdGUpO1xuICAgICAgICAgICAgY29uc3QgcXVvdGUgPSB2YWx1ZUhhc1F1b3Rlc1xuICAgICAgICAgICAgICAgID8gb3Bwb3NpdGVRdW90ZXNbcHJlZmVycmVkUXVvdGVdXG4gICAgICAgICAgICAgICAgOiBwcmVmZXJyZWRRdW90ZTtcbiAgICAgICAgICAgIHJldHVybiBbcXVvdGUsIG5vZGUudmFsdWUsIHF1b3RlXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLk51bWJlcjoge1xuICAgICAgICAgICAgaWYgKGFyZ3MudHJ1bmNhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZS5yZXBsYWNlKC9cXC5cXGQrJC8sICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuUmFuZ2U6IHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJygnLFxuICAgICAgICAgICAgICAgIHBhdGguY2FsbCgocCkgPT4gcHJpbnQocCwgeyB0cnVuY2F0ZTogdHJ1ZSB9KSwgJ3N0YXJ0JyksXG4gICAgICAgICAgICAgICAgJy4uJyxcbiAgICAgICAgICAgICAgICBwYXRoLmNhbGwoKHApID0+IHByaW50KHAsIHsgdHJ1bmNhdGU6IHRydWUgfSksICdlbmQnKSxcbiAgICAgICAgICAgICAgICAnKScsXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkTGl0ZXJhbDoge1xuICAgICAgICAgICAgaWYgKG5vZGUua2V5d29yZCA9PT0gJ251bGwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICduaWwnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUua2V5d29yZDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLlZhcmlhYmxlTG9va3VwOiB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBbXTtcbiAgICAgICAgICAgIGlmIChub2RlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBkb2MucHVzaChub2RlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9va3VwcyA9IHBhdGgubWFwKChsb29rdXBQYXRoLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvb2t1cCA9IGxvb2t1cFBhdGguZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGxvb2t1cC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuU3RyaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGxvb2t1cC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzR2xvYmFsU3RyaW5nTG9va3VwID0gaW5kZXggPT09IDAgJiYgIW5vZGUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNHbG9iYWxTdHJpbmdMb29rdXAgJiYgL15bYS16MC05X10rXFw/PyQvaS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbJy4nLCB2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWydbJywgcHJpbnQobG9va3VwUGF0aCksICddJ107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsnWycsIHByaW50KGxvb2t1cFBhdGgpLCAnXSddO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgJ2xvb2t1cHMnKTtcbiAgICAgICAgICAgIHJldHVybiBbLi4uZG9jLCAuLi5sb29rdXBzXTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzXzEuYXNzZXJ0TmV2ZXIpKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wcmludGVyTGlxdWlkSHRtbCA9IHtcbiAgICBwcmludDogcHJpbnROb2RlLFxuICAgIHByZXByb2Nlc3M6IHByaW50X3ByZXByb2Nlc3NfMS5wcmVwcm9jZXNzLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWNISnBiblJsY2kxc2FYRjFhV1F0YUhSdGJDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNCeWFXNTBaWEl0YkdseGRXbGtMV2gwYld3dWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2RVTkJRWE5FTzBGQlEzUkVMRzFEUVhOQ2FVSTdRVUZEYWtJc2JVTkJRWE5ETzBGQlJYUkRMR2xGUVVGM1JEdEJRVU40UkN3eVEwRk5lVUk3UVVGRGVrSXNjVVJCUVhWRU8wRkJRM1pFTERaRFFVYzJRanRCUVVNM1FpeHRSRUZKWjBNN1FVRkRhRU1zZFVSQlFYbEVPMEZCUlhwRUxFMUJRVTBzUlVGQlJTeFJRVUZSTEVWQlFVVXNSMEZCUnl4alFVRkhMRU5CUVVNN1FVRkRla0lzVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU42UlN4TlFVRk5MRVZCUVVVc2IwSkJRVzlDTEVWQlFVVXNSMEZCUnl4alFVRkhMRU5CUVVNc1MwRkJXU3hEUVVGRE8wRkJSV3hFTEZOQlFWTXNVMEZCVXl4RFFVRkRMRkZCUVdkQ0xFVkJRVVVzVDBGQk5FSTdTVUZETDBRc1NVRkJTVHRSUVVOR0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTTNSVHRKUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlExWXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dExRVU14UWp0QlFVTklMRU5CUVVNN1FVRkZSQ3hUUVVGVExHVkJRV1VzUTBGTGRFSXNTVUZCWjBJc1JVRkJSU3hSUVVFMlFpeEZRVUZGTEV0QlFXOUNPMGxCUTNKRkxFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRKUVVNM1FpeEpRVUZKTEVsQlFVRXNaVUZCVHl4RlFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU03VVVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXp0SlFVTjRReXhQUVVGUExFdEJRVXNzUTBGRFZqdFJRVU5GTEUxQlFVMHNRMEZCUXp0WlFVTk1MRWxCUVVrN1dVRkRTaXhKUVVGSkxFTkJRMFlzU1VGQlNTeEZRVU5LTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGRGVFTTdVMEZEUml4RFFVRkRPMUZCUTBZc1VVRkJVVHRMUVVOVUxFVkJRMFE3VVVGRFJTeFhRVUZYTEVWQlFVVXNTVUZCUVN3eVFrRkJiVUlzUlVGRE9VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkRXQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1MwRkJTeXhGUVVNM1FpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVU0xUWp0TFFVTkdMRU5CUTBZc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGRlJDeE5RVUZOTEdOQlFXTXNSMEZCUnp0SlFVTnlRaXhIUVVGSExFVkJRVVVzUjBGQlJ6dEpRVU5TTEVkQlFVY3NSVUZCUlN4SFFVRkhPME5CUTFRc1EwRkJRenRCUVVWR0xGTkJRVk1zWTBGQll5eERRVVZ5UWl4SlFVRm5RaXhGUVVGRkxFOUJRVFJDTEVWQlFVVXNUVUZCY1VJN1NVRkRja1VzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wbEJRemRDTEUxQlFVMHNWMEZCVnl4SFFVRkhMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEpRVEpDTlVNc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUXpkQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhMUVVGTExFVkJRelZDTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlF6TkNMRU5CUVVNN1NVRkRSaXhOUVVGTkxHTkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXp0SlFVTjJSQ3hOUVVGTkxESkNRVUV5UWl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZEYmtRc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJTeERRVU5hTEVsQlFVRXNjMEpCUVdNc1JVRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGRGVFVXNRMEZCUXp0SlFVTkdMRTFCUVUwc1MwRkJTeXhIUVVGSExESkNRVUV5UWp0UlFVTjJReXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXp0UlFVTm9ReXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETzBsQlJXNUNMRTlCUVU4N1VVRkRUQ3hKUVVGSkxFTkJRVU1zU1VGQlNUdFJRVU5VTEVkQlFVYzdVVUZEU0N4TFFVRkxPMUZCUTB3c1NVRkJRU3d5UWtGQmJVSXNSVUZEYWtJc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGRFdDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eEZRVU0xUWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVTXpRanRaUVVORExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlEwZzdaMEpCUTBVc1RVRkJUU3hEUVVGRE8yOUNRVU5NTEZGQlFWRTdiMEpCUTFJc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZCTEdkQ1FVRlJMRVZCUVVNc1NVRkJRU3hwUWtGQlV5eEZRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8ybENRVU5xUkN4RFFVRkRPMmRDUVVOR0xGRkJRVkU3WVVGRFZDeEZRVU5FTEVWQlFVVXNSVUZCUlN4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVOd1FqdFpRVU5JTEVOQlFVTXNRMEZCUXl4TFFVRkxPMUZCUTFRc1MwRkJTenRMUVVOT0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlJVUXNVMEZCVXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZqTzBsQlEzWkRMRTlCUVU4c1EwRkRUQ3hKUVVGSkxFTkJRVU1zVlVGQlZUdFJRVU5tTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNVVUZCVVR0UlFVTXpReXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlExWXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlF6ZENMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJSVVFzVTBGQlV5eGhRVUZoTEVOQlEzQkNMRWxCUVhWQ0xFVkJRM1pDTEU5QlFUUkNMRVZCUXpWQ0xFMUJRWEZDTzBsQlJYSkNMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVVTNRaXhKUVVGSkxHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVGRkxFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0SlFVVXZReXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETzBsQlEzcERMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZGZUVJc1RVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNUdFRRVU53UWl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRE8xTkJRM0JDTEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1UwRkRaaXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0UlFVTmFMRWxCUVVrc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU5pTEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRlRU1zU1VGQlNTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTI1Q0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMWxCUTNKRExFMUJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVOMFFpeEpRVUZKTEU5QlFVOHNSVUZCUlR0blFrRkRXQ3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETzJGQlEycENPMmxDUVVGTk8yZENRVU5NTEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03WVVGRGFFSTdXVUZEUkN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFOQlEyaENPMUZCUTBRc1QwRkJUeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYmtJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRlRDeFBRVUZQTzFGQlEwd3NTVUZCUVN3eVFrRkJjVUlzUlVGQlF5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNWVUZCVlN4RFFVRkRPMUZCUXpGQ0xFbEJRVUVzTWtKQlFYRkNMRVZCUVVNc1NVRkJTU3hGUVVGRkxFOUJRVThzUTBGQlF6dExRVU55UXl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVVWRUxGTkJRVk1zVTBGQlV5eERRVU5vUWl4SlFVRnRRaXhGUVVOdVFpeFBRVUUwUWl4RlFVTTFRaXhMUVVGdlFpeEZRVU53UWl4UFFVRXdRaXhGUVVGRk8wbEJSVFZDTEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEpRVU0zUWl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3VVVGRGFrSXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFsQlEzWkNMRTlCUVU4N1owSkJRMHdzU1VGQlFTeDNRa0ZCWVN4RlFVRkRMRWxCUVRaQ0xFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNN1owSkJRMnhGTEZGQlFWRTdZVUZEVkN4RFFVRkRPMU5CUTBnN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1dVRkRNVUlzVDBGQlR5eEpRVUZCTEhOQ1FVRlpMRVZCUVVNc1NVRkJORUlzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRia1U3VVVGRlJDeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVU03V1VGRE9VSXNUMEZCVHl4SlFVRkJMSE5DUVVGWkxFVkJRVU1zU1VGQlowTXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGRrVTdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJRenRaUVVOeVF5eFBRVUZQTEVsQlFVRXNjMEpCUVZrc1JVRkRha0lzU1VGQmRVTXNSVUZEZGtNc1QwRkJUeXhGUVVOUUxFdEJRVXNzUTBGRFRpeERRVUZETzFOQlEwZzdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdXVUZETVVJc1RVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlFTeHBRa0ZCVXl4RlFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFpRVU51UXl4TlFVRk5MRzFDUVVGdFFpeEhRVU4yUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVNelJDeE5RVUZOTEVsQlFVa3NSMEZEVWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSVHRuUWtGRGFrTXNRMEZCUXl4RFFVRkRPMjlDUVVORkxFMUJRVTBzUTBGQlF6dDNRa0ZEVEN4UlFVRlJPM2RDUVVOU0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNTVUZCUVN4blFrRkJVU3hGUVVGRExFdEJRVXNzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8zRkNRVU55UkN4RFFVRkRPMjlDUVVOR0xGRkJRVkU3YVVKQlExUTdaMEpCUTBnc1EwRkJReXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZGYWtJc1QwRkJUeXhMUVVGTExFTkJRVU03WjBKQlExZ3NTMEZCU3l4RFFVRkRPMjlDUVVOS0xFZEJRVWM3YjBKQlEwZ3NTVUZCU1N4RFFVRkRMRWxCUVVrN2IwSkJRMVFzWlVGQlpTeERRVUZETEVsQlFUUkNMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF6dHZRa0ZETjBRc1IwRkJSenRwUWtGRFNpeERRVUZETzJkQ1FVTkdMRWxCUVVrN1owSkJRMG9zUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU03WVVGRGRrSXNRMEZCUXl4RFFVRkRPMU5CUTBvN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1dVRkRla0lzVDBGQlR5eEpRVUZCTEhkQ1FVRmxMRVZCUVVNc1NVRkJNa0lzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRek5GTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFsQlF6TkNMRTFCUVUwc1MwRkJTeXhIUVVGSExFbEJRVUVzYVVKQlFWTXNSVUZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03V1VGRGJrTXNUVUZCVFN4dFFrRkJiVUlzUjBGRGRrSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRNMFFzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCUVN4blFrRkJVU3hGUVVGRExFdEJRVXNzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xbEJRMnhFTEUxQlFVMHNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJRenRuUWtGRGRrSXNTVUZCU1R0blFrRkRTaXhKUVVGSkxFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1IwRkJSenRuUWtGRFNDeEpRVUZKTEVOQlFVTXNTVUZCU1R0blFrRkRWQ3hIUVVGSE8yZENRVU5JTEVsQlFVa3NRMEZCUXl4aFFVRmhPMmRDUVVOc1FpeEpRVUZKTzJGQlEwd3NRMEZCUXl4RFFVRkRPMWxCUTBnc1RVRkJUU3hSUVVGUkxFZEJRVWM3WjBKQlEyWXNTVUZCU1R0blFrRkRTaXhKUVVGSkxFTkJRVU1zWlVGQlpUdG5Ra0ZEY0VJc1IwRkJSenRuUWtGRFNDeExRVUZMTzJkQ1FVTk1MRWxCUVVrc1EwRkJReXhKUVVGSk8yZENRVU5VTEVkQlFVYzdaMEpCUTBnc1NVRkJTU3hEUVVGRExHRkJRV0U3WjBKQlEyeENMRWxCUVVrN1lVRkRUQ3hEUVVGRE8xbEJSVVlzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJSVHRuUWtGRE1VSXNUVUZCVFN4RFFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dG5Ra0ZEZUVRc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZEV2l4UFFVRlBPM2RDUVVOTUxGVkJRVlU3ZDBKQlExWXNSMEZCUnl4dlFrRkJiMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRPM2RDUVVONlF5eFJRVUZSTzNGQ1FVTlVMRU5CUVVNN2FVSkJRMGc3WjBKQlJVUXNUVUZCVFN4SlFVRkpMRWRCUVVjc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRia1VzVDBGQlR6dHZRa0ZEVEN4VlFVRlZPMjlDUVVOV0xFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1R0dlFrRkRNVU1zVVVGQlVUdHZRa0ZEVWl4UlFVRlJPMmxDUVVOVUxFTkJRVU03WVVGRFNEdFpRVVZFTEVsQlEwVXNRMEZCUXl4SlFVRkJMREpDUVVGdFFpeEZRVU5zUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVOWUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFVkJRek5DTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVOQlF6VkNMRVZCUTBRN1owSkJRMEVzVDBGQlR6dHZRa0ZEVEN4VlFVRlZPMjlDUVVOV0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVTm1MRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRVZCUXpOQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRelZDTzI5Q1FVTkVMRkZCUVZFN2FVSkJRMVFzUTBGQlF6dGhRVU5JTzFsQlJVUXNUMEZCVHp0blFrRkRUQ3hWUVVGVk8yZENRVU5XTEUxQlFVMHNRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM2hETEZGQlFWRTdaMEpCUTFJc1VVRkJVVHRoUVVOVUxFTkJRVU03VTBGRFNEdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dFpRVU40UWl4UFFVRlBMRWxCUVVFc2RVSkJRV01zUlVGQlF5eEpRVUV3UWl4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEZWtVN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1dVRkRNMElzVDBGQlR5eEpRVUZCTERCQ1FVRnBRaXhGUVVOMFFpeEpRVUUyUWl4RlFVTTNRaXhQUVVGUExFVkJRMUFzUzBGQlN5eEZRVU5NTEVsQlFVa3NRMEZEVEN4RFFVRkRPMU5CUTBnN1VVRkZSQ3hMUVVGTExHbENRVUZUTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRlRUlzVDBGQlR5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRPMU5CUTJ4Q08xRkJSVVFzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmxCUVZrc1EwRkJRenRSUVVNMVFpeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTTdVVUZEYUVNc1MwRkJTeXhwUWtGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03V1VGREwwSXNUMEZCVHl4alFVRmpMRU5CUTI1Q0xFbEJRVzFGTEVWQlEyNUZMRTlCUVU4c1JVRkRVQ3hMUVVGTExFTkJRMDRzUTBGQlF6dFRRVU5JTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlF6RkNMRTlCUVU4N1owSkJRMHdzVFVGQlRUdG5Ra0ZEVGl4TFFVRkxMRU5CUVVNN2IwSkJRMG9zVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlFTeG5Ra0ZCVVN4RlFVRkRMRWxCUVVFc2FVSkJRVk1zUlVGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTndSU3hKUVVGSk8ybENRVU5NTEVOQlFVTTdaMEpCUTBZc1MwRkJTenRoUVVOT0xFTkJRVU03VTBGRFNEdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFpRVU0zUWl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJRenRaUVVNMVF5eEpRVUZKTEU5QlFVOHNSMEZCVVN4RlFVRkZMRU5CUVVNN1dVRkRkRUlzU1VGQlNTeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVVU3WjBKQlF6TkNMRTlCUVU4c1IwRkJSenR2UWtGRFVpeEpRVUZKTzI5Q1FVTktMRWxCUVVrc1EwRkRSaXhKUVVGSkxFVkJRMG9zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVOeVF6dHBRa0ZEUml4RFFVRkRPMkZCUTBnN1dVRkRSQ3hQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMU5CUTNoQ08xRkJSVVFzUzBGQlN5eHBRa0ZCVXl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8xbEJRek5DTEVsQlFVa3NTVUZCU1N4SFFVRlZMRVZCUVVVc1EwRkJRenRaUVVWeVFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdG5Ra0ZEZUVJc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8yZENRVU5zUkN4TlFVRk5MR2REUVVGblF5eEhRVU53UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExHRkJRV0VzUTBGQlF6dG5Ra0ZGYUVRc1NVRkJTU3huUTBGQlowTXNSVUZCUlR0dlFrRkRjRU1zVFVGQlRTeERRVUZETEZGQlFWRXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF6dHZRa0ZEY0VNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlFTeGxRVUZQTEVWQlFVTXNTVUZCU1N4RFFVRkRPM2RDUVVNelFpeERRVUZETEVOQlFVTXNSVUZCUlR0M1FrRkRTaXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzI5Q1FVTnFSQ3hKUVVGSkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8ybENRVU5zUXp0eFFrRkJUVHR2UWtGRFRDeEpRVUZKTEVkQlFVY3NRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRE1VUTdZVUZEUmp0WlFVVkVMRTlCUVU4c1MwRkJTeXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF6RkRPMUZCUlVRc1MwRkJTeXhwUWtGQlV5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMWxCUXpWQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRM0pFTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzFsQlEzWkNMRTlCUVU4c1lVRkJZU3hEUVVGRExFbEJRWGxDTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMnBGTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzFsQlF6bENMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRE5VTTdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZEY2tJc1RVRkJUU3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJRenRaUVVNM1JDeE5RVUZOTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0WlFVTXpSQ3hOUVVGTkxFdEJRVXNzUjBGQlJ5eGpRVUZqTzJkQ1FVTXhRaXhEUVVGRExFTkJRVU1zWTBGQll5eERRVUZETEdOQlFXTXNRMEZCUXp0blFrRkRhRU1zUTBGQlF5eERRVUZETEdOQlFXTXNRMEZCUXp0WlFVTnVRaXhQUVVGUExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGJrTTdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZEY2tJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzJkQ1FVTnFRaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6dGhRVU42UXp0cFFrRkJUVHRuUWtGRFRDeFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1lVRkRia0k3VTBGRFJqdFJRVVZFTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFpRVU53UWl4UFFVRlBPMmRDUVVOTUxFZEJRVWM3WjBKQlEwZ3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRTlCUVU4c1EwRkJRenRuUWtGRGRrUXNTVUZCU1R0blFrRkRTaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETzJkQ1FVTnlSQ3hIUVVGSE8yRkJRMG9zUTBGQlF6dFRRVU5JTzFGQlJVUXNTMEZCU3l4cFFrRkJVeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFsQlJUVkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUzBGQlN5eE5RVUZOTEVWQlFVVTdaMEpCUXpOQ0xFOUJRVThzUzBGQlN5eERRVUZETzJGQlEyUTdXVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU03VTBGRGNrSTdVVUZGUkN4TFFVRkxMR2xDUVVGVExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdXVUZETjBJc1RVRkJUU3hIUVVGSExFZEJRVlVzUlVGQlJTeERRVUZETzFsQlEzUkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdG5Ra0ZEWWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0aFFVTnlRanRaUVVORUxFMUJRVTBzVDBGQlR5eEhRVUZWTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVTdaMEpCUTNCRUxFMUJRVTBzVFVGQlRTeEhRVUZITEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVhOQ0xFTkJRVU03WjBKQlEzcEVMRkZCUVZFc1RVRkJUU3hEUVVGRExFbEJRVWtzUlVGQlJUdHZRa0ZEYmtJc1MwRkJTeXhwUWtGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPM2RDUVVOeVFpeE5RVUZOTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8zZENRVWN6UWl4TlFVRk5MRzlDUVVGdlFpeEhRVUZITEV0QlFVc3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzNkQ1FVTjJSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk96UkNRVU16UkN4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzNsQ1FVTnlRanQzUWtGRFJDeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0eFFrRkRkRU03YjBKQlEwUXNUMEZCVHl4RFFVRkRMRU5CUVVNN2QwSkJRMUFzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdjVUpCUTNSRE8ybENRVU5HTzFsQlEwZ3NRMEZCUXl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8xbEJRMlFzVDBGQlR5eERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRExFTkJRVU03VTBGRE4wSTdVVUZGUkN4UFFVRlBMRU5CUVVNc1EwRkJRenRaUVVOUUxFOUJRVThzU1VGQlFTeHRRa0ZCVnl4RlFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRekZDTzB0QlEwWTdRVUZEU0N4RFFVRkRPMEZCUlZrc1VVRkJRU3hwUWtGQmFVSXNSMEZETlVJN1NVRkRSU3hMUVVGTExFVkJRVVVzVTBGQlV6dEpRVU5vUWl4VlFVRlZMRVZCUVZZc05rSkJRVlU3UTBGRFdDeERRVUZESW4wPSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0VtcHR5ID0gZXhwb3J0cy5pbnRlcnNwZXJzZSA9IGV4cG9ydHMuZmlyc3QgPSBleHBvcnRzLmxhc3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBsYXN0KHgpIHtcbiAgICByZXR1cm4geFt4Lmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0cy5sYXN0ID0gbGFzdDtcbmZ1bmN0aW9uIGZpcnN0KHgpIHtcbiAgICByZXR1cm4geFswXTtcbn1cbmV4cG9ydHMuZmlyc3QgPSBmaXJzdDtcbmZ1bmN0aW9uIGludGVyc3BlcnNlKGFycmF5LCBkZWxpbSkge1xuICAgIHJldHVybiBhcnJheS5mbGF0TWFwKCh2YWwpID0+IFtkZWxpbSwgdmFsXSkuc2xpY2UoMSk7XG59XG5leHBvcnRzLmludGVyc3BlcnNlID0gaW50ZXJzcGVyc2U7XG5mdW5jdGlvbiBpc0VtcHR5KGNvbCkge1xuICAgIHJldHVybiBjb2wubGVuZ3RoID09PSAwO1xufVxuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVlYSnlZWGt1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12Y0hKcGJuUmxjaTkxZEdsc2N5OWhjbkpoZVM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdRVUZCUVN4VFFVRm5RaXhKUVVGSkxFTkJRVWtzUTBGQlRUdEpRVU0xUWl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNwQ0xFTkJRVU03UVVGR1JDeHZRa0ZGUXp0QlFVVkVMRk5CUVdkQ0xFdEJRVXNzUTBGQlNTeERRVUZOTzBsQlF6ZENMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEyUXNRMEZCUXp0QlFVWkVMSE5DUVVWRE8wRkJSVVFzVTBGQlowSXNWMEZCVnl4RFFVRkpMRXRCUVZVc1JVRkJSU3hMUVVGUk8wbEJRMnBFTEU5QlFVOHNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRka1FzUTBGQlF6dEJRVVpFTEd0RFFVVkRPMEZCUlVRc1UwRkJaMElzVDBGQlR5eERRVUZETEVkQlFWVTdTVUZEYUVNc1QwRkJUeXhIUVVGSExFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTXhRaXhEUVVGRE8wRkJSa1FzTUVKQlJVTWlmUT09IiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNOb25FbXB0eUFycmF5ID0gZXhwb3J0cy5pZkJyZWFrQ2hhaW4gPSBleHBvcnRzLkZPUkNFX0JSRUFLX0dST1VQX0lEID0gZXhwb3J0cy5GT1JDRV9GTEFUX0dST1VQX0lEID0gZXhwb3J0cy5nZXRXaGl0ZXNwYWNlVHJpbSA9IGV4cG9ydHMuaXNEZWVwbHlOZXN0ZWQgPSBleHBvcnRzLmdldFNvdXJjZSA9IHZvaWQgMDtcbmNvbnN0IHByZXR0aWVyXzEgPSByZXF1aXJlKFwicHJldHRpZXJcIik7XG5jb25zdCBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9wYXJzZXJcIik7XG5jb25zdCBhcnJheV8xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIik7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi8uLi9wcmludGVyL3V0aWxzL3N0cmluZ1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvbm9kZVwiKSwgZXhwb3J0cyk7XG5jb25zdCB7IGJ1aWxkZXJzIH0gPSBwcmV0dGllcl8xLmRvYztcbmNvbnN0IHsgaWZCcmVhayB9ID0gYnVpbGRlcnM7XG5mdW5jdGlvbiBnZXRTb3VyY2UocGF0aCkge1xuICAgIHJldHVybiBwYXRoLmdldFZhbHVlKCkuc291cmNlO1xufVxuZXhwb3J0cy5nZXRTb3VyY2UgPSBnZXRTb3VyY2U7XG5mdW5jdGlvbiBpc0RlZXBseU5lc3RlZChub2RlKSB7XG4gICAgaWYgKCFub2RlLmNoaWxkcmVuKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCgwLCBwYXJzZXJfMS5pc0JyYW5jaGVkVGFnKShub2RlKSkge1xuICAgICAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiBpc0RlZXBseU5lc3RlZChjaGlsZCkpO1xuICAgIH1cbiAgICByZXR1cm4gISFub2RlLmNoaWxkcmVuLmZpbmQoKGNoaWxkKSA9PiAhKDAsIGFycmF5XzEuaXNFbXB0eSkoY2hpbGQuY2hpbGRyZW4gfHwgW10pKTtcbn1cbmV4cG9ydHMuaXNEZWVwbHlOZXN0ZWQgPSBpc0RlZXBseU5lc3RlZDtcbmZ1bmN0aW9uIGdldFdoaXRlc3BhY2VUcmltKGN1cnJXaGl0ZXNwYWNlVHJpbSwgbmVlZHNXaGl0ZXNwYWNlU3RyaXBwaW5nT25CcmVhaywgZ3JvdXBJZHMpIHtcbiAgICByZXR1cm4gaWZCcmVha0NoYWluKG5lZWRzV2hpdGVzcGFjZVN0cmlwcGluZ09uQnJlYWsgPyAnLScgOiBjdXJyV2hpdGVzcGFjZVRyaW0sIGN1cnJXaGl0ZXNwYWNlVHJpbSwgQXJyYXkuaXNBcnJheShncm91cElkcykgPyBncm91cElkcyA6IFtncm91cElkc10pO1xufVxuZXhwb3J0cy5nZXRXaGl0ZXNwYWNlVHJpbSA9IGdldFdoaXRlc3BhY2VUcmltO1xuZXhwb3J0cy5GT1JDRV9GTEFUX0dST1VQX0lEID0gU3ltYm9sKCdmb3JjZS1uby1icmVhaycpO1xuZXhwb3J0cy5GT1JDRV9CUkVBS19HUk9VUF9JRCA9IFN5bWJvbCgnZm9yY2UtYnJlYWsnKTtcbmZ1bmN0aW9uIGlmQnJlYWtDaGFpbihicmVha3NDb250ZW50LCBmbGF0Q29udGVudCwgZ3JvdXBJZHMpIHtcbiAgICBpZiAoZ3JvdXBJZHMuaW5jbHVkZXMoZXhwb3J0cy5GT1JDRV9CUkVBS19HUk9VUF9JRCkpXG4gICAgICAgIHJldHVybiBicmVha3NDb250ZW50O1xuICAgIGlmIChncm91cElkcy5pbmNsdWRlcyhleHBvcnRzLkZPUkNFX0ZMQVRfR1JPVVBfSUQpKVxuICAgICAgICByZXR1cm4gZmxhdENvbnRlbnQ7XG4gICAgcmV0dXJuIGdyb3VwSWRzLnJlZHVjZSgoY3VyckZsYXRDb250ZW50LCBncm91cElkKSA9PiBpZkJyZWFrKGJyZWFrc0NvbnRlbnQsIGN1cnJGbGF0Q29udGVudCwgeyBncm91cElkIH0pLCBmbGF0Q29udGVudCk7XG59XG5leHBvcnRzLmlmQnJlYWtDaGFpbiA9IGlmQnJlYWtDaGFpbjtcbmZ1bmN0aW9uIGlzTm9uRW1wdHlBcnJheShvYmplY3QpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmplY3QpICYmIG9iamVjdC5sZW5ndGggPiAwO1xufVxuZXhwb3J0cy5pc05vbkVtcHR5QXJyYXkgPSBpc05vbkVtcHR5QXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdmNISnBiblJsY2k5MWRHbHNjeTlwYm1SbGVDNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3TzBGQlFVRXNkVU5CUVc5RE8wRkJSWEJETEhGRFFVRjVRenRCUVVONlF5eHBSRUZCWjBRN1FVRkZhRVFzZDBSQlFYTkRPMEZCUTNSRExIbEVRVUYxUXp0QlFVTjJReXgxUkVGQmNVTTdRVUZGY2tNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJTeEhRVUZITEdOQlFVY3NRMEZCUXp0QlFVTjZRaXhOUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUlRkQ0xGTkJRV2RDTEZOQlFWTXNRMEZCUXl4SlFVRnRRanRKUVVNelF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU03UVVGRGFFTXNRMEZCUXp0QlFVWkVMRGhDUVVWRE8wRkJSVVFzVTBGQlowSXNZMEZCWXl4RFFVTTFRaXhKUVVFNFJEdEpRVVU1UkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnFReXhKUVVGSkxFbEJRVUVzYzBKQlFXRXNSVUZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRSUVVOMlFpeFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUTNCRExHTkJRV01zUTBGQlF5eExRVUZ4UWl4RFFVRkRMRU5CUTNSRExFTkJRVU03UzBGRFNEdEpRVU5FTEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVU42UWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZCTEdWQlFVOHNSVUZCUlN4TFFVRmhMRU5CUVVNc1VVRkJVU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVU51UkN4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVZwRUxIZERRVmxETzBGQlIwUXNVMEZCWjBJc2FVSkJRV2xDTEVOQlF5OUNMR3RDUVVFd1FpeEZRVU14UWl3clFrRkJiMFFzUlVGRGNFUXNVVUZCTkVJN1NVRkZOVUlzVDBGQlR5eFpRVUZaTEVOQlEycENMQ3RDUVVFclFpeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RlFVTXhSQ3hyUWtGQmEwSXNSVUZEYkVJc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVTm9SQ3hEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVlpFTERoRFFWVkRPMEZCUjFrc1VVRkJRU3h0UWtGQmJVSXNSMEZCUnl4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0QlFVTXZReXhSUVVGQkxHOUNRVUZ2UWl4SFFVRkhMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVVV4UkN4VFFVRm5RaXhaUVVGWkxFTkJRekZDTEdGQlFXdENMRVZCUTJ4Q0xGZEJRV2RDTEVWQlEyaENMRkZCUVdkRE8wbEJSV2hETEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXcwUWtGQmIwSXNRMEZCUXp0UlFVRkZMRTlCUVU4c1lVRkJZU3hEUVVGRE8wbEJRMnhGTEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXd5UWtGQmJVSXNRMEZCUXp0UlFVRkZMRTlCUVU4c1YwRkJWeXhEUVVGRE8wbEJReTlFTEU5QlFVOHNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkRjRUlzUTBGQlF5eGxRVUZsTEVWQlFVVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1EwRkRNMElzVDBGQlR5eERRVUZETEdGQlFXRXNSVUZCUlN4bFFVRmxMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF5eEZRVU4wUkN4WFFVRlhMRU5CUTFvc1EwRkJRenRCUVVOS0xFTkJRVU03UVVGYVJDeHZRMEZaUXp0QlFVVkVMRk5CUVdkQ0xHVkJRV1VzUTBGQlF5eE5RVUZYTzBsQlEzcERMRTlCUVU4c1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU53UkN4RFFVRkRPMEZCUmtRc01FTkJSVU1pZlE9PSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRMYXN0RGVzY2VuZGFudCA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZSA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZlRyYWlsaW5nV2hpdGVzcGFjZSA9IGV4cG9ydHMuaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlID0gZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzVHJhaWxpbmdTcGFjZXMgPSBleHBvcnRzLnByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzID0gZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzU3Vycm91bmRpbmdTcGFjZXMgPSBleHBvcnRzLmZvcmNlQnJlYWtDaGlsZHJlbiA9IGV4cG9ydHMuZm9yY2VCcmVha0NvbnRlbnQgPSBleHBvcnRzLmZvcmNlTmV4dEVtcHR5TGluZSA9IGV4cG9ydHMuaGFzUHJldHRpZXJJZ25vcmUgPSBleHBvcnRzLmlzUHJldHRpZXJJZ25vcmVOb2RlID0gZXhwb3J0cy5zaG91bGRQcmVzZXJ2ZUNvbnRlbnQgPSBleHBvcnRzLmhhc05vblRleHRDaGlsZCA9IGV4cG9ydHMuaXNIdG1sTm9kZSA9IGV4cG9ydHMuaXNNdWx0aWxpbmVMaXF1aWRUYWcgPSBleHBvcnRzLmlzTGlxdWlkTm9kZSA9IGV4cG9ydHMuaXNUZXh0TGlrZU5vZGUgPSBleHBvcnRzLmlzSHRtbEVsZW1lbnQgPSBleHBvcnRzLmlzVm9pZEVsZW1lbnQgPSBleHBvcnRzLmlzU2VsZkNsb3NpbmcgPSBleHBvcnRzLmlzSHRtbENvbW1lbnQgPSBleHBvcnRzLmhhc05vQ2xvc2VNYXJrZXIgPSBleHBvcnRzLmlzUHJlTGlrZU5vZGUgPSBleHBvcnRzLmlzU2NyaXB0TGlrZVRhZyA9IHZvaWQgMDtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vdHlwZXNcIik7XG5jb25zdCBhcnJheV8xID0gcmVxdWlyZShcIi4uLy4uL3ByaW50ZXIvdXRpbHMvYXJyYXlcIik7XG5mdW5jdGlvbiBpc1NjcmlwdExpa2VUYWcobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxSYXdOb2RlO1xufVxuZXhwb3J0cy5pc1NjcmlwdExpa2VUYWcgPSBpc1NjcmlwdExpa2VUYWc7XG5mdW5jdGlvbiBpc1ByZUxpa2VOb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jc3NXaGl0ZXNwYWNlLnN0YXJ0c1dpdGgoJ3ByZScpO1xufVxuZXhwb3J0cy5pc1ByZUxpa2VOb2RlID0gaXNQcmVMaWtlTm9kZTtcbmZ1bmN0aW9uIGhhc05vQ2xvc2VNYXJrZXIobm9kZSkge1xuICAgIHJldHVybiBpc1NlbGZDbG9zaW5nKG5vZGUpIHx8IGlzVm9pZEVsZW1lbnQobm9kZSkgfHwgaXNIdG1sQ29tbWVudChub2RlKTtcbn1cbmV4cG9ydHMuaGFzTm9DbG9zZU1hcmtlciA9IGhhc05vQ2xvc2VNYXJrZXI7XG5mdW5jdGlvbiBpc0h0bWxDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sQ29tbWVudDtcbn1cbmV4cG9ydHMuaXNIdG1sQ29tbWVudCA9IGlzSHRtbENvbW1lbnQ7XG5mdW5jdGlvbiBpc1NlbGZDbG9zaW5nKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sU2VsZkNsb3NpbmdFbGVtZW50O1xufVxuZXhwb3J0cy5pc1NlbGZDbG9zaW5nID0gaXNTZWxmQ2xvc2luZztcbmZ1bmN0aW9uIGlzVm9pZEVsZW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxWb2lkRWxlbWVudDtcbn1cbmV4cG9ydHMuaXNWb2lkRWxlbWVudCA9IGlzVm9pZEVsZW1lbnQ7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudDtcbn1cbmV4cG9ydHMuaXNIdG1sRWxlbWVudCA9IGlzSHRtbEVsZW1lbnQ7XG5mdW5jdGlvbiBpc1RleHRMaWtlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuICEhbm9kZSAmJiBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlO1xufVxuZXhwb3J0cy5pc1RleHRMaWtlTm9kZSA9IGlzVGV4dExpa2VOb2RlO1xuZnVuY3Rpb24gaXNMaXF1aWROb2RlKG5vZGUpIHtcbiAgICByZXR1cm4gISFub2RlICYmIHR5cGVzXzEuTGlxdWlkTm9kZVR5cGVzLmluY2x1ZGVzKG5vZGUudHlwZSk7XG59XG5leHBvcnRzLmlzTGlxdWlkTm9kZSA9IGlzTGlxdWlkTm9kZTtcbmZ1bmN0aW9uIGlzTXVsdGlsaW5lTGlxdWlkVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gKCEhbm9kZSAmJlxuICAgICAgICBub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkxpcXVpZFRhZyAmJlxuICAgICAgICAhIW5vZGUuY2hpbGRyZW4gJiZcbiAgICAgICAgISgwLCBhcnJheV8xLmlzRW1wdHkpKG5vZGUuY2hpbGRyZW4pKTtcbn1cbmV4cG9ydHMuaXNNdWx0aWxpbmVMaXF1aWRUYWcgPSBpc011bHRpbGluZUxpcXVpZFRhZztcbmZ1bmN0aW9uIGlzSHRtbE5vZGUobm9kZSkge1xuICAgIHJldHVybiAhIW5vZGUgJiYgdHlwZXNfMS5IdG1sTm9kZVR5cGVzLmluY2x1ZGVzKG5vZGUudHlwZSk7XG59XG5leHBvcnRzLmlzSHRtbE5vZGUgPSBpc0h0bWxOb2RlO1xuZnVuY3Rpb24gaGFzTm9uVGV4dENoaWxkKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuY2hpbGRyZW4gJiZcbiAgICAgICAgbm9kZS5jaGlsZHJlbi5zb21lKChjaGlsZCkgPT4gY2hpbGQudHlwZSAhPT0gdHlwZXNfMS5Ob2RlVHlwZXMuVGV4dE5vZGUpKTtcbn1cbmV4cG9ydHMuaGFzTm9uVGV4dENoaWxkID0gaGFzTm9uVGV4dENoaWxkO1xuZnVuY3Rpb24gc2hvdWxkUHJlc2VydmVDb250ZW50KG5vZGUsIF9vcHRpb25zKSB7XG4gICAgaWYgKGlzUHJlTGlrZU5vZGUobm9kZSkgJiZcbiAgICAgICAgbm9kZS5jaGlsZHJlbiAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuLnNvbWUoKGNoaWxkKSA9PiAhaXNUZXh0TGlrZU5vZGUoY2hpbGQpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5zaG91bGRQcmVzZXJ2ZUNvbnRlbnQgPSBzaG91bGRQcmVzZXJ2ZUNvbnRlbnQ7XG5mdW5jdGlvbiBpc1ByZXR0aWVySWdub3JlTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIChub2RlICYmXG4gICAgICAgIG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbENvbW1lbnQgJiZcbiAgICAgICAgL15cXHMqcHJldHRpZXItaWdub3JlL20udGVzdChub2RlLmJvZHkpKTtcbn1cbmV4cG9ydHMuaXNQcmV0dGllcklnbm9yZU5vZGUgPSBpc1ByZXR0aWVySWdub3JlTm9kZTtcbmZ1bmN0aW9uIGhhc1ByZXR0aWVySWdub3JlKG5vZGUpIHtcbiAgICByZXR1cm4gaXNQcmV0dGllcklnbm9yZU5vZGUobm9kZSkgfHwgaXNQcmV0dGllcklnbm9yZU5vZGUobm9kZS5wcmV2KTtcbn1cbmV4cG9ydHMuaGFzUHJldHRpZXJJZ25vcmUgPSBoYXNQcmV0dGllcklnbm9yZTtcbmZ1bmN0aW9uIGZvcmNlTmV4dEVtcHR5TGluZShub2RlKSB7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFub2RlLm5leHQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBzb3VyY2UgPSBub2RlLnNvdXJjZTtcbiAgICBsZXQgdG1wO1xuICAgIHRtcCA9IHNvdXJjZS5pbmRleE9mKCdcXG4nLCBub2RlLnBvc2l0aW9uLmVuZCk7XG4gICAgaWYgKHRtcCA9PT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0bXAgPSBzb3VyY2UuaW5kZXhPZignXFxuJywgdG1wICsgMSk7XG4gICAgaWYgKHRtcCA9PT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdG1wIDwgbm9kZS5uZXh0LnBvc2l0aW9uLnN0YXJ0O1xufVxuZXhwb3J0cy5mb3JjZU5leHRFbXB0eUxpbmUgPSBmb3JjZU5leHRFbXB0eUxpbmU7XG5mdW5jdGlvbiBmb3JjZUJyZWFrQ29udGVudChub2RlKSB7XG4gICAgcmV0dXJuIChmb3JjZUJyZWFrQ2hpbGRyZW4obm9kZSkgfHxcbiAgICAgICAgKG5vZGUudHlwZSA9PT0gdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQgJiZcbiAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICAgIChbJ2JvZHknLCAnc2NyaXB0JywgJ3N0eWxlJ10uaW5jbHVkZXMobm9kZS5uYW1lKSB8fFxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uc29tZSgoY2hpbGQpID0+IGhhc05vblRleHRDaGlsZChjaGlsZCkpKSkgfHxcbiAgICAgICAgKG5vZGUuZmlyc3RDaGlsZCAmJlxuICAgICAgICAgICAgbm9kZS5maXJzdENoaWxkID09PSBub2RlLmxhc3RDaGlsZCAmJlxuICAgICAgICAgICAgbm9kZS5maXJzdENoaWxkLnR5cGUgIT09IHR5cGVzXzEuTm9kZVR5cGVzLlRleHROb2RlICYmXG4gICAgICAgICAgICBoYXNMZWFkaW5nTGluZUJyZWFrKG5vZGUuZmlyc3RDaGlsZCkgJiZcbiAgICAgICAgICAgICghbm9kZS5sYXN0Q2hpbGQuaXNUcmFpbGluZ1doaXRlc3BhY2VTZW5zaXRpdmUgfHxcbiAgICAgICAgICAgICAgICBoYXNUcmFpbGluZ0xpbmVCcmVhayhub2RlLmxhc3RDaGlsZCkpKSk7XG59XG5leHBvcnRzLmZvcmNlQnJlYWtDb250ZW50ID0gZm9yY2VCcmVha0NvbnRlbnQ7XG5mdW5jdGlvbiBmb3JjZUJyZWFrQ2hpbGRyZW4obm9kZSkge1xuICAgIHJldHVybiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgdHlwZW9mIG5vZGUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgKFsnaHRtbCcsICdoZWFkJywgJ3VsJywgJ29sJywgJ3NlbGVjdCddLmluY2x1ZGVzKG5vZGUubmFtZSkgfHxcbiAgICAgICAgICAgIChub2RlLmNzc0Rpc3BsYXkuc3RhcnRzV2l0aCgndGFibGUnKSAmJiBub2RlLmNzc0Rpc3BsYXkgIT09ICd0YWJsZS1jZWxsJykpKTtcbn1cbmV4cG9ydHMuZm9yY2VCcmVha0NoaWxkcmVuID0gZm9yY2VCcmVha0NoaWxkcmVuO1xuZnVuY3Rpb24gcHJlZmVySGFyZGxpbmVBc1N1cnJvdW5kaW5nU3BhY2VzKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICBjYXNlIHR5cGVzXzEuTm9kZVR5cGVzLkh0bWxDb21tZW50OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuSHRtbEVsZW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICAgICAgWydzY3JpcHQnLCAnc2VsZWN0J10uaW5jbHVkZXMobm9kZS5uYW1lKSk7XG4gICAgICAgIGNhc2UgdHlwZXNfMS5Ob2RlVHlwZXMuTGlxdWlkVGFnOlxuICAgICAgICAgICAgaWYgKChub2RlLnByZXYgJiYgaXNUZXh0TGlrZU5vZGUobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgICAgICAgICAobm9kZS5uZXh0ICYmIGlzVGV4dExpa2VOb2RlKG5vZGUubmV4dCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyA9IHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcztcbmZ1bmN0aW9uIHByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzKG5vZGUpIHtcbiAgICByZXR1cm4gKHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyhub2RlKSB8fFxuICAgICAgICAoaXNMaXF1aWROb2RlKG5vZGUpICYmIG5vZGUucHJldiAmJiBpc0xpcXVpZE5vZGUobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgKG5vZGUucHJldiAmJiBwcmVmZXJIYXJkbGluZUFzVHJhaWxpbmdTcGFjZXMobm9kZS5wcmV2KSkgfHxcbiAgICAgICAgaGFzU3Vycm91bmRpbmdMaW5lQnJlYWsobm9kZSkpO1xufVxuZXhwb3J0cy5wcmVmZXJIYXJkbGluZUFzTGVhZGluZ1NwYWNlcyA9IHByZWZlckhhcmRsaW5lQXNMZWFkaW5nU3BhY2VzO1xuZnVuY3Rpb24gcHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzKG5vZGUpIHtcbiAgICByZXR1cm4gKHByZWZlckhhcmRsaW5lQXNTdXJyb3VuZGluZ1NwYWNlcyhub2RlKSB8fFxuICAgICAgICAoaXNMaXF1aWROb2RlKG5vZGUpICYmXG4gICAgICAgICAgICBub2RlLm5leHQgJiZcbiAgICAgICAgICAgIChpc0xpcXVpZE5vZGUobm9kZS5uZXh0KSB8fCBpc0h0bWxOb2RlKG5vZGUubmV4dCkpKSB8fFxuICAgICAgICAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5IdG1sRWxlbWVudCAmJiBub2RlLm5hbWUgPT09ICdicicpIHx8XG4gICAgICAgIGhhc1N1cnJvdW5kaW5nTGluZUJyZWFrKG5vZGUpKTtcbn1cbmV4cG9ydHMucHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzID0gcHJlZmVySGFyZGxpbmVBc1RyYWlsaW5nU3BhY2VzO1xuZnVuY3Rpb24gaGFzTWVhbmluZ2Z1bExhY2tPZkxlYWRpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pc0xlYWRpbmdXaGl0ZXNwYWNlU2Vuc2l0aXZlICYmICFub2RlLmhhc0xlYWRpbmdXaGl0ZXNwYWNlO1xufVxuZXhwb3J0cy5oYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2UgPSBoYXNNZWFuaW5nZnVsTGFja09mTGVhZGluZ1doaXRlc3BhY2U7XG5mdW5jdGlvbiBoYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5pc1RyYWlsaW5nV2hpdGVzcGFjZVNlbnNpdGl2ZSAmJiAhbm9kZS5oYXNUcmFpbGluZ1doaXRlc3BhY2U7XG59XG5leHBvcnRzLmhhc01lYW5pbmdmdWxMYWNrT2ZUcmFpbGluZ1doaXRlc3BhY2UgPSBoYXNNZWFuaW5nZnVsTGFja09mVHJhaWxpbmdXaGl0ZXNwYWNlO1xuZnVuY3Rpb24gaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuaXNEYW5nbGluZ1doaXRlc3BhY2VTZW5zaXRpdmUgJiYgIW5vZGUuaGFzRGFuZ2xpbmdXaGl0ZXNwYWNlO1xufVxuZXhwb3J0cy5oYXNNZWFuaW5nZnVsTGFja09mRGFuZ2xpbmdXaGl0ZXNwYWNlID0gaGFzTWVhbmluZ2Z1bExhY2tPZkRhbmdsaW5nV2hpdGVzcGFjZTtcbmZ1bmN0aW9uIGhhc1N1cnJvdW5kaW5nTGluZUJyZWFrKG5vZGUpIHtcbiAgICByZXR1cm4gaGFzTGVhZGluZ0xpbmVCcmVhayhub2RlKSAmJiBoYXNUcmFpbGluZ0xpbmVCcmVhayhub2RlKTtcbn1cbmZ1bmN0aW9uIGhhc0xlYWRpbmdMaW5lQnJlYWsobm9kZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09IHR5cGVzXzEuTm9kZVR5cGVzLkRvY3VtZW50KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChub2RlLmhhc0xlYWRpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgIGhhc0xpbmVCcmVha0luUmFuZ2Uobm9kZS5zb3VyY2UsIG5vZGUucHJldlxuICAgICAgICAgICAgPyBub2RlLnByZXYucG9zaXRpb24uZW5kXG4gICAgICAgICAgICA6IG5vZGUucGFyZW50Tm9kZS5ibG9ja1N0YXJ0UG9zaXRpb25cbiAgICAgICAgICAgICAgICA/IG5vZGUucGFyZW50Tm9kZS5ibG9ja1N0YXJ0UG9zaXRpb24uZW5kXG4gICAgICAgICAgICAgICAgOiBub2RlLnBhcmVudE5vZGUucG9zaXRpb24uc3RhcnQsIG5vZGUucG9zaXRpb24uc3RhcnQpKTtcbn1cbmZ1bmN0aW9uIGhhc1RyYWlsaW5nTGluZUJyZWFrKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSB0eXBlc18xLk5vZGVUeXBlcy5Eb2N1bWVudClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAobm9kZS5oYXNUcmFpbGluZ1doaXRlc3BhY2UgJiZcbiAgICAgICAgaGFzTGluZUJyZWFrSW5SYW5nZShub2RlLnNvdXJjZSwgbm9kZS5wb3NpdGlvbi5lbmQsIG5vZGUubmV4dFxuICAgICAgICAgICAgPyBub2RlLm5leHQucG9zaXRpb24uc3RhcnRcbiAgICAgICAgICAgIDogbm9kZS5wYXJlbnROb2RlLmJsb2NrRW5kUG9zaXRpb25cbiAgICAgICAgICAgICAgICA/IG5vZGUucGFyZW50Tm9kZS5ibG9ja0VuZFBvc2l0aW9uLnN0YXJ0XG4gICAgICAgICAgICAgICAgOiBub2RlLnBhcmVudE5vZGUucG9zaXRpb24uZW5kKSk7XG59XG5mdW5jdGlvbiBoYXNMaW5lQnJlYWtJblJhbmdlKHNvdXJjZSwgc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGluZGV4ID0gc291cmNlLmluZGV4T2YoJ1xcbicsIHN0YXJ0KTtcbiAgICByZXR1cm4gaW5kZXggIT09IC0xICYmIGluZGV4IDwgZW5kO1xufVxuZnVuY3Rpb24gZ2V0TGFzdERlc2NlbmRhbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLmxhc3RDaGlsZCA/IGdldExhc3REZXNjZW5kYW50KG5vZGUubGFzdENoaWxkKSA6IG5vZGU7XG59XG5leHBvcnRzLmdldExhc3REZXNjZW5kYW50ID0gZ2V0TGFzdERlc2NlbmRhbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2libTlrWlM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5d2NtbHVkR1Z5TDNWMGFXeHpMMjV2WkdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc2JVTkJZMmxDTzBGQlEycENMR2xFUVVGblJEdEJRVVZvUkN4VFFVRm5RaXhsUVVGbExFTkJRVU1zU1VGQmVVSTdTVUZEZGtRc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRemRETEVOQlFVTTdRVUZHUkN3d1EwRkZRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRXJRanRKUVVNelJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF6bERMRU5CUVVNN1FVRkdSQ3h6UTBGRlF6dEJRVWxFTEZOQlFXZENMR2RDUVVGblFpeERRVU01UWl4SlFVRnZRanRKUVVWd1FpeFBRVUZQTEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRek5GTEVOQlFVTTdRVUZLUkN3MFEwRkpRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRnZRanRKUVVOb1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETjBNc1EwRkJRenRCUVVaRUxITkRRVVZETzBGQlJVUXNVMEZCWjBJc1lVRkJZU3hEUVVNelFpeEpRVUZ2UWp0SlFVVndRaXhQUVVGUExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0QlFVTjRSQ3hEUVVGRE8wRkJTa1FzYzBOQlNVTTdRVUZGUkN4VFFVRm5RaXhoUVVGaExFTkJRVU1zU1VGQmIwSTdTVUZEYUVRc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEdsQ1FVRlRMRU5CUVVNc1pVRkJaU3hEUVVGRE8wRkJRMnBFTEVOQlFVTTdRVUZHUkN4elEwRkZRenRCUVVWRUxGTkJRV2RDTEdGQlFXRXNRMEZCUXl4SlFVRnZRanRKUVVOb1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTTdRVUZETjBNc1EwRkJRenRCUVVaRUxITkRRVVZETzBGQlJVUXNVMEZCWjBJc1kwRkJZeXhEUVVNMVFpeEpRVUZuUXp0SlFVVm9ReXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZGQlFWRXNRMEZCUXp0QlFVTndSQ3hEUVVGRE8wRkJTa1FzZDBOQlNVTTdRVUZGUkN4VFFVRm5RaXhaUVVGWkxFTkJRekZDTEVsQlFXZERPMGxCUldoRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NTVUZCU1N4MVFrRkJaU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCVnl4RFFVRkRMRU5CUVVNN1FVRkRPVVFzUTBGQlF6dEJRVXBFTEc5RFFVbERPMEZCUlVRc1UwRkJaMElzYjBKQlFXOUNMRU5CUTJ4RExFbEJRV2RETzBsQlJXaERMRTlCUVU4c1EwRkRUQ3hEUVVGRExFTkJRVU1zU1VGQlNUdFJRVU5PTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc2FVSkJRVk1zUTBGQlF5eFRRVUZUTzFGQlEycERMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVUdFJRVU5tTEVOQlFVTXNTVUZCUVN4bFFVRlBMRVZCUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVU40UWl4RFFVRkRPMEZCUTBvc1EwRkJRenRCUVZSRUxHOUVRVk5ETzBGQlJVUXNVMEZCWjBJc1ZVRkJWU3hEUVVGRExFbEJRV2RETzBsQlEzcEVMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeHhRa0ZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlZ5eERRVUZETEVOQlFVTTdRVUZETlVRc1EwRkJRenRCUVVaRUxHZERRVVZETzBGQlJVUXNVMEZCWjBJc1pVRkJaU3hEUVVGRExFbEJRVzlDTzBsQlEyeEVMRTlCUVU4c1EwRkRTaXhKUVVGWkxFTkJRVU1zVVVGQlVUdFJRVU55UWl4SlFVRlpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGRGVrSXNRMEZCUXl4TFFVRnhRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2xDUVVGVExFTkJRVU1zVVVGQlVTeERRVU0zUkN4RFFVTkdMRU5CUVVNN1FVRkRTaXhEUVVGRE8wRkJVRVFzTUVOQlQwTTdRVUZGUkN4VFFVRm5RaXh4UWtGQmNVSXNRMEZEYmtNc1NVRkJiMElzUlVGRGNFSXNVVUZCTmtJN1NVRnZRamRDTEVsQlEwVXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJRenRSUVVOc1FpeEpRVUZaTEVOQlFVTXNVVUZCVVR0UlFVTnlRaXhKUVVGWkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRXRCUVZVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkRia1U3VVVGRFFTeFBRVUZQTEVsQlFVa3NRMEZCUXp0TFFVTmlPMGxCUlVRc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQkwwSkVMSE5FUVN0Q1F6dEJRVVZFTEZOQlFXZENMRzlDUVVGdlFpeERRVUZETEVsQlFXZERPMGxCUTI1RkxFOUJRVThzUTBGRFRDeEpRVUZKTzFGQlEwb3NTVUZCU1N4RFFVRkRMRWxCUVVrc1MwRkJTeXhwUWtGQlV5eERRVUZETEZkQlFWYzdVVUZEYmtNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGRGRrTXNRMEZCUXp0QlFVTktMRU5CUVVNN1FVRk9SQ3h2UkVGTlF6dEJRVVZFTEZOQlFXZENMR2xDUVVGcFFpeERRVUZETEVsQlFXOUNPMGxCUTNCRUxFOUJRVThzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzWkZMRU5CUVVNN1FVRkdSQ3c0UTBGRlF6dEJRVVZFTEZOQlFXZENMR3RDUVVGclFpeERRVUZETEVsQlFXZERPMGxCUTJwRkxFbEJRVWtzUTBGQlF5eEpRVUZKTzFGQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRlRUlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpPMUZCUVVVc1QwRkJUeXhMUVVGTExFTkJRVU03U1VGRE4wSXNUVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF6dEpRVWN6UWl4SlFVRkpMRWRCUVZjc1EwRkJRenRKUVVOb1FpeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVNNVF5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkJSU3hQUVVGUExFdEJRVXNzUTBGQlF6dEpRVU0zUWl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM0JETEVsQlFVa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETzBsQlF6ZENMRTlCUVU4c1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVONFF5eERRVUZETzBGQldrUXNaMFJCV1VNN1FVRkhSQ3hUUVVGblFpeHBRa0ZCYVVJc1EwRkJReXhKUVVGdlFqdEpRVU53UkN4UFFVRlBMRU5CUTB3c2EwSkJRV3RDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNoQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGZEJRVmM3V1VGRGJFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF6dFpRVU40UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVVVGQlVUdFpRVU0zUWl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF6dG5Ra0ZET1VNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVGRExHVkJRV1VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0WlFVTmtMRWxCUVVrc1EwRkJReXhWUVVGVkxFdEJRVXNzU1VGQlNTeERRVUZETEZOQlFWTTdXVUZEYkVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhSUVVGUk8xbEJRek5ETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTTdXVUZEY0VNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNOa0pCUVRaQ08yZENRVU0xUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVNelF5eERRVUZETzBGQlEwb3NRMEZCUXp0QlFXWkVMRGhEUVdWRE8wRkJSMFFzVTBGQlowSXNhMEpCUVd0Q0xFTkJRVU1zU1VGQmIwSTdTVUZEY2tRc1QwRkJUeXhEUVVOTUxFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhYUVVGWE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU03VVVGRGVFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExGRkJRVkU3VVVGRE4wSXNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTjZSQ3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEV0QlFVc3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkROMFVzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZTUkN4blJFRlJRenRCUVVWRUxGTkJRV2RDTEdsRFFVRnBReXhEUVVGRExFbEJRVzlDTzBsQlEzQkZMRkZCUVZFc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFJRVVZxUWl4TFFVRkxMR2xDUVVGVExFTkJRVU1zVjBGQlZ6dFpRVU40UWl4UFFVRlBMRWxCUVVrc1EwRkJRenRSUVVOa0xFdEJRVXNzYVVKQlFWTXNRMEZCUXl4WFFVRlhPMWxCUTNoQ0xFOUJRVThzUTBGRFRDeFBRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1VVRkJVVHRuUWtGRE4wSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkRla01zUTBGQlF6dFJRVU5LTEV0QlFVc3NhVUpCUVZNc1EwRkJReXhUUVVGVE8xbEJRM1JDTEVsQlEwVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1owSkJRM2hETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUTNoRE8yZENRVU5CTEU5QlFVOHNTMEZCU3l4RFFVRkRPMkZCUTJRN1dVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzB0QlEzQkVPMGxCUlVRc1QwRkJUeXhMUVVGTExFTkJRVU03UVVGRFppeERRVUZETzBGQmNrSkVMRGhGUVhGQ1F6dEJRVVZFTEZOQlFXZENMRFpDUVVFMlFpeERRVUZETEVsQlFXOUNPMGxCUTJoRkxFOUJRVThzUTBGRFRDeHBRMEZCYVVNc1EwRkJReXhKUVVGSkxFTkJRVU03VVVGRGRrTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6VkVMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTdzRRa0ZCT0VJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZUVRc2RVSkJRWFZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUXpsQ0xFTkJRVU03UVVGRFNpeERRVUZETzBGQlVFUXNjMFZCVDBNN1FVRkZSQ3hUUVVGblFpdzRRa0ZCT0VJc1EwRkJReXhKUVVGdlFqdEpRVU5xUlN4UFFVRlBMRU5CUTB3c2FVTkJRV2xETEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTNaRExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTnFRaXhKUVVGSkxFTkJRVU1zU1VGQlNUdFpRVU5VTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrUXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExHbENRVUZUTEVOQlFVTXNWMEZCVnl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETzFGQlF6TkVMSFZDUVVGMVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTTVRaXhEUVVGRE8wRkJRMG9zUTBGQlF6dEJRVlJFTEhkRlFWTkRPMEZCUlVRc1UwRkJaMElzYjBOQlFXOURMRU5CUTJ4RUxFbEJRVzlDTzBsQlJYQkNMRTlCUVU4c1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMEZCUTNwRkxFTkJRVU03UVVGS1JDeHZSa0ZKUXp0QlFVVkVMRk5CUVdkQ0xIRkRRVUZ4UXl4RFFVTnVSQ3hKUVVGdlFqdEpRVVZ3UWl4UFFVRlBMRWxCUVVrc1EwRkJReXcyUWtGQk5rSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXp0QlFVTXpSU3hEUVVGRE8wRkJTa1FzYzBaQlNVTTdRVUZGUkN4VFFVRm5RaXh4UTBGQmNVTXNRMEZEYmtRc1NVRkJiMEk3U1VGRmNFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTTdRVUZETTBVc1EwRkJRenRCUVVwRUxITkdRVWxETzBGQlJVUXNVMEZCVXl4MVFrRkJkVUlzUTBGQlF5eEpRVUZ2UWp0SlFVTnVSQ3hQUVVGUExHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBGTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEVsQlFXOUNPMGxCUXk5RExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVVnVSQ3hQUVVGUExFTkJRMHdzU1VGQlNTeERRVUZETEc5Q1FVRnZRanRSUVVONlFpeHRRa0ZCYlVJc1EwRkRha0lzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc1NVRkJTVHRaUVVOUUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSE8xbEJRM2hDTEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJhMElzUTBGQlF5eHJRa0ZCYTBJN1owSkJRemRETEVOQlFVTXNRMEZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJhMElzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSE8yZENRVU5xUkN4RFFVRkRMRU5CUVVVc1NVRkJTU3hEUVVGRExGVkJRV3RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkRNME1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUTNCQ0xFTkJRMFlzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzlDUVVGdlFpeERRVUZETEVsQlFXOUNPMGxCUTJoRUxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4cFFrRkJVeXhEUVVGRExGRkJRVkU3VVVGQlJTeFBRVUZQTEV0QlFVc3NRMEZCUXp0SlFVTnVSQ3hQUVVGUExFTkJRMHdzU1VGQlNTeERRVUZETEhGQ1FVRnhRanRSUVVNeFFpeHRRa0ZCYlVJc1EwRkRha0lzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZEV0N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGRGFrSXNTVUZCU1N4RFFVRkRMRWxCUVVrN1dVRkRVQ3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTenRaUVVNeFFpeERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVd0Q0xFTkJRVU1zWjBKQlFXZENPMmRDUVVNelF5eERRVUZETEVOQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVd0Q0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1MwRkJTenRuUWtGRGFrUXNRMEZCUXl4RFFVRkZMRWxCUVVrc1EwRkJReXhWUVVGclFpeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUXpGRExFTkJRMFlzUTBGQlF6dEJRVU5LTEVOQlFVTTdRVUZGUkN4VFFVRlRMRzFDUVVGdFFpeERRVUZETEUxQlFXTXNSVUZCUlN4TFFVRmhMRVZCUVVVc1IwRkJWenRKUVVOeVJTeE5RVUZOTEV0QlFVc3NSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVTXhReXhQUVVGUExFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRE8wRkJRM0pETEVOQlFVTTdRVUZGUkN4VFFVRm5RaXhwUWtGQmFVSXNRMEZCUXl4SlFVRnZRanRKUVVOd1JDeFBRVUZQTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMEZCUTI1RkxFTkJRVU03UVVGR1JDdzRRMEZGUXlKOSIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNMaW5lQnJlYWtJblJhbmdlID0gZXhwb3J0cy5vcmlnaW5hbGx5SGFkTGluZUJyZWFrcyA9IGV4cG9ydHMucmVpbmRlbnQgPSBleHBvcnRzLm1hcmt1cExpbmVzID0gZXhwb3J0cy5ib2R5TGluZXMgPSBleHBvcnRzLnRyaW1FbmQgPSBleHBvcnRzLnRyaW0gPSBleHBvcnRzLmlzV2hpdGVzcGFjZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShzb3VyY2UsIGxvYykge1xuICAgIGlmIChsb2MgPCAwIHx8IGxvYyA+PSBzb3VyY2UubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICEhc291cmNlW2xvY10ubWF0Y2goL1xccy8pO1xufVxuZXhwb3J0cy5pc1doaXRlc3BhY2UgPSBpc1doaXRlc3BhY2U7XG5jb25zdCB0cmltID0gKHgpID0+IHgudHJpbSgpO1xuZXhwb3J0cy50cmltID0gdHJpbTtcbmNvbnN0IHRyaW1FbmQgPSAoeCkgPT4geC50cmltRW5kKCk7XG5leHBvcnRzLnRyaW1FbmQgPSB0cmltRW5kO1xuZnVuY3Rpb24gYm9keUxpbmVzKHN0cikge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoL15cXG4qfFxccyokL2csICcnKVxuICAgICAgICAuc3BsaXQoL1xccj9cXG4vKTtcbn1cbmV4cG9ydHMuYm9keUxpbmVzID0gYm9keUxpbmVzO1xuZnVuY3Rpb24gbWFya3VwTGluZXMobWFya3VwKSB7XG4gICAgcmV0dXJuIG1hcmt1cC50cmltKCkuc3BsaXQoJ1xcbicpO1xufVxuZXhwb3J0cy5tYXJrdXBMaW5lcyA9IG1hcmt1cExpbmVzO1xuZnVuY3Rpb24gcmVpbmRlbnQobGluZXMsIHNraXBGaXJzdCA9IGZhbHNlKSB7XG4gICAgY29uc3QgbWluSW5kZW50TGV2ZWwgPSBsaW5lc1xuICAgICAgICAuZmlsdGVyKChfLCBpKSA9PiAoc2tpcEZpcnN0ID8gaSA+IDAgOiB0cnVlKSlcbiAgICAgICAgLmZpbHRlcigobGluZSkgPT4gbGluZS50cmltKCkubGVuZ3RoID4gMClcbiAgICAgICAgLm1hcCgobGluZSkgPT4gbGluZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGgpXG4gICAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIpLCBJbmZpbml0eSk7XG4gICAgaWYgKG1pbkluZGVudExldmVsID09PSBJbmZpbml0eSkge1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudFN0cmlwID0gbmV3IFJlZ0V4cCgnXicgKyAnICcucmVwZWF0KG1pbkluZGVudExldmVsKSk7XG4gICAgcmV0dXJuIGxpbmVzLm1hcCgobGluZSkgPT4gbGluZS5yZXBsYWNlKGluZGVudFN0cmlwLCAnJykpLm1hcChleHBvcnRzLnRyaW1FbmQpO1xufVxuZXhwb3J0cy5yZWluZGVudCA9IHJlaW5kZW50O1xuZnVuY3Rpb24gb3JpZ2luYWxseUhhZExpbmVCcmVha3MocGF0aCwgeyBsb2NTdGFydCwgbG9jRW5kIH0pIHtcbiAgICBjb25zdCBub2RlID0gcGF0aC5nZXRWYWx1ZSgpO1xuICAgIHJldHVybiBoYXNMaW5lQnJlYWtJblJhbmdlKG5vZGUuc291cmNlLCBsb2NTdGFydChub2RlKSwgbG9jRW5kKG5vZGUpKTtcbn1cbmV4cG9ydHMub3JpZ2luYWxseUhhZExpbmVCcmVha3MgPSBvcmlnaW5hbGx5SGFkTGluZUJyZWFrcztcbmZ1bmN0aW9uIGhhc0xpbmVCcmVha0luUmFuZ2Uoc291cmNlLCBsb2NTdGFydCwgbG9jRW5kKSB7XG4gICAgY29uc3QgaW5kZXhPZk5ld0xpbmUgPSBzb3VyY2UuaW5kZXhPZignXFxuJywgbG9jU3RhcnQpO1xuICAgIHJldHVybiAwIDw9IGluZGV4T2ZOZXdMaW5lICYmIGluZGV4T2ZOZXdMaW5lIDwgbG9jRW5kO1xufVxuZXhwb3J0cy5oYXNMaW5lQnJlYWtJblJhbmdlID0gaGFzTGluZUJyZWFrSW5SYW5nZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMzUnlhVzVuTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dkxpNHZjM0pqTDNCeWFXNTBaWEl2ZFhScGJITXZjM1J5YVc1bkxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenRCUVVWQkxGTkJRV2RDTEZsQlFWa3NRMEZCUXl4TlFVRmpMRVZCUVVVc1IwRkJWenRKUVVOMFJDeEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFMUJRVTBzUTBGQlF5eE5RVUZOTzFGQlFVVXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRiRVFzVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTnVReXhEUVVGRE8wRkJTRVFzYjBOQlIwTTdRVUZGVFN4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRUzlDTEZGQlFVRXNTVUZCU1N4UlFVRXlRanRCUVVOeVF5eE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMEZCUVhKRExGRkJRVUVzVDBGQlR5eFhRVUU0UWp0QlFVVnNSQ3hUUVVGblFpeFRRVUZUTEVOQlFVTXNSMEZCVnp0SlFVTnVReXhQUVVGUExFZEJRVWM3VTBGRFVDeFBRVUZQTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVc1EwRkJRenRUUVVONlFpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRjRUlzUTBGQlF6dEJRVXBFTERoQ1FVbERPMEZCUlVRc1UwRkJaMElzVjBGQlZ5eERRVUZETEUxQlFXTTdTVUZEZUVNc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMjVETEVOQlFVTTdRVUZHUkN4clEwRkZRenRCUVVWRUxGTkJRV2RDTEZGQlFWRXNRMEZCUXl4TFFVRmxMRVZCUVVVc1UwRkJVeXhIUVVGSExFdEJRVXM3U1VGRGVrUXNUVUZCVFN4alFVRmpMRWRCUVVjc1MwRkJTenRUUVVONlFpeE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1UwRkROVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRUUVVONFF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETzFOQlEzQkVMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJSVGxETEVsQlFVa3NZMEZCWXl4TFFVRkxMRkZCUVZFc1JVRkJSVHRSUVVNdlFpeFBRVUZQTEV0QlFVc3NRMEZCUXp0TFFVTmtPMGxCUlVRc1RVRkJUU3hYUVVGWExFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnFSU3hQUVVGUExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFVOHNRMEZCUXl4RFFVRkRPMEZCUTNwRkxFTkJRVU03UVVGaVJDdzBRa0ZoUXp0QlFVVkVMRk5CUVdkQ0xIVkNRVUYxUWl4RFFVTnlReXhKUVVGdFFpeEZRVU51UWl4RlFVRkZMRkZCUVZFc1JVRkJSU3hOUVVGTkxFVkJRWFZDTzBsQlJYcERMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTTNRaXhQUVVGUExHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRVVVzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBGQlEzaEZMRU5CUVVNN1FVRk9SQ3d3UkVGTlF6dEJRVVZFTEZOQlFXZENMRzFDUVVGdFFpeERRVU5xUXl4TlFVRmpMRVZCUTJRc1VVRkJaMElzUlVGRGFFSXNUVUZCWXp0SlFVVmtMRTFCUVUwc1kwRkJZeXhIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM1JFTEU5QlFVOHNRMEZCUXl4SlFVRkpMR05CUVdNc1NVRkJTU3hqUVVGakxFZEJRVWNzVFVGQlRTeERRVUZETzBGQlEzaEVMRU5CUVVNN1FVRlFSQ3hyUkVGUFF5SjkiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlxdWlkTm9kZVR5cGVzID0gZXhwb3J0cy5IdG1sTm9kZVR5cGVzID0gZXhwb3J0cy5Ob2RlVHlwZXMgPSB2b2lkIDA7XG52YXIgTm9kZVR5cGVzO1xuKGZ1bmN0aW9uIChOb2RlVHlwZXMpIHtcbiAgICBOb2RlVHlwZXNbXCJEb2N1bWVudFwiXSA9IFwiRG9jdW1lbnRcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWRSYXdUYWdcIl0gPSBcIkxpcXVpZFJhd1RhZ1wiO1xuICAgIE5vZGVUeXBlc1tcIkxpcXVpZFRhZ1wiXSA9IFwiTGlxdWlkVGFnXCI7XG4gICAgTm9kZVR5cGVzW1wiTGlxdWlkQnJhbmNoXCJdID0gXCJMaXF1aWRCcmFuY2hcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWREcm9wXCJdID0gXCJMaXF1aWREcm9wXCI7XG4gICAgTm9kZVR5cGVzW1wiSHRtbFNlbGZDbG9zaW5nRWxlbWVudFwiXSA9IFwiSHRtbFNlbGZDbG9zaW5nRWxlbWVudFwiO1xuICAgIE5vZGVUeXBlc1tcIkh0bWxWb2lkRWxlbWVudFwiXSA9IFwiSHRtbFZvaWRFbGVtZW50XCI7XG4gICAgTm9kZVR5cGVzW1wiSHRtbENvbW1lbnRcIl0gPSBcIkh0bWxDb21tZW50XCI7XG4gICAgTm9kZVR5cGVzW1wiSHRtbEVsZW1lbnRcIl0gPSBcIkh0bWxFbGVtZW50XCI7XG4gICAgTm9kZVR5cGVzW1wiSHRtbFJhd05vZGVcIl0gPSBcIkh0bWxSYXdOb2RlXCI7XG4gICAgTm9kZVR5cGVzW1wiQXR0clNpbmdsZVF1b3RlZFwiXSA9IFwiQXR0clNpbmdsZVF1b3RlZFwiO1xuICAgIE5vZGVUeXBlc1tcIkF0dHJEb3VibGVRdW90ZWRcIl0gPSBcIkF0dHJEb3VibGVRdW90ZWRcIjtcbiAgICBOb2RlVHlwZXNbXCJBdHRyVW5xdW90ZWRcIl0gPSBcIkF0dHJVbnF1b3RlZFwiO1xuICAgIE5vZGVUeXBlc1tcIkF0dHJFbXB0eVwiXSA9IFwiQXR0ckVtcHR5XCI7XG4gICAgTm9kZVR5cGVzW1wiVGV4dE5vZGVcIl0gPSBcIlRleHROb2RlXCI7XG4gICAgTm9kZVR5cGVzW1wiWUFNTEZyb250bWF0dGVyXCJdID0gXCJZQU1MRnJvbnRtYXR0ZXJcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWRWYXJpYWJsZVwiXSA9IFwiTGlxdWlkVmFyaWFibGVcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWRGaWx0ZXJcIl0gPSBcIkxpcXVpZEZpbHRlclwiO1xuICAgIE5vZGVUeXBlc1tcIk5hbWVkQXJndW1lbnRcIl0gPSBcIk5hbWVkQXJndW1lbnRcIjtcbiAgICBOb2RlVHlwZXNbXCJMaXF1aWRMaXRlcmFsXCJdID0gXCJMaXF1aWRMaXRlcmFsXCI7XG4gICAgTm9kZVR5cGVzW1wiU3RyaW5nXCJdID0gXCJTdHJpbmdcIjtcbiAgICBOb2RlVHlwZXNbXCJOdW1iZXJcIl0gPSBcIk51bWJlclwiO1xuICAgIE5vZGVUeXBlc1tcIlJhbmdlXCJdID0gXCJSYW5nZVwiO1xuICAgIE5vZGVUeXBlc1tcIlZhcmlhYmxlTG9va3VwXCJdID0gXCJWYXJpYWJsZUxvb2t1cFwiO1xufSkoTm9kZVR5cGVzID0gZXhwb3J0cy5Ob2RlVHlwZXMgfHwgKGV4cG9ydHMuTm9kZVR5cGVzID0ge30pKTtcbmV4cG9ydHMuSHRtbE5vZGVUeXBlcyA9IFtcbiAgICBOb2RlVHlwZXMuSHRtbEVsZW1lbnQsXG4gICAgTm9kZVR5cGVzLkh0bWxSYXdOb2RlLFxuICAgIE5vZGVUeXBlcy5IdG1sVm9pZEVsZW1lbnQsXG4gICAgTm9kZVR5cGVzLkh0bWxTZWxmQ2xvc2luZ0VsZW1lbnQsXG5dO1xuZXhwb3J0cy5MaXF1aWROb2RlVHlwZXMgPSBbXG4gICAgTm9kZVR5cGVzLkxpcXVpZFRhZyxcbiAgICBOb2RlVHlwZXMuTGlxdWlkRHJvcCxcbiAgICBOb2RlVHlwZXMuTGlxdWlkQnJhbmNoLFxuICAgIE5vZGVUeXBlcy5MaXF1aWRSYXdUYWcsXG5dO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEhsd1pYTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12ZEhsd1pYTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3TzBGQlVVRXNTVUZCV1N4VFFUQkNXRHRCUVRGQ1JDeFhRVUZaTEZOQlFWTTdTVUZEYmtJc2EwTkJRWEZDTEVOQlFVRTdTVUZEY2tJc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2IwTkJRWFZDTEVOQlFVRTdTVUZEZGtJc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2MwTkJRWGxDTEVOQlFVRTdTVUZEZWtJc09FUkJRV2xFTEVOQlFVRTdTVUZEYWtRc1owUkJRVzFETEVOQlFVRTdTVUZEYmtNc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2QwTkJRVEpDTEVOQlFVRTdTVUZETTBJc2EwUkJRWEZETEVOQlFVRTdTVUZEY2tNc2EwUkJRWEZETEVOQlFVRTdTVUZEY2tNc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc2IwTkJRWFZDTEVOQlFVRTdTVUZEZGtJc2EwTkJRWEZDTEVOQlFVRTdTVUZEY2tJc1owUkJRVzFETEVOQlFVRTdTVUZGYmtNc09FTkJRV2xETEVOQlFVRTdTVUZEYWtNc01FTkJRVFpDTEVOQlFVRTdTVUZETjBJc05FTkJRU3RDTEVOQlFVRTdTVUZETDBJc05FTkJRU3RDTEVOQlFVRTdTVUZETDBJc09FSkJRV2xDTEVOQlFVRTdTVUZEYWtJc09FSkJRV2xDTEVOQlFVRTdTVUZEYWtJc05FSkJRV1VzUTBGQlFUdEpRVU5tTERoRFFVRnBReXhEUVVGQk8wRkJRMjVETEVOQlFVTXNSVUV4UWxjc1UwRkJVeXhIUVVGVUxHbENRVUZUTEV0QlFWUXNhVUpCUVZNc1VVRXdRbkJDTzBGQlJWa3NVVUZCUVN4aFFVRmhMRWRCUVVjN1NVRkRNMElzVTBGQlV5eERRVUZETEZkQlFWYzdTVUZEY2tJc1UwRkJVeXhEUVVGRExGZEJRVmM3U1VGRGNrSXNVMEZCVXl4RFFVRkRMR1ZCUVdVN1NVRkRla0lzVTBGQlV5eERRVUZETEhOQ1FVRnpRanREUVVONFFpeERRVUZETzBGQlJVVXNVVUZCUVN4bFFVRmxMRWRCUVVjN1NVRkROMElzVTBGQlV5eERRVUZETEZOQlFWTTdTVUZEYmtJc1UwRkJVeXhEUVVGRExGVkJRVlU3U1VGRGNFSXNVMEZCVXl4RFFVRkRMRmxCUVZrN1NVRkRkRUlzVTBGQlV5eERRVUZETEZsQlFWazdRMEZEWkN4RFFVRkRJbjA9IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRyb3BMYXN0ID0gZXhwb3J0cy5kZWVwR2V0ID0gZXhwb3J0cy5sb2NFbmQgPSBleHBvcnRzLmxvY1N0YXJ0ID0gZXhwb3J0cy5hc3NlcnROZXZlciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGFzc2VydE5ldmVyKHgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgb2JqZWN0OiAke3gudHlwZX1gKTtcbn1cbmV4cG9ydHMuYXNzZXJ0TmV2ZXIgPSBhc3NlcnROZXZlcjtcbmZ1bmN0aW9uIGxvY1N0YXJ0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wb3NpdGlvbi5zdGFydDtcbn1cbmV4cG9ydHMubG9jU3RhcnQgPSBsb2NTdGFydDtcbmZ1bmN0aW9uIGxvY0VuZChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUucG9zaXRpb24uZW5kO1xufVxuZXhwb3J0cy5sb2NFbmQgPSBsb2NFbmQ7XG5mdW5jdGlvbiBkZWVwR2V0KHBhdGgsIG9iaikge1xuICAgIHJldHVybiBwYXRoLnJlZHVjZSgoY3VyciwgaykgPT4ge1xuICAgICAgICBpZiAoY3VyciAmJiBjdXJyW2tdICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gY3VycltrXTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCBvYmopO1xufVxuZXhwb3J0cy5kZWVwR2V0ID0gZGVlcEdldDtcbmZ1bmN0aW9uIGRyb3BMYXN0KG4sIHhzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLnhzXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICByZXN1bHQucG9wKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmRyb3BMYXN0ID0gZHJvcExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZkWFJwYkhNdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUlVFc1UwRkJaMElzVjBGQlZ5eERRVUZETEVOQlFWRTdTVUZEYkVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHpRa0ZCZFVJc1EwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZETTBRc1EwRkJRenRCUVVaRUxHdERRVVZETzBGQlJVUXNVMEZCWjBJc1VVRkJVU3hEUVVGRExFbEJRVFJDTzBsQlEyNUVMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZETjBJc1EwRkJRenRCUVVaRUxEUkNRVVZETzBGQlJVUXNVMEZCWjBJc1RVRkJUU3hEUVVGRExFbEJRVFJDTzBsQlEycEVMRTlCUVU4c1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZETTBJc1EwRkJRenRCUVVaRUxIZENRVVZETzBGQlJVUXNVMEZCWjBJc1QwRkJUeXhEUVVGVkxFbEJRWGxDTEVWQlFVVXNSMEZCVVR0SlFVTnNSU3hQUVVGUExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4SlFVRlRMRVZCUVVVc1EwRkJhMElzUlVGQlJTeEZRVUZGTzFGQlEyNUVMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4VFFVRlRPMWxCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYkVRc1QwRkJUeXhUUVVGVExFTkJRVU03U1VGRGJrSXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMVlzUTBGQlF6dEJRVXhFTERCQ1FVdERPMEZCUlVRc1UwRkJaMElzVVVGQlVTeERRVUZKTEVOQlFWTXNSVUZCUlN4RlFVRm5RanRKUVVOeVJDeE5RVUZOTEUxQlFVMHNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGRrSXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRSUVVNeFFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1MwRkRaRHRKUVVORUxFOUJRVThzVFVGQlRTeERRVUZETzBGQlEyaENMRU5CUVVNN1FVRk9SQ3cwUWtGTlF5SjkiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW5kZXguanNvbicpOyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyohXG4gKiBpc29iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXNvYmplY3Q+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBpc0FycmF5KHZhbCkgPT09IGZhbHNlO1xufTtcbiIsIi8qKlxuICogbGluZS1jb2x1bW4gLSBDb252ZXJ0IGVmZmljaWVudGx5IGluZGV4IHRvL2Zyb20gbGluZS1jb2x1bW4gaW4gYSBzdHJpbmdcbiAqIEBtb2R1bGUgIGxpbmVDb2x1bW5cbiAqIEBsaWNlbnNlIE1JVFxuICovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGlzQXJyYXkgID0gcmVxdWlyZShcImlzYXJyYXlcIik7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKFwiaXNvYmplY3RcIik7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbm1vZHVsZS5leHBvcnRzID0gTGluZUNvbHVtbkZpbmRlcjtcblxuLyoqXG4gKiBGaW5kZXIgZm9yIGluZGV4IGFuZCBsaW5lLWNvbHVtbiBmcm9tIGdpdmVuIHN0cmluZy5cbiAqXG4gKiBZb3UgY2FuIGNhbGwgdGhpcyB3aXRob3V0IGBuZXdgIG9wZXJhdG9yIGFzIGl0IHJldHVybnMgYW4gaW5zdGFuY2UgYW55d2F5LlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIEEgc3RyaW5nIHRvIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fG51bWJlcn0gW29wdGlvbnNdIC0gT3B0aW9ucy5cbiAqICAgICBUaGlzIGNhbiBiZSBhbiBpbmRleCBpbiB0aGUgc3RyaW5nIGZvciBzaG9ydGhhbmQgb2YgYGxpbmVDb2x1bW4oc3RyLCBpbmRleClgLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm9yaWdpbj0xXSAtIFRoZSBvcmlnaW4gdmFsdWUgb2YgbGluZSBhbmQgY29sdW1uLlxuICovXG5mdW5jdGlvbiBMaW5lQ29sdW1uRmluZGVyKHN0ciwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGluZUNvbHVtbkZpbmRlcikpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiAobmV3IExpbmVDb2x1bW5GaW5kZXIoc3RyKSkuZnJvbUluZGV4KG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IExpbmVDb2x1bW5GaW5kZXIoc3RyLCBvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuc3RyID0gc3RyIHx8IFwiXCI7XG4gIHRoaXMubGluZVRvSW5kZXggPSBidWlsZExpbmVUb0luZGV4KHRoaXMuc3RyKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5vcmlnaW4gPSB0eXBlb2Ygb3B0aW9ucy5vcmlnaW4gPT09IFwidW5kZWZpbmVkXCIgPyAxIDogb3B0aW9ucy5vcmlnaW47XG59XG5cbi8qKlxuICogRmluZCBsaW5lIGFuZCBjb2x1bW4gZnJvbSBpbmRleCBpbiB0aGUgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge251bWJlcn0gaW5kZXggLSBJbmRleCBpbiB0aGUgc3RyaW5nLiAoMC1vcmlnaW4pXG4gKiBAcmV0dXJuIHtPYmplY3R8bnVsbH1cbiAqICAgICBGb3VuZCBsaW5lIG51bWJlciBhbmQgY29sdW1uIG51bWJlciBpbiBvYmplY3QgYHsgbGluZTogWCwgY29sOiBZIH1gLlxuICogICAgIElmIHRoZSBnaXZlbiBpbmRleCBpcyBvdXQgb2YgcmFuZ2UsIGl0IHJldHVybnMgYG51bGxgLlxuICovXG5MaW5lQ29sdW1uRmluZGVyLnByb3RvdHlwZS5mcm9tSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnN0ci5sZW5ndGggfHwgaXNOYU4oaW5kZXgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbGluZSA9IGZpbmRMb3dlckluZGV4SW5SYW5nZUFycmF5KGluZGV4LCB0aGlzLmxpbmVUb0luZGV4KTtcbiAgcmV0dXJuIHtcbiAgICBsaW5lOiBsaW5lICsgdGhpcy5vcmlnaW4sXG4gICAgY29sOiAgaW5kZXggLSB0aGlzLmxpbmVUb0luZGV4W2xpbmVdICsgdGhpcy5vcmlnaW5cbiAgfTtcbn1cblxuLyoqXG4gKiBGaW5kIGluZGV4IGZyb20gbGluZSBhbmQgY29sdW1uIGluIHRoZSBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfE9iamVjdHxBcnJheX0gbGluZSAtIExpbmUgbnVtYmVyIGluIHRoZSBzdHJpbmcuXG4gKiAgICAgVGhpcyBjYW4gYmUgYW4gT2JqZWN0IG9mIGB7IGxpbmU6IFgsIGNvbDogWSB9YCwgb3JcbiAqICAgICBhbiBBcnJheSBvZiBgW2xpbmUsIGNvbF1gLlxuICogQHBhcmFtICB7bnVtYmVyfSBbY29sdW1uXSAtIENvbHVtbiBudW1iZXIgaW4gdGhlIHN0cmluZy5cbiAqICAgICBUaGlzIG11c3QgYmUgb21pdHRlZCBvciB1bmRlZmluZWQgd2hlbiBPYmplY3Qgb3IgQXJyYXkgaXMgZ2l2ZW5cbiAqICAgICB0byB0aGUgZmlyc3QgYXJndW1lbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKiAgICAgRm91bmQgaW5kZXggaW4gdGhlIHN0cmluZy4gKGFsd2F5cyAwLW9yaWdpbilcbiAqICAgICBJZiB0aGUgZ2l2ZW4gbGluZSBvciBjb2x1bW4gaXMgb3V0IG9mIHJhbmdlLCBpdCByZXR1cm5zIGAtMWAuXG4gKi9cbkxpbmVDb2x1bW5GaW5kZXIucHJvdG90eXBlLnRvSW5kZXggPSBmdW5jdGlvbiAobGluZSwgY29sdW1uKSB7XG4gIGlmICh0eXBlb2YgY29sdW1uID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKGlzQXJyYXkobGluZSkgJiYgbGluZS5sZW5ndGggPj0gMikge1xuICAgICAgcmV0dXJuIHRoaXMudG9JbmRleChsaW5lWzBdLCBsaW5lWzFdKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGxpbmUpICYmIFwibGluZVwiIGluIGxpbmUgJiYgKFwiY29sXCIgaW4gbGluZSB8fCBcImNvbHVtblwiIGluIGxpbmUpKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0luZGV4KGxpbmUubGluZSwgKFwiY29sXCIgaW4gbGluZSA/IGxpbmUuY29sIDogbGluZS5jb2x1bW4pKTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIGlmIChpc05hTihsaW5lKSB8fCBpc05hTihjb2x1bW4pKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgbGluZSAtPSB0aGlzLm9yaWdpbjtcbiAgY29sdW1uIC09IHRoaXMub3JpZ2luO1xuXG4gIGlmIChsaW5lID49IDAgJiYgY29sdW1uID49IDAgJiYgbGluZSA8IHRoaXMubGluZVRvSW5kZXgubGVuZ3RoKSB7XG4gICAgdmFyIGxpbmVJbmRleCA9IHRoaXMubGluZVRvSW5kZXhbbGluZV07XG4gICAgdmFyIG5leHRJbmRleCA9IChcbiAgICAgIGxpbmUgPT09IHRoaXMubGluZVRvSW5kZXgubGVuZ3RoIC0gMVxuICAgICAgICA/IHRoaXMuc3RyLmxlbmd0aFxuICAgICAgICA6IHRoaXMubGluZVRvSW5kZXhbbGluZSArIDFdXG4gICAgKTtcblxuICAgIGlmIChjb2x1bW4gPCBuZXh0SW5kZXggLSBsaW5lSW5kZXgpIHtcbiAgICAgIHJldHVybiBsaW5lSW5kZXggKyBjb2x1bW47XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhbiBhcnJheSBvZiBpbmRleGVzIG9mIGVhY2ggbGluZSBmcm9tIGEgc3RyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gICBzdHIge3N0cmluZ30gIEFuIGlucHV0IHN0cmluZy5cbiAqIEByZXR1cm4gIHtudW1iZXJbXX0gICAgQnVpbHQgYXJyYXkgb2YgaW5kZXhlcy4gVGhlIGtleSBpcyBsaW5lIG51bWJlci5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMaW5lVG9JbmRleChzdHIpIHtcbiAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KFwiXFxuXCIpLFxuICAgICAgbGluZVRvSW5kZXggPSBuZXcgQXJyYXkobGluZXMubGVuZ3RoKSxcbiAgICAgIGluZGV4ID0gMDtcblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGxpbmVUb0luZGV4W2ldID0gaW5kZXg7XG4gICAgaW5kZXggKz0gbGluZXNbaV0ubGVuZ3RoICsgLyogXCJcXG5cIi5sZW5ndGggKi8gMTtcbiAgfVxuICByZXR1cm4gbGluZVRvSW5kZXg7XG59XG5cbi8qKlxuICogRmluZCBhIGxvd2VyLWJvdW5kIGluZGV4IG9mIGEgdmFsdWUgaW4gYSBzb3J0ZWQgYXJyYXkgb2YgcmFuZ2VzLlxuICpcbiAqIEFzc3VtZSBgYXJyID0gWzAsIDUsIDEwLCAxNSwgMjBdYCBhbmRcbiAqIHRoaXMgcmV0dXJucyBgMWAgZm9yIGB2YWx1ZSA9IDdgICg1IDw9IHZhbHVlIDwgMTApLFxuICogYW5kIHJldHVybnMgYDNgIGZvciBgdmFsdWUgPSAxOGAgKDE1IDw9IHZhbHVlIDwgMjApLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIGFyciAgIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgdmFsdWVzIHJlcHJlc2VudGluZyByYW5nZXMuXG4gKiBAcGFyYW0gIHZhbHVlIHtudW1iZXJ9ICAgQSB2YWx1ZSB0byBiZSBzZWFyY2hlZC5cbiAqIEByZXR1cm4ge251bWJlcn0gRm91bmQgaW5kZXguIElmIG5vdCBmb3VuZCBgLTFgLlxuICovXG5mdW5jdGlvbiBmaW5kTG93ZXJJbmRleEluUmFuZ2VBcnJheSh2YWx1ZSwgYXJyKSB7XG4gIGlmICh2YWx1ZSA+PSBhcnJbYXJyLmxlbmd0aCAtIDFdKSB7XG4gICAgcmV0dXJuIGFyci5sZW5ndGggLSAxO1xuICB9XG5cbiAgdmFyIG1pbiA9IDAsIG1heCA9IGFyci5sZW5ndGggLSAyLCBtaWQ7XG4gIHdoaWxlIChtaW4gPCBtYXgpIHtcbiAgICBtaWQgPSBtaW4gKyAoKG1heCAtIG1pbikgPj4gMSk7XG5cbiAgICBpZiAodmFsdWUgPCBhcnJbbWlkXSkge1xuICAgICAgbWF4ID0gbWlkIC0gMTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID49IGFyclttaWQgKyAxXSkge1xuICAgICAgbWluID0gbWlkICsgMTtcbiAgICB9IGVsc2UgeyAvLyB2YWx1ZSA+PSBhcnJbbWlkXSAmJiB2YWx1ZSA8IGFyclttaWQgKyAxXVxuICAgICAgbWluID0gbWlkO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW47XG59XG4iLCIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIi4uL2luZGV4LmQudHNcIiAvPlxudmFyIG1haW4kMSA9IHtleHBvcnRzOiB7fX07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKlxuICBgRmFpbHVyZWBzIHJlcHJlc2VudCBleHByZXNzaW9ucyB0aGF0IHdlcmVuJ3QgbWF0Y2hlZCB3aGlsZSBwYXJzaW5nLiBUaGV5IGFyZSB1c2VkIHRvIGdlbmVyYXRlXG4gIGVycm9yIG1lc3NhZ2VzIGF1dG9tYXRpY2FsbHkuIFRoZSBpbnRlcmZhY2Ugb2YgYEZhaWx1cmVgcyBpbmNsdWRlcyB0aGUgY29sbG93aW5nIG1ldGhvZHM6XG5cbiAgLSBnZXRUZXh0KCkgOiBTdHJpbmdcbiAgLSBnZXRUeXBlKCkgOiBTdHJpbmcgIChvbmUgb2Yge1wiZGVzY3JpcHRpb25cIiwgXCJzdHJpbmdcIiwgXCJjb2RlXCJ9KVxuICAtIGlzRGVzY3JpcHRpb24oKSA6IGJvb2xcbiAgLSBpc1N0cmluZ1Rlcm1pbmFsKCkgOiBib29sXG4gIC0gaXNDb2RlKCkgOiBib29sXG4gIC0gaXNGbHVmZnkoKSA6IGJvb2xcbiAgLSBtYWtlRmx1ZmZ5KCkgOiB2b2lkXG4gIC0gc3Vic3VtZXMoRmFpbHVyZSkgOiBib29sXG4qL1xuXG5mdW5jdGlvbiBpc1ZhbGlkVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAnZGVzY3JpcHRpb24nIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdjb2RlJztcbn1cblxuZnVuY3Rpb24gRmFpbHVyZSQyKHBleHByLCB0ZXh0LCB0eXBlKSB7XG4gIGlmICghaXNWYWxpZFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgRmFpbHVyZSB0eXBlOiAnICsgdHlwZSk7XG4gIH1cbiAgdGhpcy5wZXhwciA9IHBleHByO1xuICB0aGlzLnRleHQgPSB0ZXh0O1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLmZsdWZmeSA9IGZhbHNlO1xufVxuXG5GYWlsdXJlJDIucHJvdG90eXBlLmdldFBFeHByID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnBleHByO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRleHQ7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZTtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUuaXNEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSAnZGVzY3JpcHRpb24nO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5pc1N0cmluZ1Rlcm1pbmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnR5cGUgPT09ICdzdHJpbmcnO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5pc0NvZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2NvZGUnO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5pc0ZsdWZmeSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mbHVmZnk7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLm1ha2VGbHVmZnkgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5mbHVmZnkgPSB0cnVlO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5jbGVhckZsdWZmeSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmZsdWZmeSA9IGZhbHNlO1xufTtcblxuRmFpbHVyZSQyLnByb3RvdHlwZS5zdWJzdW1lcyA9IGZ1bmN0aW9uKHRoYXQpIHtcbiAgcmV0dXJuIChcbiAgICB0aGlzLmdldFRleHQoKSA9PT0gdGhhdC5nZXRUZXh0KCkgJiZcbiAgICB0aGlzLnR5cGUgPT09IHRoYXQudHlwZSAmJlxuICAgICghdGhpcy5pc0ZsdWZmeSgpIHx8ICh0aGlzLmlzRmx1ZmZ5KCkgJiYgdGhhdC5pc0ZsdWZmeSgpKSlcbiAgKTtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh0aGlzLmdldFRleHQoKSkgOiB0aGlzLmdldFRleHQoKTtcbn07XG5cbkZhaWx1cmUkMi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZmFpbHVyZSA9IG5ldyBGYWlsdXJlJDIodGhpcy5wZXhwciwgdGhpcy50ZXh0LCB0aGlzLnR5cGUpO1xuICBpZiAodGhpcy5pc0ZsdWZmeSgpKSB7XG4gICAgZmFpbHVyZS5tYWtlRmx1ZmZ5KCk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmU7XG59O1xuXG5GYWlsdXJlJDIucHJvdG90eXBlLnRvS2V5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCkgKyAnIycgKyB0aGlzLnR5cGU7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIEZhaWx1cmVfMSA9IEZhaWx1cmUkMjtcblxudmFyIGNvbW1vbiRsID0ge307XG5cbihmdW5jdGlvbiAoZXhwb3J0cykge1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBTdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gSGVscGVyc1xuXG5jb25zdCBlc2NhcGVTdHJpbmdGb3IgPSB7fTtcbmZvciAobGV0IGMgPSAwOyBjIDwgMTI4OyBjKyspIHtcbiAgZXNjYXBlU3RyaW5nRm9yW2NdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbn1cbmVzY2FwZVN0cmluZ0ZvcltcIidcIi5jaGFyQ29kZUF0KDApXSA9IFwiXFxcXCdcIjtcbmVzY2FwZVN0cmluZ0ZvclsnXCInLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxcIic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcXFwnLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxcXFxcJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxiJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcYic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcZicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXGYnO1xuZXNjYXBlU3RyaW5nRm9yWydcXG4nLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxuJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxyJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxccic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcdCcuY2hhckNvZGVBdCgwKV0gPSAnXFxcXHQnO1xuZXNjYXBlU3RyaW5nRm9yWydcXHUwMDBiJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcdic7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnRzLmFic3RyYWN0ID0gZnVuY3Rpb24ob3B0TWV0aG9kTmFtZSkge1xuICBjb25zdCBtZXRob2ROYW1lID0gb3B0TWV0aG9kTmFtZSB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3RoaXMgbWV0aG9kICcgK1xuICAgICAgICBtZXRob2ROYW1lICtcbiAgICAgICAgJyBpcyBhYnN0cmFjdCEgJyArXG4gICAgICAgICcoaXQgaGFzIG5vIGltcGxlbWVudGF0aW9uIGluIGNsYXNzICcgK1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgK1xuICAgICAgICAnKSdcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0cy5hc3NlcnQgPSBmdW5jdGlvbihjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlIHx8ICdBc3NlcnRpb24gZmFpbGVkJyk7XG4gIH1cbn07XG5cbi8vIERlZmluZSBhIGxhemlseS1jb21wdXRlZCwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgbmFtZWQgYHByb3BOYW1lYFxuLy8gb24gdGhlIG9iamVjdCBgb2JqYC4gYGdldHRlckZuYCB3aWxsIGJlIGNhbGxlZCB0byBjb21wdXRlIHRoZSB2YWx1ZSB0aGVcbi8vIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGFjY2Vzc2VkLlxuZXhwb3J0cy5kZWZpbmVMYXp5UHJvcGVydHkgPSBmdW5jdGlvbihvYmosIHByb3BOYW1lLCBnZXR0ZXJGbikge1xuICBsZXQgbWVtbztcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgcHJvcE5hbWUsIHtcbiAgICBnZXQoKSB7XG4gICAgICBpZiAoIW1lbW8pIHtcbiAgICAgICAgbWVtbyA9IGdldHRlckZuLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydHMuY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnRzLnJlcGVhdEZuID0gZnVuY3Rpb24oZm4sIG4pIHtcbiAgY29uc3QgYXJyID0gW107XG4gIHdoaWxlIChuLS0gPiAwKSB7XG4gICAgYXJyLnB1c2goZm4oKSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn07XG5cbmV4cG9ydHMucmVwZWF0U3RyID0gZnVuY3Rpb24oc3RyLCBuKSB7XG4gIHJldHVybiBuZXcgQXJyYXkobiArIDEpLmpvaW4oc3RyKTtcbn07XG5cbmV4cG9ydHMucmVwZWF0ID0gZnVuY3Rpb24oeCwgbikge1xuICByZXR1cm4gZXhwb3J0cy5yZXBlYXRGbigoKSA9PiB4LCBuKTtcbn07XG5cbmV4cG9ydHMuZ2V0RHVwbGljYXRlcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGNvbnN0IGR1cGxpY2F0ZXMgPSBbXTtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXJyYXkubGVuZ3RoOyBpZHgrKykge1xuICAgIGNvbnN0IHggPSBhcnJheVtpZHhdO1xuICAgIGlmIChhcnJheS5sYXN0SW5kZXhPZih4KSAhPT0gaWR4ICYmIGR1cGxpY2F0ZXMuaW5kZXhPZih4KSA8IDApIHtcbiAgICAgIGR1cGxpY2F0ZXMucHVzaCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR1cGxpY2F0ZXM7XG59O1xuXG5leHBvcnRzLmNvcHlXaXRob3V0RHVwbGljYXRlcyA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gIGNvbnN0IG5vRHVwbGljYXRlcyA9IFtdO1xuICBhcnJheS5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICBpZiAobm9EdXBsaWNhdGVzLmluZGV4T2YoZW50cnkpIDwgMCkge1xuICAgICAgbm9EdXBsaWNhdGVzLnB1c2goZW50cnkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBub0R1cGxpY2F0ZXM7XG59O1xuXG5leHBvcnRzLmlzU3ludGFjdGljID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgY29uc3QgZmlyc3RDaGFyID0gcnVsZU5hbWVbMF07XG4gIHJldHVybiBmaXJzdENoYXIgPT09IGZpcnN0Q2hhci50b1VwcGVyQ2FzZSgpO1xufTtcblxuZXhwb3J0cy5pc0xleGljYWwgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICByZXR1cm4gIWV4cG9ydHMuaXNTeW50YWN0aWMocnVsZU5hbWUpO1xufTtcblxuZXhwb3J0cy5wYWRMZWZ0ID0gZnVuY3Rpb24oc3RyLCBsZW4sIG9wdENoYXIpIHtcbiAgY29uc3QgY2ggPSBvcHRDaGFyIHx8ICcgJztcbiAgaWYgKHN0ci5sZW5ndGggPCBsZW4pIHtcbiAgICByZXR1cm4gZXhwb3J0cy5yZXBlYXRTdHIoY2gsIGxlbiAtIHN0ci5sZW5ndGgpICsgc3RyO1xuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG4vLyBTdHJpbmdCdWZmZXJcblxuZXhwb3J0cy5TdHJpbmdCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdHJpbmdzID0gW107XG59O1xuXG5leHBvcnRzLlN0cmluZ0J1ZmZlci5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24oc3RyKSB7XG4gIHRoaXMuc3RyaW5ncy5wdXNoKHN0cik7XG59O1xuXG5leHBvcnRzLlN0cmluZ0J1ZmZlci5wcm90b3R5cGUuY29udGVudHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5ncy5qb2luKCcnKTtcbn07XG5cbmNvbnN0IGVzY2FwZVVuaWNvZGUgPSBzdHIgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoc3RyLCAxNikpO1xuXG5leHBvcnRzLnVuZXNjYXBlQ29kZVBvaW50ID0gZnVuY3Rpb24ocykge1xuICBpZiAocy5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgIHN3aXRjaCAocy5jaGFyQXQoMSkpIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgICByZXR1cm4gJ1xcYic7XG4gICAgICBjYXNlICdmJzpcbiAgICAgICAgcmV0dXJuICdcXGYnO1xuICAgICAgY2FzZSAnbic6XG4gICAgICAgIHJldHVybiAnXFxuJztcbiAgICAgIGNhc2UgJ3InOlxuICAgICAgICByZXR1cm4gJ1xccic7XG4gICAgICBjYXNlICd0JzpcbiAgICAgICAgcmV0dXJuICdcXHQnO1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIHJldHVybiAnXFx2JztcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZXNjYXBlVW5pY29kZShzLnNsaWNlKDIsIDQpKTtcbiAgICAgIGNhc2UgJ3UnOlxuICAgICAgICByZXR1cm4gcy5jaGFyQXQoMikgPT09ICd7JyA/XG4gICAgICAgICAgZXNjYXBlVW5pY29kZShzLnNsaWNlKDMsIC0xKSkgOlxuICAgICAgICAgIGVzY2FwZVVuaWNvZGUocy5zbGljZSgyLCA2KSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcy5jaGFyQXQoMSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59O1xuXG4vLyBIZWxwZXIgZm9yIHByb2R1Y2luZyBhIGRlc2NyaXB0aW9uIG9mIGFuIHVua25vd24gb2JqZWN0IGluIGEgc2FmZSB3YXkuXG4vLyBFc3BlY2lhbGx5IHVzZWZ1bCBmb3IgZXJyb3IgbWVzc2FnZXMgd2hlcmUgYW4gdW5leHBlY3RlZCB0eXBlIG9mIG9iamVjdCB3YXMgZW5jb3VudGVyZWQuXG5leHBvcnRzLnVuZXhwZWN0ZWRPYmpUb1N0cmluZyA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gIH1cbiAgY29uc3QgYmFzZVRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG4gIHRyeSB7XG4gICAgbGV0IHR5cGVOYW1lO1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgIHR5cGVOYW1lID0gb2JqLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgfSBlbHNlIGlmIChiYXNlVG9TdHJpbmcuaW5kZXhPZignW29iamVjdCAnKSA9PT0gMCkge1xuICAgICAgdHlwZU5hbWUgPSBiYXNlVG9TdHJpbmcuc2xpY2UoOCwgLTEpOyAvLyBFeHRyYWN0IGUuZy4gXCJBcnJheVwiIGZyb20gXCJbb2JqZWN0IEFycmF5XVwiLlxuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlTmFtZSA9IHR5cGVvZiBvYmo7XG4gICAgfVxuICAgIHJldHVybiB0eXBlTmFtZSArICc6ICcgKyBKU09OLnN0cmluZ2lmeShTdHJpbmcob2JqKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gYmFzZVRvU3RyaW5nO1xuICB9XG59O1xufShjb21tb24kbCkpO1xuXG5jb25zdCBjb21tb24kayA9IGNvbW1vbiRsO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKG1hdGNoTGVuZ3RoKSB7XG4gICAgdGhpcy5tYXRjaExlbmd0aCA9IG1hdGNoTGVuZ3RoO1xuICB9XG5cbiAgZ2V0IGN0b3JOYW1lKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc3ViY2xhc3MgcmVzcG9uc2liaWxpdHknKTtcbiAgfVxuXG4gIG51bUNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuID8gdGhpcy5jaGlsZHJlbi5sZW5ndGggOiAwO1xuICB9XG5cbiAgY2hpbGRBdChpZHgpIHtcbiAgICBpZiAodGhpcy5jaGlsZHJlbikge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baWR4XTtcbiAgICB9XG4gIH1cblxuICBpbmRleE9mQ2hpbGQoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4uaW5kZXhPZihhcmcpO1xuICB9XG5cbiAgaGFzQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMubnVtQ2hpbGRyZW4oKSA+IDA7XG4gIH1cblxuICBoYXNOb0NoaWxkcmVuKCkge1xuICAgIHJldHVybiAhdGhpcy5oYXNDaGlsZHJlbigpO1xuICB9XG5cbiAgb25seUNoaWxkKCkge1xuICAgIGlmICh0aGlzLm51bUNoaWxkcmVuKCkgIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnY2Fubm90IGdldCBvbmx5IGNoaWxkIG9mIGEgbm9kZSBvZiB0eXBlICcgK1xuICAgICAgICAgIHRoaXMuY3Rvck5hbWUgK1xuICAgICAgICAgICcgKGl0IGhhcyAnICtcbiAgICAgICAgICB0aGlzLm51bUNoaWxkcmVuKCkgK1xuICAgICAgICAgICcgY2hpbGRyZW4pJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZmlyc3RDaGlsZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZpcnN0Q2hpbGQoKSB7XG4gICAgaWYgKHRoaXMuaGFzTm9DaGlsZHJlbigpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2Nhbm5vdCBnZXQgZmlyc3QgY2hpbGQgb2YgYSAnICsgdGhpcy5jdG9yTmFtZSArICcgbm9kZSwgd2hpY2ggaGFzIG5vIGNoaWxkcmVuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRBdCgwKTtcbiAgICB9XG4gIH1cblxuICBsYXN0Q2hpbGQoKSB7XG4gICAgaWYgKHRoaXMuaGFzTm9DaGlsZHJlbigpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2Nhbm5vdCBnZXQgbGFzdCBjaGlsZCBvZiBhICcgKyB0aGlzLmN0b3JOYW1lICsgJyBub2RlLCB3aGljaCBoYXMgbm8gY2hpbGRyZW4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGlsZEF0KHRoaXMubnVtQ2hpbGRyZW4oKSAtIDEpO1xuICAgIH1cbiAgfVxuXG4gIGNoaWxkQmVmb3JlKGNoaWxkKSB7XG4gICAgY29uc3QgY2hpbGRJZHggPSB0aGlzLmluZGV4T2ZDaGlsZChjaGlsZCk7XG4gICAgaWYgKGNoaWxkSWR4IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlLmNoaWxkQmVmb3JlKCkgY2FsbGVkIHcvIGFuIGFyZ3VtZW50IHRoYXQgaXMgbm90IGEgY2hpbGQnKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkSWR4ID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBnZXQgY2hpbGQgYmVmb3JlIGZpcnN0IGNoaWxkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkQXQoY2hpbGRJZHggLSAxKTtcbiAgICB9XG4gIH1cblxuICBjaGlsZEFmdGVyKGNoaWxkKSB7XG4gICAgY29uc3QgY2hpbGRJZHggPSB0aGlzLmluZGV4T2ZDaGlsZChjaGlsZCk7XG4gICAgaWYgKGNoaWxkSWR4IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb2RlLmNoaWxkQWZ0ZXIoKSBjYWxsZWQgdy8gYW4gYXJndW1lbnQgdGhhdCBpcyBub3QgYSBjaGlsZCcpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRJZHggPT09IHRoaXMubnVtQ2hpbGRyZW4oKSAtIDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGdldCBjaGlsZCBhZnRlciBsYXN0IGNoaWxkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkQXQoY2hpbGRJZHggKyAxKTtcbiAgICB9XG4gIH1cblxuICBpc1Rlcm1pbmFsKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzTm9udGVybWluYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNJdGVyYXRpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gVGVybWluYWxzXG5cbmNsYXNzIFRlcm1pbmFsTm9kZSQyIGV4dGVuZHMgTm9kZSB7XG4gIGdldCBjdG9yTmFtZSgpIHtcbiAgICByZXR1cm4gJ190ZXJtaW5hbCc7XG4gIH1cblxuICBpc1Rlcm1pbmFsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0IHByaW1pdGl2ZVZhbHVlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBwcmltaXRpdmVWYWx1ZWAgcHJvcGVydHkgd2FzIHJlbW92ZWQgaW4gT2htIHYxNy4nKTtcbiAgfVxufVxuXG4vLyBOb250ZXJtaW5hbHNcblxuY2xhc3MgTm9udGVybWluYWxOb2RlJDEgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IocnVsZU5hbWUsIGNoaWxkcmVuLCBjaGlsZE9mZnNldHMsIG1hdGNoTGVuZ3RoKSB7XG4gICAgc3VwZXIobWF0Y2hMZW5ndGgpO1xuICAgIHRoaXMucnVsZU5hbWUgPSBydWxlTmFtZTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy5jaGlsZE9mZnNldHMgPSBjaGlsZE9mZnNldHM7XG4gIH1cblxuICBnZXQgY3Rvck5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZU5hbWU7XG4gIH1cblxuICBpc05vbnRlcm1pbmFsKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaXNMZXhpY2FsKCkge1xuICAgIHJldHVybiBjb21tb24kay5pc0xleGljYWwodGhpcy5jdG9yTmFtZSk7XG4gIH1cblxuICBpc1N5bnRhY3RpYygpIHtcbiAgICByZXR1cm4gY29tbW9uJGsuaXNTeW50YWN0aWModGhpcy5jdG9yTmFtZSk7XG4gIH1cbn1cblxuLy8gSXRlcmF0aW9uc1xuXG5jbGFzcyBJdGVyYXRpb25Ob2RlJDIgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoY2hpbGRyZW4sIGNoaWxkT2Zmc2V0cywgbWF0Y2hMZW5ndGgsIGlzT3B0aW9uYWwpIHtcbiAgICBzdXBlcihtYXRjaExlbmd0aCk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIHRoaXMuY2hpbGRPZmZzZXRzID0gY2hpbGRPZmZzZXRzO1xuICAgIHRoaXMub3B0aW9uYWwgPSBpc09wdGlvbmFsO1xuICB9XG5cbiAgZ2V0IGN0b3JOYW1lKCkge1xuICAgIHJldHVybiAnX2l0ZXInO1xuICB9XG5cbiAgaXNJdGVyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpc09wdGlvbmFsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgbm9kZXMkMSA9IHtcbiAgTm9kZSxcbiAgVGVybWluYWxOb2RlOiBUZXJtaW5hbE5vZGUkMixcbiAgTm9udGVybWluYWxOb2RlOiBOb250ZXJtaW5hbE5vZGUkMSxcbiAgSXRlcmF0aW9uTm9kZTogSXRlcmF0aW9uTm9kZSQyLFxufTtcblxudmFyIHBleHByc01haW4gPSB7fTtcblxuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvdW5pY29kZS05LjAuMC5cbi8vIFRoZXNlIGFyZSBqdXN0IGNhdGVnb3JpZXMgdGhhdCBhcmUgdXNlZCBpbiBFUzUvRVMyMDE1LlxuLy8gVGhlIGZ1bGwgbGlzdCBvZiBVbmljb2RlIGNhdGVnb3JpZXMgaXMgaGVyZTogaHR0cDovL3d3dy5maWxlZm9ybWF0LmluZm8vaW5mby91bmljb2RlL2NhdGVnb3J5L2luZGV4Lmh0bS5cbnZhciBVbmljb2RlQ2F0ZWdvcmllcyQxID0ge1xuICAvLyBMZXR0ZXJzXG4gIEx1OiAvW0EtWlxceEMwLVxceEQ2XFx4RDgtXFx4REVcXHUwMTAwXFx1MDEwMlxcdTAxMDRcXHUwMTA2XFx1MDEwOFxcdTAxMEFcXHUwMTBDXFx1MDEwRVxcdTAxMTBcXHUwMTEyXFx1MDExNFxcdTAxMTZcXHUwMTE4XFx1MDExQVxcdTAxMUNcXHUwMTFFXFx1MDEyMFxcdTAxMjJcXHUwMTI0XFx1MDEyNlxcdTAxMjhcXHUwMTJBXFx1MDEyQ1xcdTAxMkVcXHUwMTMwXFx1MDEzMlxcdTAxMzRcXHUwMTM2XFx1MDEzOVxcdTAxM0JcXHUwMTNEXFx1MDEzRlxcdTAxNDFcXHUwMTQzXFx1MDE0NVxcdTAxNDdcXHUwMTRBXFx1MDE0Q1xcdTAxNEVcXHUwMTUwXFx1MDE1MlxcdTAxNTRcXHUwMTU2XFx1MDE1OFxcdTAxNUFcXHUwMTVDXFx1MDE1RVxcdTAxNjBcXHUwMTYyXFx1MDE2NFxcdTAxNjZcXHUwMTY4XFx1MDE2QVxcdTAxNkNcXHUwMTZFXFx1MDE3MFxcdTAxNzJcXHUwMTc0XFx1MDE3NlxcdTAxNzhcXHUwMTc5XFx1MDE3QlxcdTAxN0RcXHUwMTgxXFx1MDE4MlxcdTAxODRcXHUwMTg2XFx1MDE4N1xcdTAxODktXFx1MDE4QlxcdTAxOEUtXFx1MDE5MVxcdTAxOTNcXHUwMTk0XFx1MDE5Ni1cXHUwMTk4XFx1MDE5Q1xcdTAxOURcXHUwMTlGXFx1MDFBMFxcdTAxQTJcXHUwMUE0XFx1MDFBNlxcdTAxQTdcXHUwMUE5XFx1MDFBQ1xcdTAxQUVcXHUwMUFGXFx1MDFCMS1cXHUwMUIzXFx1MDFCNVxcdTAxQjdcXHUwMUI4XFx1MDFCQ1xcdTAxQzRcXHUwMUM3XFx1MDFDQVxcdTAxQ0RcXHUwMUNGXFx1MDFEMVxcdTAxRDNcXHUwMUQ1XFx1MDFEN1xcdTAxRDlcXHUwMURCXFx1MDFERVxcdTAxRTBcXHUwMUUyXFx1MDFFNFxcdTAxRTZcXHUwMUU4XFx1MDFFQVxcdTAxRUNcXHUwMUVFXFx1MDFGMVxcdTAxRjRcXHUwMUY2LVxcdTAxRjhcXHUwMUZBXFx1MDFGQ1xcdTAxRkVcXHUwMjAwXFx1MDIwMlxcdTAyMDRcXHUwMjA2XFx1MDIwOFxcdTAyMEFcXHUwMjBDXFx1MDIwRVxcdTAyMTBcXHUwMjEyXFx1MDIxNFxcdTAyMTZcXHUwMjE4XFx1MDIxQVxcdTAyMUNcXHUwMjFFXFx1MDIyMFxcdTAyMjJcXHUwMjI0XFx1MDIyNlxcdTAyMjhcXHUwMjJBXFx1MDIyQ1xcdTAyMkVcXHUwMjMwXFx1MDIzMlxcdTAyM0FcXHUwMjNCXFx1MDIzRFxcdTAyM0VcXHUwMjQxXFx1MDI0My1cXHUwMjQ2XFx1MDI0OFxcdTAyNEFcXHUwMjRDXFx1MDI0RVxcdTAzNzBcXHUwMzcyXFx1MDM3NlxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEVcXHUwMzhGXFx1MDM5MS1cXHUwM0ExXFx1MDNBMy1cXHUwM0FCXFx1MDNDRlxcdTAzRDItXFx1MDNENFxcdTAzRDhcXHUwM0RBXFx1MDNEQ1xcdTAzREVcXHUwM0UwXFx1MDNFMlxcdTAzRTRcXHUwM0U2XFx1MDNFOFxcdTAzRUFcXHUwM0VDXFx1MDNFRVxcdTAzRjRcXHUwM0Y3XFx1MDNGOVxcdTAzRkFcXHUwM0ZELVxcdTA0MkZcXHUwNDYwXFx1MDQ2MlxcdTA0NjRcXHUwNDY2XFx1MDQ2OFxcdTA0NkFcXHUwNDZDXFx1MDQ2RVxcdTA0NzBcXHUwNDcyXFx1MDQ3NFxcdTA0NzZcXHUwNDc4XFx1MDQ3QVxcdTA0N0NcXHUwNDdFXFx1MDQ4MFxcdTA0OEFcXHUwNDhDXFx1MDQ4RVxcdTA0OTBcXHUwNDkyXFx1MDQ5NFxcdTA0OTZcXHUwNDk4XFx1MDQ5QVxcdTA0OUNcXHUwNDlFXFx1MDRBMFxcdTA0QTJcXHUwNEE0XFx1MDRBNlxcdTA0QThcXHUwNEFBXFx1MDRBQ1xcdTA0QUVcXHUwNEIwXFx1MDRCMlxcdTA0QjRcXHUwNEI2XFx1MDRCOFxcdTA0QkFcXHUwNEJDXFx1MDRCRVxcdTA0QzBcXHUwNEMxXFx1MDRDM1xcdTA0QzVcXHUwNEM3XFx1MDRDOVxcdTA0Q0JcXHUwNENEXFx1MDREMFxcdTA0RDJcXHUwNEQ0XFx1MDRENlxcdTA0RDhcXHUwNERBXFx1MDREQ1xcdTA0REVcXHUwNEUwXFx1MDRFMlxcdTA0RTRcXHUwNEU2XFx1MDRFOFxcdTA0RUFcXHUwNEVDXFx1MDRFRVxcdTA0RjBcXHUwNEYyXFx1MDRGNFxcdTA0RjZcXHUwNEY4XFx1MDRGQVxcdTA0RkNcXHUwNEZFXFx1MDUwMFxcdTA1MDJcXHUwNTA0XFx1MDUwNlxcdTA1MDhcXHUwNTBBXFx1MDUwQ1xcdTA1MEVcXHUwNTEwXFx1MDUxMlxcdTA1MTRcXHUwNTE2XFx1MDUxOFxcdTA1MUFcXHUwNTFDXFx1MDUxRVxcdTA1MjBcXHUwNTIyXFx1MDUyNFxcdTA1MjZcXHUwNTI4XFx1MDUyQVxcdTA1MkNcXHUwNTJFXFx1MDUzMS1cXHUwNTU2XFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxM0EwLVxcdTEzRjVcXHUxRTAwXFx1MUUwMlxcdTFFMDRcXHUxRTA2XFx1MUUwOFxcdTFFMEFcXHUxRTBDXFx1MUUwRVxcdTFFMTBcXHUxRTEyXFx1MUUxNFxcdTFFMTZcXHUxRTE4XFx1MUUxQVxcdTFFMUNcXHUxRTFFXFx1MUUyMFxcdTFFMjJcXHUxRTI0XFx1MUUyNlxcdTFFMjhcXHUxRTJBXFx1MUUyQ1xcdTFFMkVcXHUxRTMwXFx1MUUzMlxcdTFFMzRcXHUxRTM2XFx1MUUzOFxcdTFFM0FcXHUxRTNDXFx1MUUzRVxcdTFFNDBcXHUxRTQyXFx1MUU0NFxcdTFFNDZcXHUxRTQ4XFx1MUU0QVxcdTFFNENcXHUxRTRFXFx1MUU1MFxcdTFFNTJcXHUxRTU0XFx1MUU1NlxcdTFFNThcXHUxRTVBXFx1MUU1Q1xcdTFFNUVcXHUxRTYwXFx1MUU2MlxcdTFFNjRcXHUxRTY2XFx1MUU2OFxcdTFFNkFcXHUxRTZDXFx1MUU2RVxcdTFFNzBcXHUxRTcyXFx1MUU3NFxcdTFFNzZcXHUxRTc4XFx1MUU3QVxcdTFFN0NcXHUxRTdFXFx1MUU4MFxcdTFFODJcXHUxRTg0XFx1MUU4NlxcdTFFODhcXHUxRThBXFx1MUU4Q1xcdTFFOEVcXHUxRTkwXFx1MUU5MlxcdTFFOTRcXHUxRTlFXFx1MUVBMFxcdTFFQTJcXHUxRUE0XFx1MUVBNlxcdTFFQThcXHUxRUFBXFx1MUVBQ1xcdTFFQUVcXHUxRUIwXFx1MUVCMlxcdTFFQjRcXHUxRUI2XFx1MUVCOFxcdTFFQkFcXHUxRUJDXFx1MUVCRVxcdTFFQzBcXHUxRUMyXFx1MUVDNFxcdTFFQzZcXHUxRUM4XFx1MUVDQVxcdTFFQ0NcXHUxRUNFXFx1MUVEMFxcdTFFRDJcXHUxRUQ0XFx1MUVENlxcdTFFRDhcXHUxRURBXFx1MUVEQ1xcdTFFREVcXHUxRUUwXFx1MUVFMlxcdTFFRTRcXHUxRUU2XFx1MUVFOFxcdTFFRUFcXHUxRUVDXFx1MUVFRVxcdTFFRjBcXHUxRUYyXFx1MUVGNFxcdTFFRjZcXHUxRUY4XFx1MUVGQVxcdTFFRkNcXHUxRUZFXFx1MUYwOC1cXHUxRjBGXFx1MUYxOC1cXHUxRjFEXFx1MUYyOC1cXHUxRjJGXFx1MUYzOC1cXHUxRjNGXFx1MUY0OC1cXHUxRjREXFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1RlxcdTFGNjgtXFx1MUY2RlxcdTFGQjgtXFx1MUZCQlxcdTFGQzgtXFx1MUZDQlxcdTFGRDgtXFx1MUZEQlxcdTFGRTgtXFx1MUZFQ1xcdTFGRjgtXFx1MUZGQlxcdTIxMDJcXHUyMTA3XFx1MjEwQi1cXHUyMTBEXFx1MjExMC1cXHUyMTEyXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMzAtXFx1MjEzM1xcdTIxM0VcXHUyMTNGXFx1MjE0NVxcdTIxODNcXHUyQzAwLVxcdTJDMkVcXHUyQzYwXFx1MkM2Mi1cXHUyQzY0XFx1MkM2N1xcdTJDNjlcXHUyQzZCXFx1MkM2RC1cXHUyQzcwXFx1MkM3MlxcdTJDNzVcXHUyQzdFLVxcdTJDODBcXHUyQzgyXFx1MkM4NFxcdTJDODZcXHUyQzg4XFx1MkM4QVxcdTJDOENcXHUyQzhFXFx1MkM5MFxcdTJDOTJcXHUyQzk0XFx1MkM5NlxcdTJDOThcXHUyQzlBXFx1MkM5Q1xcdTJDOUVcXHUyQ0EwXFx1MkNBMlxcdTJDQTRcXHUyQ0E2XFx1MkNBOFxcdTJDQUFcXHUyQ0FDXFx1MkNBRVxcdTJDQjBcXHUyQ0IyXFx1MkNCNFxcdTJDQjZcXHUyQ0I4XFx1MkNCQVxcdTJDQkNcXHUyQ0JFXFx1MkNDMFxcdTJDQzJcXHUyQ0M0XFx1MkNDNlxcdTJDQzhcXHUyQ0NBXFx1MkNDQ1xcdTJDQ0VcXHUyQ0QwXFx1MkNEMlxcdTJDRDRcXHUyQ0Q2XFx1MkNEOFxcdTJDREFcXHUyQ0RDXFx1MkNERVxcdTJDRTBcXHUyQ0UyXFx1MkNFQlxcdTJDRURcXHUyQ0YyXFx1QTY0MFxcdUE2NDJcXHVBNjQ0XFx1QTY0NlxcdUE2NDhcXHVBNjRBXFx1QTY0Q1xcdUE2NEVcXHVBNjUwXFx1QTY1MlxcdUE2NTRcXHVBNjU2XFx1QTY1OFxcdUE2NUFcXHVBNjVDXFx1QTY1RVxcdUE2NjBcXHVBNjYyXFx1QTY2NFxcdUE2NjZcXHVBNjY4XFx1QTY2QVxcdUE2NkNcXHVBNjgwXFx1QTY4MlxcdUE2ODRcXHVBNjg2XFx1QTY4OFxcdUE2OEFcXHVBNjhDXFx1QTY4RVxcdUE2OTBcXHVBNjkyXFx1QTY5NFxcdUE2OTZcXHVBNjk4XFx1QTY5QVxcdUE3MjJcXHVBNzI0XFx1QTcyNlxcdUE3MjhcXHVBNzJBXFx1QTcyQ1xcdUE3MkVcXHVBNzMyXFx1QTczNFxcdUE3MzZcXHVBNzM4XFx1QTczQVxcdUE3M0NcXHVBNzNFXFx1QTc0MFxcdUE3NDJcXHVBNzQ0XFx1QTc0NlxcdUE3NDhcXHVBNzRBXFx1QTc0Q1xcdUE3NEVcXHVBNzUwXFx1QTc1MlxcdUE3NTRcXHVBNzU2XFx1QTc1OFxcdUE3NUFcXHVBNzVDXFx1QTc1RVxcdUE3NjBcXHVBNzYyXFx1QTc2NFxcdUE3NjZcXHVBNzY4XFx1QTc2QVxcdUE3NkNcXHVBNzZFXFx1QTc3OVxcdUE3N0JcXHVBNzdEXFx1QTc3RVxcdUE3ODBcXHVBNzgyXFx1QTc4NFxcdUE3ODZcXHVBNzhCXFx1QTc4RFxcdUE3OTBcXHVBNzkyXFx1QTc5NlxcdUE3OThcXHVBNzlBXFx1QTc5Q1xcdUE3OUVcXHVBN0EwXFx1QTdBMlxcdUE3QTRcXHVBN0E2XFx1QTdBOFxcdUE3QUEtXFx1QTdBRVxcdUE3QjAtXFx1QTdCNFxcdUE3QjZcXHVGRjIxLVxcdUZGM0FdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzI3XFx1RENCMC1cXHVEQ0QzXXxcXHVEODAzW1xcdURDODAtXFx1RENCMl18XFx1RDgwNltcXHVEQ0EwLVxcdURDQkZdfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzE5XFx1REMzNC1cXHVEQzREXFx1REM2OC1cXHVEQzgxXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I1XFx1RENEMC1cXHVEQ0U5XFx1REQwNFxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDM4XFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDZDLVxcdUREODVcXHVEREEwLVxcdUREQjlcXHVEREQ0LVxcdURERURcXHVERTA4LVxcdURFMjFcXHVERTNDLVxcdURFNTVcXHVERTcwLVxcdURFODlcXHVERUE4LVxcdURFQzBcXHVERUUyLVxcdURFRkFcXHVERjFDLVxcdURGMzRcXHVERjU2LVxcdURGNkVcXHVERjkwLVxcdURGQThcXHVERkNBXXxcXHVEODNBW1xcdUREMDAtXFx1REQyMV0vLFxuICBMbDogL1thLXpcXHhCNVxceERGLVxceEY2XFx4RjgtXFx4RkZcXHUwMTAxXFx1MDEwM1xcdTAxMDVcXHUwMTA3XFx1MDEwOVxcdTAxMEJcXHUwMTBEXFx1MDEwRlxcdTAxMTFcXHUwMTEzXFx1MDExNVxcdTAxMTdcXHUwMTE5XFx1MDExQlxcdTAxMURcXHUwMTFGXFx1MDEyMVxcdTAxMjNcXHUwMTI1XFx1MDEyN1xcdTAxMjlcXHUwMTJCXFx1MDEyRFxcdTAxMkZcXHUwMTMxXFx1MDEzM1xcdTAxMzVcXHUwMTM3XFx1MDEzOFxcdTAxM0FcXHUwMTNDXFx1MDEzRVxcdTAxNDBcXHUwMTQyXFx1MDE0NFxcdTAxNDZcXHUwMTQ4XFx1MDE0OVxcdTAxNEJcXHUwMTREXFx1MDE0RlxcdTAxNTFcXHUwMTUzXFx1MDE1NVxcdTAxNTdcXHUwMTU5XFx1MDE1QlxcdTAxNURcXHUwMTVGXFx1MDE2MVxcdTAxNjNcXHUwMTY1XFx1MDE2N1xcdTAxNjlcXHUwMTZCXFx1MDE2RFxcdTAxNkZcXHUwMTcxXFx1MDE3M1xcdTAxNzVcXHUwMTc3XFx1MDE3QVxcdTAxN0NcXHUwMTdFLVxcdTAxODBcXHUwMTgzXFx1MDE4NVxcdTAxODhcXHUwMThDXFx1MDE4RFxcdTAxOTJcXHUwMTk1XFx1MDE5OS1cXHUwMTlCXFx1MDE5RVxcdTAxQTFcXHUwMUEzXFx1MDFBNVxcdTAxQThcXHUwMUFBXFx1MDFBQlxcdTAxQURcXHUwMUIwXFx1MDFCNFxcdTAxQjZcXHUwMUI5XFx1MDFCQVxcdTAxQkQtXFx1MDFCRlxcdTAxQzZcXHUwMUM5XFx1MDFDQ1xcdTAxQ0VcXHUwMUQwXFx1MDFEMlxcdTAxRDRcXHUwMUQ2XFx1MDFEOFxcdTAxREFcXHUwMURDXFx1MDFERFxcdTAxREZcXHUwMUUxXFx1MDFFM1xcdTAxRTVcXHUwMUU3XFx1MDFFOVxcdTAxRUJcXHUwMUVEXFx1MDFFRlxcdTAxRjBcXHUwMUYzXFx1MDFGNVxcdTAxRjlcXHUwMUZCXFx1MDFGRFxcdTAxRkZcXHUwMjAxXFx1MDIwM1xcdTAyMDVcXHUwMjA3XFx1MDIwOVxcdTAyMEJcXHUwMjBEXFx1MDIwRlxcdTAyMTFcXHUwMjEzXFx1MDIxNVxcdTAyMTdcXHUwMjE5XFx1MDIxQlxcdTAyMURcXHUwMjFGXFx1MDIyMVxcdTAyMjNcXHUwMjI1XFx1MDIyN1xcdTAyMjlcXHUwMjJCXFx1MDIyRFxcdTAyMkZcXHUwMjMxXFx1MDIzMy1cXHUwMjM5XFx1MDIzQ1xcdTAyM0ZcXHUwMjQwXFx1MDI0MlxcdTAyNDdcXHUwMjQ5XFx1MDI0QlxcdTAyNERcXHUwMjRGLVxcdTAyOTNcXHUwMjk1LVxcdTAyQUZcXHUwMzcxXFx1MDM3M1xcdTAzNzdcXHUwMzdCLVxcdTAzN0RcXHUwMzkwXFx1MDNBQy1cXHUwM0NFXFx1MDNEMFxcdTAzRDFcXHUwM0Q1LVxcdTAzRDdcXHUwM0Q5XFx1MDNEQlxcdTAzRERcXHUwM0RGXFx1MDNFMVxcdTAzRTNcXHUwM0U1XFx1MDNFN1xcdTAzRTlcXHUwM0VCXFx1MDNFRFxcdTAzRUYtXFx1MDNGM1xcdTAzRjVcXHUwM0Y4XFx1MDNGQlxcdTAzRkNcXHUwNDMwLVxcdTA0NUZcXHUwNDYxXFx1MDQ2M1xcdTA0NjVcXHUwNDY3XFx1MDQ2OVxcdTA0NkJcXHUwNDZEXFx1MDQ2RlxcdTA0NzFcXHUwNDczXFx1MDQ3NVxcdTA0NzdcXHUwNDc5XFx1MDQ3QlxcdTA0N0RcXHUwNDdGXFx1MDQ4MVxcdTA0OEJcXHUwNDhEXFx1MDQ4RlxcdTA0OTFcXHUwNDkzXFx1MDQ5NVxcdTA0OTdcXHUwNDk5XFx1MDQ5QlxcdTA0OURcXHUwNDlGXFx1MDRBMVxcdTA0QTNcXHUwNEE1XFx1MDRBN1xcdTA0QTlcXHUwNEFCXFx1MDRBRFxcdTA0QUZcXHUwNEIxXFx1MDRCM1xcdTA0QjVcXHUwNEI3XFx1MDRCOVxcdTA0QkJcXHUwNEJEXFx1MDRCRlxcdTA0QzJcXHUwNEM0XFx1MDRDNlxcdTA0QzhcXHUwNENBXFx1MDRDQ1xcdTA0Q0VcXHUwNENGXFx1MDREMVxcdTA0RDNcXHUwNEQ1XFx1MDREN1xcdTA0RDlcXHUwNERCXFx1MDRERFxcdTA0REZcXHUwNEUxXFx1MDRFM1xcdTA0RTVcXHUwNEU3XFx1MDRFOVxcdTA0RUJcXHUwNEVEXFx1MDRFRlxcdTA0RjFcXHUwNEYzXFx1MDRGNVxcdTA0RjdcXHUwNEY5XFx1MDRGQlxcdTA0RkRcXHUwNEZGXFx1MDUwMVxcdTA1MDNcXHUwNTA1XFx1MDUwN1xcdTA1MDlcXHUwNTBCXFx1MDUwRFxcdTA1MEZcXHUwNTExXFx1MDUxM1xcdTA1MTVcXHUwNTE3XFx1MDUxOVxcdTA1MUJcXHUwNTFEXFx1MDUxRlxcdTA1MjFcXHUwNTIzXFx1MDUyNVxcdTA1MjdcXHUwNTI5XFx1MDUyQlxcdTA1MkRcXHUwNTJGXFx1MDU2MS1cXHUwNTg3XFx1MTNGOC1cXHUxM0ZEXFx1MUM4MC1cXHUxQzg4XFx1MUQwMC1cXHUxRDJCXFx1MUQ2Qi1cXHUxRDc3XFx1MUQ3OS1cXHUxRDlBXFx1MUUwMVxcdTFFMDNcXHUxRTA1XFx1MUUwN1xcdTFFMDlcXHUxRTBCXFx1MUUwRFxcdTFFMEZcXHUxRTExXFx1MUUxM1xcdTFFMTVcXHUxRTE3XFx1MUUxOVxcdTFFMUJcXHUxRTFEXFx1MUUxRlxcdTFFMjFcXHUxRTIzXFx1MUUyNVxcdTFFMjdcXHUxRTI5XFx1MUUyQlxcdTFFMkRcXHUxRTJGXFx1MUUzMVxcdTFFMzNcXHUxRTM1XFx1MUUzN1xcdTFFMzlcXHUxRTNCXFx1MUUzRFxcdTFFM0ZcXHUxRTQxXFx1MUU0M1xcdTFFNDVcXHUxRTQ3XFx1MUU0OVxcdTFFNEJcXHUxRTREXFx1MUU0RlxcdTFFNTFcXHUxRTUzXFx1MUU1NVxcdTFFNTdcXHUxRTU5XFx1MUU1QlxcdTFFNURcXHUxRTVGXFx1MUU2MVxcdTFFNjNcXHUxRTY1XFx1MUU2N1xcdTFFNjlcXHUxRTZCXFx1MUU2RFxcdTFFNkZcXHUxRTcxXFx1MUU3M1xcdTFFNzVcXHUxRTc3XFx1MUU3OVxcdTFFN0JcXHUxRTdEXFx1MUU3RlxcdTFFODFcXHUxRTgzXFx1MUU4NVxcdTFFODdcXHUxRTg5XFx1MUU4QlxcdTFFOERcXHUxRThGXFx1MUU5MVxcdTFFOTNcXHUxRTk1LVxcdTFFOURcXHUxRTlGXFx1MUVBMVxcdTFFQTNcXHUxRUE1XFx1MUVBN1xcdTFFQTlcXHUxRUFCXFx1MUVBRFxcdTFFQUZcXHUxRUIxXFx1MUVCM1xcdTFFQjVcXHUxRUI3XFx1MUVCOVxcdTFFQkJcXHUxRUJEXFx1MUVCRlxcdTFFQzFcXHUxRUMzXFx1MUVDNVxcdTFFQzdcXHUxRUM5XFx1MUVDQlxcdTFFQ0RcXHUxRUNGXFx1MUVEMVxcdTFFRDNcXHUxRUQ1XFx1MUVEN1xcdTFFRDlcXHUxRURCXFx1MUVERFxcdTFFREZcXHUxRUUxXFx1MUVFM1xcdTFFRTVcXHUxRUU3XFx1MUVFOVxcdTFFRUJcXHUxRUVEXFx1MUVFRlxcdTFFRjFcXHUxRUYzXFx1MUVGNVxcdTFFRjdcXHUxRUY5XFx1MUVGQlxcdTFFRkRcXHUxRUZGLVxcdTFGMDdcXHUxRjEwLVxcdTFGMTVcXHUxRjIwLVxcdTFGMjdcXHUxRjMwLVxcdTFGMzdcXHUxRjQwLVxcdTFGNDVcXHUxRjUwLVxcdTFGNTdcXHUxRjYwLVxcdTFGNjdcXHUxRjcwLVxcdTFGN0RcXHUxRjgwLVxcdTFGODdcXHUxRjkwLVxcdTFGOTdcXHUxRkEwLVxcdTFGQTdcXHUxRkIwLVxcdTFGQjRcXHUxRkI2XFx1MUZCN1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2XFx1MUZDN1xcdTFGRDAtXFx1MUZEM1xcdTFGRDZcXHUxRkQ3XFx1MUZFMC1cXHUxRkU3XFx1MUZGMi1cXHUxRkY0XFx1MUZGNlxcdTFGRjdcXHUyMTBBXFx1MjEwRVxcdTIxMEZcXHUyMTEzXFx1MjEyRlxcdTIxMzRcXHUyMTM5XFx1MjEzQ1xcdTIxM0RcXHUyMTQ2LVxcdTIxNDlcXHUyMTRFXFx1MjE4NFxcdTJDMzAtXFx1MkM1RVxcdTJDNjFcXHUyQzY1XFx1MkM2NlxcdTJDNjhcXHUyQzZBXFx1MkM2Q1xcdTJDNzFcXHUyQzczXFx1MkM3NFxcdTJDNzYtXFx1MkM3QlxcdTJDODFcXHUyQzgzXFx1MkM4NVxcdTJDODdcXHUyQzg5XFx1MkM4QlxcdTJDOERcXHUyQzhGXFx1MkM5MVxcdTJDOTNcXHUyQzk1XFx1MkM5N1xcdTJDOTlcXHUyQzlCXFx1MkM5RFxcdTJDOUZcXHUyQ0ExXFx1MkNBM1xcdTJDQTVcXHUyQ0E3XFx1MkNBOVxcdTJDQUJcXHUyQ0FEXFx1MkNBRlxcdTJDQjFcXHUyQ0IzXFx1MkNCNVxcdTJDQjdcXHUyQ0I5XFx1MkNCQlxcdTJDQkRcXHUyQ0JGXFx1MkNDMVxcdTJDQzNcXHUyQ0M1XFx1MkNDN1xcdTJDQzlcXHUyQ0NCXFx1MkNDRFxcdTJDQ0ZcXHUyQ0QxXFx1MkNEM1xcdTJDRDVcXHUyQ0Q3XFx1MkNEOVxcdTJDREJcXHUyQ0REXFx1MkNERlxcdTJDRTFcXHUyQ0UzXFx1MkNFNFxcdTJDRUNcXHUyQ0VFXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1QTY0MVxcdUE2NDNcXHVBNjQ1XFx1QTY0N1xcdUE2NDlcXHVBNjRCXFx1QTY0RFxcdUE2NEZcXHVBNjUxXFx1QTY1M1xcdUE2NTVcXHVBNjU3XFx1QTY1OVxcdUE2NUJcXHVBNjVEXFx1QTY1RlxcdUE2NjFcXHVBNjYzXFx1QTY2NVxcdUE2NjdcXHVBNjY5XFx1QTY2QlxcdUE2NkRcXHVBNjgxXFx1QTY4M1xcdUE2ODVcXHVBNjg3XFx1QTY4OVxcdUE2OEJcXHVBNjhEXFx1QTY4RlxcdUE2OTFcXHVBNjkzXFx1QTY5NVxcdUE2OTdcXHVBNjk5XFx1QTY5QlxcdUE3MjNcXHVBNzI1XFx1QTcyN1xcdUE3MjlcXHVBNzJCXFx1QTcyRFxcdUE3MkYtXFx1QTczMVxcdUE3MzNcXHVBNzM1XFx1QTczN1xcdUE3MzlcXHVBNzNCXFx1QTczRFxcdUE3M0ZcXHVBNzQxXFx1QTc0M1xcdUE3NDVcXHVBNzQ3XFx1QTc0OVxcdUE3NEJcXHVBNzREXFx1QTc0RlxcdUE3NTFcXHVBNzUzXFx1QTc1NVxcdUE3NTdcXHVBNzU5XFx1QTc1QlxcdUE3NURcXHVBNzVGXFx1QTc2MVxcdUE3NjNcXHVBNzY1XFx1QTc2N1xcdUE3NjlcXHVBNzZCXFx1QTc2RFxcdUE3NkZcXHVBNzcxLVxcdUE3NzhcXHVBNzdBXFx1QTc3Q1xcdUE3N0ZcXHVBNzgxXFx1QTc4M1xcdUE3ODVcXHVBNzg3XFx1QTc4Q1xcdUE3OEVcXHVBNzkxXFx1QTc5My1cXHVBNzk1XFx1QTc5N1xcdUE3OTlcXHVBNzlCXFx1QTc5RFxcdUE3OUZcXHVBN0ExXFx1QTdBM1xcdUE3QTVcXHVBN0E3XFx1QTdBOVxcdUE3QjVcXHVBN0I3XFx1QTdGQVxcdUFCMzAtXFx1QUI1QVxcdUFCNjAtXFx1QUI2NVxcdUFCNzAtXFx1QUJCRlxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZGNDEtXFx1RkY1QV18XFx1RDgwMVtcXHVEQzI4LVxcdURDNEZcXHVEQ0Q4LVxcdURDRkJdfFxcdUQ4MDNbXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA2W1xcdURDQzAtXFx1RENERl18XFx1RDgzNVtcXHVEQzFBLVxcdURDMzNcXHVEQzRFLVxcdURDNTRcXHVEQzU2LVxcdURDNjdcXHVEQzgyLVxcdURDOUJcXHVEQ0I2LVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVEQ0NGXFx1RENFQS1cXHVERDAzXFx1REQxRS1cXHVERDM3XFx1REQ1Mi1cXHVERDZCXFx1REQ4Ni1cXHVERDlGXFx1RERCQS1cXHVEREQzXFx1RERFRS1cXHVERTA3XFx1REUyMi1cXHVERTNCXFx1REU1Ni1cXHVERTZGXFx1REU4QS1cXHVERUE1XFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUUxXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjFCXFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjU1XFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERjhGXFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkM5XFx1REZDQl18XFx1RDgzQVtcXHVERDIyLVxcdURENDNdLyxcbiAgTHQ6IC9bXFx1MDFDNVxcdTAxQzhcXHUwMUNCXFx1MDFGMlxcdTFGODgtXFx1MUY4RlxcdTFGOTgtXFx1MUY5RlxcdTFGQTgtXFx1MUZBRlxcdTFGQkNcXHUxRkNDXFx1MUZGQ10vLFxuICBMbTogL1tcXHUwMkIwLVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzRcXHUwMzdBXFx1MDU1OVxcdTA2NDBcXHUwNkU1XFx1MDZFNlxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA5NzFcXHUwRTQ2XFx1MEVDNlxcdTEwRkNcXHUxN0Q3XFx1MTg0M1xcdTFBQTdcXHUxQzc4LVxcdTFDN0RcXHUxRDJDLVxcdTFENkFcXHUxRDc4XFx1MUQ5Qi1cXHUxREJGXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyQzdDXFx1MkM3RFxcdTJENkZcXHUyRTJGXFx1MzAwNVxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDlEXFx1MzA5RVxcdTMwRkMtXFx1MzBGRVxcdUEwMTVcXHVBNEY4LVxcdUE0RkRcXHVBNjBDXFx1QTY3RlxcdUE2OUNcXHVBNjlEXFx1QTcxNy1cXHVBNzFGXFx1QTc3MFxcdUE3ODhcXHVBN0Y4XFx1QTdGOVxcdUE5Q0ZcXHVBOUU2XFx1QUE3MFxcdUFBRERcXHVBQUYzXFx1QUFGNFxcdUFCNUMtXFx1QUI1RlxcdUZGNzBcXHVGRjlFXFx1RkY5Rl18XFx1RDgxQVtcXHVERjQwLVxcdURGNDNdfFxcdUQ4MUJbXFx1REY5My1cXHVERjlGXFx1REZFMF0vLFxuICBMbzogL1tcXHhBQVxceEJBXFx1MDFCQlxcdTAxQzAtXFx1MDFDM1xcdTAyOTRcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2M0ZcXHUwNjQxLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA4MDAtXFx1MDgxNVxcdTA4NDAtXFx1MDg1OFxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3Mi1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4MFxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1NC1cXHUwRDU2XFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ1XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEQwLVxcdTEwRkFcXHUxMEZELVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RENcXHUxODIwLVxcdTE4NDJcXHUxODQ0LVxcdTE4NzdcXHUxODgwLVxcdTE4ODRcXHUxODg3LVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDNzdcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTIxMzUtXFx1MjEzOFxcdTJEMzAtXFx1MkQ2N1xcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTMwMDZcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUEwMTRcXHVBMDE2LVxcdUE0OENcXHVBNEQwLVxcdUE0RjdcXHVBNTAwLVxcdUE2MEJcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NkVcXHVBNkEwLVxcdUE2RTVcXHVBNzhGXFx1QTdGN1xcdUE3RkItXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlFMC1cXHVBOUU0XFx1QTlFNy1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTZGXFx1QUE3MS1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQlxcdUFBRENcXHVBQUUwLVxcdUFBRUFcXHVBQUYyXFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUJDMC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkY2Ni1cXHVGRjZGXFx1RkY3MS1cXHVGRjlEXFx1RkZBMC1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDNTAtXFx1REM5RFxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XXxcXHVEODA0W1xcdURDMDMtXFx1REMzN1xcdURDODMtXFx1RENBRlxcdURDRDAtXFx1RENFOFxcdUREMDMtXFx1REQyNlxcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzM0XFx1REM0Ny1cXHVEQzRBXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURGMDAtXFx1REYxOV18XFx1RDgwNltcXHVEQ0ZGXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMyRVxcdURDNDBcXHVEQzcyLVxcdURDOEZdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJdW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMFxcdURDMDFdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODNBW1xcdURDMDAtXFx1RENDNF18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMV18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdLyxcblxuICAvLyBOdW1iZXJzXG4gIE5sOiAvW1xcdTE2RUUtXFx1MTZGMFxcdTIxNjAtXFx1MjE4MlxcdTIxODUtXFx1MjE4OFxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDM4LVxcdTMwM0FcXHVBNkU2LVxcdUE2RUZdfFxcdUQ4MDBbXFx1REQ0MC1cXHVERDc0XFx1REY0MVxcdURGNEFcXHVERkQxLVxcdURGRDVdfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXS8sXG4gIE5kOiAvWzAtOVxcdTA2NjAtXFx1MDY2OVxcdTA2RjAtXFx1MDZGOVxcdTA3QzAtXFx1MDdDOVxcdTA5NjYtXFx1MDk2RlxcdTA5RTYtXFx1MDlFRlxcdTBBNjYtXFx1MEE2RlxcdTBBRTYtXFx1MEFFRlxcdTBCNjYtXFx1MEI2RlxcdTBCRTYtXFx1MEJFRlxcdTBDNjYtXFx1MEM2RlxcdTBDRTYtXFx1MENFRlxcdTBENjYtXFx1MEQ2RlxcdTBERTYtXFx1MERFRlxcdTBFNTAtXFx1MEU1OVxcdTBFRDAtXFx1MEVEOVxcdTBGMjAtXFx1MEYyOVxcdTEwNDAtXFx1MTA0OVxcdTEwOTAtXFx1MTA5OVxcdTE3RTAtXFx1MTdFOVxcdTE4MTAtXFx1MTgxOVxcdTE5NDYtXFx1MTk0RlxcdTE5RDAtXFx1MTlEOVxcdTFBODAtXFx1MUE4OVxcdTFBOTAtXFx1MUE5OVxcdTFCNTAtXFx1MUI1OVxcdTFCQjAtXFx1MUJCOVxcdTFDNDAtXFx1MUM0OVxcdTFDNTAtXFx1MUM1OVxcdUE2MjAtXFx1QTYyOVxcdUE4RDAtXFx1QThEOVxcdUE5MDAtXFx1QTkwOVxcdUE5RDAtXFx1QTlEOVxcdUE5RjAtXFx1QTlGOVxcdUFBNTAtXFx1QUE1OVxcdUFCRjAtXFx1QUJGOVxcdUZGMTAtXFx1RkYxOV18XFx1RDgwMVtcXHVEQ0EwLVxcdURDQTldfFxcdUQ4MDRbXFx1REM2Ni1cXHVEQzZGXFx1RENGMC1cXHVEQ0Y5XFx1REQzNi1cXHVERDNGXFx1REREMC1cXHVEREQ5XFx1REVGMC1cXHVERUY5XXxbXFx1RDgwNVxcdUQ4MDddW1xcdURDNTAtXFx1REM1OVxcdURDRDAtXFx1RENEOVxcdURFNTAtXFx1REU1OVxcdURFQzAtXFx1REVDOVxcdURGMzAtXFx1REYzOV18XFx1RDgwNltcXHVEQ0UwLVxcdURDRTldfFxcdUQ4MUFbXFx1REU2MC1cXHVERTY5XFx1REY1MC1cXHVERjU5XXxcXHVEODM1W1xcdURGQ0UtXFx1REZGRl18XFx1RDgzQVtcXHVERDUwLVxcdURENTldLyxcblxuICAvLyBNYXJrc1xuICBNbjogL1tcXHUwMzAwLVxcdTAzNkZcXHUwNDgzLVxcdTA0ODdcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNjEwLVxcdTA2MUFcXHUwNjRCLVxcdTA2NUZcXHUwNjcwXFx1MDZENi1cXHUwNkRDXFx1MDZERi1cXHUwNkU0XFx1MDZFN1xcdTA2RThcXHUwNkVBLVxcdTA2RURcXHUwNzExXFx1MDczMC1cXHUwNzRBXFx1MDdBNi1cXHUwN0IwXFx1MDdFQi1cXHUwN0YzXFx1MDgxNi1cXHUwODE5XFx1MDgxQi1cXHUwODIzXFx1MDgyNS1cXHUwODI3XFx1MDgyOS1cXHUwODJEXFx1MDg1OS1cXHUwODVCXFx1MDhENC1cXHUwOEUxXFx1MDhFMy1cXHUwOTAyXFx1MDkzQVxcdTA5M0NcXHUwOTQxLVxcdTA5NDhcXHUwOTREXFx1MDk1MS1cXHUwOTU3XFx1MDk2MlxcdTA5NjNcXHUwOTgxXFx1MDlCQ1xcdTA5QzEtXFx1MDlDNFxcdTA5Q0RcXHUwOUUyXFx1MDlFM1xcdTBBMDFcXHUwQTAyXFx1MEEzQ1xcdTBBNDFcXHUwQTQyXFx1MEE0N1xcdTBBNDhcXHUwQTRCLVxcdTBBNERcXHUwQTUxXFx1MEE3MFxcdTBBNzFcXHUwQTc1XFx1MEE4MVxcdTBBODJcXHUwQUJDXFx1MEFDMS1cXHUwQUM1XFx1MEFDN1xcdTBBQzhcXHUwQUNEXFx1MEFFMlxcdTBBRTNcXHUwQjAxXFx1MEIzQ1xcdTBCM0ZcXHUwQjQxLVxcdTBCNDRcXHUwQjREXFx1MEI1NlxcdTBCNjJcXHUwQjYzXFx1MEI4MlxcdTBCQzBcXHUwQkNEXFx1MEMwMFxcdTBDM0UtXFx1MEM0MFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzgxXFx1MENCQ1xcdTBDQkZcXHUwQ0M2XFx1MENDQ1xcdTBDQ0RcXHUwQ0UyXFx1MENFM1xcdTBEMDFcXHUwRDQxLVxcdTBENDRcXHUwRDREXFx1MEQ2MlxcdTBENjNcXHUwRENBXFx1MEREMi1cXHUwREQ0XFx1MERENlxcdTBFMzFcXHUwRTM0LVxcdTBFM0FcXHUwRTQ3LVxcdTBFNEVcXHUwRUIxXFx1MEVCNC1cXHUwRUI5XFx1MEVCQlxcdTBFQkNcXHUwRUM4LVxcdTBFQ0RcXHUwRjE4XFx1MEYxOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGNzEtXFx1MEY3RVxcdTBGODAtXFx1MEY4NFxcdTBGODZcXHUwRjg3XFx1MEY4RC1cXHUwRjk3XFx1MEY5OS1cXHUwRkJDXFx1MEZDNlxcdTEwMkQtXFx1MTAzMFxcdTEwMzItXFx1MTAzN1xcdTEwMzlcXHUxMDNBXFx1MTAzRFxcdTEwM0VcXHUxMDU4XFx1MTA1OVxcdTEwNUUtXFx1MTA2MFxcdTEwNzEtXFx1MTA3NFxcdTEwODJcXHUxMDg1XFx1MTA4NlxcdTEwOERcXHUxMDlEXFx1MTM1RC1cXHUxMzVGXFx1MTcxMi1cXHUxNzE0XFx1MTczMi1cXHUxNzM0XFx1MTc1MlxcdTE3NTNcXHUxNzcyXFx1MTc3M1xcdTE3QjRcXHUxN0I1XFx1MTdCNy1cXHUxN0JEXFx1MTdDNlxcdTE3QzktXFx1MTdEM1xcdTE3RERcXHUxODBCLVxcdTE4MERcXHUxODg1XFx1MTg4NlxcdTE4QTlcXHUxOTIwLVxcdTE5MjJcXHUxOTI3XFx1MTkyOFxcdTE5MzJcXHUxOTM5LVxcdTE5M0JcXHUxQTE3XFx1MUExOFxcdTFBMUJcXHUxQTU2XFx1MUE1OC1cXHUxQTVFXFx1MUE2MFxcdTFBNjJcXHUxQTY1LVxcdTFBNkNcXHUxQTczLVxcdTFBN0NcXHUxQTdGXFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjAzXFx1MUIzNFxcdTFCMzYtXFx1MUIzQVxcdTFCM0NcXHUxQjQyXFx1MUI2Qi1cXHUxQjczXFx1MUI4MFxcdTFCODFcXHUxQkEyLVxcdTFCQTVcXHUxQkE4XFx1MUJBOVxcdTFCQUItXFx1MUJBRFxcdTFCRTZcXHUxQkU4XFx1MUJFOVxcdTFCRURcXHUxQkVGLVxcdTFCRjFcXHUxQzJDLVxcdTFDMzNcXHUxQzM2XFx1MUMzN1xcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFMFxcdTFDRTItXFx1MUNFOFxcdTFDRURcXHUxQ0Y0XFx1MUNGOFxcdTFDRjlcXHUxREMwLVxcdTFERjVcXHUxREZCLVxcdTFERkZcXHUyMEQwLVxcdTIwRENcXHUyMEUxXFx1MjBFNS1cXHUyMEYwXFx1MkNFRi1cXHUyQ0YxXFx1MkQ3RlxcdTJERTAtXFx1MkRGRlxcdTMwMkEtXFx1MzAyRFxcdTMwOTlcXHUzMDlBXFx1QTY2RlxcdUE2NzQtXFx1QTY3RFxcdUE2OUVcXHVBNjlGXFx1QTZGMFxcdUE2RjFcXHVBODAyXFx1QTgwNlxcdUE4MEJcXHVBODI1XFx1QTgyNlxcdUE4QzRcXHVBOEM1XFx1QThFMC1cXHVBOEYxXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUxXFx1QTk4MC1cXHVBOTgyXFx1QTlCM1xcdUE5QjYtXFx1QTlCOVxcdUE5QkNcXHVBOUU1XFx1QUEyOS1cXHVBQTJFXFx1QUEzMVxcdUFBMzJcXHVBQTM1XFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE3Q1xcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUNcXHVBQUVEXFx1QUFGNlxcdUFCRTVcXHVBQkU4XFx1QUJFRFxcdUZCMUVcXHVGRTAwLVxcdUZFMEZcXHVGRTIwLVxcdUZFMkZdfFxcdUQ4MDBbXFx1RERGRFxcdURFRTBcXHVERjc2LVxcdURGN0FdfFxcdUQ4MDJbXFx1REUwMS1cXHVERTAzXFx1REUwNVxcdURFMDZcXHVERTBDLVxcdURFMEZcXHVERTM4LVxcdURFM0FcXHVERTNGXFx1REVFNVxcdURFRTZdfFxcdUQ4MDRbXFx1REMwMVxcdURDMzgtXFx1REM0NlxcdURDN0YtXFx1REM4MVxcdURDQjMtXFx1RENCNlxcdURDQjlcXHVEQ0JBXFx1REQwMC1cXHVERDAyXFx1REQyNy1cXHVERDJCXFx1REQyRC1cXHVERDM0XFx1REQ3M1xcdUREODBcXHVERDgxXFx1RERCNi1cXHVEREJFXFx1RERDQS1cXHVERENDXFx1REUyRi1cXHVERTMxXFx1REUzNFxcdURFMzZcXHVERTM3XFx1REUzRVxcdURFREZcXHVERUUzLVxcdURFRUFcXHVERjAwXFx1REYwMVxcdURGM0NcXHVERjQwXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDMzgtXFx1REMzRlxcdURDNDItXFx1REM0NFxcdURDNDZcXHVEQ0IzLVxcdURDQjhcXHVEQ0JBXFx1RENCRlxcdURDQzBcXHVEQ0MyXFx1RENDM1xcdUREQjItXFx1RERCNVxcdUREQkNcXHVEREJEXFx1RERCRlxcdUREQzBcXHVERERDXFx1RERERFxcdURFMzMtXFx1REUzQVxcdURFM0RcXHVERTNGXFx1REU0MFxcdURFQUJcXHVERUFEXFx1REVCMC1cXHVERUI1XFx1REVCN1xcdURGMUQtXFx1REYxRlxcdURGMjItXFx1REYyNVxcdURGMjctXFx1REYyQl18XFx1RDgwN1tcXHVEQzMwLVxcdURDMzZcXHVEQzM4LVxcdURDM0RcXHVEQzNGXFx1REM5Mi1cXHVEQ0E3XFx1RENBQS1cXHVEQ0IwXFx1RENCMlxcdURDQjNcXHVEQ0I1XFx1RENCNl18XFx1RDgxQVtcXHVERUYwLVxcdURFRjRcXHVERjMwLVxcdURGMzZdfFxcdUQ4MUJbXFx1REY4Ri1cXHVERjkyXXxcXHVEODJGW1xcdURDOURcXHVEQzlFXXxcXHVEODM0W1xcdURENjctXFx1REQ2OVxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFNDItXFx1REU0NF18XFx1RDgzNltcXHVERTAwLVxcdURFMzZcXHVERTNCLVxcdURFNkNcXHVERTc1XFx1REU4NFxcdURFOUItXFx1REU5RlxcdURFQTEtXFx1REVBRl18XFx1RDgzOFtcXHVEQzAwLVxcdURDMDZcXHVEQzA4LVxcdURDMThcXHVEQzFCLVxcdURDMjFcXHVEQzIzXFx1REMyNFxcdURDMjYtXFx1REMyQV18XFx1RDgzQVtcXHVEQ0QwLVxcdURDRDZcXHVERDQ0LVxcdURENEFdfFxcdURCNDBbXFx1REQwMC1cXHVEREVGXS8sXG4gIE1jOiAvW1xcdTA5MDMtXFx1MDkwM118W1xcdTA5M0UtXFx1MDk0MF18W1xcdTA5NDktXFx1MDk0Q118W1xcdTA5ODItXFx1MDk4M118W1xcdTA5QkUtXFx1MDlDMF18W1xcdTA5QzctXFx1MDlDOF18W1xcdTA5Q0ItXFx1MDlDQ118W1xcdTA5RDctXFx1MDlEN118W1xcdTBBM0UtXFx1MEE0MF18W1xcdTBBODMtXFx1MEE4M118W1xcdTBBQkUtXFx1MEFDMF18W1xcdTBBQzktXFx1MEFDOV18W1xcdTBBQ0ItXFx1MEFDQ118W1xcdTBCMDItXFx1MEIwM118W1xcdTBCM0UtXFx1MEIzRV18W1xcdTBCNDAtXFx1MEI0MF18W1xcdTBCNDctXFx1MEI0OF18W1xcdTBCNEItXFx1MEI0Q118W1xcdTBCNTctXFx1MEI1N118W1xcdTBCODMtXFx1MEI4M118W1xcdTBCQkUtXFx1MEJCRl18W1xcdTBCQzEtXFx1MEJDMl18W1xcdTBCQzYtXFx1MEJDOF18W1xcdTBCQ0EtXFx1MEJDQ118W1xcdTBCRDctXFx1MEJEN118W1xcdTBDMDEtXFx1MEMwM118W1xcdTBDNDEtXFx1MEM0NF18W1xcdTBDODItXFx1MEM4M118W1xcdTBDQkUtXFx1MENCRV18W1xcdTBDQzAtXFx1MENDNF18W1xcdTBDQzctXFx1MENDOF18W1xcdTBDQ0EtXFx1MENDQl18W1xcdTBDRDUtXFx1MENENl18W1xcdTBEMDItXFx1MEQwM118W1xcdTBEM0UtXFx1MEQ0MF18W1xcdTBENDYtXFx1MEQ0OF18W1xcdTBENEEtXFx1MEQ0Q118W1xcdTBENTctXFx1MEQ1N118W1xcdTBGM0UtXFx1MEYzRl18W1xcdTBGN0YtXFx1MEY3Rl0vLFxuXG4gIC8vIFB1bmN0dWF0aW9uLCBDb25uZWN0b3JcbiAgUGM6IC9bX1xcdTIwM0ZcXHUyMDQwXFx1MjA1NFxcdUZFMzNcXHVGRTM0XFx1RkU0RC1cXHVGRTRGXFx1RkYzRl0vLFxuXG4gIC8vIFNlcGFyYXRvciwgU3BhY2VcbiAgWnM6IC9bIFxceEEwXFx1MTY4MFxcdTIwMDAtXFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMF0vLFxuXG4gIC8vIFRoZXNlIHR3byBhcmUgbm90IHJlYWwgVW5pY29kZSBjYXRlZ29yaWVzLCBidXQgb3VyIHVzZWZ1bCBmb3IgT2htLlxuICAvLyBMIGlzIGEgY29tYmluYXRpb24gb2YgYWxsIHRoZSBsZXR0ZXIgY2F0ZWdvcmllcy5cbiAgLy8gTHRtbyBpcyBhIGNvbWJpbmF0aW9uIG9mIEx0LCBMbSwgYW5kIExvLlxuICBMOiAvW0EtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4ODRcXHUxODg3LVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QUVcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjMwLVxcdURGNDBcXHVERjQyLVxcdURGNDlcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENCMC1cXHVEQ0QzXFx1RENEOC1cXHVEQ0ZCXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjE5XXxcXHVEODA2W1xcdURDQTAtXFx1RENERlxcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4Rl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBcXHVERjkzLVxcdURGOUZcXHVERkUwXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMFxcdURDMDFdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1REQwMC1cXHVERDQzXXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vLFxuICBMdG1vOiAvW1xcdTAxQzVcXHUwMUM4XFx1MDFDQlxcdTAxRjJcXHUxRjg4LVxcdTFGOEZcXHUxRjk4LVxcdTFGOUZcXHUxRkE4LVxcdTFGQUZcXHUxRkJDXFx1MUZDQ1xcdTFGRkNdfFtcXHUwMkIwLVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzRcXHUwMzdBXFx1MDU1OVxcdTA2NDBcXHUwNkU1XFx1MDZFNlxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA5NzFcXHUwRTQ2XFx1MEVDNlxcdTEwRkNcXHUxN0Q3XFx1MTg0M1xcdTFBQTdcXHUxQzc4LVxcdTFDN0RcXHUxRDJDLVxcdTFENkFcXHUxRDc4XFx1MUQ5Qi1cXHUxREJGXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyQzdDXFx1MkM3RFxcdTJENkZcXHUyRTJGXFx1MzAwNVxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDlEXFx1MzA5RVxcdTMwRkMtXFx1MzBGRVxcdUEwMTVcXHVBNEY4LVxcdUE0RkRcXHVBNjBDXFx1QTY3RlxcdUE2OUNcXHVBNjlEXFx1QTcxNy1cXHVBNzFGXFx1QTc3MFxcdUE3ODhcXHVBN0Y4XFx1QTdGOVxcdUE5Q0ZcXHVBOUU2XFx1QUE3MFxcdUFBRERcXHVBQUYzXFx1QUFGNFxcdUFCNUMtXFx1QUI1RlxcdUZGNzBcXHVGRjlFXFx1RkY5Rl18XFx1RDgxQVtcXHVERjQwLVxcdURGNDNdfFxcdUQ4MUJbXFx1REY5My1cXHVERjlGXFx1REZFMF18W1xceEFBXFx4QkFcXHUwMUJCXFx1MDFDMC1cXHUwMUMzXFx1MDI5NFxcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDYzRlxcdTA2NDEtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDgwMC1cXHUwODE1XFx1MDg0MC1cXHUwODU4XFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcyLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDVcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwRDAtXFx1MTBGQVxcdTEwRkQtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEQ1xcdTE4MjAtXFx1MTg0MlxcdTE4NDQtXFx1MTg3N1xcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3N1xcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MjEzNS1cXHUyMTM4XFx1MkQzMC1cXHUyRDY3XFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MzAwNlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTAxNFxcdUEwMTYtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGN1xcdUE1MDAtXFx1QTYwQlxcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY2RVxcdUE2QTAtXFx1QTZFNVxcdUE3OEZcXHVBN0Y3XFx1QTdGQi1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUUwLVxcdUE5RTRcXHVBOUU3LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNkZcXHVBQTcxLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCXFx1QUFEQ1xcdUFBRTAtXFx1QUFFQVxcdUFBRjJcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQkMwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjY2LVxcdUZGNkZcXHVGRjcxLVxcdUZGOURcXHVGRkEwLVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjMwLVxcdURGNDBcXHVERjQyLVxcdURGNDlcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZdfFxcdUQ4MDFbXFx1REM1MC1cXHVEQzlEXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhdfFxcdUQ4MDRbXFx1REMwMy1cXHVEQzM3XFx1REM4My1cXHVEQ0FGXFx1RENEMC1cXHVEQ0U4XFx1REQwMy1cXHVERDI2XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REYwMC1cXHVERjE5XXxcXHVEODA2W1xcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4Rl18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBdfFxcdUQ4MjFbXFx1REMwMC1cXHVERkVDXXxcXHVEODIyW1xcdURDMDAtXFx1REVGMl18XFx1RDgyQ1tcXHVEQzAwXFx1REMwMV18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgVW5pY29kZUNhdGVnb3JpZXMgPSBVbmljb2RlQ2F0ZWdvcmllcyQxO1xuY29uc3QgY29tbW9uJGogPSBjb21tb24kbDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEdlbmVyYWwgc3R1ZmZcblxuY2xhc3MgUEV4cHIkMSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBQRXhwciQxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQRXhwciBjYW5ub3QgYmUgaW5zdGFudGlhdGVkIC0tIGl0J3MgYWJzdHJhY3RcIik7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byB0aGUgaW50ZXJ2YWwgY29udGFpbmluZyB0aGUgc291cmNlIGZvciB0aGlzIGV4cHJlc3Npb24uXG4gIHdpdGhTb3VyY2UoaW50ZXJ2YWwpIHtcbiAgICBpZiAoaW50ZXJ2YWwpIHtcbiAgICAgIHRoaXMuc291cmNlID0gaW50ZXJ2YWwudHJpbW1lZCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vLyBBbnlcblxuY29uc3QgYW55ID0gT2JqZWN0LmNyZWF0ZShQRXhwciQxLnByb3RvdHlwZSk7XG5cbi8vIEVuZFxuXG5jb25zdCBlbmQgPSBPYmplY3QuY3JlYXRlKFBFeHByJDEucHJvdG90eXBlKTtcblxuLy8gVGVybWluYWxzXG5cbmNsYXNzIFRlcm1pbmFsJDEgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3Iob2JqKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9iaiA9IG9iajtcbiAgfVxufVxuXG4vLyBSYW5nZXNcblxuY2xhc3MgUmFuZ2UgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoZnJvbSwgdG8pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgdGhpcy50byA9IHRvO1xuICAgIC8vIElmIGVpdGhlciBgZnJvbWAgb3IgYHRvYCBpcyBtYWRlIHVwIG9mIG11bHRpcGxlIGNvZGUgdW5pdHMsIHRoZW5cbiAgICAvLyB0aGUgcmFuZ2Ugc2hvdWxkIGNvbnN1bWUgYSBmdWxsIGNvZGUgcG9pbnQsIG5vdCBhIHNpbmdsZSBjb2RlIHVuaXQuXG4gICAgdGhpcy5tYXRjaENvZGVQb2ludCA9IGZyb20ubGVuZ3RoID4gMSB8fCB0by5sZW5ndGggPiAxO1xuICB9XG59XG5cbi8vIFBhcmFtZXRlcnNcblxuY2xhc3MgUGFyYW0gZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoaW5kZXgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgfVxufVxuXG4vLyBBbHRlcm5hdGlvblxuXG5jbGFzcyBBbHQgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IodGVybXMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudGVybXMgPSB0ZXJtcztcbiAgfVxufVxuXG4vLyBFeHRlbmQgaXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIG9mIHJ1bGUgZXh0ZW5zaW9uXG5cbmNsYXNzIEV4dGVuZCBleHRlbmRzIEFsdCB7XG4gIGNvbnN0cnVjdG9yKHN1cGVyR3JhbW1hciwgbmFtZSwgYm9keSkge1xuICAgIGNvbnN0IG9yaWdCb2R5ID0gc3VwZXJHcmFtbWFyLnJ1bGVzW25hbWVdLmJvZHk7XG4gICAgc3VwZXIoW2JvZHksIG9yaWdCb2R5XSk7XG5cbiAgICB0aGlzLnN1cGVyR3JhbW1hciA9IHN1cGVyR3JhbW1hcjtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gIH1cbn1cblxuLy8gU3BsaWNlIGlzIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbCBvZiBydWxlIG92ZXJyaWRpbmcgd2l0aCB0aGUgYC4uLmAgb3BlcmF0b3IuXG5jbGFzcyBTcGxpY2UgZXh0ZW5kcyBBbHQge1xuICBjb25zdHJ1Y3RvcihzdXBlckdyYW1tYXIsIHJ1bGVOYW1lLCBiZWZvcmVUZXJtcywgYWZ0ZXJUZXJtcykge1xuICAgIGNvbnN0IG9yaWdCb2R5ID0gc3VwZXJHcmFtbWFyLnJ1bGVzW3J1bGVOYW1lXS5ib2R5O1xuICAgIHN1cGVyKFsuLi5iZWZvcmVUZXJtcywgb3JpZ0JvZHksIC4uLmFmdGVyVGVybXNdKTtcblxuICAgIHRoaXMuc3VwZXJHcmFtbWFyID0gc3VwZXJHcmFtbWFyO1xuICAgIHRoaXMucnVsZU5hbWUgPSBydWxlTmFtZTtcbiAgICB0aGlzLmV4cGFuc2lvblBvcyA9IGJlZm9yZVRlcm1zLmxlbmd0aDtcbiAgfVxufVxuXG4vLyBTZXF1ZW5jZXNcblxuY2xhc3MgU2VxIGV4dGVuZHMgUEV4cHIkMSB7XG4gIGNvbnN0cnVjdG9yKGZhY3RvcnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZmFjdG9ycyA9IGZhY3RvcnM7XG4gIH1cbn1cblxuLy8gSXRlcmF0b3JzIGFuZCBvcHRpb25hbHNcblxuY2xhc3MgSXRlciBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihleHByKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmV4cHIgPSBleHByO1xuICB9XG59XG5cbmNsYXNzIFN0YXIgZXh0ZW5kcyBJdGVyIHt9XG5jbGFzcyBQbHVzIGV4dGVuZHMgSXRlciB7fVxuY2xhc3MgT3B0IGV4dGVuZHMgSXRlciB7fVxuXG5TdGFyLnByb3RvdHlwZS5vcGVyYXRvciA9ICcqJztcblBsdXMucHJvdG90eXBlLm9wZXJhdG9yID0gJysnO1xuT3B0LnByb3RvdHlwZS5vcGVyYXRvciA9ICc/JztcblxuU3Rhci5wcm90b3R5cGUubWluTnVtTWF0Y2hlcyA9IDA7XG5QbHVzLnByb3RvdHlwZS5taW5OdW1NYXRjaGVzID0gMTtcbk9wdC5wcm90b3R5cGUubWluTnVtTWF0Y2hlcyA9IDA7XG5cblN0YXIucHJvdG90eXBlLm1heE51bU1hdGNoZXMgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5QbHVzLnByb3RvdHlwZS5tYXhOdW1NYXRjaGVzID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuT3B0LnByb3RvdHlwZS5tYXhOdW1NYXRjaGVzID0gMTtcblxuLy8gUHJlZGljYXRlc1xuXG5jbGFzcyBOb3QgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoZXhwcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5leHByID0gZXhwcjtcbiAgfVxufVxuXG5jbGFzcyBMb29rYWhlYWQgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IoZXhwcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5leHByID0gZXhwcjtcbiAgfVxufVxuXG4vLyBcIkxleGlmaWNhdGlvblwiXG5cbmNsYXNzIExleCBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihleHByKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmV4cHIgPSBleHByO1xuICB9XG59XG5cbi8vIFJ1bGUgYXBwbGljYXRpb25cblxuY2xhc3MgQXBwbHkgZXh0ZW5kcyBQRXhwciQxIHtcbiAgY29uc3RydWN0b3IocnVsZU5hbWUsIGFyZ3MgPSBbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5ydWxlTmFtZSA9IHJ1bGVOYW1lO1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gIH1cblxuICBpc1N5bnRhY3RpYygpIHtcbiAgICByZXR1cm4gY29tbW9uJGouaXNTeW50YWN0aWModGhpcy5ydWxlTmFtZSk7XG4gIH1cblxuICAvLyBUaGlzIG1ldGhvZCBqdXN0IGNhY2hlcyB0aGUgcmVzdWx0IG9mIGB0aGlzLnRvU3RyaW5nKClgIGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkuXG4gIHRvTWVtb0tleSgpIHtcbiAgICBpZiAoIXRoaXMuX21lbW9LZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX21lbW9LZXknLCB7dmFsdWU6IHRoaXMudG9TdHJpbmcoKX0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWVtb0tleTtcbiAgfVxufVxuXG4vLyBVbmljb2RlIGNoYXJhY3RlclxuXG5jbGFzcyBVbmljb2RlQ2hhciBleHRlbmRzIFBFeHByJDEge1xuICBjb25zdHJ1Y3RvcihjYXRlZ29yeSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgIHRoaXMucGF0dGVybiA9IFVuaWNvZGVDYXRlZ29yaWVzW2NhdGVnb3J5XTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucGV4cHJzTWFpbi5QRXhwciA9IFBFeHByJDE7XG5wZXhwcnNNYWluLmFueSA9IGFueTtcbnBleHByc01haW4uZW5kID0gZW5kO1xucGV4cHJzTWFpbi5UZXJtaW5hbCA9IFRlcm1pbmFsJDE7XG5wZXhwcnNNYWluLlJhbmdlID0gUmFuZ2U7XG5wZXhwcnNNYWluLlBhcmFtID0gUGFyYW07XG5wZXhwcnNNYWluLkFsdCA9IEFsdDtcbnBleHByc01haW4uRXh0ZW5kID0gRXh0ZW5kO1xucGV4cHJzTWFpbi5TcGxpY2UgPSBTcGxpY2U7XG5wZXhwcnNNYWluLlNlcSA9IFNlcTtcbnBleHByc01haW4uSXRlciA9IEl0ZXI7XG5wZXhwcnNNYWluLlN0YXIgPSBTdGFyO1xucGV4cHJzTWFpbi5QbHVzID0gUGx1cztcbnBleHByc01haW4uT3B0ID0gT3B0O1xucGV4cHJzTWFpbi5Ob3QgPSBOb3Q7XG5wZXhwcnNNYWluLkxvb2thaGVhZCA9IExvb2thaGVhZDtcbnBleHByc01haW4uTGV4ID0gTGV4O1xucGV4cHJzTWFpbi5BcHBseSA9IEFwcGx5O1xucGV4cHJzTWFpbi5Vbmljb2RlQ2hhciA9IFVuaWNvZGVDaGFyO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGkgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyRsID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qXG4gIFJldHVybiB0cnVlIGlmIHdlIHNob3VsZCBza2lwIHNwYWNlcyBwcmVjZWRpbmcgdGhpcyBleHByZXNzaW9uIGluIGEgc3ludGFjdGljIGNvbnRleHQuXG4qL1xucGV4cHJzJGwuUEV4cHIucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPSBjb21tb24kaS5hYnN0cmFjdChcbiAgICAnYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSdcbik7XG5cbi8qXG4gIEdlbmVyYWxseSwgdGhlc2UgYXJlIGFsbCBmaXJzdC1vcmRlciBleHByZXNzaW9ucyBhbmQgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBBcHBseSlcbiAgZGlyZWN0bHkgcmVhZCBmcm9tIHRoZSBpbnB1dCBzdHJlYW0uXG4qL1xucGV4cHJzJGwuYW55LmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICBwZXhwcnMkbC5lbmQuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLkFwcGx5LnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuVGVybWluYWwucHJvdG90eXBlLmFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UgPVxuICBwZXhwcnMkbC5SYW5nZS5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLlVuaWNvZGVDaGFyLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbi8qXG4gIEhpZ2hlci1vcmRlciBleHByZXNzaW9ucyB0aGF0IGRvbid0IGRpcmVjdGx5IGNvbnN1bWUgaW5wdXQuXG4qL1xucGV4cHJzJGwuQWx0LnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuSXRlci5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLkxleC5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLkxvb2thaGVhZC5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLk5vdC5wcm90b3R5cGUuYWxsb3dzU2tpcHBpbmdQcmVjZWRpbmdTcGFjZSA9XG4gIHBleHBycyRsLlBhcmFtLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgcGV4cHJzJGwuU2VxLnByb3RvdHlwZS5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlID1cbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gTmFtZXNwYWNlJDIoKSB7fVxuTmFtZXNwYWNlJDIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuTmFtZXNwYWNlJDIuYXNOYW1lc3BhY2UgPSBmdW5jdGlvbihvYmpPck5hbWVzcGFjZSkge1xuICBpZiAob2JqT3JOYW1lc3BhY2UgaW5zdGFuY2VvZiBOYW1lc3BhY2UkMikge1xuICAgIHJldHVybiBvYmpPck5hbWVzcGFjZTtcbiAgfVxuICByZXR1cm4gTmFtZXNwYWNlJDIuY3JlYXRlTmFtZXNwYWNlKG9iak9yTmFtZXNwYWNlKTtcbn07XG5cbi8vIENyZWF0ZSBhIG5ldyBuYW1lc3BhY2UuIElmIGBvcHRQcm9wc2AgaXMgc3BlY2lmaWVkLCBhbGwgb2YgaXRzIHByb3BlcnRpZXNcbi8vIHdpbGwgYmUgY29waWVkIHRvIHRoZSBuZXcgbmFtZXNwYWNlLlxuTmFtZXNwYWNlJDIuY3JlYXRlTmFtZXNwYWNlID0gZnVuY3Rpb24ob3B0UHJvcHMpIHtcbiAgcmV0dXJuIE5hbWVzcGFjZSQyLmV4dGVuZChOYW1lc3BhY2UkMi5wcm90b3R5cGUsIG9wdFByb3BzKTtcbn07XG5cbi8vIENyZWF0ZSBhIG5ldyBuYW1lc3BhY2Ugd2hpY2ggZXh0ZW5kcyBhbm90aGVyIG5hbWVzcGFjZS4gSWYgYG9wdFByb3BzYCBpc1xuLy8gc3BlY2lmaWVkLCBhbGwgb2YgaXRzIHByb3BlcnRpZXMgd2lsbCBiZSBjb3BpZWQgdG8gdGhlIG5ldyBuYW1lc3BhY2UuXG5OYW1lc3BhY2UkMi5leHRlbmQgPSBmdW5jdGlvbihuYW1lc3BhY2UsIG9wdFByb3BzKSB7XG4gIGlmIChuYW1lc3BhY2UgIT09IE5hbWVzcGFjZSQyLnByb3RvdHlwZSAmJiAhKG5hbWVzcGFjZSBpbnN0YW5jZW9mIE5hbWVzcGFjZSQyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIE5hbWVzcGFjZSBvYmplY3Q6ICcgKyBuYW1lc3BhY2UpO1xuICB9XG4gIGNvbnN0IG5zID0gT2JqZWN0LmNyZWF0ZShuYW1lc3BhY2UsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IE5hbWVzcGFjZSQyLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24obnMsIG9wdFByb3BzKTtcbn07XG5cbi8vIFRPRE86IFNob3VsZCB0aGlzIGJlIGEgcmVndWxhciBtZXRob2Q/XG5OYW1lc3BhY2UkMi50b1N0cmluZyA9IGZ1bmN0aW9uKG5zKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobnMpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBOYW1lc3BhY2VfMSA9IE5hbWVzcGFjZSQyO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3Qge2Fzc2VydDogYXNzZXJ0JDN9ID0gY29tbW9uJGw7XG5jb25zdCBOYW1lc3BhY2UkMSA9IE5hbWVzcGFjZV8xO1xuY29uc3QgcGV4cHJzJGsgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgb3B0SW50ZXJ2YWwpIHtcbiAgbGV0IGU7XG4gIGlmIChvcHRJbnRlcnZhbCkge1xuICAgIGUgPSBuZXcgRXJyb3Iob3B0SW50ZXJ2YWwuZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UoKSArIG1lc3NhZ2UpO1xuICAgIGUuc2hvcnRNZXNzYWdlID0gbWVzc2FnZTtcbiAgICBlLmludGVydmFsID0gb3B0SW50ZXJ2YWw7XG4gIH0gZWxzZSB7XG4gICAgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gZTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gZXJyb3JzIGFib3V0IGludGVydmFscyAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBpbnRlcnZhbFNvdXJjZXNEb250TWF0Y2goKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcIkludGVydmFsIHNvdXJjZXMgZG9uJ3QgbWF0Y2hcIik7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIGVycm9ycyBhYm91dCBncmFtbWFycyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBHcmFtbWFyIHN5bnRheCBlcnJvclxuXG5mdW5jdGlvbiBncmFtbWFyU3ludGF4RXJyb3IobWF0Y2hGYWlsdXJlKSB7XG4gIGNvbnN0IGUgPSBuZXcgRXJyb3IoKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsICdtZXNzYWdlJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIG1hdGNoRmFpbHVyZS5tZXNzYWdlO1xuICAgIH0sXG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgJ3Nob3J0TWVzc2FnZScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiAnRXhwZWN0ZWQgJyArIG1hdGNoRmFpbHVyZS5nZXRFeHBlY3RlZFRleHQoKTtcbiAgICB9LFxuICB9KTtcbiAgZS5pbnRlcnZhbCA9IG1hdGNoRmFpbHVyZS5nZXRJbnRlcnZhbCgpO1xuICByZXR1cm4gZTtcbn1cblxuLy8gVW5kZWNsYXJlZCBncmFtbWFyXG5cbmZ1bmN0aW9uIHVuZGVjbGFyZWRHcmFtbWFyKGdyYW1tYXJOYW1lLCBuYW1lc3BhY2UsIGludGVydmFsKSB7XG4gIGNvbnN0IG1lc3NhZ2UgPSBuYW1lc3BhY2UgP1xuICAgICdHcmFtbWFyICcgK1xuICAgICAgZ3JhbW1hck5hbWUgK1xuICAgICAgJyBpcyBub3QgZGVjbGFyZWQgaW4gbmFtZXNwYWNlICcgK1xuICAgICAgTmFtZXNwYWNlJDEudG9TdHJpbmcobmFtZXNwYWNlKSA6XG4gICAgJ1VuZGVjbGFyZWQgZ3JhbW1hciAnICsgZ3JhbW1hck5hbWU7XG4gIHJldHVybiBjcmVhdGVFcnJvcihtZXNzYWdlLCBpbnRlcnZhbCk7XG59XG5cbi8vIER1cGxpY2F0ZSBncmFtbWFyIGRlY2xhcmF0aW9uXG5cbmZ1bmN0aW9uIGR1cGxpY2F0ZUdyYW1tYXJEZWNsYXJhdGlvbihncmFtbWFyLCBuYW1lc3BhY2UpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKCdHcmFtbWFyICcgKyBncmFtbWFyLm5hbWUgKyAnIGlzIGFscmVhZHkgZGVjbGFyZWQgaW4gdGhpcyBuYW1lc3BhY2UnKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gcnVsZXMgLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gVW5kZWNsYXJlZCBydWxlXG5cbmZ1bmN0aW9uIHVuZGVjbGFyZWRSdWxlKHJ1bGVOYW1lLCBncmFtbWFyTmFtZSwgb3B0SW50ZXJ2YWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ1J1bGUgJyArIHJ1bGVOYW1lICsgJyBpcyBub3QgZGVjbGFyZWQgaW4gZ3JhbW1hciAnICsgZ3JhbW1hck5hbWUsXG4gICAgICBvcHRJbnRlcnZhbFxuICApO1xufVxuXG4vLyBDYW5ub3Qgb3ZlcnJpZGUgdW5kZWNsYXJlZCBydWxlXG5cbmZ1bmN0aW9uIGNhbm5vdE92ZXJyaWRlVW5kZWNsYXJlZFJ1bGUocnVsZU5hbWUsIGdyYW1tYXJOYW1lLCBvcHRTb3VyY2UpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ0Nhbm5vdCBvdmVycmlkZSBydWxlICcgKyBydWxlTmFtZSArICcgYmVjYXVzZSBpdCBpcyBub3QgZGVjbGFyZWQgaW4gJyArIGdyYW1tYXJOYW1lLFxuICAgICAgb3B0U291cmNlXG4gICk7XG59XG5cbi8vIENhbm5vdCBleHRlbmQgdW5kZWNsYXJlZCBydWxlXG5cbmZ1bmN0aW9uIGNhbm5vdEV4dGVuZFVuZGVjbGFyZWRSdWxlKHJ1bGVOYW1lLCBncmFtbWFyTmFtZSwgb3B0U291cmNlKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdDYW5ub3QgZXh0ZW5kIHJ1bGUgJyArIHJ1bGVOYW1lICsgJyBiZWNhdXNlIGl0IGlzIG5vdCBkZWNsYXJlZCBpbiAnICsgZ3JhbW1hck5hbWUsXG4gICAgICBvcHRTb3VyY2VcbiAgKTtcbn1cblxuLy8gRHVwbGljYXRlIHJ1bGUgZGVjbGFyYXRpb25cblxuZnVuY3Rpb24gZHVwbGljYXRlUnVsZURlY2xhcmF0aW9uKHJ1bGVOYW1lLCBncmFtbWFyTmFtZSwgZGVjbEdyYW1tYXJOYW1lLCBvcHRTb3VyY2UpIHtcbiAgbGV0IG1lc3NhZ2UgPVxuICAgIFwiRHVwbGljYXRlIGRlY2xhcmF0aW9uIGZvciBydWxlICdcIiArIHJ1bGVOYW1lICsgXCInIGluIGdyYW1tYXIgJ1wiICsgZ3JhbW1hck5hbWUgKyBcIidcIjtcbiAgaWYgKGdyYW1tYXJOYW1lICE9PSBkZWNsR3JhbW1hck5hbWUpIHtcbiAgICBtZXNzYWdlICs9IFwiIChvcmlnaW5hbGx5IGRlY2xhcmVkIGluICdcIiArIGRlY2xHcmFtbWFyTmFtZSArIFwiJylcIjtcbiAgfVxuICByZXR1cm4gY3JlYXRlRXJyb3IobWVzc2FnZSwgb3B0U291cmNlKTtcbn1cblxuLy8gV3JvbmcgbnVtYmVyIG9mIHBhcmFtZXRlcnNcblxuZnVuY3Rpb24gd3JvbmdOdW1iZXJPZlBhcmFtZXRlcnMocnVsZU5hbWUsIGV4cGVjdGVkLCBhY3R1YWwsIHNvdXJjZSkge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnV3JvbmcgbnVtYmVyIG9mIHBhcmFtZXRlcnMgZm9yIHJ1bGUgJyArXG4gICAgICBydWxlTmFtZSArXG4gICAgICAnIChleHBlY3RlZCAnICtcbiAgICAgIGV4cGVjdGVkICtcbiAgICAgICcsIGdvdCAnICtcbiAgICAgIGFjdHVhbCArXG4gICAgICAnKScsXG4gICAgICBzb3VyY2VcbiAgKTtcbn1cblxuLy8gV3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50c1xuXG5mdW5jdGlvbiB3cm9uZ051bWJlck9mQXJndW1lbnRzKHJ1bGVOYW1lLCBleHBlY3RlZCwgYWN0dWFsLCBleHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdXcm9uZyBudW1iZXIgb2YgYXJndW1lbnRzIGZvciBydWxlICcgK1xuICAgICAgcnVsZU5hbWUgK1xuICAgICAgJyAoZXhwZWN0ZWQgJyArXG4gICAgICBleHBlY3RlZCArXG4gICAgICAnLCBnb3QgJyArXG4gICAgICBhY3R1YWwgK1xuICAgICAgJyknLFxuICAgICAgZXhwclxuICApO1xufVxuXG4vLyBEdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWVzXG5cbmZ1bmN0aW9uIGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzKHJ1bGVOYW1lLCBkdXBsaWNhdGVzLCBzb3VyY2UpIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ0R1cGxpY2F0ZSBwYXJhbWV0ZXIgbmFtZXMgaW4gcnVsZSAnICsgcnVsZU5hbWUgKyAnOiAnICsgZHVwbGljYXRlcy5qb2luKCcsICcpLFxuICAgICAgc291cmNlXG4gICk7XG59XG5cbi8vIEludmFsaWQgcGFyYW1ldGVyIGV4cHJlc3Npb25cblxuZnVuY3Rpb24gaW52YWxpZFBhcmFtZXRlcihydWxlTmFtZSwgZXhwcikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnSW52YWxpZCBwYXJhbWV0ZXIgdG8gcnVsZSAnICtcbiAgICAgIHJ1bGVOYW1lICtcbiAgICAgICc6ICcgK1xuICAgICAgZXhwciArXG4gICAgICAnIGhhcyBhcml0eSAnICtcbiAgICAgIGV4cHIuZ2V0QXJpdHkoKSArXG4gICAgICAnLCBidXQgcGFyYW1ldGVyIGV4cHJlc3Npb25zIG11c3QgaGF2ZSBhcml0eSAxJyxcbiAgICAgIGV4cHIuc291cmNlXG4gICk7XG59XG5cbi8vIEFwcGxpY2F0aW9uIG9mIHN5bnRhY3RpYyBydWxlIGZyb20gbGV4aWNhbCBydWxlXG5cbmNvbnN0IHN5bnRhY3RpY1ZzTGV4aWNhbE5vdGUgPVxuICAnTk9URTogQSBfc3ludGFjdGljIHJ1bGVfIGlzIGEgcnVsZSB3aG9zZSBuYW1lIGJlZ2lucyB3aXRoIGEgY2FwaXRhbCBsZXR0ZXIuICcgK1xuICAnU2VlIGh0dHBzOi8vb2htanMub3JnL2Qvc3ZsIGZvciBtb3JlIGRldGFpbHMuJztcblxuZnVuY3Rpb24gYXBwbGljYXRpb25PZlN5bnRhY3RpY1J1bGVGcm9tTGV4aWNhbENvbnRleHQocnVsZU5hbWUsIGFwcGx5RXhwcikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnQ2Fubm90IGFwcGx5IHN5bnRhY3RpYyBydWxlICcgKyBydWxlTmFtZSArICcgZnJvbSBoZXJlIChpbnNpZGUgYSBsZXhpY2FsIGNvbnRleHQpJyxcbiAgICAgIGFwcGx5RXhwci5zb3VyY2VcbiAgKTtcbn1cblxuLy8gTGV4aWNhbCBydWxlIGFwcGxpY2F0aW9uIHVzZWQgd2l0aCBhcHBseVN5bnRhY3RpY1xuXG5mdW5jdGlvbiBhcHBseVN5bnRhY3RpY1dpdGhMZXhpY2FsUnVsZUFwcGxpY2F0aW9uKGFwcGx5RXhwcikge1xuICBjb25zdCB7cnVsZU5hbWV9ID0gYXBwbHlFeHByO1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICBgYXBwbHlTeW50YWN0aWMgaXMgZm9yIHN5bnRhY3RpYyBydWxlcywgYnV0ICcke3J1bGVOYW1lfScgaXMgYSBsZXhpY2FsIHJ1bGUuIGAgK1xuICAgICAgc3ludGFjdGljVnNMZXhpY2FsTm90ZSxcbiAgICAgIGFwcGx5RXhwci5zb3VyY2VcbiAgKTtcbn1cblxuLy8gQXBwbGljYXRpb24gb2YgYXBwbHlTeW50YWN0aWMgaW4gYSBzeW50YWN0aWMgY29udGV4dFxuXG5mdW5jdGlvbiB1bm5lY2Vzc2FyeUV4cGVyaW1lbnRhbEFwcGx5U3ludGFjdGljKGFwcGx5RXhwcikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXG4gICAgICAnYXBwbHlTeW50YWN0aWMgaXMgbm90IHJlcXVpcmVkIGhlcmUgKGluIGEgc3ludGFjdGljIGNvbnRleHQpJyxcbiAgICAgIGFwcGx5RXhwci5zb3VyY2VcbiAgKTtcbn1cblxuLy8gSW5jb3JyZWN0IGFyZ3VtZW50IHR5cGVcblxuZnVuY3Rpb24gaW5jb3JyZWN0QXJndW1lbnRUeXBlKGV4cGVjdGVkVHlwZSwgZXhwcikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoJ0luY29ycmVjdCBhcmd1bWVudCB0eXBlOiBleHBlY3RlZCAnICsgZXhwZWN0ZWRUeXBlLCBleHByLnNvdXJjZSk7XG59XG5cbi8vIE11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgc3VwZXItc3BsaWNlIG9wZXJhdG9yIChgLi4uYCkgaW4gdGhlIHJ1bGUgYm9keS5cblxuZnVuY3Rpb24gbXVsdGlwbGVTdXBlclNwbGljZXMoZXhwcikge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoXCInLi4uJyBjYW4gYXBwZWFyIGF0IG1vc3Qgb25jZSBpbiBhIHJ1bGUgYm9keVwiLCBleHByLnNvdXJjZSk7XG59XG5cbi8vIFVuaWNvZGUgY29kZSBwb2ludCBlc2NhcGVzXG5cbmZ1bmN0aW9uIGludmFsaWRDb2RlUG9pbnQoYXBwbHlXcmFwcGVyKSB7XG4gIGNvbnN0IG5vZGUgPSBhcHBseVdyYXBwZXIuX25vZGU7XG4gIGFzc2VydCQzKG5vZGUgJiYgbm9kZS5pc05vbnRlcm1pbmFsKCkgJiYgbm9kZS5jdG9yTmFtZSA9PT0gJ2VzY2FwZUNoYXJfdW5pY29kZUNvZGVQb2ludCcpO1xuXG4gIC8vIEdldCBhbiBpbnRlcnZhbCB0aGF0IGNvdmVycyBhbGwgb2YgdGhlIGhleCBkaWdpdHMuXG4gIGNvbnN0IGRpZ2l0SW50ZXJ2YWxzID0gYXBwbHlXcmFwcGVyLmNoaWxkcmVuLnNsaWNlKDEsIC0xKS5tYXAoZCA9PiBkLnNvdXJjZSk7XG4gIGNvbnN0IGZ1bGxJbnRlcnZhbCA9IGRpZ2l0SW50ZXJ2YWxzWzBdLmNvdmVyYWdlV2l0aCguLi5kaWdpdEludGVydmFscy5zbGljZSgxKSk7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgIGBVKyR7ZnVsbEludGVydmFsLmNvbnRlbnRzfSBpcyBub3QgYSB2YWxpZCBVbmljb2RlIGNvZGUgcG9pbnRgLFxuICAgICAgZnVsbEludGVydmFsXG4gICk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIEtsZWVuZSBvcGVyYXRvcnMgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24ga2xlZW5lRXhwckhhc051bGxhYmxlT3BlcmFuZChrbGVlbmVFeHByLCBhcHBsaWNhdGlvblN0YWNrKSB7XG4gIGNvbnN0IGFjdHVhbHMgPVxuICAgIGFwcGxpY2F0aW9uU3RhY2subGVuZ3RoID4gMCA/IGFwcGxpY2F0aW9uU3RhY2tbYXBwbGljYXRpb25TdGFjay5sZW5ndGggLSAxXS5hcmdzIDogW107XG4gIGNvbnN0IGV4cHIgPSBrbGVlbmVFeHByLmV4cHIuc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKTtcbiAgbGV0IG1lc3NhZ2UgPVxuICAgICdOdWxsYWJsZSBleHByZXNzaW9uICcgK1xuICAgIGV4cHIgK1xuICAgIFwiIGlzIG5vdCBhbGxvd2VkIGluc2lkZSAnXCIgK1xuICAgIGtsZWVuZUV4cHIub3BlcmF0b3IgK1xuICAgIFwiJyAocG9zc2libGUgaW5maW5pdGUgbG9vcClcIjtcbiAgaWYgKGFwcGxpY2F0aW9uU3RhY2subGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHN0YWNrVHJhY2UgPSBhcHBsaWNhdGlvblN0YWNrXG4gICAgICAgIC5tYXAoYXBwID0+IG5ldyBwZXhwcnMkay5BcHBseShhcHAucnVsZU5hbWUsIGFwcC5hcmdzKSlcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgIG1lc3NhZ2UgKz0gJ1xcbkFwcGxpY2F0aW9uIHN0YWNrIChtb3N0IHJlY2VudCBhcHBsaWNhdGlvbiBsYXN0KTpcXG4nICsgc3RhY2tUcmFjZTtcbiAgfVxuICByZXR1cm4gY3JlYXRlRXJyb3IobWVzc2FnZSwga2xlZW5lRXhwci5leHByLnNvdXJjZSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIGFyaXR5IC0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGluY29uc2lzdGVudEFyaXR5KHJ1bGVOYW1lLCBleHBlY3RlZCwgYWN0dWFsLCBleHByKSB7XG4gIHJldHVybiBjcmVhdGVFcnJvcihcbiAgICAgICdSdWxlICcgK1xuICAgICAgcnVsZU5hbWUgK1xuICAgICAgJyBpbnZvbHZlcyBhbiBhbHRlcm5hdGlvbiB3aGljaCBoYXMgaW5jb25zaXN0ZW50IGFyaXR5ICcgK1xuICAgICAgJyhleHBlY3RlZCAnICtcbiAgICAgIGV4cGVjdGVkICtcbiAgICAgICcsIGdvdCAnICtcbiAgICAgIGFjdHVhbCArXG4gICAgICAnKScsXG4gICAgICBleHByLnNvdXJjZVxuICApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBwcm9wZXJ0aWVzIC0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGR1cGxpY2F0ZVByb3BlcnR5TmFtZXMoZHVwbGljYXRlcykge1xuICByZXR1cm4gY3JlYXRlRXJyb3IoJ09iamVjdCBwYXR0ZXJuIGhhcyBkdXBsaWNhdGUgcHJvcGVydHkgbmFtZXM6ICcgKyBkdXBsaWNhdGVzLmpvaW4oJywgJykpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBjb25zdHJ1Y3RvcnMgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gaW52YWxpZENvbnN0cnVjdG9yQ2FsbChncmFtbWFyLCBjdG9yTmFtZSwgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFxuICAgICAgJ0F0dGVtcHQgdG8gaW52b2tlIGNvbnN0cnVjdG9yICcgKyBjdG9yTmFtZSArICcgd2l0aCBpbnZhbGlkIG9yIHVuZXhwZWN0ZWQgYXJndW1lbnRzJ1xuICApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBjb252ZW5pZW5jZSAtLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBtdWx0aXBsZUVycm9ycyhlcnJvcnMpIHtcbiAgY29uc3QgbWVzc2FnZXMgPSBlcnJvcnMubWFwKGUgPT4gZS5tZXNzYWdlKTtcbiAgcmV0dXJuIGNyZWF0ZUVycm9yKFsnRXJyb3JzOiddLmNvbmNhdChtZXNzYWdlcykuam9pbignXFxuLSAnKSwgZXJyb3JzWzBdLmludGVydmFsKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gc2VtYW50aWMgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gbWlzc2luZ1NlbWFudGljQWN0aW9uKGN0b3JOYW1lLCBuYW1lLCB0eXBlLCBzdGFjaykge1xuICBsZXQgc3RhY2tUcmFjZSA9IHN0YWNrXG4gICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAubWFwKGluZm8gPT4ge1xuICAgICAgICBjb25zdCBhbnMgPSAnICAnICsgaW5mb1swXS5uYW1lICsgJyA+ICcgKyBpbmZvWzFdO1xuICAgICAgICByZXR1cm4gaW5mby5sZW5ndGggPT09IDMgPyBhbnMgKyBcIiBmb3IgJ1wiICsgaW5mb1syXSArIFwiJ1wiIDogYW5zO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCdcXG4nKTtcbiAgc3RhY2tUcmFjZSArPSAnXFxuICAnICsgbmFtZSArICcgPiAnICsgY3Rvck5hbWU7XG5cbiAgbGV0IG1vcmVJbmZvID0gJyc7XG4gIGlmIChjdG9yTmFtZSA9PT0gJ19pdGVyJykge1xuICAgIG1vcmVJbmZvID0gW1xuICAgICAgJ1xcbk5PVEU6IGFzIG9mIE9obSB2MTYsIHRoZXJlIGlzIG5vIGRlZmF1bHQgYWN0aW9uIGZvciBpdGVyYXRpb24gbm9kZXMg4oCUIHNlZSAnLFxuICAgICAgJyAgaHR0cHM6Ly9vaG1qcy5vcmcvZC9kc2EgZm9yIGRldGFpbHMuJyxcbiAgICBdLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgY29uc3QgbWVzc2FnZSA9IFtcbiAgICBgTWlzc2luZyBzZW1hbnRpYyBhY3Rpb24gZm9yICcke2N0b3JOYW1lfScgaW4gJHt0eXBlfSAnJHtuYW1lfScuJHttb3JlSW5mb31gLFxuICAgICdBY3Rpb24gc3RhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6JyxcbiAgICBzdGFja1RyYWNlLFxuICBdLmpvaW4oJ1xcbicpO1xuXG4gIGNvbnN0IGUgPSBjcmVhdGVFcnJvcihtZXNzYWdlKTtcbiAgZS5uYW1lID0gJ21pc3NpbmdTZW1hbnRpY0FjdGlvbic7XG4gIHJldHVybiBlO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGVycm9ycyQ5ID0ge1xuICBhcHBsaWNhdGlvbk9mU3ludGFjdGljUnVsZUZyb21MZXhpY2FsQ29udGV4dCxcbiAgYXBwbHlTeW50YWN0aWNXaXRoTGV4aWNhbFJ1bGVBcHBsaWNhdGlvbixcbiAgY2Fubm90RXh0ZW5kVW5kZWNsYXJlZFJ1bGUsXG4gIGNhbm5vdE92ZXJyaWRlVW5kZWNsYXJlZFJ1bGUsXG4gIGR1cGxpY2F0ZUdyYW1tYXJEZWNsYXJhdGlvbixcbiAgZHVwbGljYXRlUGFyYW1ldGVyTmFtZXMsXG4gIGR1cGxpY2F0ZVByb3BlcnR5TmFtZXMsXG4gIGR1cGxpY2F0ZVJ1bGVEZWNsYXJhdGlvbixcbiAgaW5jb25zaXN0ZW50QXJpdHksXG4gIGluY29ycmVjdEFyZ3VtZW50VHlwZSxcbiAgaW50ZXJ2YWxTb3VyY2VzRG9udE1hdGNoLFxuICBpbnZhbGlkQ29kZVBvaW50LFxuICBpbnZhbGlkQ29uc3RydWN0b3JDYWxsLFxuICBpbnZhbGlkUGFyYW1ldGVyLFxuICBncmFtbWFyU3ludGF4RXJyb3IsXG4gIGtsZWVuZUV4cHJIYXNOdWxsYWJsZU9wZXJhbmQsXG4gIG1pc3NpbmdTZW1hbnRpY0FjdGlvbixcbiAgbXVsdGlwbGVTdXBlclNwbGljZXMsXG4gIHVuZGVjbGFyZWRHcmFtbWFyLFxuICB1bmRlY2xhcmVkUnVsZSxcbiAgdW5uZWNlc3NhcnlFeHBlcmltZW50YWxBcHBseVN5bnRhY3RpYyxcbiAgd3JvbmdOdW1iZXJPZkFyZ3VtZW50cyxcbiAgd3JvbmdOdW1iZXJPZlBhcmFtZXRlcnMsXG5cbiAgdGhyb3dFcnJvcnMoZXJyb3JzKSB7XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRocm93IGVycm9yc1swXTtcbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPiAxKSB7XG4gICAgICB0aHJvdyBtdWx0aXBsZUVycm9ycyhlcnJvcnMpO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciB1dGlsJDcgPSB7fTtcblxuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24gPSBjb21tb24kbDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEdpdmVuIGFuIGFycmF5IG9mIG51bWJlcnMgYGFycmAsIHJldHVybiBhbiBhcnJheSBvZiB0aGUgbnVtYmVycyBhcyBzdHJpbmdzLFxuLy8gcmlnaHQtanVzdGlmaWVkIGFuZCBwYWRkZWQgdG8gdGhlIHNhbWUgbGVuZ3RoLlxuZnVuY3Rpb24gcGFkTnVtYmVyc1RvRXF1YWxMZW5ndGgoYXJyKSB7XG4gIGxldCBtYXhMZW4gPSAwO1xuICBjb25zdCBzdHJpbmdzID0gYXJyLm1hcChuID0+IHtcbiAgICBjb25zdCBzdHIgPSBuLnRvU3RyaW5nKCk7XG4gICAgbWF4TGVuID0gTWF0aC5tYXgobWF4TGVuLCBzdHIubGVuZ3RoKTtcbiAgICByZXR1cm4gc3RyO1xuICB9KTtcbiAgcmV0dXJuIHN0cmluZ3MubWFwKHMgPT4gY29tbW9uLnBhZExlZnQocywgbWF4TGVuKSk7XG59XG5cbi8vIFByb2R1Y2UgYSBuZXcgc3RyaW5nIHRoYXQgd291bGQgYmUgdGhlIHJlc3VsdCBvZiBjb3B5aW5nIHRoZSBjb250ZW50c1xuLy8gb2YgdGhlIHN0cmluZyBgc3JjYCBvbnRvIGBkZXN0YCBhdCBvZmZzZXQgYG9mZmVzdGAuXG5mdW5jdGlvbiBzdHJjcHkoZGVzdCwgc3JjLCBvZmZzZXQpIHtcbiAgY29uc3Qgb3JpZ0Rlc3RMZW4gPSBkZXN0Lmxlbmd0aDtcbiAgY29uc3Qgc3RhcnQgPSBkZXN0LnNsaWNlKDAsIG9mZnNldCk7XG4gIGNvbnN0IGVuZCA9IGRlc3Quc2xpY2Uob2Zmc2V0ICsgc3JjLmxlbmd0aCk7XG4gIHJldHVybiAoc3RhcnQgKyBzcmMgKyBlbmQpLnN1YnN0cigwLCBvcmlnRGVzdExlbik7XG59XG5cbi8vIENhc3RzIHRoZSB1bmRlcmx5aW5nIGxpbmVBbmRDb2wgb2JqZWN0IHRvIGEgZm9ybWF0dGVkIG1lc3NhZ2Ugc3RyaW5nLFxuLy8gaGlnaGxpZ2h0aW5nIGByYW5nZXNgLlxuZnVuY3Rpb24gbGluZUFuZENvbHVtblRvTWVzc2FnZSguLi5yYW5nZXMpIHtcbiAgY29uc3QgbGluZUFuZENvbCA9IHRoaXM7XG4gIGNvbnN0IHtvZmZzZXR9ID0gbGluZUFuZENvbDtcbiAgY29uc3Qge3JlcGVhdFN0cn0gPSBjb21tb247XG5cbiAgY29uc3Qgc2IgPSBuZXcgY29tbW9uLlN0cmluZ0J1ZmZlcigpO1xuICBzYi5hcHBlbmQoJ0xpbmUgJyArIGxpbmVBbmRDb2wubGluZU51bSArICcsIGNvbCAnICsgbGluZUFuZENvbC5jb2xOdW0gKyAnOlxcbicpO1xuXG4gIC8vIEFuIGFycmF5IG9mIHRoZSBwcmV2aW91cywgY3VycmVudCwgYW5kIG5leHQgbGluZSBudW1iZXJzIGFzIHN0cmluZ3Mgb2YgZXF1YWwgbGVuZ3RoLlxuICBjb25zdCBsaW5lTnVtYmVycyA9IHBhZE51bWJlcnNUb0VxdWFsTGVuZ3RoKFtcbiAgICBsaW5lQW5kQ29sLnByZXZMaW5lID09IG51bGwgPyAwIDogbGluZUFuZENvbC5saW5lTnVtIC0gMSxcbiAgICBsaW5lQW5kQ29sLmxpbmVOdW0sXG4gICAgbGluZUFuZENvbC5uZXh0TGluZSA9PSBudWxsID8gMCA6IGxpbmVBbmRDb2wubGluZU51bSArIDEsXG4gIF0pO1xuXG4gIC8vIEhlbHBlciBmb3IgYXBwZW5kaW5nIGZvcm1hdHRpbmcgaW5wdXQgbGluZXMgdG8gdGhlIGJ1ZmZlci5cbiAgY29uc3QgYXBwZW5kTGluZSA9IChudW0sIGNvbnRlbnQsIHByZWZpeCkgPT4ge1xuICAgIHNiLmFwcGVuZChwcmVmaXggKyBsaW5lTnVtYmVyc1tudW1dICsgJyB8ICcgKyBjb250ZW50ICsgJ1xcbicpO1xuICB9O1xuXG4gIC8vIEluY2x1ZGUgdGhlIHByZXZpb3VzIGxpbmUgZm9yIGNvbnRleHQgaWYgcG9zc2libGUuXG4gIGlmIChsaW5lQW5kQ29sLnByZXZMaW5lICE9IG51bGwpIHtcbiAgICBhcHBlbmRMaW5lKDAsIGxpbmVBbmRDb2wucHJldkxpbmUsICcgICcpO1xuICB9XG4gIC8vIExpbmUgdGhhdCB0aGUgZXJyb3Igb2NjdXJyZWQgb24uXG4gIGFwcGVuZExpbmUoMSwgbGluZUFuZENvbC5saW5lLCAnPiAnKTtcblxuICAvLyBCdWlsZCB1cCB0aGUgbGluZSB0aGF0IHBvaW50cyB0byB0aGUgb2Zmc2V0IGFuZCBwb3NzaWJsZSBpbmRpY2F0ZXMgb25lIG9yIG1vcmUgcmFuZ2VzLlxuICAvLyBTdGFydCB3aXRoIGEgYmxhbmsgbGluZSwgYW5kIGluZGljYXRlIGVhY2ggcmFuZ2UgYnkgb3ZlcmxheWluZyBhIHN0cmluZyBvZiBgfmAgY2hhcnMuXG4gIGNvbnN0IGxpbmVMZW4gPSBsaW5lQW5kQ29sLmxpbmUubGVuZ3RoO1xuICBsZXQgaW5kaWNhdGlvbkxpbmUgPSByZXBlYXRTdHIoJyAnLCBsaW5lTGVuICsgMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IHN0YXJ0SWR4ID0gcmFuZ2VzW2ldWzBdO1xuICAgIGxldCBlbmRJZHggPSByYW5nZXNbaV1bMV07XG4gICAgY29tbW9uLmFzc2VydChzdGFydElkeCA+PSAwICYmIHN0YXJ0SWR4IDw9IGVuZElkeCwgJ3JhbmdlIHN0YXJ0IG11c3QgYmUgPj0gMCBhbmQgPD0gZW5kJyk7XG5cbiAgICBjb25zdCBsaW5lU3RhcnRPZmZzZXQgPSBvZmZzZXQgLSBsaW5lQW5kQ29sLmNvbE51bSArIDE7XG4gICAgc3RhcnRJZHggPSBNYXRoLm1heCgwLCBzdGFydElkeCAtIGxpbmVTdGFydE9mZnNldCk7XG4gICAgZW5kSWR4ID0gTWF0aC5taW4oZW5kSWR4IC0gbGluZVN0YXJ0T2Zmc2V0LCBsaW5lTGVuKTtcblxuICAgIGluZGljYXRpb25MaW5lID0gc3RyY3B5KGluZGljYXRpb25MaW5lLCByZXBlYXRTdHIoJ34nLCBlbmRJZHggLSBzdGFydElkeCksIHN0YXJ0SWR4KTtcbiAgfVxuICBjb25zdCBndXR0ZXJXaWR0aCA9IDIgKyBsaW5lTnVtYmVyc1sxXS5sZW5ndGggKyAzO1xuICBzYi5hcHBlbmQocmVwZWF0U3RyKCcgJywgZ3V0dGVyV2lkdGgpKTtcbiAgaW5kaWNhdGlvbkxpbmUgPSBzdHJjcHkoaW5kaWNhdGlvbkxpbmUsICdeJywgbGluZUFuZENvbC5jb2xOdW0gLSAxKTtcbiAgc2IuYXBwZW5kKGluZGljYXRpb25MaW5lLnJlcGxhY2UoLyArJC8sICcnKSArICdcXG4nKTtcblxuICAvLyBJbmNsdWRlIHRoZSBuZXh0IGxpbmUgZm9yIGNvbnRleHQgaWYgcG9zc2libGUuXG4gIGlmIChsaW5lQW5kQ29sLm5leHRMaW5lICE9IG51bGwpIHtcbiAgICBhcHBlbmRMaW5lKDIsIGxpbmVBbmRDb2wubmV4dExpbmUsICcgICcpO1xuICB9XG4gIHJldHVybiBzYi5jb250ZW50cygpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxubGV0IGJ1aWx0SW5SdWxlc0NhbGxiYWNrcyA9IFtdO1xuXG4vLyBTaW5jZSBHcmFtbWFyLkJ1aWx0SW5SdWxlcyBpcyBib290c3RyYXBwZWQsIG1vc3Qgb2YgT2htIGNhbid0IGRpcmVjdGx5IGRlcGVuZCBpdC5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIG1vZHVsZXMgdGhhdCBkbyBkZXBlbmQgb24gdGhlIGJ1aWx0LWluIHJ1bGVzIHRvIHJlZ2lzdGVyIGEgY2FsbGJhY2tcbi8vIHRoYXQgd2lsbCBiZSBjYWxsZWQgbGF0ZXIgaW4gdGhlIGluaXRpYWxpemF0aW9uIHByb2Nlc3MuXG5leHBvcnRzLmF3YWl0QnVpbHRJblJ1bGVzID0gY2IgPT4ge1xuICBidWlsdEluUnVsZXNDYWxsYmFja3MucHVzaChjYik7XG59O1xuXG5leHBvcnRzLmFubm91bmNlQnVpbHRJblJ1bGVzID0gZ3JhbW1hciA9PiB7XG4gIGJ1aWx0SW5SdWxlc0NhbGxiYWNrcy5mb3JFYWNoKGNiID0+IHtcbiAgICBjYihncmFtbWFyKTtcbiAgfSk7XG4gIGJ1aWx0SW5SdWxlc0NhbGxiYWNrcyA9IG51bGw7XG59O1xuXG4vLyBSZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdpdmVuXG4vLyBvZmZzZXQgaW4gYHN0cmAuXG5leHBvcnRzLmdldExpbmVBbmRDb2x1bW4gPSAoc3RyLCBvZmZzZXQpID0+IHtcbiAgbGV0IGxpbmVOdW0gPSAxO1xuICBsZXQgY29sTnVtID0gMTtcblxuICBsZXQgY3Vyck9mZnNldCA9IDA7XG4gIGxldCBsaW5lU3RhcnRPZmZzZXQgPSAwO1xuXG4gIGxldCBuZXh0TGluZSA9IG51bGw7XG4gIGxldCBwcmV2TGluZSA9IG51bGw7XG4gIGxldCBwcmV2TGluZVN0YXJ0T2Zmc2V0ID0gLTE7XG5cbiAgd2hpbGUgKGN1cnJPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICBjb25zdCBjID0gc3RyLmNoYXJBdChjdXJyT2Zmc2V0KyspO1xuICAgIGlmIChjID09PSAnXFxuJykge1xuICAgICAgbGluZU51bSsrO1xuICAgICAgY29sTnVtID0gMTtcbiAgICAgIHByZXZMaW5lU3RhcnRPZmZzZXQgPSBsaW5lU3RhcnRPZmZzZXQ7XG4gICAgICBsaW5lU3RhcnRPZmZzZXQgPSBjdXJyT2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAoYyAhPT0gJ1xccicpIHtcbiAgICAgIGNvbE51bSsrO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGVuZCBvZiB0aGUgdGFyZ2V0IGxpbmUuXG4gIGxldCBsaW5lRW5kT2Zmc2V0ID0gc3RyLmluZGV4T2YoJ1xcbicsIGxpbmVTdGFydE9mZnNldCk7XG4gIGlmIChsaW5lRW5kT2Zmc2V0ID09PSAtMSkge1xuICAgIGxpbmVFbmRPZmZzZXQgPSBzdHIubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBsaW5lLlxuICAgIGNvbnN0IG5leHRMaW5lRW5kT2Zmc2V0ID0gc3RyLmluZGV4T2YoJ1xcbicsIGxpbmVFbmRPZmZzZXQgKyAxKTtcbiAgICBuZXh0TGluZSA9XG4gICAgICBuZXh0TGluZUVuZE9mZnNldCA9PT0gLTEgP1xuICAgICAgICBzdHIuc2xpY2UobGluZUVuZE9mZnNldCkgOlxuICAgICAgICBzdHIuc2xpY2UobGluZUVuZE9mZnNldCwgbmV4dExpbmVFbmRPZmZzZXQpO1xuICAgIC8vIFN0cmlwIGxlYWRpbmcgYW5kIHRyYWlsaW5nIEVPTCBjaGFyKHMpLlxuICAgIG5leHRMaW5lID0gbmV4dExpbmUucmVwbGFjZSgvXlxccj9cXG4vLCAnJykucmVwbGFjZSgvXFxyJC8sICcnKTtcbiAgfVxuXG4gIC8vIEdldCB0aGUgcHJldmlvdXMgbGluZS5cbiAgaWYgKHByZXZMaW5lU3RhcnRPZmZzZXQgPj0gMCkge1xuICAgIC8vIFN0cmlwIHRyYWlsaW5nIEVPTCBjaGFyKHMpLlxuICAgIHByZXZMaW5lID0gc3RyLnNsaWNlKHByZXZMaW5lU3RhcnRPZmZzZXQsIGxpbmVTdGFydE9mZnNldCkucmVwbGFjZSgvXFxyP1xcbiQvLCAnJyk7XG4gIH1cblxuICAvLyBHZXQgdGhlIHRhcmdldCBsaW5lLCBzdHJpcHBpbmcgYSB0cmFpbGluZyBjYXJyaWFnZSByZXR1cm4gaWYgbmVjZXNzYXJ5LlxuICBjb25zdCBsaW5lID0gc3RyLnNsaWNlKGxpbmVTdGFydE9mZnNldCwgbGluZUVuZE9mZnNldCkucmVwbGFjZSgvXFxyJC8sICcnKTtcblxuICByZXR1cm4ge1xuICAgIG9mZnNldCxcbiAgICBsaW5lTnVtLFxuICAgIGNvbE51bSxcbiAgICBsaW5lLFxuICAgIHByZXZMaW5lLFxuICAgIG5leHRMaW5lLFxuICAgIHRvU3RyaW5nOiBsaW5lQW5kQ29sdW1uVG9NZXNzYWdlLFxuICB9O1xufTtcblxuLy8gUmV0dXJuIGEgbmljZWx5LWZvcm1hdHRlZCBzdHJpbmcgZGVzY3JpYmluZyB0aGUgbGluZSBhbmQgY29sdW1uIGZvciB0aGVcbi8vIGdpdmVuIG9mZnNldCBpbiBgc3RyYCBoaWdobGlnaHRpbmcgYHJhbmdlc2AuXG5leHBvcnRzLmdldExpbmVBbmRDb2x1bW5NZXNzYWdlID0gZnVuY3Rpb24oc3RyLCBvZmZzZXQsIC4uLnJhbmdlcykge1xuICByZXR1cm4gZXhwb3J0cy5nZXRMaW5lQW5kQ29sdW1uKHN0ciwgb2Zmc2V0KS50b1N0cmluZyguLi5yYW5nZXMpO1xufTtcblxuZXhwb3J0cy51bmlxdWVJZCA9ICgoKSA9PiB7XG4gIGxldCBpZENvdW50ZXIgPSAwO1xuICByZXR1cm4gcHJlZml4ID0+ICcnICsgcHJlZml4ICsgaWRDb3VudGVyKys7XG59KSgpO1xufSh1dGlsJDcpKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IHthYnN0cmFjdCwgaXNTeW50YWN0aWN9ID0gY29tbW9uJGw7XG5jb25zdCBlcnJvcnMkOCA9IGVycm9ycyQ5O1xuY29uc3QgcGV4cHJzJGogPSBwZXhwcnNNYWluO1xuY29uc3QgdXRpbCQ2ID0gdXRpbCQ3O1xuXG5sZXQgQnVpbHRJblJ1bGVzO1xuXG51dGlsJDYuYXdhaXRCdWlsdEluUnVsZXMoZyA9PiB7XG4gIEJ1aWx0SW5SdWxlcyA9IGc7XG59KTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmxldCBsZXhpZnlDb3VudDtcblxucGV4cHJzJGouUEV4cHIucHJvdG90eXBlLmFzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID0gZnVuY3Rpb24ocnVsZU5hbWUsIGdyYW1tYXIpIHtcbiAgbGV4aWZ5Q291bnQgPSAwO1xuICB0aGlzLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hcik7XG59O1xuXG5wZXhwcnMkai5QRXhwci5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID0gYWJzdHJhY3QoXG4gICAgJ19hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCdcbik7XG5cbnBleHBycyRqLmFueS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICBwZXhwcnMkai5lbmQuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgcGV4cHJzJGouVGVybWluYWwucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gIHBleHBycyRqLlJhbmdlLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICBwZXhwcnMkai5QYXJhbS5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgcGV4cHJzJGouVW5pY29kZUNoYXIucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gICAgZnVuY3Rpb24ocnVsZU5hbWUsIGdyYW1tYXIpIHtcbiAgICAgIC8vIG5vLW9wXG4gICAgfTtcblxucGV4cHJzJGouTGV4LnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPSBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICBsZXhpZnlDb3VudCsrO1xuICB0aGlzLmV4cHIuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkKHJ1bGVOYW1lLCBncmFtbWFyKTtcbiAgbGV4aWZ5Q291bnQtLTtcbn07XG5cbnBleHBycyRqLkFsdC5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID0gZnVuY3Rpb24ocnVsZU5hbWUsIGdyYW1tYXIpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy50ZXJtcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpcy50ZXJtc1tpZHhdLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hcik7XG4gIH1cbn07XG5cbnBleHBycyRqLlNlcS5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID0gZnVuY3Rpb24ocnVsZU5hbWUsIGdyYW1tYXIpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzLmZhY3RvcnNbaWR4XS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQocnVsZU5hbWUsIGdyYW1tYXIpO1xuICB9XG59O1xuXG5wZXhwcnMkai5JdGVyLnByb3RvdHlwZS5fYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQgPVxuICBwZXhwcnMkai5Ob3QucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9XG4gIHBleHBycyRqLkxvb2thaGVhZC5wcm90b3R5cGUuX2Fzc2VydEFsbEFwcGxpY2F0aW9uc0FyZVZhbGlkID1cbiAgICBmdW5jdGlvbihydWxlTmFtZSwgZ3JhbW1hcikge1xuICAgICAgdGhpcy5leHByLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hcik7XG4gICAgfTtcblxucGV4cHJzJGouQXBwbHkucHJvdG90eXBlLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZCA9IGZ1bmN0aW9uKFxuICAgIHJ1bGVOYW1lLFxuICAgIGdyYW1tYXIsXG4gICAgc2tpcFN5bnRhY3RpY0NoZWNrID0gZmFsc2Vcbikge1xuICBjb25zdCBydWxlSW5mbyA9IGdyYW1tYXIucnVsZXNbdGhpcy5ydWxlTmFtZV07XG4gIGNvbnN0IGlzQ29udGV4dFN5bnRhY3RpYyA9IGlzU3ludGFjdGljKHJ1bGVOYW1lKSAmJiBsZXhpZnlDb3VudCA9PT0gMDtcblxuICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgcnVsZSBleGlzdHMuLi5cbiAgaWYgKCFydWxlSW5mbykge1xuICAgIHRocm93IGVycm9ycyQ4LnVuZGVjbGFyZWRSdWxlKHRoaXMucnVsZU5hbWUsIGdyYW1tYXIubmFtZSwgdGhpcy5zb3VyY2UpO1xuICB9XG5cbiAgLy8gLi4uYW5kIHRoYXQgdGhpcyBhcHBsaWNhdGlvbiBpcyBhbGxvd2VkXG4gIGlmICghc2tpcFN5bnRhY3RpY0NoZWNrICYmIGlzU3ludGFjdGljKHRoaXMucnVsZU5hbWUpICYmICFpc0NvbnRleHRTeW50YWN0aWMpIHtcbiAgICB0aHJvdyBlcnJvcnMkOC5hcHBsaWNhdGlvbk9mU3ludGFjdGljUnVsZUZyb21MZXhpY2FsQ29udGV4dCh0aGlzLnJ1bGVOYW1lLCB0aGlzKTtcbiAgfVxuXG4gIC8vIC4uLmFuZCB0aGF0IHRoaXMgYXBwbGljYXRpb24gaGFzIHRoZSBjb3JyZWN0IG51bWJlciBvZiBhcmd1bWVudHMuXG4gIGNvbnN0IGFjdHVhbCA9IHRoaXMuYXJncy5sZW5ndGg7XG4gIGNvbnN0IGV4cGVjdGVkID0gcnVsZUluZm8uZm9ybWFscy5sZW5ndGg7XG4gIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgdGhyb3cgZXJyb3JzJDgud3JvbmdOdW1iZXJPZkFyZ3VtZW50cyh0aGlzLnJ1bGVOYW1lLCBleHBlY3RlZCwgYWN0dWFsLCB0aGlzLnNvdXJjZSk7XG4gIH1cblxuICBjb25zdCBpc0J1aWx0SW5BcHBseVN5bnRhY3RpYyA9XG4gICAgQnVpbHRJblJ1bGVzICYmIHJ1bGVJbmZvID09PSBCdWlsdEluUnVsZXMucnVsZXMuYXBwbHlTeW50YWN0aWM7XG4gIGNvbnN0IGlzQnVpbHRJbkNhc2VJbnNlbnNpdGl2ZSA9XG4gICAgQnVpbHRJblJ1bGVzICYmIHJ1bGVJbmZvID09PSBCdWlsdEluUnVsZXMucnVsZXMuY2FzZUluc2Vuc2l0aXZlO1xuXG4gIC8vIElmIGl0J3MgYW4gYXBwbGljYXRpb24gb2YgJ2Nhc2VJbnNlbnNpdGl2ZScsIGVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhIFRlcm1pbmFsLlxuICBpZiAoaXNCdWlsdEluQ2FzZUluc2Vuc2l0aXZlKSB7XG4gICAgaWYgKCEodGhpcy5hcmdzWzBdIGluc3RhbmNlb2YgcGV4cHJzJGouVGVybWluYWwpKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkOC5pbmNvcnJlY3RBcmd1bWVudFR5cGUoJ2EgVGVybWluYWwgKGUuZy4gXCJhYmNcIiknLCB0aGlzLmFyZ3NbMF0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0J1aWx0SW5BcHBseVN5bnRhY3RpYykge1xuICAgIGNvbnN0IGFyZyA9IHRoaXMuYXJnc1swXTtcbiAgICBpZiAoIShhcmcgaW5zdGFuY2VvZiBwZXhwcnMkai5BcHBseSkpIHtcbiAgICAgIHRocm93IGVycm9ycyQ4LmluY29ycmVjdEFyZ3VtZW50VHlwZSgnYSBzeW50YWN0aWMgcnVsZSBhcHBsaWNhdGlvbicsIGFyZyk7XG4gICAgfVxuICAgIGlmICghaXNTeW50YWN0aWMoYXJnLnJ1bGVOYW1lKSkge1xuICAgICAgdGhyb3cgZXJyb3JzJDguYXBwbHlTeW50YWN0aWNXaXRoTGV4aWNhbFJ1bGVBcHBsaWNhdGlvbihhcmcpO1xuICAgIH1cbiAgICBpZiAoaXNDb250ZXh0U3ludGFjdGljKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkOC51bm5lY2Vzc2FyeUV4cGVyaW1lbnRhbEFwcGx5U3ludGFjdGljKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIC4uLmFuZCB0aGF0IGFsbCBvZiB0aGUgYXJndW1lbnQgZXhwcmVzc2lvbnMgb25seSBoYXZlIHZhbGlkIGFwcGxpY2F0aW9ucyBhbmQgaGF2ZSBhcml0eSAxLlxuICAvLyBJZiBgdGhpc2AgaXMgYW4gYXBwbGljYXRpb24gb2YgdGhlIGJ1aWx0LWluIGFwcGx5U3ludGFjdGljIHJ1bGUsIHRoZW4gaXRzIGFyZyBpc1xuICAvLyBhbGxvd2VkIChhbmQgZXhwZWN0ZWQpIHRvIGJlIGEgc3ludGFjdGljIHJ1bGUsIGV2ZW4gaWYgd2UncmUgaW4gYSBsZXhpY2FsIGNvbnRleHQuXG4gIHRoaXMuYXJncy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgYXJnLl9hc3NlcnRBbGxBcHBsaWNhdGlvbnNBcmVWYWxpZChydWxlTmFtZSwgZ3JhbW1hciwgaXNCdWlsdEluQXBwbHlTeW50YWN0aWMpO1xuICAgIGlmIChhcmcuZ2V0QXJpdHkoKSAhPT0gMSkge1xuICAgICAgdGhyb3cgZXJyb3JzJDguaW52YWxpZFBhcmFtZXRlcih0aGlzLnJ1bGVOYW1lLCBhcmcpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGggPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQ3ID0gZXJyb3JzJDk7XG5jb25zdCBwZXhwcnMkaSA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wZXhwcnMkaS5QRXhwci5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBjb21tb24kaC5hYnN0cmFjdChcbiAgICAnYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHknXG4pO1xuXG5wZXhwcnMkaS5hbnkuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5lbmQuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5UZXJtaW5hbC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5SYW5nZS5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5QYXJhbS5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPVxuICBwZXhwcnMkaS5MZXgucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID1cbiAgcGV4cHJzJGkuVW5pY29kZUNoYXIucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID1cbiAgICBmdW5jdGlvbihydWxlTmFtZSkge1xuICAgICAgLy8gbm8tb3BcbiAgICB9O1xuXG5wZXhwcnMkaS5BbHQucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgaWYgKHRoaXMudGVybXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGFyaXR5ID0gdGhpcy50ZXJtc1swXS5nZXRBcml0eSgpO1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLnRlcm1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICBjb25zdCB0ZXJtID0gdGhpcy50ZXJtc1tpZHhdO1xuICAgIHRlcm0uYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkoKTtcbiAgICBjb25zdCBvdGhlckFyaXR5ID0gdGVybS5nZXRBcml0eSgpO1xuICAgIGlmIChhcml0eSAhPT0gb3RoZXJBcml0eSkge1xuICAgICAgdGhyb3cgZXJyb3JzJDcuaW5jb25zaXN0ZW50QXJpdHkocnVsZU5hbWUsIGFyaXR5LCBvdGhlckFyaXR5LCB0ZXJtKTtcbiAgICB9XG4gIH1cbn07XG5cbnBleHBycyRpLkV4dGVuZC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICAvLyBFeHRlbmQgaXMgYSBzcGVjaWFsIGNhc2Ugb2YgQWx0IHRoYXQncyBndWFyYW50ZWVkIHRvIGhhdmUgZXhhY3RseSB0d29cbiAgLy8gY2FzZXM6IFtleHRlbnNpb25zLCBvcmlnQm9keV0uXG4gIGNvbnN0IGFjdHVhbEFyaXR5ID0gdGhpcy50ZXJtc1swXS5nZXRBcml0eSgpO1xuICBjb25zdCBleHBlY3RlZEFyaXR5ID0gdGhpcy50ZXJtc1sxXS5nZXRBcml0eSgpO1xuICBpZiAoYWN0dWFsQXJpdHkgIT09IGV4cGVjdGVkQXJpdHkpIHtcbiAgICB0aHJvdyBlcnJvcnMkNy5pbmNvbnNpc3RlbnRBcml0eShydWxlTmFtZSwgZXhwZWN0ZWRBcml0eSwgYWN0dWFsQXJpdHksIHRoaXMudGVybXNbMF0pO1xuICB9XG59O1xuXG5wZXhwcnMkaS5TZXEucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaWR4KyspIHtcbiAgICB0aGlzLmZhY3RvcnNbaWR4XS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eShydWxlTmFtZSk7XG4gIH1cbn07XG5cbnBleHBycyRpLkl0ZXIucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgdGhpcy5leHByLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5KHJ1bGVOYW1lKTtcbn07XG5cbnBleHBycyRpLk5vdC5wcm90b3R5cGUuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkgPSBmdW5jdGlvbihydWxlTmFtZSkge1xuICAvLyBuby1vcCAobm90IHJlcXVpcmVkIGIvYyB0aGUgbmVzdGVkIGV4cHIgZG9lc24ndCBzaG93IHVwIGluIHRoZSBDU1QpXG59O1xuXG5wZXhwcnMkaS5Mb29rYWhlYWQucHJvdG90eXBlLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5ID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgdGhpcy5leHByLmFzc2VydENob2ljZXNIYXZlVW5pZm9ybUFyaXR5KHJ1bGVOYW1lKTtcbn07XG5cbnBleHBycyRpLkFwcGx5LnByb3RvdHlwZS5hc3NlcnRDaG9pY2VzSGF2ZVVuaWZvcm1Bcml0eSA9IGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gIC8vIFRoZSBhcml0aWVzIG9mIHRoZSBwYXJhbWV0ZXIgZXhwcmVzc2lvbnMgaXMgcmVxdWlyZWQgdG8gYmUgMSBieVxuICAvLyBgYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQoKWAuXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGcgPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQ2ID0gZXJyb3JzJDk7XG5jb25zdCBwZXhwcnMkaCA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5wZXhwcnMkaC5QRXhwci5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID0gY29tbW9uJGcuYWJzdHJhY3QoXG4gICAgJ2Fzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSdcbik7XG5cbnBleHBycyRoLmFueS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5lbmQuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgcGV4cHJzJGguVGVybWluYWwucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gIHBleHBycyRoLlJhbmdlLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5QYXJhbS5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgcGV4cHJzJGguVW5pY29kZUNoYXIucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gICAgZnVuY3Rpb24oZ3JhbW1hcikge1xuICAgICAgLy8gbm8tb3BcbiAgICB9O1xuXG5wZXhwcnMkaC5BbHQucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy50ZXJtcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpcy50ZXJtc1tpZHhdLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZShncmFtbWFyKTtcbiAgfVxufTtcblxucGV4cHJzJGguU2VxLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMuZmFjdG9ycy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpcy5mYWN0b3JzW2lkeF0uYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlKGdyYW1tYXIpO1xuICB9XG59O1xuXG5wZXhwcnMkaC5JdGVyLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIC8vIE5vdGU6IHRoaXMgaXMgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kIGZvciBgU3RhcmAgYW5kIGBQbHVzYCBleHByZXNzaW9ucy5cbiAgLy8gSXQgaXMgb3ZlcnJpZGRlbiBmb3IgYE9wdGAgYmVsb3cuXG4gIHRoaXMuZXhwci5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUoZ3JhbW1hcik7XG4gIGlmICh0aGlzLmV4cHIuaXNOdWxsYWJsZShncmFtbWFyKSkge1xuICAgIHRocm93IGVycm9ycyQ2LmtsZWVuZUV4cHJIYXNOdWxsYWJsZU9wZXJhbmQodGhpcywgW10pO1xuICB9XG59O1xuXG5wZXhwcnMkaC5PcHQucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gIHBleHBycyRoLk5vdC5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID1cbiAgcGV4cHJzJGguTG9va2FoZWFkLnByb3RvdHlwZS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUgPVxuICBwZXhwcnMkaC5MZXgucHJvdG90eXBlLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZSA9XG4gICAgZnVuY3Rpb24oZ3JhbW1hcikge1xuICAgICAgdGhpcy5leHByLmFzc2VydEl0ZXJhdGVkRXhwcnNBcmVOb3ROdWxsYWJsZShncmFtbWFyKTtcbiAgICB9O1xuXG5wZXhwcnMkaC5BcHBseS5wcm90b3R5cGUuYXNzZXJ0SXRlcmF0ZWRFeHByc0FyZU5vdE51bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICB0aGlzLmFyZ3MuZm9yRWFjaChhcmcgPT4ge1xuICAgIGFyZy5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUoZ3JhbW1hcik7XG4gIH0pO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IHthc3NlcnQ6IGFzc2VydCQyfSA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDUgPSBlcnJvcnMkOTtcbmNvbnN0IHV0aWwkNSA9IHV0aWwkNztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIEludGVydmFsJDMoc291cmNlU3RyaW5nLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gIHRoaXMuc291cmNlU3RyaW5nID0gc291cmNlU3RyaW5nO1xuICB0aGlzLnN0YXJ0SWR4ID0gc3RhcnRJZHg7XG4gIHRoaXMuZW5kSWR4ID0gZW5kSWR4O1xufVxuXG5JbnRlcnZhbCQzLmNvdmVyYWdlID0gZnVuY3Rpb24oZmlyc3RJbnRlcnZhbCwgLi4uaW50ZXJ2YWxzKSB7XG4gIGxldCB7c3RhcnRJZHgsIGVuZElkeH0gPSBmaXJzdEludGVydmFsO1xuICBmb3IgKGNvbnN0IGludGVydmFsIG9mIGludGVydmFscykge1xuICAgIGlmIChpbnRlcnZhbC5zb3VyY2VTdHJpbmcgIT09IGZpcnN0SW50ZXJ2YWwuc291cmNlU3RyaW5nKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkNS5pbnRlcnZhbFNvdXJjZXNEb250TWF0Y2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRJZHggPSBNYXRoLm1pbihzdGFydElkeCwgaW50ZXJ2YWwuc3RhcnRJZHgpO1xuICAgICAgZW5kSWR4ID0gTWF0aC5tYXgoZW5kSWR4LCBpbnRlcnZhbC5lbmRJZHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEludGVydmFsJDMoZmlyc3RJbnRlcnZhbC5zb3VyY2VTdHJpbmcsIHN0YXJ0SWR4LCBlbmRJZHgpO1xufTtcblxuSW50ZXJ2YWwkMy5wcm90b3R5cGUgPSB7XG4gIGNvdmVyYWdlV2l0aCguLi5pbnRlcnZhbHMpIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwkMy5jb3ZlcmFnZSguLi5pbnRlcnZhbHMsIHRoaXMpO1xuICB9LFxuXG4gIGNvbGxhcHNlZExlZnQoKSB7XG4gICAgcmV0dXJuIG5ldyBJbnRlcnZhbCQzKHRoaXMuc291cmNlU3RyaW5nLCB0aGlzLnN0YXJ0SWR4LCB0aGlzLnN0YXJ0SWR4KTtcbiAgfSxcblxuICBjb2xsYXBzZWRSaWdodCgpIHtcbiAgICByZXR1cm4gbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuZW5kSWR4LCB0aGlzLmVuZElkeCk7XG4gIH0sXG5cbiAgZ2V0TGluZUFuZENvbHVtbigpIHtcbiAgICByZXR1cm4gdXRpbCQ1LmdldExpbmVBbmRDb2x1bW4odGhpcy5zb3VyY2VTdHJpbmcsIHRoaXMuc3RhcnRJZHgpO1xuICB9LFxuXG4gIGdldExpbmVBbmRDb2x1bW5NZXNzYWdlKCkge1xuICAgIGNvbnN0IHJhbmdlID0gW3RoaXMuc3RhcnRJZHgsIHRoaXMuZW5kSWR4XTtcbiAgICByZXR1cm4gdXRpbCQ1LmdldExpbmVBbmRDb2x1bW5NZXNzYWdlKHRoaXMuc291cmNlU3RyaW5nLCB0aGlzLnN0YXJ0SWR4LCByYW5nZSk7XG4gIH0sXG5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiAwLCAxLCBvciAyIGludGVydmFscyB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiB0aGVcbiAgLy8gaW50ZXJ2YWwgZGlmZmVyZW5jZSBvcGVyYXRpb24uXG4gIG1pbnVzKHRoYXQpIHtcbiAgICBpZiAodGhpcy5zb3VyY2VTdHJpbmcgIT09IHRoYXQuc291cmNlU3RyaW5nKSB7XG4gICAgICB0aHJvdyBlcnJvcnMkNS5pbnRlcnZhbFNvdXJjZXNEb250TWF0Y2goKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhcnRJZHggPT09IHRoYXQuc3RhcnRJZHggJiYgdGhpcy5lbmRJZHggPT09IHRoYXQuZW5kSWR4KSB7XG4gICAgICAvLyBgdGhpc2AgYW5kIGB0aGF0YCBhcmUgdGhlIHNhbWUgaW50ZXJ2YWwhXG4gICAgICByZXR1cm4gW107XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXJ0SWR4IDwgdGhhdC5zdGFydElkeCAmJiB0aGF0LmVuZElkeCA8IHRoaXMuZW5kSWR4KSB7XG4gICAgICAvLyBgdGhhdGAgc3BsaXRzIGB0aGlzYCBpbnRvIHR3byBpbnRlcnZhbHNcbiAgICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBJbnRlcnZhbCQzKHRoaXMuc291cmNlU3RyaW5nLCB0aGlzLnN0YXJ0SWR4LCB0aGF0LnN0YXJ0SWR4KSxcbiAgICAgICAgbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoYXQuZW5kSWR4LCB0aGlzLmVuZElkeCksXG4gICAgICBdO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGFydElkeCA8IHRoYXQuZW5kSWR4ICYmIHRoYXQuZW5kSWR4IDwgdGhpcy5lbmRJZHgpIHtcbiAgICAgIC8vIGB0aGF0YCBjb250YWlucyBhIHByZWZpeCBvZiBgdGhpc2BcbiAgICAgIHJldHVybiBbbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIHRoYXQuZW5kSWR4LCB0aGlzLmVuZElkeCldO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGFydElkeCA8IHRoYXQuc3RhcnRJZHggJiYgdGhhdC5zdGFydElkeCA8IHRoaXMuZW5kSWR4KSB7XG4gICAgICAvLyBgdGhhdGAgY29udGFpbnMgYSBzdWZmaXggb2YgYHRoaXNgXG4gICAgICByZXR1cm4gW25ldyBJbnRlcnZhbCQzKHRoaXMuc291cmNlU3RyaW5nLCB0aGlzLnN0YXJ0SWR4LCB0aGF0LnN0YXJ0SWR4KV07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGB0aGF0YCBhbmQgYHRoaXNgIGRvIG5vdCBvdmVybGFwXG4gICAgICByZXR1cm4gW3RoaXNdO1xuICAgIH1cbiAgfSxcblxuICAvLyBSZXR1cm5zIGEgbmV3IEludGVydmFsIHRoYXQgaGFzIHRoZSBzYW1lIGV4dGVudCBhcyB0aGlzIG9uZSwgYnV0IHdoaWNoIGlzIHJlbGF0aXZlXG4gIC8vIHRvIGB0aGF0YCwgYW4gSW50ZXJ2YWwgdGhhdCBmdWxseSBjb3ZlcnMgdGhpcyBvbmUuXG4gIHJlbGF0aXZlVG8odGhhdCkge1xuICAgIGlmICh0aGlzLnNvdXJjZVN0cmluZyAhPT0gdGhhdC5zb3VyY2VTdHJpbmcpIHtcbiAgICAgIHRocm93IGVycm9ycyQ1LmludGVydmFsU291cmNlc0RvbnRNYXRjaCgpO1xuICAgIH1cbiAgICBhc3NlcnQkMihcbiAgICAgICAgdGhpcy5zdGFydElkeCA+PSB0aGF0LnN0YXJ0SWR4ICYmIHRoaXMuZW5kSWR4IDw9IHRoYXQuZW5kSWR4LFxuICAgICAgICAnb3RoZXIgaW50ZXJ2YWwgZG9lcyBub3QgY292ZXIgdGhpcyBvbmUnXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IEludGVydmFsJDMoXG4gICAgICAgIHRoaXMuc291cmNlU3RyaW5nLFxuICAgICAgICB0aGlzLnN0YXJ0SWR4IC0gdGhhdC5zdGFydElkeCxcbiAgICAgICAgdGhpcy5lbmRJZHggLSB0aGF0LnN0YXJ0SWR4XG4gICAgKTtcbiAgfSxcblxuICAvLyBSZXR1cm5zIGEgbmV3IEludGVydmFsIHdoaWNoIGNvbnRhaW5zIHRoZSBzYW1lIGNvbnRlbnRzIGFzIHRoaXMgb25lLFxuICAvLyBidXQgd2l0aCB3aGl0ZXNwYWNlIHRyaW1tZWQgZnJvbSBib3RoIGVuZHMuIChUaGlzIG9ubHkgbWFrZXMgc2Vuc2Ugd2hlblxuICAvLyB0aGUgaW5wdXQgc3RyZWFtIGlzIGEgc3RyaW5nLilcbiAgdHJpbW1lZCgpIHtcbiAgICBjb25zdCB7Y29udGVudHN9ID0gdGhpcztcbiAgICBjb25zdCBzdGFydElkeCA9IHRoaXMuc3RhcnRJZHggKyBjb250ZW50cy5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG4gICAgY29uc3QgZW5kSWR4ID0gdGhpcy5lbmRJZHggLSBjb250ZW50cy5tYXRjaCgvXFxzKiQvKVswXS5sZW5ndGg7XG4gICAgcmV0dXJuIG5ldyBJbnRlcnZhbCQzKHRoaXMuc291cmNlU3RyaW5nLCBzdGFydElkeCwgZW5kSWR4KTtcbiAgfSxcblxuICBzdWJJbnRlcnZhbChvZmZzZXQsIGxlbikge1xuICAgIGNvbnN0IG5ld1N0YXJ0SWR4ID0gdGhpcy5zdGFydElkeCArIG9mZnNldDtcbiAgICByZXR1cm4gbmV3IEludGVydmFsJDModGhpcy5zb3VyY2VTdHJpbmcsIG5ld1N0YXJ0SWR4LCBuZXdTdGFydElkeCArIGxlbik7XG4gIH0sXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbnRlcnZhbCQzLnByb3RvdHlwZSwge1xuICBjb250ZW50czoge1xuICAgIGdldCgpIHtcbiAgICAgIGlmICh0aGlzLl9jb250ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnRzID0gdGhpcy5zb3VyY2VTdHJpbmcuc2xpY2UodGhpcy5zdGFydElkeCwgdGhpcy5lbmRJZHgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRzO1xuICAgIH0sXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgfSxcbiAgbGVuZ3RoOiB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZW5kSWR4IC0gdGhpcy5zdGFydElkeDtcbiAgICB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gIH0sXG59KTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBJbnRlcnZhbF8xID0gSW50ZXJ2YWwkMztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEludGVydmFsJDIgPSBJbnRlcnZhbF8xO1xuY29uc3QgY29tbW9uJGYgPSBjb21tb24kbDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFVuaWNvZGUgY2hhcmFjdGVycyB0aGF0IGFyZSB1c2VkIGluIHRoZSBgdG9TdHJpbmdgIG91dHB1dC5cbmNvbnN0IEJBTExPVF9YID0gJ1xcdTI3MTcnO1xuY29uc3QgQ0hFQ0tfTUFSSyA9ICdcXHUyNzEzJztcbmNvbnN0IERPVF9PUEVSQVRPUiA9ICdcXHUyMkM1JztcbmNvbnN0IFJJR0hUV0FSRFNfRE9VQkxFX0FSUk9XID0gJ1xcdTIxRDInO1xuY29uc3QgU1lNQk9MX0ZPUl9IT1JJWk9OVEFMX1RBQlVMQVRJT04gPSAnXFx1MjQwOSc7XG5jb25zdCBTWU1CT0xfRk9SX0xJTkVfRkVFRCA9ICdcXHUyNDBBJztcbmNvbnN0IFNZTUJPTF9GT1JfQ0FSUklBR0VfUkVUVVJOID0gJ1xcdTI0MEQnO1xuXG5jb25zdCBGbGFncyA9IHtcbiAgc3VjY2VlZGVkOiAxIDw8IDAsXG4gIGlzUm9vdE5vZGU6IDEgPDwgMSxcbiAgaXNJbXBsaWNpdFNwYWNlczogMSA8PCAyLFxuICBpc01lbW9pemVkOiAxIDw8IDMsXG4gIGlzSGVhZE9mTGVmdFJlY3Vyc2lvbjogMSA8PCA0LFxuICB0ZXJtaW5hdGVzTFI6IDEgPDwgNSxcbn07XG5cbmZ1bmN0aW9uIHNwYWNlcyhuKSB7XG4gIHJldHVybiBjb21tb24kZi5yZXBlYXQoJyAnLCBuKS5qb2luKCcnKTtcbn1cblxuLy8gUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcG9ydGlvbiBvZiBgaW5wdXRgIGF0IG9mZnNldCBgcG9zYC5cbi8vIFRoZSByZXN1bHQgd2lsbCBjb250YWluIGV4YWN0bHkgYGxlbmAgY2hhcmFjdGVycy5cbmZ1bmN0aW9uIGdldElucHV0RXhjZXJwdChpbnB1dCwgcG9zLCBsZW4pIHtcbiAgY29uc3QgZXhjZXJwdCA9IGFzRXNjYXBlZFN0cmluZyhpbnB1dC5zbGljZShwb3MsIHBvcyArIGxlbikpO1xuXG4gIC8vIFBhZCB0aGUgb3V0cHV0IGlmIG5lY2Vzc2FyeS5cbiAgaWYgKGV4Y2VycHQubGVuZ3RoIDwgbGVuKSB7XG4gICAgcmV0dXJuIGV4Y2VycHQgKyBjb21tb24kZi5yZXBlYXQoJyAnLCBsZW4gLSBleGNlcnB0Lmxlbmd0aCkuam9pbignJyk7XG4gIH1cbiAgcmV0dXJuIGV4Y2VycHQ7XG59XG5cbmZ1bmN0aW9uIGFzRXNjYXBlZFN0cmluZyhvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gUmVwbGFjZSBub24tcHJpbnRhYmxlIGNoYXJhY3RlcnMgd2l0aCB2aXNpYmxlIHN5bWJvbHMuXG4gICAgcmV0dXJuIG9ialxuICAgICAgICAucmVwbGFjZSgvIC9nLCBET1RfT1BFUkFUT1IpXG4gICAgICAgIC5yZXBsYWNlKC9cXHQvZywgU1lNQk9MX0ZPUl9IT1JJWk9OVEFMX1RBQlVMQVRJT04pXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgU1lNQk9MX0ZPUl9MSU5FX0ZFRUQpXG4gICAgICAgIC5yZXBsYWNlKC9cXHIvZywgU1lNQk9MX0ZPUl9DQVJSSUFHRV9SRVRVUk4pO1xuICB9XG4gIHJldHVybiBTdHJpbmcob2JqKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gVHJhY2UgLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gVHJhY2UkMihpbnB1dCwgcG9zMSwgcG9zMiwgZXhwciwgc3VjY2VlZGVkLCBiaW5kaW5ncywgb3B0Q2hpbGRyZW4pIHtcbiAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICB0aGlzLnBvcyA9IHRoaXMucG9zMSA9IHBvczE7XG4gIHRoaXMucG9zMiA9IHBvczI7XG4gIHRoaXMuc291cmNlID0gbmV3IEludGVydmFsJDIoaW5wdXQsIHBvczEsIHBvczIpO1xuICB0aGlzLmV4cHIgPSBleHByO1xuICB0aGlzLmJpbmRpbmdzID0gYmluZGluZ3M7XG4gIHRoaXMuY2hpbGRyZW4gPSBvcHRDaGlsZHJlbiB8fCBbXTtcbiAgdGhpcy50ZXJtaW5hdGluZ0xSRW50cnkgPSBudWxsO1xuXG4gIHRoaXMuX2ZsYWdzID0gc3VjY2VlZGVkID8gRmxhZ3Muc3VjY2VlZGVkIDogMDtcbn1cblxuLy8gQSB2YWx1ZSB0aGF0IGNhbiBiZSByZXR1cm5lZCBmcm9tIHZpc2l0b3IgZnVuY3Rpb25zIHRvIGluZGljYXRlIHRoYXQgYVxuLy8gbm9kZSBzaG91bGQgbm90IGJlIHJlY3Vyc2VkIGludG8uXG5UcmFjZSQyLnByb3RvdHlwZS5TS0lQID0ge307XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFjZSQyLnByb3RvdHlwZSwgJ2Rpc3BsYXlTdHJpbmcnLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5leHByLnRvRGlzcGxheVN0cmluZygpO1xuICB9LFxufSk7XG5cbi8vIEZvciBjb252ZW5pZW5jZSwgY3JlYXRlIGEgZ2V0dGVyIGFuZCBzZXR0ZXIgZm9yIHRoZSBib29sZWFuIGZsYWdzIGluIGBGbGFnc2AuXG5PYmplY3Qua2V5cyhGbGFncykuZm9yRWFjaChuYW1lID0+IHtcbiAgY29uc3QgbWFzayA9IEZsYWdzW25hbWVdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhY2UkMi5wcm90b3R5cGUsIG5hbWUsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuX2ZsYWdzICYgbWFzaykgIT09IDA7XG4gICAgfSxcbiAgICBzZXQodmFsKSB7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIHRoaXMuX2ZsYWdzIHw9IG1hc2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9mbGFncyAmPSB+bWFzaztcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn0pO1xuXG5UcmFjZSQyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jbG9uZVdpdGhFeHByKHRoaXMuZXhwcik7XG59O1xuXG5UcmFjZSQyLnByb3RvdHlwZS5jbG9uZVdpdGhFeHByID0gZnVuY3Rpb24oZXhwcikge1xuICBjb25zdCBhbnMgPSBuZXcgVHJhY2UkMihcbiAgICAgIHRoaXMuaW5wdXQsXG4gICAgICB0aGlzLnBvcyxcbiAgICAgIHRoaXMucG9zMixcbiAgICAgIGV4cHIsXG4gICAgICB0aGlzLnN1Y2NlZWRlZCxcbiAgICAgIHRoaXMuYmluZGluZ3MsXG4gICAgICB0aGlzLmNoaWxkcmVuXG4gICk7XG5cbiAgYW5zLmlzSGVhZE9mTGVmdFJlY3Vyc2lvbiA9IHRoaXMuaXNIZWFkT2ZMZWZ0UmVjdXJzaW9uO1xuICBhbnMuaXNJbXBsaWNpdFNwYWNlcyA9IHRoaXMuaXNJbXBsaWNpdFNwYWNlcztcbiAgYW5zLmlzTWVtb2l6ZWQgPSB0aGlzLmlzTWVtb2l6ZWQ7XG4gIGFucy5pc1Jvb3ROb2RlID0gdGhpcy5pc1Jvb3ROb2RlO1xuICBhbnMudGVybWluYXRlc0xSID0gdGhpcy50ZXJtaW5hdGVzTFI7XG4gIGFucy50ZXJtaW5hdGluZ0xSRW50cnkgPSB0aGlzLnRlcm1pbmF0aW5nTFJFbnRyeTtcbiAgcmV0dXJuIGFucztcbn07XG5cbi8vIFJlY29yZCB0aGUgdHJhY2UgaW5mb3JtYXRpb24gZm9yIHRoZSB0ZXJtaW5hdGluZyBjb25kaXRpb24gb2YgdGhlIExSIGxvb3AuXG5UcmFjZSQyLnByb3RvdHlwZS5yZWNvcmRMUlRlcm1pbmF0aW9uID0gZnVuY3Rpb24ocnVsZUJvZHlUcmFjZSwgdmFsdWUpIHtcbiAgdGhpcy50ZXJtaW5hdGluZ0xSRW50cnkgPSBuZXcgVHJhY2UkMihcbiAgICAgIHRoaXMuaW5wdXQsXG4gICAgICB0aGlzLnBvcyxcbiAgICAgIHRoaXMucG9zMixcbiAgICAgIHRoaXMuZXhwcixcbiAgICAgIGZhbHNlLFxuICAgICAgW3ZhbHVlXSxcbiAgICAgIFtydWxlQm9keVRyYWNlXVxuICApO1xuICB0aGlzLnRlcm1pbmF0aW5nTFJFbnRyeS50ZXJtaW5hdGVzTFIgPSB0cnVlO1xufTtcblxuLy8gUmVjdXJzaXZlbHkgdHJhdmVyc2UgdGhpcyB0cmFjZSBub2RlIGFuZCBhbGwgaXRzIGRlc2NlbmRlbnRzLCBjYWxsaW5nIGEgdmlzaXRvciBmdW5jdGlvblxuLy8gZm9yIGVhY2ggbm9kZSB0aGF0IGlzIHZpc2l0ZWQuIElmIGB2aXN0b3JPYmpPckZuYCBpcyBhbiBvYmplY3QsIHRoZW4gaXRzICdlbnRlcicgcHJvcGVydHlcbi8vIGlzIGEgZnVuY3Rpb24gdG8gY2FsbCBiZWZvcmUgdmlzaXRpbmcgdGhlIGNoaWxkcmVuIG9mIGEgbm9kZSwgYW5kIGl0cyAnZXhpdCcgcHJvcGVydHkgaXNcbi8vIGEgZnVuY3Rpb24gdG8gY2FsbCBhZnRlcndhcmRzLiBJZiBgdmlzaXRvck9iak9yRm5gIGlzIGEgZnVuY3Rpb24sIGl0IHJlcHJlc2VudHMgdGhlICdlbnRlcidcbi8vIGZ1bmN0aW9uLlxuLy9cbi8vIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogdGhlIFRyYWNlIG5vZGUsIGl0cyBwYXJlbnQgVHJhY2UsIGFuZCBhIG51bWJlclxuLy8gcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGUgbm9kZSBpbiB0aGUgdHJlZS4gKFRoZSByb290IG5vZGUgaGFzIGRlcHRoIDAuKSBgb3B0VGhpc0FyZ2AsIGlmXG4vLyBzcGVjaWZpZWQsIGlzIHRoZSB2YWx1ZSB0byB1c2UgZm9yIGB0aGlzYCB3aGVuIGV4ZWN1dGluZyB0aGUgdmlzaXRvciBmdW5jdGlvbnMuXG5UcmFjZSQyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24odmlzaXRvck9iak9yRm4sIG9wdFRoaXNBcmcpIHtcbiAgbGV0IHZpc2l0b3IgPSB2aXNpdG9yT2JqT3JGbjtcbiAgaWYgKHR5cGVvZiB2aXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmlzaXRvciA9IHtlbnRlcjogdmlzaXRvcn07XG4gIH1cblxuICBmdW5jdGlvbiBfd2Fsayhub2RlLCBwYXJlbnQsIGRlcHRoKSB7XG4gICAgbGV0IHJlY3Vyc2UgPSB0cnVlO1xuICAgIGlmICh2aXNpdG9yLmVudGVyKSB7XG4gICAgICBpZiAodmlzaXRvci5lbnRlci5jYWxsKG9wdFRoaXNBcmcsIG5vZGUsIHBhcmVudCwgZGVwdGgpID09PSBUcmFjZSQyLnByb3RvdHlwZS5TS0lQKSB7XG4gICAgICAgIHJlY3Vyc2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlY3Vyc2UpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIF93YWxrKGNoaWxkLCBub2RlLCBkZXB0aCArIDEpO1xuICAgICAgfSk7XG4gICAgICBpZiAodmlzaXRvci5leGl0KSB7XG4gICAgICAgIHZpc2l0b3IuZXhpdC5jYWxsKG9wdFRoaXNBcmcsIG5vZGUsIHBhcmVudCwgZGVwdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodGhpcy5pc1Jvb3ROb2RlKSB7XG4gICAgLy8gRG9uJ3QgdmlzaXQgdGhlIHJvb3Qgbm9kZSBpdHNlbGYsIG9ubHkgaXRzIGNoaWxkcmVuLlxuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjID0+IHtcbiAgICAgIF93YWxrKGMsIG51bGwsIDApO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIF93YWxrKHRoaXMsIG51bGwsIDApO1xuICB9XG59O1xuXG4vLyBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRyYWNlLlxuLy8gU2FtcGxlOlxuLy8gICAgIDEy4ouFK+KLhTLii4Uq4ouFMyDinJMgZXhwIOKHkiAgXCIxMlwiXG4vLyAgICAgMTLii4Ur4ouFMuKLhSrii4UzICAg4pyTIGFkZEV4cCAoTFIpIOKHkiAgXCIxMlwiXG4vLyAgICAgMTLii4Ur4ouFMuKLhSrii4UzICAgICAgIOKclyBhZGRFeHBfcGx1c1xuVHJhY2UkMi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgY29uc3Qgc2IgPSBuZXcgY29tbW9uJGYuU3RyaW5nQnVmZmVyKCk7XG4gIHRoaXMud2Fsaygobm9kZSwgcGFyZW50LCBkZXB0aCkgPT4ge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuU0tJUDtcbiAgICB9XG4gICAgY29uc3QgY3Rvck5hbWUgPSBub2RlLmV4cHIuY29uc3RydWN0b3IubmFtZTtcbiAgICAvLyBEb24ndCBwcmludCBhbnl0aGluZyBmb3IgQWx0IG5vZGVzLlxuICAgIGlmIChjdG9yTmFtZSA9PT0gJ0FsdCcpIHtcbiAgICAgIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICAgIH1cbiAgICBzYi5hcHBlbmQoZ2V0SW5wdXRFeGNlcnB0KG5vZGUuaW5wdXQsIG5vZGUucG9zLCAxMCkgKyBzcGFjZXMoZGVwdGggKiAyICsgMSkpO1xuICAgIHNiLmFwcGVuZCgobm9kZS5zdWNjZWVkZWQgPyBDSEVDS19NQVJLIDogQkFMTE9UX1gpICsgJyAnICsgbm9kZS5kaXNwbGF5U3RyaW5nKTtcbiAgICBpZiAobm9kZS5pc0hlYWRPZkxlZnRSZWN1cnNpb24pIHtcbiAgICAgIHNiLmFwcGVuZCgnIChMUiknKTtcbiAgICB9XG4gICAgaWYgKG5vZGUuc3VjY2VlZGVkKSB7XG4gICAgICBjb25zdCBjb250ZW50cyA9IGFzRXNjYXBlZFN0cmluZyhub2RlLnNvdXJjZS5jb250ZW50cyk7XG4gICAgICBzYi5hcHBlbmQoJyAnICsgUklHSFRXQVJEU19ET1VCTEVfQVJST1cgKyAnICAnKTtcbiAgICAgIHNiLmFwcGVuZCh0eXBlb2YgY29udGVudHMgPT09ICdzdHJpbmcnID8gJ1wiJyArIGNvbnRlbnRzICsgJ1wiJyA6IGNvbnRlbnRzKTtcbiAgICB9XG4gICAgc2IuYXBwZW5kKCdcXG4nKTtcbiAgfSk7XG4gIHJldHVybiBzYi5jb250ZW50cygpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBUcmFjZV8xID0gVHJhY2UkMjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IFRyYWNlJDEgPSBUcmFjZV8xO1xuY29uc3QgY29tbW9uJGUgPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQ0ID0gZXJyb3JzJDk7XG5jb25zdCBub2RlcyA9IG5vZGVzJDE7XG5jb25zdCBwZXhwcnMkZyA9IHBleHByc01haW47XG5cbmNvbnN0IHtUZXJtaW5hbE5vZGU6IFRlcm1pbmFsTm9kZSQxfSA9IG5vZGVzO1xuY29uc3Qge05vbnRlcm1pbmFsTm9kZX0gPSBub2RlcztcbmNvbnN0IHtJdGVyYXRpb25Ob2RlOiBJdGVyYXRpb25Ob2RlJDF9ID0gbm9kZXM7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKlxuICBFdmFsdWF0ZSB0aGUgZXhwcmVzc2lvbiBhbmQgcmV0dXJuIGB0cnVlYCBpZiBpdCBzdWNjZWVkcywgYGZhbHNlYCBvdGhlcndpc2UuIFRoaXMgbWV0aG9kIHNob3VsZFxuICBvbmx5IGJlIGNhbGxlZCBkaXJlY3RseSBieSBgU3RhdGUucHJvdG90eXBlLmV2YWwoZXhwcilgLCB3aGljaCBhbHNvIHVwZGF0ZXMgdGhlIGRhdGEgc3RydWN0dXJlc1xuICB0aGF0IGFyZSB1c2VkIGZvciB0cmFjaW5nLiAoTWFraW5nIHRob3NlIHVwZGF0ZXMgaW4gYSBtZXRob2Qgb2YgYFN0YXRlYCBlbmFibGVzIHRoZSB0cmFjZS1zcGVjaWZpY1xuICBkYXRhIHN0cnVjdHVyZXMgdG8gYmUgXCJzZWNyZXRzXCIgb2YgdGhhdCBjbGFzcywgd2hpY2ggaXMgZ29vZCBmb3IgbW9kdWxhcml0eS4pXG5cbiAgVGhlIGNvbnRyYWN0IG9mIHRoaXMgbWV0aG9kIGlzIGFzIGZvbGxvd3M6XG4gICogV2hlbiB0aGUgcmV0dXJuIHZhbHVlIGlzIGB0cnVlYCxcbiAgICAtIHRoZSBzdGF0ZSBvYmplY3Qgd2lsbCBoYXZlIGBleHByLmdldEFyaXR5KClgIG1vcmUgYmluZGluZ3MgdGhhbiBpdCBkaWQgYmVmb3JlIHRoZSBjYWxsLlxuICAqIFdoZW4gdGhlIHJldHVybiB2YWx1ZSBpcyBgZmFsc2VgLFxuICAgIC0gdGhlIHN0YXRlIG9iamVjdCBtYXkgaGF2ZSBtb3JlIGJpbmRpbmdzIHRoYW4gaXQgZGlkIGJlZm9yZSB0aGUgY2FsbCwgYW5kXG4gICAgLSBpdHMgaW5wdXQgc3RyZWFtJ3MgcG9zaXRpb24gbWF5IGJlIGFueXdoZXJlLlxuXG4gIE5vdGUgdGhhdCBgU3RhdGUucHJvdG90eXBlLmV2YWwoZXhwcilgLCB1bmxpa2UgdGhpcyBtZXRob2QsIGd1YXJhbnRlZXMgdGhhdCBuZWl0aGVyIHRoZSBzdGF0ZVxuICBvYmplY3QncyBiaW5kaW5ncyBub3IgaXRzIGlucHV0IHN0cmVhbSdzIHBvc2l0aW9uIHdpbGwgY2hhbmdlIGlmIHRoZSBleHByZXNzaW9uIGZhaWxzIHRvIG1hdGNoLlxuKi9cbnBleHBycyRnLlBFeHByLnByb3RvdHlwZS5ldmFsID0gY29tbW9uJGUuYWJzdHJhY3QoJ2V2YWwnKTsgLy8gZnVuY3Rpb24oc3RhdGUpIHsgLi4uIH1cblxucGV4cHJzJGcuYW55LmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gIGNvbnN0IGNoID0gaW5wdXRTdHJlYW0ubmV4dCgpO1xuICBpZiAoY2gpIHtcbiAgICBzdGF0ZS5wdXNoQmluZGluZyhuZXcgVGVybWluYWxOb2RlJDEoY2gubGVuZ3RoKSwgb3JpZ1Bvcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUucHJvY2Vzc0ZhaWx1cmUob3JpZ1BvcywgdGhpcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5wZXhwcnMkZy5lbmQuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgaWYgKGlucHV0U3RyZWFtLmF0RW5kKCkpIHtcbiAgICBzdGF0ZS5wdXNoQmluZGluZyhuZXcgVGVybWluYWxOb2RlJDEoMCksIG9yaWdQb3MpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLnByb2Nlc3NGYWlsdXJlKG9yaWdQb3MsIHRoaXMpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxucGV4cHJzJGcuVGVybWluYWwucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gIGlmICghaW5wdXRTdHJlYW0ubWF0Y2hTdHJpbmcodGhpcy5vYmopKSB7XG4gICAgc3RhdGUucHJvY2Vzc0ZhaWx1cmUob3JpZ1BvcywgdGhpcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLnB1c2hCaW5kaW5nKG5ldyBUZXJtaW5hbE5vZGUkMSh0aGlzLm9iai5sZW5ndGgpLCBvcmlnUG9zKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxucGV4cHJzJGcuUmFuZ2UucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG5cbiAgLy8gQSByYW5nZSBjYW4gb3BlcmF0ZSBpbiBvbmUgb2YgdHdvIG1vZGVzOiBtYXRjaGluZyBhIHNpbmdsZSwgMTYtYml0IF9jb2RlIHVuaXRfLFxuICAvLyBvciBtYXRjaGluZyBhIF9jb2RlIHBvaW50Xy4gKENvZGUgcG9pbnRzIG92ZXIgMHhGRkZGIHRha2UgdXAgdHdvIDE2LWJpdCBjb2RlIHVuaXRzLilcbiAgY29uc3QgY3AgPSB0aGlzLm1hdGNoQ29kZVBvaW50ID8gaW5wdXRTdHJlYW0ubmV4dENvZGVQb2ludCgpIDogaW5wdXRTdHJlYW0ubmV4dENoYXJDb2RlKCk7XG5cbiAgLy8gQWx3YXlzIGNvbXBhcmUgYnkgY29kZSBwb2ludCB2YWx1ZSB0byBnZXQgdGhlIGNvcnJlY3QgcmVzdWx0IGluIGFsbCBzY2VuYXJpb3MuXG4gIC8vIE5vdGUgdGhhdCBmb3Igc3RyaW5ncyBvZiBsZW5ndGggMSwgY29kZVBvaW50QXQoMCkgYW5kIGNoYXJQb2ludEF0KDApIGFyZSBlcXVpdmFsZW50LlxuICBpZiAoY3AgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZyb20uY29kZVBvaW50QXQoMCkgPD0gY3AgJiYgY3AgPD0gdGhpcy50by5jb2RlUG9pbnRBdCgwKSkge1xuICAgIHN0YXRlLnB1c2hCaW5kaW5nKG5ldyBUZXJtaW5hbE5vZGUkMShTdHJpbmcuZnJvbUNvZGVQb2ludChjcCkubGVuZ3RoKSwgb3JpZ1Bvcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUucHJvY2Vzc0ZhaWx1cmUob3JpZ1BvcywgdGhpcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5wZXhwcnMkZy5QYXJhbS5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5ldmFsKHN0YXRlLmN1cnJlbnRBcHBsaWNhdGlvbigpLmFyZ3NbdGhpcy5pbmRleF0pO1xufTtcblxucGV4cHJzJGcuTGV4LnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgc3RhdGUuZW50ZXJMZXhpZmllZENvbnRleHQoKTtcbiAgY29uc3QgYW5zID0gc3RhdGUuZXZhbCh0aGlzLmV4cHIpO1xuICBzdGF0ZS5leGl0TGV4aWZpZWRDb250ZXh0KCk7XG4gIHJldHVybiBhbnM7XG59O1xuXG5wZXhwcnMkZy5BbHQucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB0aGlzLnRlcm1zLmxlbmd0aDsgaWR4KyspIHtcbiAgICBpZiAoc3RhdGUuZXZhbCh0aGlzLnRlcm1zW2lkeF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxucGV4cHJzJGcuU2VxLnByb3RvdHlwZS5ldmFsID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaWR4KyspIHtcbiAgICBjb25zdCBmYWN0b3IgPSB0aGlzLmZhY3RvcnNbaWR4XTtcbiAgICBpZiAoIXN0YXRlLmV2YWwoZmFjdG9yKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnBleHBycyRnLkl0ZXIucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gIGNvbnN0IGFyaXR5ID0gdGhpcy5nZXRBcml0eSgpO1xuICBjb25zdCBjb2xzID0gW107XG4gIGNvbnN0IGNvbE9mZnNldHMgPSBbXTtcbiAgd2hpbGUgKGNvbHMubGVuZ3RoIDwgYXJpdHkpIHtcbiAgICBjb2xzLnB1c2goW10pO1xuICAgIGNvbE9mZnNldHMucHVzaChbXSk7XG4gIH1cblxuICBsZXQgbnVtTWF0Y2hlcyA9IDA7XG4gIGxldCBwcmV2UG9zID0gb3JpZ1BvcztcbiAgbGV0IGlkeDtcbiAgd2hpbGUgKG51bU1hdGNoZXMgPCB0aGlzLm1heE51bU1hdGNoZXMgJiYgc3RhdGUuZXZhbCh0aGlzLmV4cHIpKSB7XG4gICAgaWYgKGlucHV0U3RyZWFtLnBvcyA9PT0gcHJldlBvcykge1xuICAgICAgdGhyb3cgZXJyb3JzJDQua2xlZW5lRXhwckhhc051bGxhYmxlT3BlcmFuZCh0aGlzLCBzdGF0ZS5fYXBwbGljYXRpb25TdGFjayk7XG4gICAgfVxuICAgIHByZXZQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gICAgbnVtTWF0Y2hlcysrO1xuICAgIGNvbnN0IHJvdyA9IHN0YXRlLl9iaW5kaW5ncy5zcGxpY2Uoc3RhdGUuX2JpbmRpbmdzLmxlbmd0aCAtIGFyaXR5LCBhcml0eSk7XG4gICAgY29uc3Qgcm93T2Zmc2V0cyA9IHN0YXRlLl9iaW5kaW5nT2Zmc2V0cy5zcGxpY2UoXG4gICAgICAgIHN0YXRlLl9iaW5kaW5nT2Zmc2V0cy5sZW5ndGggLSBhcml0eSxcbiAgICAgICAgYXJpdHlcbiAgICApO1xuICAgIGZvciAoaWR4ID0gMDsgaWR4IDwgcm93Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGNvbHNbaWR4XS5wdXNoKHJvd1tpZHhdKTtcbiAgICAgIGNvbE9mZnNldHNbaWR4XS5wdXNoKHJvd09mZnNldHNbaWR4XSk7XG4gICAgfVxuICB9XG4gIGlmIChudW1NYXRjaGVzIDwgdGhpcy5taW5OdW1NYXRjaGVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBvZmZzZXQgPSBzdGF0ZS5wb3NUb09mZnNldChvcmlnUG9zKTtcbiAgbGV0IG1hdGNoTGVuZ3RoID0gMDtcbiAgaWYgKG51bU1hdGNoZXMgPiAwKSB7XG4gICAgY29uc3QgbGFzdENvbCA9IGNvbHNbYXJpdHkgLSAxXTtcbiAgICBjb25zdCBsYXN0Q29sT2Zmc2V0cyA9IGNvbE9mZnNldHNbYXJpdHkgLSAxXTtcblxuICAgIGNvbnN0IGVuZE9mZnNldCA9XG4gICAgICBsYXN0Q29sT2Zmc2V0c1tsYXN0Q29sT2Zmc2V0cy5sZW5ndGggLSAxXSArIGxhc3RDb2xbbGFzdENvbC5sZW5ndGggLSAxXS5tYXRjaExlbmd0aDtcbiAgICBvZmZzZXQgPSBjb2xPZmZzZXRzWzBdWzBdO1xuICAgIG1hdGNoTGVuZ3RoID0gZW5kT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG4gIGNvbnN0IGlzT3B0aW9uYWwgPSB0aGlzIGluc3RhbmNlb2YgcGV4cHJzJGcuT3B0O1xuICBmb3IgKGlkeCA9IDA7IGlkeCA8IGNvbHMubGVuZ3RoOyBpZHgrKykge1xuICAgIHN0YXRlLl9iaW5kaW5ncy5wdXNoKFxuICAgICAgICBuZXcgSXRlcmF0aW9uTm9kZSQxKGNvbHNbaWR4XSwgY29sT2Zmc2V0c1tpZHhdLCBtYXRjaExlbmd0aCwgaXNPcHRpb25hbClcbiAgICApO1xuICAgIHN0YXRlLl9iaW5kaW5nT2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5wZXhwcnMkZy5Ob3QucHJvdG90eXBlLmV2YWwgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAvKlxuICAgIFRPRE86XG4gICAgLSBSaWdodCBub3cgd2UncmUganVzdCB0aHJvd2luZyBhd2F5IGFsbCBvZiB0aGUgZmFpbHVyZXMgdGhhdCBoYXBwZW4gaW5zaWRlIGEgYG5vdGAsIGFuZFxuICAgICAgcmVjb3JkaW5nIGB0aGlzYCBhcyBhIGZhaWxlZCBleHByZXNzaW9uLlxuICAgIC0gRG91YmxlIG5lZ2F0aW9uIHNob3VsZCBiZSBlcXVpdmFsZW50IHRvIGxvb2thaGVhZCwgYnV0IHRoYXQncyBub3QgdGhlIGNhc2UgcmlnaHQgbm93IHdydFxuICAgICAgZmFpbHVyZXMuIEUuZy4sIH5+J2ZvbycgcHJvZHVjZXMgYSBmYWlsdXJlIGZvciB+fidmb28nLCBidXQgbWF5YmUgaXQgc2hvdWxkIHByb2R1Y2VcbiAgICAgIGEgZmFpbHVyZSBmb3IgJ2ZvbycgaW5zdGVhZC5cbiAgKi9cblxuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG4gIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gIHN0YXRlLnB1c2hGYWlsdXJlc0luZm8oKTtcblxuICBjb25zdCBhbnMgPSBzdGF0ZS5ldmFsKHRoaXMuZXhwcik7XG5cbiAgc3RhdGUucG9wRmFpbHVyZXNJbmZvKCk7XG4gIGlmIChhbnMpIHtcbiAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpbnB1dFN0cmVhbS5wb3MgPSBvcmlnUG9zO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnBleHBycyRnLkxvb2thaGVhZC5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgaWYgKHN0YXRlLmV2YWwodGhpcy5leHByKSkge1xuICAgIGlucHV0U3RyZWFtLnBvcyA9IG9yaWdQb3M7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5wZXhwcnMkZy5BcHBseS5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IGNhbGxlciA9IHN0YXRlLmN1cnJlbnRBcHBsaWNhdGlvbigpO1xuICBjb25zdCBhY3R1YWxzID0gY2FsbGVyID8gY2FsbGVyLmFyZ3MgOiBbXTtcbiAgY29uc3QgYXBwID0gdGhpcy5zdWJzdGl0dXRlUGFyYW1zKGFjdHVhbHMpO1xuXG4gIGNvbnN0IHBvc0luZm8gPSBzdGF0ZS5nZXRDdXJyZW50UG9zSW5mbygpO1xuICBpZiAocG9zSW5mby5pc0FjdGl2ZShhcHApKSB7XG4gICAgLy8gVGhpcyBydWxlIGlzIGFscmVhZHkgYWN0aXZlIGF0IHRoaXMgcG9zaXRpb24sIGkuZS4sIGl0IGlzIGxlZnQtcmVjdXJzaXZlLlxuICAgIHJldHVybiBhcHAuaGFuZGxlQ3ljbGUoc3RhdGUpO1xuICB9XG5cbiAgY29uc3QgbWVtb0tleSA9IGFwcC50b01lbW9LZXkoKTtcbiAgY29uc3QgbWVtb1JlYyA9IHBvc0luZm8ubWVtb1ttZW1vS2V5XTtcblxuICBpZiAobWVtb1JlYyAmJiBwb3NJbmZvLnNob3VsZFVzZU1lbW9pemVkUmVzdWx0KG1lbW9SZWMpKSB7XG4gICAgaWYgKHN0YXRlLmhhc05lY2Vzc2FyeUluZm8obWVtb1JlYykpIHtcbiAgICAgIHJldHVybiBzdGF0ZS51c2VNZW1vaXplZFJlc3VsdChzdGF0ZS5pbnB1dFN0cmVhbS5wb3MsIG1lbW9SZWMpO1xuICAgIH1cbiAgICBkZWxldGUgcG9zSW5mby5tZW1vW21lbW9LZXldO1xuICB9XG4gIHJldHVybiBhcHAucmVhbGx5RXZhbChzdGF0ZSk7XG59O1xuXG5wZXhwcnMkZy5BcHBseS5wcm90b3R5cGUuaGFuZGxlQ3ljbGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICBjb25zdCBwb3NJbmZvID0gc3RhdGUuZ2V0Q3VycmVudFBvc0luZm8oKTtcbiAgY29uc3Qge2N1cnJlbnRMZWZ0UmVjdXJzaW9ufSA9IHBvc0luZm87XG4gIGNvbnN0IG1lbW9LZXkgPSB0aGlzLnRvTWVtb0tleSgpO1xuICBsZXQgbWVtb1JlYyA9IHBvc0luZm8ubWVtb1ttZW1vS2V5XTtcblxuICBpZiAoY3VycmVudExlZnRSZWN1cnNpb24gJiYgY3VycmVudExlZnRSZWN1cnNpb24uaGVhZEFwcGxpY2F0aW9uLnRvTWVtb0tleSgpID09PSBtZW1vS2V5KSB7XG4gICAgLy8gV2UgYWxyZWFkeSBrbm93IGFib3V0IHRoaXMgbGVmdCByZWN1cnNpb24sIGJ1dCBpdCdzIHBvc3NpYmxlIHRoZXJlIGFyZSBcImludm9sdmVkXG4gICAgLy8gYXBwbGljYXRpb25zXCIgdGhhdCB3ZSBkb24ndCBhbHJlYWR5IGtub3cgYWJvdXQsIHNvLi4uXG4gICAgbWVtb1JlYy51cGRhdGVJbnZvbHZlZEFwcGxpY2F0aW9uTWVtb0tleXMoKTtcbiAgfSBlbHNlIGlmICghbWVtb1JlYykge1xuICAgIC8vIE5ldyBsZWZ0IHJlY3Vyc2lvbiBkZXRlY3RlZCEgTWVtb2l6ZSBhIGZhaWx1cmUgdG8gdHJ5IHRvIGdldCBhIHNlZWQgcGFyc2UuXG4gICAgbWVtb1JlYyA9IHBvc0luZm8ubWVtb2l6ZShtZW1vS2V5LCB7XG4gICAgICBtYXRjaExlbmd0aDogMCxcbiAgICAgIGV4YW1pbmVkTGVuZ3RoOiAwLFxuICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgcmlnaHRtb3N0RmFpbHVyZU9mZnNldDogLTEsXG4gICAgfSk7XG4gICAgcG9zSW5mby5zdGFydExlZnRSZWN1cnNpb24odGhpcywgbWVtb1JlYyk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLnVzZU1lbW9pemVkUmVzdWx0KHN0YXRlLmlucHV0U3RyZWFtLnBvcywgbWVtb1JlYyk7XG59O1xuXG5wZXhwcnMkZy5BcHBseS5wcm90b3R5cGUucmVhbGx5RXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgY29uc3Qgb3JpZ1Bvc0luZm8gPSBzdGF0ZS5nZXRDdXJyZW50UG9zSW5mbygpO1xuICBjb25zdCBydWxlSW5mbyA9IHN0YXRlLmdyYW1tYXIucnVsZXNbdGhpcy5ydWxlTmFtZV07XG4gIGNvbnN0IHtib2R5fSA9IHJ1bGVJbmZvO1xuICBjb25zdCB7ZGVzY3JpcHRpb259ID0gcnVsZUluZm87XG5cbiAgc3RhdGUuZW50ZXJBcHBsaWNhdGlvbihvcmlnUG9zSW5mbywgdGhpcyk7XG5cbiAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgc3RhdGUucHVzaEZhaWx1cmVzSW5mbygpO1xuICB9XG5cbiAgLy8gUmVzZXQgdGhlIGlucHV0IHN0cmVhbSdzIGV4YW1pbmVkTGVuZ3RoIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIHRyYWNrXG4gIC8vIHRoZSBleGFtaW5lZCBsZW5ndGggb2YgdGhpcyBwYXJ0aWN1bGFyIGFwcGxpY2F0aW9uLlxuICBjb25zdCBvcmlnSW5wdXRTdHJlYW1FeGFtaW5lZExlbmd0aCA9IGlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoO1xuICBpbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCA9IDA7XG5cbiAgbGV0IHZhbHVlID0gdGhpcy5ldmFsT25jZShib2R5LCBzdGF0ZSk7XG4gIGNvbnN0IGN1cnJlbnRMUiA9IG9yaWdQb3NJbmZvLmN1cnJlbnRMZWZ0UmVjdXJzaW9uO1xuICBjb25zdCBtZW1vS2V5ID0gdGhpcy50b01lbW9LZXkoKTtcbiAgY29uc3QgaXNIZWFkT2ZMZWZ0UmVjdXJzaW9uID0gY3VycmVudExSICYmIGN1cnJlbnRMUi5oZWFkQXBwbGljYXRpb24udG9NZW1vS2V5KCkgPT09IG1lbW9LZXk7XG4gIGxldCBtZW1vUmVjO1xuXG4gIGlmIChpc0hlYWRPZkxlZnRSZWN1cnNpb24pIHtcbiAgICB2YWx1ZSA9IHRoaXMuZ3Jvd1NlZWRSZXN1bHQoYm9keSwgc3RhdGUsIG9yaWdQb3MsIGN1cnJlbnRMUiwgdmFsdWUpO1xuICAgIG9yaWdQb3NJbmZvLmVuZExlZnRSZWN1cnNpb24oKTtcbiAgICBtZW1vUmVjID0gY3VycmVudExSO1xuICAgIG1lbW9SZWMuZXhhbWluZWRMZW5ndGggPSBpbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCAtIG9yaWdQb3M7XG4gICAgbWVtb1JlYy5yaWdodG1vc3RGYWlsdXJlT2Zmc2V0ID0gc3RhdGUuX2dldFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQoKTtcbiAgICBvcmlnUG9zSW5mby5tZW1vaXplKG1lbW9LZXksIG1lbW9SZWMpOyAvLyB1cGRhdGVzIG9yaWdQb3NJbmZvJ3MgbWF4RXhhbWluZWRMZW5ndGhcbiAgfSBlbHNlIGlmICghY3VycmVudExSIHx8ICFjdXJyZW50TFIuaXNJbnZvbHZlZChtZW1vS2V5KSkge1xuICAgIC8vIFRoaXMgYXBwbGljYXRpb24gaXMgbm90IGludm9sdmVkIGluIGxlZnQgcmVjdXJzaW9uLCBzbyBpdCdzIG9rIHRvIG1lbW9pemUgaXQuXG4gICAgbWVtb1JlYyA9IG9yaWdQb3NJbmZvLm1lbW9pemUobWVtb0tleSwge1xuICAgICAgbWF0Y2hMZW5ndGg6IGlucHV0U3RyZWFtLnBvcyAtIG9yaWdQb3MsXG4gICAgICBleGFtaW5lZExlbmd0aDogaW5wdXRTdHJlYW0uZXhhbWluZWRMZW5ndGggLSBvcmlnUG9zLFxuICAgICAgdmFsdWUsXG4gICAgICBmYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb246IHN0YXRlLmNsb25lUmVjb3JkZWRGYWlsdXJlcygpLFxuICAgICAgcmlnaHRtb3N0RmFpbHVyZU9mZnNldDogc3RhdGUuX2dldFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQoKSxcbiAgICB9KTtcbiAgfVxuICBjb25zdCBzdWNjZWVkZWQgPSAhIXZhbHVlO1xuXG4gIGlmIChkZXNjcmlwdGlvbikge1xuICAgIHN0YXRlLnBvcEZhaWx1cmVzSW5mbygpO1xuICAgIGlmICghc3VjY2VlZGVkKSB7XG4gICAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICB9XG4gICAgaWYgKG1lbW9SZWMpIHtcbiAgICAgIG1lbW9SZWMuZmFpbHVyZXNBdFJpZ2h0bW9zdFBvc2l0aW9uID0gc3RhdGUuY2xvbmVSZWNvcmRlZEZhaWx1cmVzKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVjb3JkIHRyYWNlIGluZm9ybWF0aW9uIGluIHRoZSBtZW1vIHRhYmxlLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBpZiB0aGUgbWVtb2l6ZWQgcmVzdWx0XG4gIC8vIGlzIHVzZWQgbGF0ZXIuXG4gIGlmIChzdGF0ZS5pc1RyYWNpbmcoKSAmJiBtZW1vUmVjKSB7XG4gICAgY29uc3QgZW50cnkgPSBzdGF0ZS5nZXRUcmFjZUVudHJ5KG9yaWdQb3MsIHRoaXMsIHN1Y2NlZWRlZCwgc3VjY2VlZGVkID8gW3ZhbHVlXSA6IFtdKTtcbiAgICBpZiAoaXNIZWFkT2ZMZWZ0UmVjdXJzaW9uKSB7XG4gICAgICBjb21tb24kZS5hc3NlcnQoZW50cnkudGVybWluYXRpbmdMUkVudHJ5ICE9IG51bGwgfHwgIXN1Y2NlZWRlZCk7XG4gICAgICBlbnRyeS5pc0hlYWRPZkxlZnRSZWN1cnNpb24gPSB0cnVlO1xuICAgIH1cbiAgICBtZW1vUmVjLnRyYWNlRW50cnkgPSBlbnRyeTtcbiAgfVxuXG4gIC8vIEZpeCB0aGUgaW5wdXQgc3RyZWFtJ3MgZXhhbWluZWRMZW5ndGggLS0gaXQgc2hvdWxkIGJlIHRoZSBtYXhpbXVtIGV4YW1pbmVkIGxlbmd0aFxuICAvLyBhY3Jvc3MgYWxsIGFwcGxpY2F0aW9ucywgbm90IGp1c3QgdGhpcyBvbmUuXG4gIGlucHV0U3RyZWFtLmV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgoXG4gICAgICBpbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCxcbiAgICAgIG9yaWdJbnB1dFN0cmVhbUV4YW1pbmVkTGVuZ3RoXG4gICk7XG5cbiAgc3RhdGUuZXhpdEFwcGxpY2F0aW9uKG9yaWdQb3NJbmZvLCB2YWx1ZSk7XG5cbiAgcmV0dXJuIHN1Y2NlZWRlZDtcbn07XG5cbnBleHBycyRnLkFwcGx5LnByb3RvdHlwZS5ldmFsT25jZSA9IGZ1bmN0aW9uKGV4cHIsIHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcblxuICBpZiAoc3RhdGUuZXZhbChleHByKSkge1xuICAgIGNvbnN0IGFyaXR5ID0gZXhwci5nZXRBcml0eSgpO1xuICAgIGNvbnN0IGJpbmRpbmdzID0gc3RhdGUuX2JpbmRpbmdzLnNwbGljZShzdGF0ZS5fYmluZGluZ3MubGVuZ3RoIC0gYXJpdHksIGFyaXR5KTtcbiAgICBjb25zdCBvZmZzZXRzID0gc3RhdGUuX2JpbmRpbmdPZmZzZXRzLnNwbGljZShzdGF0ZS5fYmluZGluZ09mZnNldHMubGVuZ3RoIC0gYXJpdHksIGFyaXR5KTtcbiAgICBjb25zdCBtYXRjaExlbmd0aCA9IGlucHV0U3RyZWFtLnBvcyAtIG9yaWdQb3M7XG4gICAgcmV0dXJuIG5ldyBOb250ZXJtaW5hbE5vZGUodGhpcy5ydWxlTmFtZSwgYmluZGluZ3MsIG9mZnNldHMsIG1hdGNoTGVuZ3RoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnBleHBycyRnLkFwcGx5LnByb3RvdHlwZS5ncm93U2VlZFJlc3VsdCA9IGZ1bmN0aW9uKGJvZHksIHN0YXRlLCBvcmlnUG9zLCBsck1lbW9SZWMsIG5ld1ZhbHVlKSB7XG4gIGlmICghbmV3VmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCB7aW5wdXRTdHJlYW19ID0gc3RhdGU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBsck1lbW9SZWMubWF0Y2hMZW5ndGggPSBpbnB1dFN0cmVhbS5wb3MgLSBvcmlnUG9zO1xuICAgIGxyTWVtb1JlYy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGxyTWVtb1JlYy5mYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb24gPSBzdGF0ZS5jbG9uZVJlY29yZGVkRmFpbHVyZXMoKTtcblxuICAgIGlmIChzdGF0ZS5pc1RyYWNpbmcoKSkge1xuICAgICAgLy8gQmVmb3JlIGV2YWx1YXRpbmcgdGhlIGJvZHkgYWdhaW4sIGFkZCBhIHRyYWNlIG5vZGUgZm9yIHRoaXMgYXBwbGljYXRpb24gdG8gdGhlIG1lbW8gZW50cnkuXG4gICAgICAvLyBJdHMgb25seSBjaGlsZCBpcyBhIGNvcHkgb2YgdGhlIHRyYWNlIG5vZGUgZnJvbSBgbmV3VmFsdWVgLCB3aGljaCB3aWxsIGFsd2F5cyBiZSB0aGUgbGFzdFxuICAgICAgLy8gZWxlbWVudCBpbiBgc3RhdGUudHJhY2VgLlxuICAgICAgY29uc3Qgc2VlZFRyYWNlID0gc3RhdGUudHJhY2Vbc3RhdGUudHJhY2UubGVuZ3RoIC0gMV07XG4gICAgICBsck1lbW9SZWMudHJhY2VFbnRyeSA9IG5ldyBUcmFjZSQxKFxuICAgICAgICAgIHN0YXRlLmlucHV0LFxuICAgICAgICAgIG9yaWdQb3MsXG4gICAgICAgICAgaW5wdXRTdHJlYW0ucG9zLFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBbbmV3VmFsdWVdLFxuICAgICAgICAgIFtzZWVkVHJhY2UuY2xvbmUoKV1cbiAgICAgICk7XG4gICAgfVxuICAgIGlucHV0U3RyZWFtLnBvcyA9IG9yaWdQb3M7XG4gICAgbmV3VmFsdWUgPSB0aGlzLmV2YWxPbmNlKGJvZHksIHN0YXRlKTtcbiAgICBpZiAoaW5wdXRTdHJlYW0ucG9zIC0gb3JpZ1BvcyA8PSBsck1lbW9SZWMubWF0Y2hMZW5ndGgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuaXNUcmFjaW5nKCkpIHtcbiAgICAgIHN0YXRlLnRyYWNlLnNwbGljZSgtMiwgMSk7IC8vIERyb3AgdGhlIHRyYWNlIGZvciB0aGUgb2xkIHNlZWQuXG4gICAgfVxuICB9XG4gIGlmIChzdGF0ZS5pc1RyYWNpbmcoKSkge1xuICAgIC8vIFRoZSBsYXN0IGVudHJ5IGlzIGZvciBhbiB1bnVzZWQgcmVzdWx0IC0tIHBvcCBpdCBhbmQgc2F2ZSBpdCBpbiB0aGUgXCJyZWFsXCIgZW50cnkuXG4gICAgbHJNZW1vUmVjLnRyYWNlRW50cnkucmVjb3JkTFJUZXJtaW5hdGlvbihzdGF0ZS50cmFjZS5wb3AoKSwgbmV3VmFsdWUpO1xuICB9XG4gIGlucHV0U3RyZWFtLnBvcyA9IG9yaWdQb3MgKyBsck1lbW9SZWMubWF0Y2hMZW5ndGg7XG4gIHJldHVybiBsck1lbW9SZWMudmFsdWU7XG59O1xuXG5wZXhwcnMkZy5Vbmljb2RlQ2hhci5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gIGNvbnN0IHtpbnB1dFN0cmVhbX0gPSBzdGF0ZTtcbiAgY29uc3Qgb3JpZ1BvcyA9IGlucHV0U3RyZWFtLnBvcztcbiAgY29uc3QgY2ggPSBpbnB1dFN0cmVhbS5uZXh0KCk7XG4gIGlmIChjaCAmJiB0aGlzLnBhdHRlcm4udGVzdChjaCkpIHtcbiAgICBzdGF0ZS5wdXNoQmluZGluZyhuZXcgVGVybWluYWxOb2RlJDEoY2gubGVuZ3RoKSwgb3JpZ1Bvcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUucHJvY2Vzc0ZhaWx1cmUob3JpZ1BvcywgdGhpcyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGQgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyRmID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnBleHBycyRmLlBFeHByLnByb3RvdHlwZS5nZXRBcml0eSA9IGNvbW1vbiRkLmFic3RyYWN0KCdnZXRBcml0eScpO1xuXG5wZXhwcnMkZi5hbnkuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5lbmQuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5UZXJtaW5hbC5wcm90b3R5cGUuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5SYW5nZS5wcm90b3R5cGUuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5QYXJhbS5wcm90b3R5cGUuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5BcHBseS5wcm90b3R5cGUuZ2V0QXJpdHkgPVxuICBwZXhwcnMkZi5Vbmljb2RlQ2hhci5wcm90b3R5cGUuZ2V0QXJpdHkgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfTtcblxucGV4cHJzJGYuQWx0LnByb3RvdHlwZS5nZXRBcml0eSA9IGZ1bmN0aW9uKCkge1xuICAvLyBUaGlzIGlzIG9rIGIvYyBhbGwgdGVybXMgbXVzdCBoYXZlIHRoZSBzYW1lIGFyaXR5IC0tIHRoaXMgcHJvcGVydHkgaXNcbiAgLy8gY2hlY2tlZCBieSB0aGUgR3JhbW1hciBjb25zdHJ1Y3Rvci5cbiAgcmV0dXJuIHRoaXMudGVybXMubGVuZ3RoID09PSAwID8gMCA6IHRoaXMudGVybXNbMF0uZ2V0QXJpdHkoKTtcbn07XG5cbnBleHBycyRmLlNlcS5wcm90b3R5cGUuZ2V0QXJpdHkgPSBmdW5jdGlvbigpIHtcbiAgbGV0IGFyaXR5ID0gMDtcbiAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdGhpcy5mYWN0b3JzLmxlbmd0aDsgaWR4KyspIHtcbiAgICBhcml0eSArPSB0aGlzLmZhY3RvcnNbaWR4XS5nZXRBcml0eSgpO1xuICB9XG4gIHJldHVybiBhcml0eTtcbn07XG5cbnBleHBycyRmLkl0ZXIucHJvdG90eXBlLmdldEFyaXR5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmV4cHIuZ2V0QXJpdHkoKTtcbn07XG5cbnBleHBycyRmLk5vdC5wcm90b3R5cGUuZ2V0QXJpdHkgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDA7XG59O1xuXG5wZXhwcnMkZi5Mb29rYWhlYWQucHJvdG90eXBlLmdldEFyaXR5ID0gcGV4cHJzJGYuTGV4LnByb3RvdHlwZS5nZXRBcml0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5leHByLmdldEFyaXR5KCk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGMgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyRlID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIGdldE1ldGFJbmZvKGV4cHIsIGdyYW1tYXJJbnRlcnZhbCkge1xuICBjb25zdCBtZXRhSW5mbyA9IHt9O1xuICBpZiAoZXhwci5zb3VyY2UgJiYgZ3JhbW1hckludGVydmFsKSB7XG4gICAgY29uc3QgYWRqdXN0ZWQgPSBleHByLnNvdXJjZS5yZWxhdGl2ZVRvKGdyYW1tYXJJbnRlcnZhbCk7XG4gICAgbWV0YUluZm8uc291cmNlSW50ZXJ2YWwgPSBbYWRqdXN0ZWQuc3RhcnRJZHgsIGFkanVzdGVkLmVuZElkeF07XG4gIH1cbiAgcmV0dXJuIG1ldGFJbmZvO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucGV4cHJzJGUuUEV4cHIucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGNvbW1vbiRjLmFic3RyYWN0KCdvdXRwdXRSZWNpcGUnKTtcblxucGV4cHJzJGUuYW55Lm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWydhbnknLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpXTtcbn07XG5cbnBleHBycyRlLmVuZC5vdXRwdXRSZWNpcGUgPSBmdW5jdGlvbihmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpIHtcbiAgcmV0dXJuIFsnZW5kJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKV07XG59O1xuXG5wZXhwcnMkZS5UZXJtaW5hbC5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ3Rlcm1pbmFsJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSwgdGhpcy5vYmpdO1xufTtcblxucGV4cHJzJGUuUmFuZ2UucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWydyYW5nZScsIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCksIHRoaXMuZnJvbSwgdGhpcy50b107XG59O1xuXG5wZXhwcnMkZS5QYXJhbS5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIHJldHVybiBbJ3BhcmFtJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSwgdGhpcy5pbmRleF07XG59O1xuXG5wZXhwcnMkZS5BbHQucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWydhbHQnLCBnZXRNZXRhSW5mbyh0aGlzLCBncmFtbWFySW50ZXJ2YWwpXS5jb25jYXQoXG4gICAgICB0aGlzLnRlcm1zLm1hcCh0ZXJtID0+IHRlcm0ub3V0cHV0UmVjaXBlKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkpXG4gICk7XG59O1xuXG5wZXhwcnMkZS5FeHRlbmQucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICBjb25zdCBleHRlbnNpb24gPSB0aGlzLnRlcm1zWzBdOyAvLyBbZXh0ZW5zaW9uLCBvcmlnaW5hbF1cbiAgcmV0dXJuIGV4dGVuc2lvbi5vdXRwdXRSZWNpcGUoZm9ybWFscywgZ3JhbW1hckludGVydmFsKTtcbn07XG5cbnBleHBycyRlLlNwbGljZS5wcm90b3R5cGUub3V0cHV0UmVjaXBlID0gZnVuY3Rpb24oZm9ybWFscywgZ3JhbW1hckludGVydmFsKSB7XG4gIGNvbnN0IGJlZm9yZVRlcm1zID0gdGhpcy50ZXJtcy5zbGljZSgwLCB0aGlzLmV4cGFuc2lvblBvcyk7XG4gIGNvbnN0IGFmdGVyVGVybXMgPSB0aGlzLnRlcm1zLnNsaWNlKHRoaXMuZXhwYW5zaW9uUG9zICsgMSk7XG4gIHJldHVybiBbXG4gICAgJ3NwbGljZScsXG4gICAgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKSxcbiAgICBiZWZvcmVUZXJtcy5tYXAodGVybSA9PiB0ZXJtLm91dHB1dFJlY2lwZShmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpKSxcbiAgICBhZnRlclRlcm1zLm1hcCh0ZXJtID0+IHRlcm0ub3V0cHV0UmVjaXBlKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkpLFxuICBdO1xufTtcblxucGV4cHJzJGUuU2VxLnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPSBmdW5jdGlvbihmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpIHtcbiAgcmV0dXJuIFsnc2VxJywgZ2V0TWV0YUluZm8odGhpcywgZ3JhbW1hckludGVydmFsKV0uY29uY2F0KFxuICAgICAgdGhpcy5mYWN0b3JzLm1hcChmYWN0b3IgPT4gZmFjdG9yLm91dHB1dFJlY2lwZShmb3JtYWxzLCBncmFtbWFySW50ZXJ2YWwpKVxuICApO1xufTtcblxucGV4cHJzJGUuU3Rhci5wcm90b3R5cGUub3V0cHV0UmVjaXBlID1cbiAgcGV4cHJzJGUuUGx1cy5wcm90b3R5cGUub3V0cHV0UmVjaXBlID1cbiAgcGV4cHJzJGUuT3B0LnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPVxuICBwZXhwcnMkZS5Ob3QucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9XG4gIHBleHBycyRlLkxvb2thaGVhZC5wcm90b3R5cGUub3V0cHV0UmVjaXBlID1cbiAgcGV4cHJzJGUuTGV4LnByb3RvdHlwZS5vdXRwdXRSZWNpcGUgPVxuICAgIGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCksXG4gICAgICAgIHRoaXMuZXhwci5vdXRwdXRSZWNpcGUoZm9ybWFscywgZ3JhbW1hckludGVydmFsKSxcbiAgICAgIF07XG4gICAgfTtcblxucGV4cHJzJGUuQXBwbHkucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gW1xuICAgICdhcHAnLFxuICAgIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCksXG4gICAgdGhpcy5ydWxlTmFtZSxcbiAgICB0aGlzLmFyZ3MubWFwKGFyZyA9PiBhcmcub3V0cHV0UmVjaXBlKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkpLFxuICBdO1xufTtcblxucGV4cHJzJGUuVW5pY29kZUNoYXIucHJvdG90eXBlLm91dHB1dFJlY2lwZSA9IGZ1bmN0aW9uKGZvcm1hbHMsIGdyYW1tYXJJbnRlcnZhbCkge1xuICByZXR1cm4gWyd1bmljb2RlQ2hhcicsIGdldE1ldGFJbmZvKHRoaXMsIGdyYW1tYXJJbnRlcnZhbCksIHRoaXMuY2F0ZWdvcnldO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGNvbW1vbiRiID0gY29tbW9uJGw7XG5jb25zdCBwZXhwcnMkZCA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKlxuICBDYWxsZWQgYXQgZ3JhbW1hciBjcmVhdGlvbiB0aW1lIHRvIHJld3JpdGUgYSBydWxlIGJvZHksIHJlcGxhY2luZyBlYWNoIHJlZmVyZW5jZSB0byBhIGZvcm1hbFxuICBwYXJhbWV0ZXIgd2l0aCBhIGBQYXJhbWAgbm9kZS4gUmV0dXJucyBhIFBFeHByIC0tIGVpdGhlciBhIG5ldyBvbmUsIG9yIHRoZSBvcmlnaW5hbCBvbmUgaWZcbiAgaXQgd2FzIG1vZGlmaWVkIGluIHBsYWNlLlxuKi9cbnBleHBycyRkLlBFeHByLnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPSBjb21tb24kYi5hYnN0cmFjdCgnaW50cm9kdWNlUGFyYW1zJyk7XG5cbnBleHBycyRkLmFueS5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5lbmQuaW50cm9kdWNlUGFyYW1zID1cbiAgcGV4cHJzJGQuVGVybWluYWwucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gIHBleHBycyRkLlJhbmdlLnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5QYXJhbS5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgcGV4cHJzJGQuVW5pY29kZUNoYXIucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gICAgZnVuY3Rpb24oZm9ybWFscykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxucGV4cHJzJGQuQWx0LnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPSBmdW5jdGlvbihmb3JtYWxzKSB7XG4gIHRoaXMudGVybXMuZm9yRWFjaCgodGVybSwgaWR4LCB0ZXJtcykgPT4ge1xuICAgIHRlcm1zW2lkeF0gPSB0ZXJtLmludHJvZHVjZVBhcmFtcyhmb3JtYWxzKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxucGV4cHJzJGQuU2VxLnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPSBmdW5jdGlvbihmb3JtYWxzKSB7XG4gIHRoaXMuZmFjdG9ycy5mb3JFYWNoKChmYWN0b3IsIGlkeCwgZmFjdG9ycykgPT4ge1xuICAgIGZhY3RvcnNbaWR4XSA9IGZhY3Rvci5pbnRyb2R1Y2VQYXJhbXMoZm9ybWFscyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbnBleHBycyRkLkl0ZXIucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gIHBleHBycyRkLk5vdC5wcm90b3R5cGUuaW50cm9kdWNlUGFyYW1zID1cbiAgcGV4cHJzJGQuTG9va2FoZWFkLnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPVxuICBwZXhwcnMkZC5MZXgucHJvdG90eXBlLmludHJvZHVjZVBhcmFtcyA9XG4gICAgZnVuY3Rpb24oZm9ybWFscykge1xuICAgICAgdGhpcy5leHByID0gdGhpcy5leHByLmludHJvZHVjZVBhcmFtcyhmb3JtYWxzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbnBleHBycyRkLkFwcGx5LnByb3RvdHlwZS5pbnRyb2R1Y2VQYXJhbXMgPSBmdW5jdGlvbihmb3JtYWxzKSB7XG4gIGNvbnN0IGluZGV4ID0gZm9ybWFscy5pbmRleE9mKHRoaXMucnVsZU5hbWUpO1xuICBpZiAoaW5kZXggPj0gMCkge1xuICAgIGlmICh0aGlzLmFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgLy8gVE9ETzogU2hvdWxkIHRoaXMgYmUgc3VwcG9ydGVkPyBTZWUgaXNzdWUgIzY0LlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXJpemVkIHJ1bGVzIGNhbm5vdCBiZSBwYXNzZWQgYXMgYXJndW1lbnRzIHRvIGFub3RoZXIgcnVsZS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkZC5QYXJhbShpbmRleCkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hcmdzLmZvckVhY2goKGFyZywgaWR4LCBhcmdzKSA9PiB7XG4gICAgICBhcmdzW2lkeF0gPSBhcmcuaW50cm9kdWNlUGFyYW1zKGZvcm1hbHMpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJGEgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyRjID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFJldHVybnMgYHRydWVgIGlmIHRoaXMgcGFyc2luZyBleHByZXNzaW9uIG1heSBhY2NlcHQgd2l0aG91dCBjb25zdW1pbmcgYW55IGlucHV0LlxucGV4cHJzJGMuUEV4cHIucHJvdG90eXBlLmlzTnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHJldHVybiB0aGlzLl9pc051bGxhYmxlKGdyYW1tYXIsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufTtcblxucGV4cHJzJGMuUEV4cHIucHJvdG90eXBlLl9pc051bGxhYmxlID0gY29tbW9uJGEuYWJzdHJhY3QoJ19pc051bGxhYmxlJyk7XG5cbnBleHBycyRjLmFueS5faXNOdWxsYWJsZSA9XG4gIHBleHBycyRjLlJhbmdlLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9XG4gIHBleHBycyRjLlBhcmFtLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9XG4gIHBleHBycyRjLlBsdXMucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuVW5pY29kZUNoYXIucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgICBmdW5jdGlvbihncmFtbWFyLCBtZW1vKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxucGV4cHJzJGMuZW5kLl9pc051bGxhYmxlID0gZnVuY3Rpb24oZ3JhbW1hciwgbWVtbykge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnBleHBycyRjLlRlcm1pbmFsLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzLm9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUaGlzIGlzIGFuIG92ZXItc2ltcGxpZmljYXRpb246IGl0J3Mgb25seSBjb3JyZWN0IGlmIHRoZSBpbnB1dCBpcyBhIHN0cmluZy4gSWYgaXQncyBhbiBhcnJheVxuICAgIC8vIG9yIGFuIG9iamVjdCwgdGhlbiB0aGUgZW1wdHkgc3RyaW5nIHBhcnNpbmcgZXhwcmVzc2lvbiBpcyBub3QgbnVsbGFibGUuXG4gICAgcmV0dXJuIHRoaXMub2JqID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnBleHBycyRjLkFsdC5wcm90b3R5cGUuX2lzTnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyLCBtZW1vKSB7XG4gIHJldHVybiB0aGlzLnRlcm1zLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnRlcm1zLnNvbWUodGVybSA9PiB0ZXJtLl9pc051bGxhYmxlKGdyYW1tYXIsIG1lbW8pKTtcbn07XG5cbnBleHBycyRjLlNlcS5wcm90b3R5cGUuX2lzTnVsbGFibGUgPSBmdW5jdGlvbihncmFtbWFyLCBtZW1vKSB7XG4gIHJldHVybiB0aGlzLmZhY3RvcnMuZXZlcnkoZmFjdG9yID0+IGZhY3Rvci5faXNOdWxsYWJsZShncmFtbWFyLCBtZW1vKSk7XG59O1xuXG5wZXhwcnMkYy5TdGFyLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9XG4gIHBleHBycyRjLk9wdC5wcm90b3R5cGUuX2lzTnVsbGFibGUgPVxuICBwZXhwcnMkYy5Ob3QucHJvdG90eXBlLl9pc051bGxhYmxlID1cbiAgcGV4cHJzJGMuTG9va2FoZWFkLnByb3RvdHlwZS5faXNOdWxsYWJsZSA9XG4gICAgZnVuY3Rpb24oZ3JhbW1hciwgbWVtbykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxucGV4cHJzJGMuTGV4LnByb3RvdHlwZS5faXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgcmV0dXJuIHRoaXMuZXhwci5faXNOdWxsYWJsZShncmFtbWFyLCBtZW1vKTtcbn07XG5cbnBleHBycyRjLkFwcGx5LnByb3RvdHlwZS5faXNOdWxsYWJsZSA9IGZ1bmN0aW9uKGdyYW1tYXIsIG1lbW8pIHtcbiAgY29uc3Qga2V5ID0gdGhpcy50b01lbW9LZXkoKTtcbiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVtbywga2V5KSkge1xuICAgIGNvbnN0IHtib2R5fSA9IGdyYW1tYXIucnVsZXNbdGhpcy5ydWxlTmFtZV07XG4gICAgY29uc3QgaW5saW5lZCA9IGJvZHkuc3Vic3RpdHV0ZVBhcmFtcyh0aGlzLmFyZ3MpO1xuICAgIG1lbW9ba2V5XSA9IGZhbHNlOyAvLyBQcmV2ZW50IGluZmluaXRlIHJlY3Vyc2lvbiBmb3IgcmVjdXJzaXZlIHJ1bGVzLlxuICAgIG1lbW9ba2V5XSA9IGlubGluZWQuX2lzTnVsbGFibGUoZ3JhbW1hciwgbWVtbyk7XG4gIH1cbiAgcmV0dXJuIG1lbW9ba2V5XTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kOSA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGIgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLypcbiAgUmV0dXJucyBhIFBFeHByIHRoYXQgcmVzdWx0cyBmcm9tIHJlY3Vyc2l2ZWx5IHJlcGxhY2luZyBldmVyeSBmb3JtYWwgcGFyYW1ldGVyIChpLmUuLCBpbnN0YW5jZVxuICBvZiBgUGFyYW1gKSBpbnNpZGUgdGhpcyBQRXhwciB3aXRoIGl0cyBhY3R1YWwgdmFsdWUgZnJvbSBgYWN0dWFsc2AgKGFuIEFycmF5KS5cblxuICBUaGUgcmVjZWl2ZXIgbXVzdCBub3QgYmUgbW9kaWZpZWQ7IGEgbmV3IFBFeHByIG11c3QgYmUgcmV0dXJuZWQgaWYgYW55IHJlcGxhY2VtZW50IGlzIG5lY2Vzc2FyeS5cbiovXG4vLyBmdW5jdGlvbihhY3R1YWxzKSB7IC4uLiB9XG5wZXhwcnMkYi5QRXhwci5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9IGNvbW1vbiQ5LmFic3RyYWN0KCdzdWJzdGl0dXRlUGFyYW1zJyk7XG5cbnBleHBycyRiLmFueS5zdWJzdGl0dXRlUGFyYW1zID1cbiAgcGV4cHJzJGIuZW5kLnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5UZXJtaW5hbC5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9XG4gIHBleHBycyRiLlJhbmdlLnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID1cbiAgcGV4cHJzJGIuVW5pY29kZUNoYXIucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICAgIGZ1bmN0aW9uKGFjdHVhbHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbnBleHBycyRiLlBhcmFtLnByb3RvdHlwZS5zdWJzdGl0dXRlUGFyYW1zID0gZnVuY3Rpb24oYWN0dWFscykge1xuICByZXR1cm4gYWN0dWFsc1t0aGlzLmluZGV4XTtcbn07XG5cbnBleHBycyRiLkFsdC5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9IGZ1bmN0aW9uKGFjdHVhbHMpIHtcbiAgcmV0dXJuIG5ldyBwZXhwcnMkYi5BbHQodGhpcy50ZXJtcy5tYXAodGVybSA9PiB0ZXJtLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscykpKTtcbn07XG5cbnBleHBycyRiLlNlcS5wcm90b3R5cGUuc3Vic3RpdHV0ZVBhcmFtcyA9IGZ1bmN0aW9uKGFjdHVhbHMpIHtcbiAgcmV0dXJuIG5ldyBwZXhwcnMkYi5TZXEodGhpcy5mYWN0b3JzLm1hcChmYWN0b3IgPT4gZmFjdG9yLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscykpKTtcbn07XG5cbnBleHBycyRiLkl0ZXIucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5Ob3QucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5Mb29rYWhlYWQucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICBwZXhwcnMkYi5MZXgucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPVxuICAgIGZ1bmN0aW9uKGFjdHVhbHMpIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmV4cHIuc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSk7XG4gICAgfTtcblxucGV4cHJzJGIuQXBwbHkucHJvdG90eXBlLnN1YnN0aXR1dGVQYXJhbXMgPSBmdW5jdGlvbihhY3R1YWxzKSB7XG4gIGlmICh0aGlzLmFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gQXZvaWQgbWFraW5nIGEgY29weSBvZiB0aGlzIGFwcGxpY2F0aW9uLCBhcyBhbiBvcHRpbWl6YXRpb25cbiAgICByZXR1cm4gdGhpcztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhcmdzID0gdGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscykpO1xuICAgIHJldHVybiBuZXcgcGV4cHJzJGIuQXBwbHkodGhpcy5ydWxlTmFtZSwgYXJncyk7XG4gIH1cbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kOCA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJGEgPSBwZXhwcnNNYWluO1xuXG5jb25zdCB7Y29weVdpdGhvdXREdXBsaWNhdGVzfSA9IGNvbW1vbiQ4O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gaXNSZXN0cmljdGVkSlNJZGVudGlmaWVyKHN0cikge1xuICByZXR1cm4gL15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLy50ZXN0KHN0cik7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVEdXBsaWNhdGVkTmFtZXMoYXJndW1lbnROYW1lTGlzdCkge1xuICAvLyBgY291bnRgIGlzIHVzZWQgdG8gcmVjb3JkIHRoZSBudW1iZXIgb2YgdGltZXMgZWFjaCBhcmd1bWVudCBuYW1lIG9jY3VycyBpbiB0aGUgbGlzdCxcbiAgLy8gdGhpcyBpcyB1c2VmdWwgZm9yIGNoZWNraW5nIGR1cGxpY2F0ZWQgYXJndW1lbnQgbmFtZS4gSXQgbWFwcyBhcmd1bWVudCBuYW1lcyB0byBpbnRzLlxuICBjb25zdCBjb3VudCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGFyZ3VtZW50TmFtZUxpc3QuZm9yRWFjaChhcmdOYW1lID0+IHtcbiAgICBjb3VudFthcmdOYW1lXSA9IChjb3VudFthcmdOYW1lXSB8fCAwKSArIDE7XG4gIH0pO1xuXG4gIC8vIEFwcGVuZCBzdWJzY3JpcHRzICgnXzEnLCAnXzInLCAuLi4pIHRvIGR1cGxpY2F0ZSBhcmd1bWVudCBuYW1lcy5cbiAgT2JqZWN0LmtleXMoY291bnQpLmZvckVhY2goZHVwQXJnTmFtZSA9PiB7XG4gICAgaWYgKGNvdW50W2R1cEFyZ05hbWVdIDw9IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUaGlzIG5hbWUgc2hvd3MgdXAgbW9yZSB0aGFuIG9uY2UsIHNvIGFkZCBzdWJzY3JpcHRzLlxuICAgIGxldCBzdWJzY3JpcHQgPSAxO1xuICAgIGFyZ3VtZW50TmFtZUxpc3QuZm9yRWFjaCgoYXJnTmFtZSwgaWR4KSA9PiB7XG4gICAgICBpZiAoYXJnTmFtZSA9PT0gZHVwQXJnTmFtZSkge1xuICAgICAgICBhcmd1bWVudE5hbWVMaXN0W2lkeF0gPSBhcmdOYW1lICsgJ18nICsgc3Vic2NyaXB0Kys7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLypcbiAgUmV0dXJucyBhIGxpc3Qgb2Ygc3RyaW5ncyB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgZGVmYXVsdCBhcmd1bWVudCBuYW1lcyBmb3IgaXRzIHJlY2VpdmVyXG4gIChhIHBleHByKSBpbiBhIHNlbWFudGljIGFjdGlvbi4gVGhpcyBpcyB1c2VkIGV4Y2x1c2l2ZWx5IGJ5IHRoZSBTZW1hbnRpY3MgRWRpdG9yLlxuXG4gIGBmaXJzdEFyZ0luZGV4YCBpcyB0aGUgMS1iYXNlZCBpbmRleCBvZiB0aGUgZmlyc3QgYXJndW1lbnQgbmFtZSB0aGF0IHdpbGwgYmUgZ2VuZXJhdGVkIGZvciB0aGlzXG4gIHBleHByLiBJdCBlbmFibGVzIHVzIHRvIG5hbWUgYXJndW1lbnRzIHBvc2l0aW9uYWxseSwgZS5nLiwgaWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBhXG4gIG5vbi1hbHBoYW51bWVyaWMgdGVybWluYWwgbGlrZSBcIitcIiwgaXQgd2lsbCBiZSBuYW1lZCAnJDInLlxuXG4gIGBub0R1cENoZWNrYCBpcyB0cnVlIGlmIHRoZSBjYWxsZXIgb2YgYHRvQXJndW1lbnROYW1lTGlzdGAgaXMgbm90IGEgdG9wIGxldmVsIGNhbGxlci4gSXQgZW5hYmxlc1xuICB1cyB0byBhdm9pZCBuZXN0ZWQgZHVwbGljYXRpb24gc3Vic2NyaXB0cyBhcHBlbmRpbmcsIGUuZy4sICdfMV8xJywgJ18xXzInLCBieSBvbmx5IGNoZWNraW5nXG4gIGR1cGxpY2F0ZXMgYXQgdGhlIHRvcCBsZXZlbC5cblxuICBIZXJlIGlzIGEgbW9yZSBlbGFib3JhdGUgZXhhbXBsZSB0aGF0IGlsbHVzdHJhdGVzIGhvdyB0aGlzIG1ldGhvZCB3b3JrczpcbiAgYChhIFwiK1wiIGIpLnRvQXJndW1lbnROYW1lTGlzdCgxKWAgZXZhbHVhdGVzIHRvIGBbJ2EnLCAnJDInLCAnYiddYCB3aXRoIHRoZSBmb2xsb3dpbmcgcmVjdXJzaXZlXG4gIGNhbGxzOlxuXG4gICAgKGEpLnRvQXJndW1lbnROYW1lTGlzdCgxKSAtPiBbJ2EnXSxcbiAgICAoXCIrXCIpLnRvQXJndW1lbnROYW1lTGlzdCgyKSAtPiBbJyQyJ10sXG4gICAgKGIpLnRvQXJndW1lbnROYW1lTGlzdCgzKSAtPiBbJ2InXVxuXG4gIE5vdGVzOlxuICAqIFRoaXMgbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgb24gd2VsbC1mb3JtZWQgZXhwcmVzc2lvbnMsIGUuZy4sIHRoZSByZWNlaXZlciBtdXN0XG4gICAgbm90IGhhdmUgYW55IEFsdCBzdWItZXhwcmVzc2lvbnMgd2l0aCBpbmNvbnNpc3RlbnQgYXJpdGllcy5cbiAgKiBlLmdldEFyaXR5KCkgPT09IGUudG9Bcmd1bWVudE5hbWVMaXN0KDEpLmxlbmd0aFxuKi9cbi8vIGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHsgLi4uIH1cbnBleHBycyRhLlBFeHByLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBjb21tb24kOC5hYnN0cmFjdCgndG9Bcmd1bWVudE5hbWVMaXN0Jyk7XG5cbnBleHBycyRhLmFueS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIHJldHVybiBbJ2FueSddO1xufTtcblxucGV4cHJzJGEuZW5kLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgcmV0dXJuIFsnZW5kJ107XG59O1xuXG5wZXhwcnMkYS5UZXJtaW5hbC5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICBpZiAodHlwZW9mIHRoaXMub2JqID09PSAnc3RyaW5nJyAmJiAvXltfYS16QS1aMC05XSskLy50ZXN0KHRoaXMub2JqKSkge1xuICAgIC8vIElmIHRoaXMgdGVybWluYWwgaXMgYSB2YWxpZCBzdWZmaXggZm9yIGEgSlMgaWRlbnRpZmllciwganVzdCBwcmVwZW5kIGl0IHdpdGggJ18nXG4gICAgcmV0dXJuIFsnXycgKyB0aGlzLm9ial07XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBuYW1lIGl0IHBvc2l0aW9uYWxseS5cbiAgICByZXR1cm4gWyckJyArIGZpcnN0QXJnSW5kZXhdO1xuICB9XG59O1xuXG5wZXhwcnMkYS5SYW5nZS5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICBsZXQgYXJnTmFtZSA9IHRoaXMuZnJvbSArICdfdG9fJyArIHRoaXMudG87XG4gIC8vIElmIHRoZSBgYXJnTmFtZWAgaXMgbm90IHZhbGlkIHRoZW4gdHJ5IHRvIHByZXBlbmQgYSBgX2AuXG4gIGlmICghaXNSZXN0cmljdGVkSlNJZGVudGlmaWVyKGFyZ05hbWUpKSB7XG4gICAgYXJnTmFtZSA9ICdfJyArIGFyZ05hbWU7XG4gIH1cbiAgLy8gSWYgdGhlIGBhcmdOYW1lYCBzdGlsbCBub3QgdmFsaWQgYWZ0ZXIgcHJlcGVuZGluZyBhIGBfYCwgdGhlbiBuYW1lIGl0IHBvc2l0aW9uYWxseS5cbiAgaWYgKCFpc1Jlc3RyaWN0ZWRKU0lkZW50aWZpZXIoYXJnTmFtZSkpIHtcbiAgICBhcmdOYW1lID0gJyQnICsgZmlyc3RBcmdJbmRleDtcbiAgfVxuICByZXR1cm4gW2FyZ05hbWVdO1xufTtcblxucGV4cHJzJGEuQWx0LnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIC8vIGB0ZXJtQXJnTmFtZUxpc3RzYCBpcyBhbiBhcnJheSBvZiBhcnJheXMgd2hlcmUgZWFjaCByb3cgaXMgdGhlXG4gIC8vIGFyZ3VtZW50IG5hbWUgbGlzdCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgdGVybSBpbiB0aGlzIGFsdGVybmF0aW9uLlxuICBjb25zdCB0ZXJtQXJnTmFtZUxpc3RzID0gdGhpcy50ZXJtcy5tYXAodGVybSA9PlxuICAgIHRlcm0udG9Bcmd1bWVudE5hbWVMaXN0KGZpcnN0QXJnSW5kZXgsIHRydWUpXG4gICk7XG5cbiAgY29uc3QgYXJndW1lbnROYW1lTGlzdCA9IFtdO1xuICBjb25zdCBudW1BcmdzID0gdGVybUFyZ05hbWVMaXN0c1swXS5sZW5ndGg7XG4gIGZvciAobGV0IGNvbElkeCA9IDA7IGNvbElkeCA8IG51bUFyZ3M7IGNvbElkeCsrKSB7XG4gICAgY29uc3QgY29sID0gW107XG4gICAgZm9yIChsZXQgcm93SWR4ID0gMDsgcm93SWR4IDwgdGhpcy50ZXJtcy5sZW5ndGg7IHJvd0lkeCsrKSB7XG4gICAgICBjb2wucHVzaCh0ZXJtQXJnTmFtZUxpc3RzW3Jvd0lkeF1bY29sSWR4XSk7XG4gICAgfVxuICAgIGNvbnN0IHVuaXF1ZU5hbWVzID0gY29weVdpdGhvdXREdXBsaWNhdGVzKGNvbCk7XG4gICAgYXJndW1lbnROYW1lTGlzdC5wdXNoKHVuaXF1ZU5hbWVzLmpvaW4oJ19vcl8nKSk7XG4gIH1cblxuICBpZiAoIW5vRHVwQ2hlY2spIHtcbiAgICByZXNvbHZlRHVwbGljYXRlZE5hbWVzKGFyZ3VtZW50TmFtZUxpc3QpO1xuICB9XG4gIHJldHVybiBhcmd1bWVudE5hbWVMaXN0O1xufTtcblxucGV4cHJzJGEuU2VxLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIC8vIEdlbmVyYXRlIHRoZSBhcmd1bWVudCBuYW1lIGxpc3QsIHdpdGhvdXQgd29ycnlpbmcgYWJvdXQgZHVwbGljYXRlcy5cbiAgbGV0IGFyZ3VtZW50TmFtZUxpc3QgPSBbXTtcbiAgdGhpcy5mYWN0b3JzLmZvckVhY2goZmFjdG9yID0+IHtcbiAgICBjb25zdCBmYWN0b3JBcmd1bWVudE5hbWVMaXN0ID0gZmFjdG9yLnRvQXJndW1lbnROYW1lTGlzdChmaXJzdEFyZ0luZGV4LCB0cnVlKTtcbiAgICBhcmd1bWVudE5hbWVMaXN0ID0gYXJndW1lbnROYW1lTGlzdC5jb25jYXQoZmFjdG9yQXJndW1lbnROYW1lTGlzdCk7XG5cbiAgICAvLyBTaGlmdCB0aGUgZmlyc3RBcmdJbmRleCB0byB0YWtlIHRoaXMgZmFjdG9yJ3MgYXJndW1lbnQgbmFtZXMgaW50byBhY2NvdW50LlxuICAgIGZpcnN0QXJnSW5kZXggKz0gZmFjdG9yQXJndW1lbnROYW1lTGlzdC5sZW5ndGg7XG4gIH0pO1xuICBpZiAoIW5vRHVwQ2hlY2spIHtcbiAgICByZXNvbHZlRHVwbGljYXRlZE5hbWVzKGFyZ3VtZW50TmFtZUxpc3QpO1xuICB9XG4gIHJldHVybiBhcmd1bWVudE5hbWVMaXN0O1xufTtcblxucGV4cHJzJGEuSXRlci5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICBjb25zdCBhcmd1bWVudE5hbWVMaXN0ID0gdGhpcy5leHByXG4gICAgICAudG9Bcmd1bWVudE5hbWVMaXN0KGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spXG4gICAgICAubWFwKGV4cHJBcmd1bWVudFN0cmluZyA9PlxuICAgICAgZXhwckFyZ3VtZW50U3RyaW5nW2V4cHJBcmd1bWVudFN0cmluZy5sZW5ndGggLSAxXSA9PT0gJ3MnID9cbiAgICAgICAgZXhwckFyZ3VtZW50U3RyaW5nICsgJ2VzJyA6XG4gICAgICAgIGV4cHJBcmd1bWVudFN0cmluZyArICdzJ1xuICAgICAgKTtcbiAgaWYgKCFub0R1cENoZWNrKSB7XG4gICAgcmVzb2x2ZUR1cGxpY2F0ZWROYW1lcyhhcmd1bWVudE5hbWVMaXN0KTtcbiAgfVxuICByZXR1cm4gYXJndW1lbnROYW1lTGlzdDtcbn07XG5cbnBleHBycyRhLk9wdC5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICByZXR1cm4gdGhpcy5leHByLnRvQXJndW1lbnROYW1lTGlzdChmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKS5tYXAoYXJnTmFtZSA9PiB7XG4gICAgcmV0dXJuICdvcHQnICsgYXJnTmFtZVswXS50b1VwcGVyQ2FzZSgpICsgYXJnTmFtZS5zbGljZSgxKTtcbiAgfSk7XG59O1xuXG5wZXhwcnMkYS5Ob3QucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgcmV0dXJuIFtdO1xufTtcblxucGV4cHJzJGEuTG9va2FoZWFkLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBwZXhwcnMkYS5MZXgucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9XG4gIGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgICByZXR1cm4gdGhpcy5leHByLnRvQXJndW1lbnROYW1lTGlzdChmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKTtcbiAgfTtcblxucGV4cHJzJGEuQXBwbHkucHJvdG90eXBlLnRvQXJndW1lbnROYW1lTGlzdCA9IGZ1bmN0aW9uKGZpcnN0QXJnSW5kZXgsIG5vRHVwQ2hlY2spIHtcbiAgcmV0dXJuIFt0aGlzLnJ1bGVOYW1lXTtcbn07XG5cbnBleHBycyRhLlVuaWNvZGVDaGFyLnByb3RvdHlwZS50b0FyZ3VtZW50TmFtZUxpc3QgPSBmdW5jdGlvbihmaXJzdEFyZ0luZGV4LCBub0R1cENoZWNrKSB7XG4gIHJldHVybiBbJyQnICsgZmlyc3RBcmdJbmRleF07XG59O1xuXG5wZXhwcnMkYS5QYXJhbS5wcm90b3R5cGUudG9Bcmd1bWVudE5hbWVMaXN0ID0gZnVuY3Rpb24oZmlyc3RBcmdJbmRleCwgbm9EdXBDaGVjaykge1xuICByZXR1cm4gWydwYXJhbScgKyB0aGlzLmluZGV4XTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kNyA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJDkgPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFBFeHByLCBmb3IgdXNlIGFzIGEgVUkgbGFiZWwsIGV0Yy5cbnBleHBycyQ5LlBFeHByLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPSBjb21tb24kNy5hYnN0cmFjdCgndG9EaXNwbGF5U3RyaW5nJyk7XG5cbnBleHBycyQ5LkFsdC5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID0gcGV4cHJzJDkuU2VxLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlLnRyaW1tZWQoKS5jb250ZW50cztcbiAgfVxuICByZXR1cm4gJ1snICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ10nO1xufTtcblxucGV4cHJzJDkuYW55LnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5LmVuZC50b0Rpc3BsYXlTdHJpbmcgPVxuICBwZXhwcnMkOS5JdGVyLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPVxuICBwZXhwcnMkOS5Ob3QucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5Lkxvb2thaGVhZC5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID1cbiAgcGV4cHJzJDkuTGV4LnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPVxuICBwZXhwcnMkOS5UZXJtaW5hbC5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID1cbiAgcGV4cHJzJDkuUmFuZ2UucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9XG4gIHBleHBycyQ5LlBhcmFtLnByb3RvdHlwZS50b0Rpc3BsYXlTdHJpbmcgPVxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgICB9O1xuXG5wZXhwcnMkOS5BcHBseS5wcm90b3R5cGUudG9EaXNwbGF5U3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmFyZ3MubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHBzID0gdGhpcy5hcmdzLm1hcChhcmcgPT4gYXJnLnRvRGlzcGxheVN0cmluZygpKTtcbiAgICByZXR1cm4gdGhpcy5ydWxlTmFtZSArICc8JyArIHBzLmpvaW4oJywnKSArICc+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlTmFtZTtcbiAgfVxufTtcblxucGV4cHJzJDkuVW5pY29kZUNoYXIucHJvdG90eXBlLnRvRGlzcGxheVN0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ1VuaWNvZGUgWycgKyB0aGlzLmNhdGVnb3J5ICsgJ10gY2hhcmFjdGVyJztcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBGYWlsdXJlJDEgPSBGYWlsdXJlXzE7XG5jb25zdCBjb21tb24kNiA9IGNvbW1vbiRsO1xuY29uc3QgcGV4cHJzJDggPSBwZXhwcnNNYWluO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gT3BlcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxucGV4cHJzJDguUEV4cHIucHJvdG90eXBlLnRvRmFpbHVyZSA9IGNvbW1vbiQ2LmFic3RyYWN0KCd0b0ZhaWx1cmUnKTtcblxucGV4cHJzJDguYW55LnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgcmV0dXJuIG5ldyBGYWlsdXJlJDEodGhpcywgJ2FueSBvYmplY3QnLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbnBleHBycyQ4LmVuZC50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsICdlbmQgb2YgaW5wdXQnLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbnBleHBycyQ4LlRlcm1pbmFsLnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIHRoaXMub2JqLCAnc3RyaW5nJyk7XG59O1xuXG5wZXhwcnMkOC5SYW5nZS5wcm90b3R5cGUudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICAvLyBUT0RPOiBjb21lIHVwIHdpdGggc29tZXRoaW5nIGJldHRlclxuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCBKU09OLnN0cmluZ2lmeSh0aGlzLmZyb20pICsgJy4uJyArIEpTT04uc3RyaW5naWZ5KHRoaXMudG8pLCAnY29kZScpO1xufTtcblxucGV4cHJzJDguTm90LnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID1cbiAgICB0aGlzLmV4cHIgPT09IHBleHBycyQ4LmFueSA/ICdub3RoaW5nJyA6ICdub3QgJyArIHRoaXMuZXhwci50b0ZhaWx1cmUoZ3JhbW1hcik7XG4gIHJldHVybiBuZXcgRmFpbHVyZSQxKHRoaXMsIGRlc2NyaXB0aW9uLCAnZGVzY3JpcHRpb24nKTtcbn07XG5cbnBleHBycyQ4Lkxvb2thaGVhZC5wcm90b3R5cGUudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICByZXR1cm4gdGhpcy5leHByLnRvRmFpbHVyZShncmFtbWFyKTtcbn07XG5cbnBleHBycyQ4LkFwcGx5LnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIGxldCB7ZGVzY3JpcHRpb259ID0gZ3JhbW1hci5ydWxlc1t0aGlzLnJ1bGVOYW1lXTtcbiAgaWYgKCFkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IGFydGljbGUgPSAvXlthZWlvdUFFSU9VXS8udGVzdCh0aGlzLnJ1bGVOYW1lKSA/ICdhbicgOiAnYSc7XG4gICAgZGVzY3JpcHRpb24gPSBhcnRpY2xlICsgJyAnICsgdGhpcy5ydWxlTmFtZTtcbiAgfVxuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCBkZXNjcmlwdGlvbiwgJ2Rlc2NyaXB0aW9uJyk7XG59O1xuXG5wZXhwcnMkOC5Vbmljb2RlQ2hhci5wcm90b3R5cGUudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCAnYSBVbmljb2RlIFsnICsgdGhpcy5jYXRlZ29yeSArICddIGNoYXJhY3RlcicsICdkZXNjcmlwdGlvbicpO1xufTtcblxucGV4cHJzJDguQWx0LnByb3RvdHlwZS50b0ZhaWx1cmUgPSBmdW5jdGlvbihncmFtbWFyKSB7XG4gIGNvbnN0IGZzID0gdGhpcy50ZXJtcy5tYXAodCA9PiB0LnRvRmFpbHVyZShncmFtbWFyKSk7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0gJygnICsgZnMuam9pbignIG9yICcpICsgJyknO1xuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCBkZXNjcmlwdGlvbiwgJ2Rlc2NyaXB0aW9uJyk7XG59O1xuXG5wZXhwcnMkOC5TZXEucHJvdG90eXBlLnRvRmFpbHVyZSA9IGZ1bmN0aW9uKGdyYW1tYXIpIHtcbiAgY29uc3QgZnMgPSB0aGlzLmZhY3RvcnMubWFwKGYgPT4gZi50b0ZhaWx1cmUoZ3JhbW1hcikpO1xuICBjb25zdCBkZXNjcmlwdGlvbiA9ICcoJyArIGZzLmpvaW4oJyAnKSArICcpJztcbiAgcmV0dXJuIG5ldyBGYWlsdXJlJDEodGhpcywgZGVzY3JpcHRpb24sICdkZXNjcmlwdGlvbicpO1xufTtcblxucGV4cHJzJDguSXRlci5wcm90b3R5cGUudG9GYWlsdXJlID0gZnVuY3Rpb24oZ3JhbW1hcikge1xuICBjb25zdCBkZXNjcmlwdGlvbiA9ICcoJyArIHRoaXMuZXhwci50b0ZhaWx1cmUoZ3JhbW1hcikgKyB0aGlzLm9wZXJhdG9yICsgJyknO1xuICByZXR1cm4gbmV3IEZhaWx1cmUkMSh0aGlzLCBkZXNjcmlwdGlvbiwgJ2Rlc2NyaXB0aW9uJyk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgY29tbW9uJDUgPSBjb21tb24kbDtcbmNvbnN0IHBleHBycyQ3ID0gcGV4cHJzTWFpbjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE9wZXJhdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qXG4gIGUxLnRvU3RyaW5nKCkgPT09IGUyLnRvU3RyaW5nKCkgPT0+IGUxIGFuZCBlMiBhcmUgc2VtYW50aWNhbGx5IGVxdWl2YWxlbnQuXG4gIE5vdGUgdGhhdCB0aGlzIGlzIG5vdCBhbiBpZmYgKDw9PT4pOiBlLmcuLFxuICAoflwiYlwiIFwiYVwiKS50b1N0cmluZygpICE9PSAoXCJhXCIpLnRvU3RyaW5nKCksIGV2ZW4gdGhvdWdoXG4gIH5cImJcIiBcImFcIiBhbmQgXCJhXCIgYXJlIGludGVyY2hhbmdlYWJsZSBpbiBhbnkgZ3JhbW1hcixcbiAgYm90aCBpbiB0ZXJtcyBvZiB0aGUgbGFuZ3VhZ2VzIHRoZXkgYWNjZXB0IGFuZCB0aGVpciBhcml0aWVzLlxuKi9cbnBleHBycyQ3LlBFeHByLnByb3RvdHlwZS50b1N0cmluZyA9IGNvbW1vbiQ1LmFic3RyYWN0KCd0b1N0cmluZycpO1xuXG5wZXhwcnMkNy5hbnkudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdhbnknO1xufTtcblxucGV4cHJzJDcuZW5kLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnZW5kJztcbn07XG5cbnBleHBycyQ3LlRlcm1pbmFsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5vYmopO1xufTtcblxucGV4cHJzJDcuUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmZyb20pICsgJy4uJyArIEpTT04uc3RyaW5naWZ5KHRoaXMudG8pO1xufTtcblxucGV4cHJzJDcuUGFyYW0ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnJCcgKyB0aGlzLmluZGV4O1xufTtcblxucGV4cHJzJDcuTGV4LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJyMoJyArIHRoaXMuZXhwci50b1N0cmluZygpICsgJyknO1xufTtcblxucGV4cHJzJDcuQWx0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50ZXJtcy5sZW5ndGggPT09IDEgP1xuICAgIHRoaXMudGVybXNbMF0udG9TdHJpbmcoKSA6XG4gICAgJygnICsgdGhpcy50ZXJtcy5tYXAodGVybSA9PiB0ZXJtLnRvU3RyaW5nKCkpLmpvaW4oJyB8ICcpICsgJyknO1xufTtcblxucGV4cHJzJDcuU2VxLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5mYWN0b3JzLmxlbmd0aCA9PT0gMSA/XG4gICAgdGhpcy5mYWN0b3JzWzBdLnRvU3RyaW5nKCkgOlxuICAgICcoJyArIHRoaXMuZmFjdG9ycy5tYXAoZmFjdG9yID0+IGZhY3Rvci50b1N0cmluZygpKS5qb2luKCcgJykgKyAnKSc7XG59O1xuXG5wZXhwcnMkNy5JdGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5leHByICsgdGhpcy5vcGVyYXRvcjtcbn07XG5cbnBleHBycyQ3Lk5vdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICd+JyArIHRoaXMuZXhwcjtcbn07XG5cbnBleHBycyQ3Lkxvb2thaGVhZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICcmJyArIHRoaXMuZXhwcjtcbn07XG5cbnBleHBycyQ3LkFwcGx5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5hcmdzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBwcyA9IHRoaXMuYXJncy5tYXAoYXJnID0+IGFyZy50b1N0cmluZygpKTtcbiAgICByZXR1cm4gdGhpcy5ydWxlTmFtZSArICc8JyArIHBzLmpvaW4oJywnKSArICc+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlTmFtZTtcbiAgfVxufTtcblxucGV4cHJzJDcuVW5pY29kZUNoYXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAnXFxcXHB7JyArIHRoaXMuY2F0ZWdvcnkgKyAnfSc7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmUtZXhwb3J0IGNsYXNzZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBwZXhwcnMkNiA9IHBleHByc01haW47XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBGYWlsdXJlID0gRmFpbHVyZV8xO1xuY29uc3Qge1Rlcm1pbmFsTm9kZX0gPSBub2RlcyQxO1xuY29uc3Qge2Fzc2VydDogYXNzZXJ0JDF9ID0gY29tbW9uJGw7XG5jb25zdCB7UEV4cHIsIFRlcm1pbmFsfSA9IHBleHBycyQ2O1xuXG5jbGFzcyBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbCQxIGV4dGVuZHMgUEV4cHIge1xuICBjb25zdHJ1Y3RvcihwYXJhbSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vYmogPSBwYXJhbTtcbiAgfVxuXG4gIF9nZXRTdHJpbmcoc3RhdGUpIHtcbiAgICBjb25zdCB0ZXJtaW5hbCA9IHN0YXRlLmN1cnJlbnRBcHBsaWNhdGlvbigpLmFyZ3NbdGhpcy5vYmouaW5kZXhdO1xuICAgIGFzc2VydCQxKHRlcm1pbmFsIGluc3RhbmNlb2YgVGVybWluYWwsICdleHBlY3RlZCBhIFRlcm1pbmFsIGV4cHJlc3Npb24nKTtcbiAgICByZXR1cm4gdGVybWluYWwub2JqO1xuICB9XG5cbiAgLy8gSW1wbGVtZW50YXRpb24gb2YgdGhlIFBFeHByIEFQSVxuXG4gIGFsbG93c1NraXBwaW5nUHJlY2VkaW5nU3BhY2UoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBldmFsKHN0YXRlKSB7XG4gICAgY29uc3Qge2lucHV0U3RyZWFtfSA9IHN0YXRlO1xuICAgIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gICAgY29uc3QgbWF0Y2hTdHIgPSB0aGlzLl9nZXRTdHJpbmcoc3RhdGUpO1xuICAgIGlmICghaW5wdXRTdHJlYW0ubWF0Y2hTdHJpbmcobWF0Y2hTdHIsIHRydWUpKSB7XG4gICAgICBzdGF0ZS5wcm9jZXNzRmFpbHVyZShvcmlnUG9zLCB0aGlzKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHVzaEJpbmRpbmcobmV3IFRlcm1pbmFsTm9kZShtYXRjaFN0ci5sZW5ndGgpLCBvcmlnUG9zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGdldEFyaXR5KCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgc3Vic3RpdHV0ZVBhcmFtcyhhY3R1YWxzKSB7XG4gICAgcmV0dXJuIG5ldyBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbCQxKHRoaXMub2JqLnN1YnN0aXR1dGVQYXJhbXMoYWN0dWFscykpO1xuICB9XG5cbiAgdG9EaXNwbGF5U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm9iai50b0Rpc3BsYXlTdHJpbmcoKSArICcgKGNhc2UtaW5zZW5zaXRpdmUpJztcbiAgfVxuXG4gIHRvRmFpbHVyZShncmFtbWFyKSB7XG4gICAgcmV0dXJuIG5ldyBGYWlsdXJlKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLm9iai50b0ZhaWx1cmUoZ3JhbW1hcikgKyAnIChjYXNlLWluc2Vuc2l0aXZlKScsXG4gICAgICAgICdkZXNjcmlwdGlvbidcbiAgICApO1xuICB9XG5cbiAgX2lzTnVsbGFibGUoZ3JhbW1hciwgbWVtbykge1xuICAgIHJldHVybiB0aGlzLm9iai5faXNOdWxsYWJsZShncmFtbWFyLCBtZW1vKTtcbiAgfVxufVxuXG52YXIgQ2FzZUluc2Vuc2l0aXZlVGVybWluYWxfMSA9IENhc2VJbnNlbnNpdGl2ZVRlcm1pbmFsJDE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBJbnRlcnZhbCQxID0gSW50ZXJ2YWxfMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIElucHV0U3RyZWFtJDMoc291cmNlKSB7XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xuICB0aGlzLnBvcyA9IDA7XG4gIHRoaXMuZXhhbWluZWRMZW5ndGggPSAwO1xufVxuXG5JbnB1dFN0cmVhbSQzLnByb3RvdHlwZSA9IHtcbiAgYXRFbmQoKSB7XG4gICAgY29uc3QgYW5zID0gdGhpcy5wb3MgPT09IHRoaXMuc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLmV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgodGhpcy5leGFtaW5lZExlbmd0aCwgdGhpcy5wb3MgKyAxKTtcbiAgICByZXR1cm4gYW5zO1xuICB9LFxuXG4gIG5leHQoKSB7XG4gICAgY29uc3QgYW5zID0gdGhpcy5zb3VyY2VbdGhpcy5wb3MrK107XG4gICAgdGhpcy5leGFtaW5lZExlbmd0aCA9IE1hdGgubWF4KHRoaXMuZXhhbWluZWRMZW5ndGgsIHRoaXMucG9zKTtcbiAgICByZXR1cm4gYW5zO1xuICB9LFxuXG4gIG5leHRDaGFyQ29kZSgpIHtcbiAgICBjb25zdCBuZXh0Q2hhciA9IHRoaXMubmV4dCgpO1xuICAgIHJldHVybiBuZXh0Q2hhciAmJiBuZXh0Q2hhci5jaGFyQ29kZUF0KDApO1xuICB9LFxuXG4gIG5leHRDb2RlUG9pbnQoKSB7XG4gICAgY29uc3QgY3AgPSB0aGlzLnNvdXJjZS5zbGljZSh0aGlzLnBvcysrKS5jb2RlUG9pbnRBdCgwKTtcbiAgICAvLyBJZiB0aGUgY29kZSBwb2ludCBpcyBiZXlvbmQgcGxhbmUgMCwgaXQgdGFrZXMgdXAgdHdvIGNoYXJhY3RlcnMuXG4gICAgaWYgKGNwID4gMHhmZmZmKSB7XG4gICAgICB0aGlzLnBvcyArPSAxO1xuICAgIH1cbiAgICB0aGlzLmV4YW1pbmVkTGVuZ3RoID0gTWF0aC5tYXgodGhpcy5leGFtaW5lZExlbmd0aCwgdGhpcy5wb3MpO1xuICAgIHJldHVybiBjcDtcbiAgfSxcblxuICBtYXRjaFN0cmluZyhzLCBvcHRJZ25vcmVDYXNlKSB7XG4gICAgbGV0IGlkeDtcbiAgICBpZiAob3B0SWdub3JlQ2FzZSkge1xuICAgICAgLypcbiAgICAgICAgQ2FzZS1pbnNlbnNpdGl2ZSBjb21wYXJpc29uIGlzIGEgdHJpY2t5IGJ1c2luZXNzLiBTb21lIG5vdGFibGUgZ290Y2hhcyBpbmNsdWRlIHRoZVxuICAgICAgICBcIlR1cmtpc2ggSVwiIHByb2JsZW0gKGh0dHA6Ly93d3cuaTE4bmd1eS5jb20vdW5pY29kZS90dXJraXNoLWkxOG4uaHRtbCkgYW5kIHRoZSBmYWN0XG4gICAgICAgIHRoYXQgdGhlIEdlcm1hbiBFc3N6ZXQgKMOfKSB0dXJucyBpbnRvIFwiU1NcIiBpbiB1cHBlciBjYXNlLlxuXG4gICAgICAgIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgYSBsb2NhbGUtaW52YXJpYW50IGNvbXBhcmlzb24sIHdoaWNoIG1lYW5zIGl0IG1heSBub3Qgb2JleVxuICAgICAgICBsb2NhbGUtc3BlY2lmaWMgZXhwZWN0YXRpb25zIChlLmcuIFwiaVwiID0+IFwixLBcIikuXG4gICAgICAgKi9cbiAgICAgIGZvciAoaWR4ID0gMDsgaWR4IDwgcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IGFjdHVhbCA9IHRoaXMubmV4dCgpO1xuICAgICAgICBjb25zdCBleHBlY3RlZCA9IHNbaWR4XTtcbiAgICAgICAgaWYgKGFjdHVhbCA9PSBudWxsIHx8IGFjdHVhbC50b1VwcGVyQ2FzZSgpICE9PSBleHBlY3RlZC50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRGVmYXVsdCBpcyBjYXNlLXNlbnNpdGl2ZSBjb21wYXJpc29uLlxuICAgIGZvciAoaWR4ID0gMDsgaWR4IDwgcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICBpZiAodGhpcy5uZXh0KCkgIT09IHNbaWR4XSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHNvdXJjZVNsaWNlKHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2Uuc2xpY2Uoc3RhcnRJZHgsIGVuZElkeCk7XG4gIH0sXG5cbiAgaW50ZXJ2YWwoc3RhcnRJZHgsIG9wdEVuZElkeCkge1xuICAgIHJldHVybiBuZXcgSW50ZXJ2YWwkMSh0aGlzLnNvdXJjZSwgc3RhcnRJZHgsIG9wdEVuZElkeCA/IG9wdEVuZElkeCA6IHRoaXMucG9zKTtcbiAgfSxcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgSW5wdXRTdHJlYW1fMSA9IElucHV0U3RyZWFtJDM7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBjb21tb24kNCA9IGNvbW1vbiRsO1xuY29uc3QgdXRpbCQ0ID0gdXRpbCQ3O1xuY29uc3QgSW50ZXJ2YWwgPSBJbnRlcnZhbF8xO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gTWF0Y2hSZXN1bHQkMihcbiAgICBtYXRjaGVyLFxuICAgIGlucHV0LFxuICAgIHN0YXJ0RXhwcixcbiAgICBjc3QsXG4gICAgY3N0T2Zmc2V0LFxuICAgIHJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbixcbiAgICBvcHRSZWNvcmRlZEZhaWx1cmVzXG4pIHtcbiAgdGhpcy5tYXRjaGVyID0gbWF0Y2hlcjtcbiAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICB0aGlzLnN0YXJ0RXhwciA9IHN0YXJ0RXhwcjtcbiAgdGhpcy5fY3N0ID0gY3N0O1xuICB0aGlzLl9jc3RPZmZzZXQgPSBjc3RPZmZzZXQ7XG4gIHRoaXMuX3JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IHJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbjtcbiAgdGhpcy5fcmlnaHRtb3N0RmFpbHVyZXMgPSBvcHRSZWNvcmRlZEZhaWx1cmVzO1xuXG4gIGlmICh0aGlzLmZhaWxlZCgpKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8taW52YWxpZC10aGlzICovXG4gICAgY29tbW9uJDQuZGVmaW5lTGF6eVByb3BlcnR5KHRoaXMsICdtZXNzYWdlJywgZnVuY3Rpb24oKSB7XG4gICAgICBjb25zdCBkZXRhaWwgPSAnRXhwZWN0ZWQgJyArIHRoaXMuZ2V0RXhwZWN0ZWRUZXh0KCk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB1dGlsJDQuZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UodGhpcy5pbnB1dCwgdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlUG9zaXRpb24oKSkgKyBkZXRhaWxcbiAgICAgICk7XG4gICAgfSk7XG4gICAgY29tbW9uJDQuZGVmaW5lTGF6eVByb3BlcnR5KHRoaXMsICdzaG9ydE1lc3NhZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnN0IGRldGFpbCA9ICdleHBlY3RlZCAnICsgdGhpcy5nZXRFeHBlY3RlZFRleHQoKTtcbiAgICAgIGNvbnN0IGVycm9ySW5mbyA9IHV0aWwkNC5nZXRMaW5lQW5kQ29sdW1uKHRoaXMuaW5wdXQsIHRoaXMuZ2V0UmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKCkpO1xuICAgICAgcmV0dXJuICdMaW5lICcgKyBlcnJvckluZm8ubGluZU51bSArICcsIGNvbCAnICsgZXJyb3JJbmZvLmNvbE51bSArICc6ICcgKyBkZXRhaWw7XG4gICAgfSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cbiAgfVxufVxuXG5NYXRjaFJlc3VsdCQyLnByb3RvdHlwZS5zdWNjZWVkZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhdGhpcy5fY3N0O1xufTtcblxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUuZmFpbGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5zdWNjZWVkZWQoKTtcbn07XG5cbk1hdGNoUmVzdWx0JDIucHJvdG90eXBlLmdldFJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uO1xufTtcblxuTWF0Y2hSZXN1bHQkMi5wcm90b3R5cGUuZ2V0UmlnaHRtb3N0RmFpbHVyZXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLl9yaWdodG1vc3RGYWlsdXJlcykge1xuICAgIHRoaXMubWF0Y2hlci5zZXRJbnB1dCh0aGlzLmlucHV0KTtcbiAgICBjb25zdCBtYXRjaFJlc3VsdFdpdGhGYWlsdXJlcyA9IHRoaXMubWF0Y2hlci5fbWF0Y2goXG4gICAgICAgIHRoaXMuc3RhcnRFeHByLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlUG9zaXRpb24oKVxuICAgICk7XG4gICAgdGhpcy5fcmlnaHRtb3N0RmFpbHVyZXMgPSBtYXRjaFJlc3VsdFdpdGhGYWlsdXJlcy5nZXRSaWdodG1vc3RGYWlsdXJlcygpO1xuICB9XG4gIHJldHVybiB0aGlzLl9yaWdodG1vc3RGYWlsdXJlcztcbn07XG5cbk1hdGNoUmVzdWx0JDIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN1Y2NlZWRlZCgpID9cbiAgICAnW21hdGNoIHN1Y2NlZWRlZF0nIDpcbiAgICAnW21hdGNoIGZhaWxlZCBhdCBwb3NpdGlvbiAnICsgdGhpcy5nZXRSaWdodG1vc3RGYWlsdXJlUG9zaXRpb24oKSArICddJztcbn07XG5cbi8vIFJldHVybiBhIHN0cmluZyBzdW1tYXJpemluZyB0aGUgZXhwZWN0ZWQgY29udGVudHMgb2YgdGhlIGlucHV0IHN0cmVhbSB3aGVuXG4vLyB0aGUgbWF0Y2ggZmFpbHVyZSBvY2N1cnJlZC5cbk1hdGNoUmVzdWx0JDIucHJvdG90eXBlLmdldEV4cGVjdGVkVGV4dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zdWNjZWVkZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGdldCBleHBlY3RlZCB0ZXh0IG9mIGEgc3VjY2Vzc2Z1bCBNYXRjaFJlc3VsdCcpO1xuICB9XG5cbiAgY29uc3Qgc2IgPSBuZXcgY29tbW9uJDQuU3RyaW5nQnVmZmVyKCk7XG4gIGxldCBmYWlsdXJlcyA9IHRoaXMuZ2V0UmlnaHRtb3N0RmFpbHVyZXMoKTtcblxuICAvLyBGaWx0ZXIgb3V0IHRoZSBmbHVmZnkgZmFpbHVyZXMgdG8gbWFrZSB0aGUgZGVmYXVsdCBlcnJvciBtZXNzYWdlcyBtb3JlIHVzZWZ1bFxuICBmYWlsdXJlcyA9IGZhaWx1cmVzLmZpbHRlcihmYWlsdXJlID0+ICFmYWlsdXJlLmlzRmx1ZmZ5KCkpO1xuXG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGZhaWx1cmVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICBpZiAoaWR4ID4gMCkge1xuICAgICAgaWYgKGlkeCA9PT0gZmFpbHVyZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICBzYi5hcHBlbmQoZmFpbHVyZXMubGVuZ3RoID4gMiA/ICcsIG9yICcgOiAnIG9yICcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2IuYXBwZW5kKCcsICcpO1xuICAgICAgfVxuICAgIH1cbiAgICBzYi5hcHBlbmQoZmFpbHVyZXNbaWR4XS50b1N0cmluZygpKTtcbiAgfVxuICByZXR1cm4gc2IuY29udGVudHMoKTtcbn07XG5cbk1hdGNoUmVzdWx0JDIucHJvdG90eXBlLmdldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHBvcyA9IHRoaXMuZ2V0UmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uKCk7XG4gIHJldHVybiBuZXcgSW50ZXJ2YWwodGhpcy5pbnB1dCwgcG9zLCBwb3MpO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBNYXRjaFJlc3VsdF8xID0gTWF0Y2hSZXN1bHQkMjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIFBvc0luZm8kMSgpIHtcbiAgdGhpcy5hcHBsaWNhdGlvbk1lbW9LZXlTdGFjayA9IFtdOyAvLyBhY3RpdmUgYXBwbGljYXRpb25zIGF0IHRoaXMgcG9zaXRpb25cbiAgdGhpcy5tZW1vID0ge307XG4gIHRoaXMubWF4RXhhbWluZWRMZW5ndGggPSAwO1xuICB0aGlzLm1heFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQgPSAtMTtcbiAgdGhpcy5jdXJyZW50TGVmdFJlY3Vyc2lvbiA9IHVuZGVmaW5lZDtcbn1cblxuUG9zSW5mbyQxLnByb3RvdHlwZSA9IHtcbiAgaXNBY3RpdmUoYXBwbGljYXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5hcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5pbmRleE9mKGFwcGxpY2F0aW9uLnRvTWVtb0tleSgpKSA+PSAwO1xuICB9LFxuXG4gIGVudGVyKGFwcGxpY2F0aW9uKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5wdXNoKGFwcGxpY2F0aW9uLnRvTWVtb0tleSgpKTtcbiAgfSxcblxuICBleGl0KCkge1xuICAgIHRoaXMuYXBwbGljYXRpb25NZW1vS2V5U3RhY2sucG9wKCk7XG4gIH0sXG5cbiAgc3RhcnRMZWZ0UmVjdXJzaW9uKGhlYWRBcHBsaWNhdGlvbiwgbWVtb1JlYykge1xuICAgIG1lbW9SZWMuaXNMZWZ0UmVjdXJzaW9uID0gdHJ1ZTtcbiAgICBtZW1vUmVjLmhlYWRBcHBsaWNhdGlvbiA9IGhlYWRBcHBsaWNhdGlvbjtcbiAgICBtZW1vUmVjLm5leHRMZWZ0UmVjdXJzaW9uID0gdGhpcy5jdXJyZW50TGVmdFJlY3Vyc2lvbjtcbiAgICB0aGlzLmN1cnJlbnRMZWZ0UmVjdXJzaW9uID0gbWVtb1JlYztcblxuICAgIGNvbnN0IHthcHBsaWNhdGlvbk1lbW9LZXlTdGFja30gPSB0aGlzO1xuICAgIGNvbnN0IGluZGV4T2ZGaXJzdEludm9sdmVkUnVsZSA9XG4gICAgICBhcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5pbmRleE9mKGhlYWRBcHBsaWNhdGlvbi50b01lbW9LZXkoKSkgKyAxO1xuICAgIGNvbnN0IGludm9sdmVkQXBwbGljYXRpb25NZW1vS2V5cyA9IGFwcGxpY2F0aW9uTWVtb0tleVN0YWNrLnNsaWNlKFxuICAgICAgICBpbmRleE9mRmlyc3RJbnZvbHZlZFJ1bGVcbiAgICApO1xuXG4gICAgbWVtb1JlYy5pc0ludm9sdmVkID0gZnVuY3Rpb24oYXBwbGljYXRpb25NZW1vS2V5KSB7XG4gICAgICByZXR1cm4gaW52b2x2ZWRBcHBsaWNhdGlvbk1lbW9LZXlzLmluZGV4T2YoYXBwbGljYXRpb25NZW1vS2V5KSA+PSAwO1xuICAgIH07XG5cbiAgICBtZW1vUmVjLnVwZGF0ZUludm9sdmVkQXBwbGljYXRpb25NZW1vS2V5cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yIChsZXQgaWR4ID0gaW5kZXhPZkZpcnN0SW52b2x2ZWRSdWxlOyBpZHggPCBhcHBsaWNhdGlvbk1lbW9LZXlTdGFjay5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IGFwcGxpY2F0aW9uTWVtb0tleSA9IGFwcGxpY2F0aW9uTWVtb0tleVN0YWNrW2lkeF07XG4gICAgICAgIGlmICghdGhpcy5pc0ludm9sdmVkKGFwcGxpY2F0aW9uTWVtb0tleSkpIHtcbiAgICAgICAgICBpbnZvbHZlZEFwcGxpY2F0aW9uTWVtb0tleXMucHVzaChhcHBsaWNhdGlvbk1lbW9LZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSxcblxuICBlbmRMZWZ0UmVjdXJzaW9uKCkge1xuICAgIHRoaXMuY3VycmVudExlZnRSZWN1cnNpb24gPSB0aGlzLmN1cnJlbnRMZWZ0UmVjdXJzaW9uLm5leHRMZWZ0UmVjdXJzaW9uO1xuICB9LFxuXG4gIC8vIE5vdGU6IHRoaXMgbWV0aG9kIGRvZXNuJ3QgZ2V0IGNhbGxlZCBmb3IgdGhlIFwiaGVhZFwiIG9mIGEgbGVmdCByZWN1cnNpb24gLS0gZm9yIExSIGhlYWRzLFxuICAvLyB0aGUgbWVtb2l6ZWQgcmVzdWx0ICh3aGljaCBzdGFydHMgb3V0IGJlaW5nIGEgZmFpbHVyZSkgaXMgYWx3YXlzIHVzZWQuXG4gIHNob3VsZFVzZU1lbW9pemVkUmVzdWx0KG1lbW9SZWMpIHtcbiAgICBpZiAoIW1lbW9SZWMuaXNMZWZ0UmVjdXJzaW9uKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qge2FwcGxpY2F0aW9uTWVtb0tleVN0YWNrfSA9IHRoaXM7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXBwbGljYXRpb25NZW1vS2V5U3RhY2subGVuZ3RoOyBpZHgrKykge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25NZW1vS2V5ID0gYXBwbGljYXRpb25NZW1vS2V5U3RhY2tbaWR4XTtcbiAgICAgIGlmIChtZW1vUmVjLmlzSW52b2x2ZWQoYXBwbGljYXRpb25NZW1vS2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIG1lbW9pemUobWVtb0tleSwgbWVtb1JlYykge1xuICAgIHRoaXMubWVtb1ttZW1vS2V5XSA9IG1lbW9SZWM7XG4gICAgdGhpcy5tYXhFeGFtaW5lZExlbmd0aCA9IE1hdGgubWF4KHRoaXMubWF4RXhhbWluZWRMZW5ndGgsIG1lbW9SZWMuZXhhbWluZWRMZW5ndGgpO1xuICAgIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCA9IE1hdGgubWF4KFxuICAgICAgICB0aGlzLm1heFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQsXG4gICAgICAgIG1lbW9SZWMucmlnaHRtb3N0RmFpbHVyZU9mZnNldFxuICAgICk7XG4gICAgcmV0dXJuIG1lbW9SZWM7XG4gIH0sXG5cbiAgY2xlYXJPYnNvbGV0ZUVudHJpZXMocG9zLCBpbnZhbGlkYXRlZElkeCkge1xuICAgIGlmIChwb3MgKyB0aGlzLm1heEV4YW1pbmVkTGVuZ3RoIDw9IGludmFsaWRhdGVkSWR4KSB7XG4gICAgICAvLyBPcHRpbWl6YXRpb246IG5vbmUgb2YgdGhlIHJ1bGUgYXBwbGljYXRpb25zIHRoYXQgd2VyZSBtZW1vaXplZCBoZXJlIGV4YW1pbmVkIHRoZVxuICAgICAgLy8gaW50ZXJ2YWwgb2YgdGhlIGlucHV0IHRoYXQgY2hhbmdlZCwgc28gbm90aGluZyBoYXMgdG8gYmUgaW52YWxpZGF0ZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge21lbW99ID0gdGhpcztcbiAgICB0aGlzLm1heEV4YW1pbmVkTGVuZ3RoID0gMDtcbiAgICB0aGlzLm1heFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQgPSAtMTtcbiAgICBPYmplY3Qua2V5cyhtZW1vKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgY29uc3QgbWVtb1JlYyA9IG1lbW9ba107XG4gICAgICBpZiAocG9zICsgbWVtb1JlYy5leGFtaW5lZExlbmd0aCA+IGludmFsaWRhdGVkSWR4KSB7XG4gICAgICAgIGRlbGV0ZSBtZW1vW2tdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tYXhFeGFtaW5lZExlbmd0aCA9IE1hdGgubWF4KHRoaXMubWF4RXhhbWluZWRMZW5ndGgsIG1lbW9SZWMuZXhhbWluZWRMZW5ndGgpO1xuICAgICAgICB0aGlzLm1heFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQgPSBNYXRoLm1heChcbiAgICAgICAgICAgIHRoaXMubWF4UmlnaHRtb3N0RmFpbHVyZU9mZnNldCxcbiAgICAgICAgICAgIG1lbW9SZWMucmlnaHRtb3N0RmFpbHVyZU9mZnNldFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBQb3NJbmZvXzEgPSBQb3NJbmZvJDE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBJbnB1dFN0cmVhbSQyID0gSW5wdXRTdHJlYW1fMTtcbmNvbnN0IE1hdGNoUmVzdWx0JDEgPSBNYXRjaFJlc3VsdF8xO1xuY29uc3QgUG9zSW5mbyA9IFBvc0luZm9fMTtcbmNvbnN0IFRyYWNlID0gVHJhY2VfMTtcbmNvbnN0IHBleHBycyQ1ID0gcGV4cHJzJDY7XG5jb25zdCB1dGlsJDMgPSB1dGlsJDc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5sZXQgYnVpbHRJbkFwcGx5U3ludGFjdGljQm9keTtcblxudXRpbCQzLmF3YWl0QnVpbHRJblJ1bGVzKGJ1aWx0SW5SdWxlcyA9PiB7XG4gIGJ1aWx0SW5BcHBseVN5bnRhY3RpY0JvZHkgPSBidWlsdEluUnVsZXMucnVsZXMuYXBwbHlTeW50YWN0aWMuYm9keTtcbn0pO1xuXG5jb25zdCBhcHBseVNwYWNlcyA9IG5ldyBwZXhwcnMkNS5BcHBseSgnc3BhY2VzJyk7XG5cbmZ1bmN0aW9uIE1hdGNoU3RhdGUkMShtYXRjaGVyLCBzdGFydEV4cHIsIG9wdFBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcykge1xuICB0aGlzLm1hdGNoZXIgPSBtYXRjaGVyO1xuICB0aGlzLnN0YXJ0RXhwciA9IHN0YXJ0RXhwcjtcblxuICB0aGlzLmdyYW1tYXIgPSBtYXRjaGVyLmdyYW1tYXI7XG4gIHRoaXMuaW5wdXQgPSBtYXRjaGVyLmlucHV0O1xuICB0aGlzLmlucHV0U3RyZWFtID0gbmV3IElucHV0U3RyZWFtJDIobWF0Y2hlci5pbnB1dCk7XG4gIHRoaXMubWVtb1RhYmxlID0gbWF0Y2hlci5tZW1vVGFibGU7XG5cbiAgdGhpcy5fYmluZGluZ3MgPSBbXTtcbiAgdGhpcy5fYmluZGluZ09mZnNldHMgPSBbXTtcbiAgdGhpcy5fYXBwbGljYXRpb25TdGFjayA9IFtdO1xuICB0aGlzLl9wb3NTdGFjayA9IFswXTtcbiAgdGhpcy5pbkxleGlmaWVkQ29udGV4dFN0YWNrID0gW2ZhbHNlXTtcblxuICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IC0xO1xuICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb25TdGFjayA9IFtdO1xuICB0aGlzLl9yZWNvcmRlZEZhaWx1cmVzU3RhY2sgPSBbXTtcblxuICBpZiAob3B0UG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLnBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcyA9IG9wdFBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcztcbiAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG59XG5cbk1hdGNoU3RhdGUkMS5wcm90b3R5cGUgPSB7XG4gIHBvc1RvT2Zmc2V0KHBvcykge1xuICAgIHJldHVybiBwb3MgLSB0aGlzLl9wb3NTdGFja1t0aGlzLl9wb3NTdGFjay5sZW5ndGggLSAxXTtcbiAgfSxcblxuICBlbnRlckFwcGxpY2F0aW9uKHBvc0luZm8sIGFwcCkge1xuICAgIHRoaXMuX3Bvc1N0YWNrLnB1c2godGhpcy5pbnB1dFN0cmVhbS5wb3MpO1xuICAgIHRoaXMuX2FwcGxpY2F0aW9uU3RhY2sucHVzaChhcHApO1xuICAgIHRoaXMuaW5MZXhpZmllZENvbnRleHRTdGFjay5wdXNoKGZhbHNlKTtcbiAgICBwb3NJbmZvLmVudGVyKGFwcCk7XG4gICAgdGhpcy5fcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uU3RhY2sucHVzaCh0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbik7XG4gICAgdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24gPSAtMTtcbiAgfSxcblxuICBleGl0QXBwbGljYXRpb24ocG9zSW5mbywgb3B0Tm9kZSkge1xuICAgIGNvbnN0IG9yaWdQb3MgPSB0aGlzLl9wb3NTdGFjay5wb3AoKTtcbiAgICB0aGlzLl9hcHBsaWNhdGlvblN0YWNrLnBvcCgpO1xuICAgIHRoaXMuaW5MZXhpZmllZENvbnRleHRTdGFjay5wb3AoKTtcbiAgICBwb3NJbmZvLmV4aXQoKTtcblxuICAgIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID0gTWF0aC5tYXgoXG4gICAgICAgIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uLFxuICAgICAgICB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb25TdGFjay5wb3AoKVxuICAgICk7XG5cbiAgICBpZiAob3B0Tm9kZSkge1xuICAgICAgdGhpcy5wdXNoQmluZGluZyhvcHROb2RlLCBvcmlnUG9zKTtcbiAgICB9XG4gIH0sXG5cbiAgZW50ZXJMZXhpZmllZENvbnRleHQoKSB7XG4gICAgdGhpcy5pbkxleGlmaWVkQ29udGV4dFN0YWNrLnB1c2godHJ1ZSk7XG4gIH0sXG5cbiAgZXhpdExleGlmaWVkQ29udGV4dCgpIHtcbiAgICB0aGlzLmluTGV4aWZpZWRDb250ZXh0U3RhY2sucG9wKCk7XG4gIH0sXG5cbiAgY3VycmVudEFwcGxpY2F0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9hcHBsaWNhdGlvblN0YWNrW3RoaXMuX2FwcGxpY2F0aW9uU3RhY2subGVuZ3RoIC0gMV07XG4gIH0sXG5cbiAgaW5TeW50YWN0aWNDb250ZXh0KCkge1xuICAgIGNvbnN0IGN1cnJlbnRBcHBsaWNhdGlvbiA9IHRoaXMuY3VycmVudEFwcGxpY2F0aW9uKCk7XG4gICAgaWYgKGN1cnJlbnRBcHBsaWNhdGlvbikge1xuICAgICAgcmV0dXJuIGN1cnJlbnRBcHBsaWNhdGlvbi5pc1N5bnRhY3RpYygpICYmICF0aGlzLmluTGV4aWZpZWRDb250ZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSB0b3AtbGV2ZWwgY29udGV4dCBpcyBzeW50YWN0aWMgaWYgdGhlIHN0YXJ0IGFwcGxpY2F0aW9uIGlzLlxuICAgICAgcmV0dXJuIHRoaXMuc3RhcnRFeHByLmZhY3RvcnNbMF0uaXNTeW50YWN0aWMoKTtcbiAgICB9XG4gIH0sXG5cbiAgaW5MZXhpZmllZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5MZXhpZmllZENvbnRleHRTdGFja1t0aGlzLmluTGV4aWZpZWRDb250ZXh0U3RhY2subGVuZ3RoIC0gMV07XG4gIH0sXG5cbiAgc2tpcFNwYWNlcygpIHtcbiAgICB0aGlzLnB1c2hGYWlsdXJlc0luZm8oKTtcbiAgICB0aGlzLmV2YWwoYXBwbHlTcGFjZXMpO1xuICAgIHRoaXMucG9wQmluZGluZygpO1xuICAgIHRoaXMucG9wRmFpbHVyZXNJbmZvKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRTdHJlYW0ucG9zO1xuICB9LFxuXG4gIHNraXBTcGFjZXNJZkluU3ludGFjdGljQ29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pblN5bnRhY3RpY0NvbnRleHQoKSA/IHRoaXMuc2tpcFNwYWNlcygpIDogdGhpcy5pbnB1dFN0cmVhbS5wb3M7XG4gIH0sXG5cbiAgbWF5YmVTa2lwU3BhY2VzQmVmb3JlKGV4cHIpIHtcbiAgICBpZiAoZXhwci5hbGxvd3NTa2lwcGluZ1ByZWNlZGluZ1NwYWNlKCkgJiYgZXhwciAhPT0gYXBwbHlTcGFjZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNraXBTcGFjZXNJZkluU3ludGFjdGljQ29udGV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnB1dFN0cmVhbS5wb3M7XG4gICAgfVxuICB9LFxuXG4gIHB1c2hCaW5kaW5nKG5vZGUsIG9yaWdQb3MpIHtcbiAgICB0aGlzLl9iaW5kaW5ncy5wdXNoKG5vZGUpO1xuICAgIHRoaXMuX2JpbmRpbmdPZmZzZXRzLnB1c2godGhpcy5wb3NUb09mZnNldChvcmlnUG9zKSk7XG4gIH0sXG5cbiAgcG9wQmluZGluZygpIHtcbiAgICB0aGlzLl9iaW5kaW5ncy5wb3AoKTtcbiAgICB0aGlzLl9iaW5kaW5nT2Zmc2V0cy5wb3AoKTtcbiAgfSxcblxuICBudW1CaW5kaW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmluZGluZ3MubGVuZ3RoO1xuICB9LFxuXG4gIHRydW5jYXRlQmluZGluZ3MobmV3TGVuZ3RoKSB7XG4gICAgLy8gWWVzLCB0aGlzIGlzIHRoaXMgcmVhbGx5IGZhc3RlciB0aGFuIHNldHRpbmcgdGhlIGBsZW5ndGhgIHByb3BlcnR5ICh0ZXN0ZWQgd2l0aFxuICAgIC8vIGJpbi9lczViZW5jaCBvbiBOb2RlIHY2LjEuMCkuXG4gICAgLy8gVXBkYXRlIDIwMjEtMTAtMjU6IHN0aWxsIHRydWUgb24gdjE0LjE1LjUg4oCUIGl0J3MgfjIwJSBzcGVlZHVwIG9uIGVzNWJlbmNoLlxuICAgIHdoaWxlICh0aGlzLl9iaW5kaW5ncy5sZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgIHRoaXMucG9wQmluZGluZygpO1xuICAgIH1cbiAgfSxcblxuICBnZXRDdXJyZW50UG9zSW5mbygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb3NJbmZvKHRoaXMuaW5wdXRTdHJlYW0ucG9zKTtcbiAgfSxcblxuICBnZXRQb3NJbmZvKHBvcykge1xuICAgIGxldCBwb3NJbmZvID0gdGhpcy5tZW1vVGFibGVbcG9zXTtcbiAgICBpZiAoIXBvc0luZm8pIHtcbiAgICAgIHBvc0luZm8gPSB0aGlzLm1lbW9UYWJsZVtwb3NdID0gbmV3IFBvc0luZm8oKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvc0luZm87XG4gIH0sXG5cbiAgcHJvY2Vzc0ZhaWx1cmUocG9zLCBleHByKSB7XG4gICAgdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24gPSBNYXRoLm1heCh0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiwgcG9zKTtcblxuICAgIGlmICh0aGlzLnJlY29yZGVkRmFpbHVyZXMgJiYgcG9zID09PSB0aGlzLnBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcykge1xuICAgICAgY29uc3QgYXBwID0gdGhpcy5jdXJyZW50QXBwbGljYXRpb24oKTtcbiAgICAgIGlmIChhcHApIHtcbiAgICAgICAgLy8gU3Vic3RpdHV0ZSBwYXJhbWV0ZXJzIHdpdGggdGhlIGFjdHVhbCBwZXhwcnMgdGhhdCB3ZXJlIHBhc3NlZCB0b1xuICAgICAgICAvLyB0aGUgY3VycmVudCBydWxlLlxuICAgICAgICBleHByID0gZXhwci5zdWJzdGl0dXRlUGFyYW1zKGFwcC5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWNvcmRGYWlsdXJlKGV4cHIudG9GYWlsdXJlKHRoaXMuZ3JhbW1hciksIGZhbHNlKTtcbiAgICB9XG4gIH0sXG5cbiAgcmVjb3JkRmFpbHVyZShmYWlsdXJlLCBzaG91bGRDbG9uZUlmTmV3KSB7XG4gICAgY29uc3Qga2V5ID0gZmFpbHVyZS50b0tleSgpO1xuICAgIGlmICghdGhpcy5yZWNvcmRlZEZhaWx1cmVzW2tleV0pIHtcbiAgICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlc1trZXldID0gc2hvdWxkQ2xvbmVJZk5ldyA/IGZhaWx1cmUuY2xvbmUoKSA6IGZhaWx1cmU7XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlY29yZGVkRmFpbHVyZXNba2V5XS5pc0ZsdWZmeSgpICYmICFmYWlsdXJlLmlzRmx1ZmZ5KCkpIHtcbiAgICAgIHRoaXMucmVjb3JkZWRGYWlsdXJlc1trZXldLmNsZWFyRmx1ZmZ5KCk7XG4gICAgfVxuICB9LFxuXG4gIHJlY29yZEZhaWx1cmVzKGZhaWx1cmVzLCBzaG91bGRDbG9uZUlmTmV3KSB7XG4gICAgT2JqZWN0LmtleXMoZmFpbHVyZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHRoaXMucmVjb3JkRmFpbHVyZShmYWlsdXJlc1trZXldLCBzaG91bGRDbG9uZUlmTmV3KTtcbiAgICB9KTtcbiAgfSxcblxuICBjbG9uZVJlY29yZGVkRmFpbHVyZXMoKSB7XG4gICAgaWYgKCF0aGlzLnJlY29yZGVkRmFpbHVyZXMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgYW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnJlY29yZGVkRmFpbHVyZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGFuc1trZXldID0gdGhpcy5yZWNvcmRlZEZhaWx1cmVzW2tleV0uY2xvbmUoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYW5zO1xuICB9LFxuXG4gIGdldFJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb247XG4gIH0sXG5cbiAgX2dldFJpZ2h0bW9zdEZhaWx1cmVPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uID49IDAgP1xuICAgICAgdGhpcy5wb3NUb09mZnNldCh0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbikgOlxuICAgICAgLTE7XG4gIH0sXG5cbiAgLy8gUmV0dXJucyB0aGUgbWVtb2l6ZWQgdHJhY2UgZW50cnkgZm9yIGBleHByYCBhdCBgcG9zYCwgaWYgb25lIGV4aXN0cywgYG51bGxgIG90aGVyd2lzZS5cbiAgZ2V0TWVtb2l6ZWRUcmFjZUVudHJ5KHBvcywgZXhwcikge1xuICAgIGNvbnN0IHBvc0luZm8gPSB0aGlzLm1lbW9UYWJsZVtwb3NdO1xuICAgIGlmIChwb3NJbmZvICYmIGV4cHIgaW5zdGFuY2VvZiBwZXhwcnMkNS5BcHBseSkge1xuICAgICAgY29uc3QgbWVtb1JlYyA9IHBvc0luZm8ubWVtb1tleHByLnRvTWVtb0tleSgpXTtcbiAgICAgIGlmIChtZW1vUmVjICYmIG1lbW9SZWMudHJhY2VFbnRyeSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IG1lbW9SZWMudHJhY2VFbnRyeS5jbG9uZVdpdGhFeHByKGV4cHIpO1xuICAgICAgICBlbnRyeS5pc01lbW9pemVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvLyBSZXR1cm5zIGEgbmV3IHRyYWNlIGVudHJ5LCB3aXRoIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRyYWNlIGFycmF5IGFzIGl0cyBjaGlsZHJlbi5cbiAgZ2V0VHJhY2VFbnRyeShwb3MsIGV4cHIsIHN1Y2NlZWRlZCwgYmluZGluZ3MpIHtcbiAgICBpZiAoZXhwciBpbnN0YW5jZW9mIHBleHBycyQ1LkFwcGx5KSB7XG4gICAgICBjb25zdCBhcHAgPSB0aGlzLmN1cnJlbnRBcHBsaWNhdGlvbigpO1xuICAgICAgY29uc3QgYWN0dWFscyA9IGFwcCA/IGFwcC5hcmdzIDogW107XG4gICAgICBleHByID0gZXhwci5zdWJzdGl0dXRlUGFyYW1zKGFjdHVhbHMpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5nZXRNZW1vaXplZFRyYWNlRW50cnkocG9zLCBleHByKSB8fFxuICAgICAgbmV3IFRyYWNlKHRoaXMuaW5wdXQsIHBvcywgdGhpcy5pbnB1dFN0cmVhbS5wb3MsIGV4cHIsIHN1Y2NlZWRlZCwgYmluZGluZ3MsIHRoaXMudHJhY2UpXG4gICAgKTtcbiAgfSxcblxuICBpc1RyYWNpbmcoKSB7XG4gICAgcmV0dXJuICEhdGhpcy50cmFjZTtcbiAgfSxcblxuICBoYXNOZWNlc3NhcnlJbmZvKG1lbW9SZWMpIHtcbiAgICBpZiAodGhpcy50cmFjZSAmJiAhbWVtb1JlYy50cmFjZUVudHJ5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5yZWNvcmRlZEZhaWx1cmVzICYmXG4gICAgICB0aGlzLmlucHV0U3RyZWFtLnBvcyArIG1lbW9SZWMucmlnaHRtb3N0RmFpbHVyZU9mZnNldCA9PT0gdGhpcy5wb3NpdGlvblRvUmVjb3JkRmFpbHVyZXNcbiAgICApIHtcbiAgICAgIHJldHVybiAhIW1lbW9SZWMuZmFpbHVyZXNBdFJpZ2h0bW9zdFBvc2l0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIHVzZU1lbW9pemVkUmVzdWx0KG9yaWdQb3MsIG1lbW9SZWMpIHtcbiAgICBpZiAodGhpcy50cmFjZSkge1xuICAgICAgdGhpcy50cmFjZS5wdXNoKG1lbW9SZWMudHJhY2VFbnRyeSk7XG4gICAgfVxuXG4gICAgY29uc3QgbWVtb1JlY1JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9XG4gICAgICB0aGlzLmlucHV0U3RyZWFtLnBvcyArIG1lbW9SZWMucmlnaHRtb3N0RmFpbHVyZU9mZnNldDtcbiAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiA9IE1hdGgubWF4KFxuICAgICAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbixcbiAgICAgICAgbWVtb1JlY1JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvblxuICAgICk7XG4gICAgaWYgKFxuICAgICAgdGhpcy5yZWNvcmRlZEZhaWx1cmVzICYmXG4gICAgICB0aGlzLnBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcyA9PT0gbWVtb1JlY1JpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbiAmJlxuICAgICAgbWVtb1JlYy5mYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb25cbiAgICApIHtcbiAgICAgIHRoaXMucmVjb3JkRmFpbHVyZXMobWVtb1JlYy5mYWlsdXJlc0F0UmlnaHRtb3N0UG9zaXRpb24sIHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuaW5wdXRTdHJlYW0uZXhhbWluZWRMZW5ndGggPSBNYXRoLm1heChcbiAgICAgICAgdGhpcy5pbnB1dFN0cmVhbS5leGFtaW5lZExlbmd0aCxcbiAgICAgICAgbWVtb1JlYy5leGFtaW5lZExlbmd0aCArIG9yaWdQb3NcbiAgICApO1xuXG4gICAgaWYgKG1lbW9SZWMudmFsdWUpIHtcbiAgICAgIHRoaXMuaW5wdXRTdHJlYW0ucG9zICs9IG1lbW9SZWMubWF0Y2hMZW5ndGg7XG4gICAgICB0aGlzLnB1c2hCaW5kaW5nKG1lbW9SZWMudmFsdWUsIG9yaWdQb3MpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvLyBFdmFsdWF0ZSBgZXhwcmAgYW5kIHJldHVybiBgdHJ1ZWAgaWYgaXQgc3VjY2VlZGVkLCBgZmFsc2VgIG90aGVyd2lzZS4gT24gc3VjY2VzcywgYGJpbmRpbmdzYFxuICAvLyB3aWxsIGhhdmUgYGV4cHIuZ2V0QXJpdHkoKWAgbW9yZSBlbGVtZW50cyB0aGFuIGJlZm9yZSwgYW5kIHRoZSBpbnB1dCBzdHJlYW0ncyBwb3NpdGlvbiBtYXlcbiAgLy8gaGF2ZSBpbmNyZWFzZWQuIE9uIGZhaWx1cmUsIGBiaW5kaW5nc2AgYW5kIHBvc2l0aW9uIHdpbGwgYmUgdW5jaGFuZ2VkLlxuICBldmFsKGV4cHIpIHtcbiAgICBjb25zdCB7aW5wdXRTdHJlYW19ID0gdGhpcztcbiAgICBjb25zdCBvcmlnTnVtQmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncy5sZW5ndGg7XG5cbiAgICBsZXQgb3JpZ1JlY29yZGVkRmFpbHVyZXM7XG4gICAgaWYgKHRoaXMucmVjb3JkZWRGYWlsdXJlcykge1xuICAgICAgb3JpZ1JlY29yZGVkRmFpbHVyZXMgPSB0aGlzLnJlY29yZGVkRmFpbHVyZXM7XG4gICAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cblxuICAgIGNvbnN0IG9yaWdQb3MgPSBpbnB1dFN0cmVhbS5wb3M7XG4gICAgY29uc3QgbWVtb1BvcyA9IHRoaXMubWF5YmVTa2lwU3BhY2VzQmVmb3JlKGV4cHIpO1xuXG4gICAgbGV0IG9yaWdUcmFjZTtcbiAgICBpZiAodGhpcy50cmFjZSkge1xuICAgICAgb3JpZ1RyYWNlID0gdGhpcy50cmFjZTtcbiAgICAgIHRoaXMudHJhY2UgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBEbyB0aGUgYWN0dWFsIGV2YWx1YXRpb24uXG4gICAgY29uc3QgYW5zID0gZXhwci5ldmFsKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMudHJhY2UpIHtcbiAgICAgIGNvbnN0IGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3Muc2xpY2Uob3JpZ051bUJpbmRpbmdzKTtcbiAgICAgIGNvbnN0IHRyYWNlRW50cnkgPSB0aGlzLmdldFRyYWNlRW50cnkobWVtb1BvcywgZXhwciwgYW5zLCBiaW5kaW5ncyk7XG4gICAgICB0cmFjZUVudHJ5LmlzSW1wbGljaXRTcGFjZXMgPSBleHByID09PSBhcHBseVNwYWNlcztcbiAgICAgIHRyYWNlRW50cnkuaXNSb290Tm9kZSA9IGV4cHIgPT09IHRoaXMuc3RhcnRFeHByO1xuICAgICAgb3JpZ1RyYWNlLnB1c2godHJhY2VFbnRyeSk7XG4gICAgICB0aGlzLnRyYWNlID0gb3JpZ1RyYWNlO1xuICAgIH1cblxuICAgIGlmIChhbnMpIHtcbiAgICAgIGlmICh0aGlzLnJlY29yZGVkRmFpbHVyZXMgJiYgaW5wdXRTdHJlYW0ucG9zID09PSB0aGlzLnBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcykge1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnJlY29yZGVkRmFpbHVyZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXNba2V5XS5tYWtlRmx1ZmZ5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXNldCB0aGUgcG9zaXRpb24gYW5kIHRoZSBiaW5kaW5ncy5cbiAgICAgIGlucHV0U3RyZWFtLnBvcyA9IG9yaWdQb3M7XG4gICAgICB0aGlzLnRydW5jYXRlQmluZGluZ3Mob3JpZ051bUJpbmRpbmdzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZWNvcmRlZEZhaWx1cmVzKSB7XG4gICAgICB0aGlzLnJlY29yZEZhaWx1cmVzKG9yaWdSZWNvcmRlZEZhaWx1cmVzLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gVGhlIGJ1aWx0LWluIGFwcGx5U3ludGFjdGljIHJ1bGUgbmVlZHMgc3BlY2lhbCBoYW5kbGluZzogd2Ugd2FudCB0byBza2lwXG4gICAgLy8gdHJhaWxpbmcgc3BhY2VzLCBqdXN0IGFzIHdpdGggdGhlIHRvcC1sZXZlbCBhcHBsaWNhdGlvbiBvZiBhIHN5bnRhY3RpYyBydWxlLlxuICAgIGlmIChleHByID09PSBidWlsdEluQXBwbHlTeW50YWN0aWNCb2R5KSB7XG4gICAgICB0aGlzLnNraXBTcGFjZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5zO1xuICB9LFxuXG4gIGdldE1hdGNoUmVzdWx0KCkge1xuICAgIHRoaXMuZXZhbCh0aGlzLnN0YXJ0RXhwcik7XG4gICAgbGV0IHJpZ2h0bW9zdEZhaWx1cmVzO1xuICAgIGlmICh0aGlzLnJlY29yZGVkRmFpbHVyZXMpIHtcbiAgICAgIHJpZ2h0bW9zdEZhaWx1cmVzID0gT2JqZWN0LmtleXModGhpcy5yZWNvcmRlZEZhaWx1cmVzKS5tYXAoXG4gICAgICAgICAga2V5ID0+IHRoaXMucmVjb3JkZWRGYWlsdXJlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjc3QgPSB0aGlzLl9iaW5kaW5nc1swXTtcbiAgICBpZiAoY3N0KSB7XG4gICAgICBjc3QuZ3JhbW1hciA9IHRoaXMuZ3JhbW1hcjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNYXRjaFJlc3VsdCQxKFxuICAgICAgICB0aGlzLm1hdGNoZXIsXG4gICAgICAgIHRoaXMuaW5wdXQsXG4gICAgICAgIHRoaXMuc3RhcnRFeHByLFxuICAgICAgICBjc3QsXG4gICAgICAgIHRoaXMuX2JpbmRpbmdPZmZzZXRzWzBdLFxuICAgICAgICB0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbixcbiAgICAgICAgcmlnaHRtb3N0RmFpbHVyZXNcbiAgICApO1xuICB9LFxuXG4gIGdldFRyYWNlKCkge1xuICAgIHRoaXMudHJhY2UgPSBbXTtcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHRoaXMuZ2V0TWF0Y2hSZXN1bHQoKTtcblxuICAgIC8vIFRoZSB0cmFjZSBub2RlIGZvciB0aGUgc3RhcnQgcnVsZSBpcyBhbHdheXMgdGhlIGxhc3QgZW50cnkuIElmIGl0IGlzIGEgc3ludGFjdGljIHJ1bGUsXG4gICAgLy8gdGhlIGZpcnN0IGVudHJ5IGlzIGZvciBhbiBhcHBsaWNhdGlvbiBvZiAnc3BhY2VzJy5cbiAgICAvLyBUT0RPKHBkdWJyb3kpOiBDbGVhbiB0aGlzIHVwIGJ5IGludHJvZHVjaW5nIGEgc3BlY2lhbCBgTWF0Y2g8c3RhcnRBcHBsPmAgcnVsZSwgd2hpY2ggd2lsbFxuICAgIC8vIGVuc3VyZSB0aGF0IHRoZXJlIGlzIGFsd2F5cyBhIHNpbmdsZSByb290IHRyYWNlIG5vZGUuXG4gICAgY29uc3Qgcm9vdFRyYWNlID0gdGhpcy50cmFjZVt0aGlzLnRyYWNlLmxlbmd0aCAtIDFdO1xuICAgIHJvb3RUcmFjZS5yZXN1bHQgPSBtYXRjaFJlc3VsdDtcbiAgICByZXR1cm4gcm9vdFRyYWNlO1xuICB9LFxuXG4gIHB1c2hGYWlsdXJlc0luZm8oKSB7XG4gICAgdGhpcy5fcmlnaHRtb3N0RmFpbHVyZVBvc2l0aW9uU3RhY2sucHVzaCh0aGlzLnJpZ2h0bW9zdEZhaWx1cmVQb3NpdGlvbik7XG4gICAgdGhpcy5fcmVjb3JkZWRGYWlsdXJlc1N0YWNrLnB1c2godGhpcy5yZWNvcmRlZEZhaWx1cmVzKTtcbiAgfSxcblxuICBwb3BGYWlsdXJlc0luZm8oKSB7XG4gICAgdGhpcy5yaWdodG1vc3RGYWlsdXJlUG9zaXRpb24gPSB0aGlzLl9yaWdodG1vc3RGYWlsdXJlUG9zaXRpb25TdGFjay5wb3AoKTtcbiAgICB0aGlzLnJlY29yZGVkRmFpbHVyZXMgPSB0aGlzLl9yZWNvcmRlZEZhaWx1cmVzU3RhY2sucG9wKCk7XG4gIH0sXG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIE1hdGNoU3RhdGVfMSA9IE1hdGNoU3RhdGUkMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IE1hdGNoU3RhdGUgPSBNYXRjaFN0YXRlXzE7XG5cbmNvbnN0IHBleHBycyQ0ID0gcGV4cHJzJDY7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBNYXRjaGVyJDEoZ3JhbW1hcikge1xuICB0aGlzLmdyYW1tYXIgPSBncmFtbWFyO1xuICB0aGlzLm1lbW9UYWJsZSA9IFtdO1xuICB0aGlzLmlucHV0ID0gJyc7XG59XG5cbk1hdGNoZXIkMS5wcm90b3R5cGUuZ2V0SW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuaW5wdXQ7XG59O1xuXG5NYXRjaGVyJDEucHJvdG90eXBlLnNldElucHV0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIGlmICh0aGlzLmlucHV0ICE9PSBzdHIpIHtcbiAgICB0aGlzLnJlcGxhY2VJbnB1dFJhbmdlKDAsIHRoaXMuaW5wdXQubGVuZ3RoLCBzdHIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuTWF0Y2hlciQxLnByb3RvdHlwZS5yZXBsYWNlSW5wdXRSYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0SWR4LCBlbmRJZHgsIHN0cikge1xuICBjb25zdCBjdXJyZW50SW5wdXQgPSB0aGlzLmlucHV0O1xuICBpZiAoXG4gICAgc3RhcnRJZHggPCAwIHx8XG4gICAgc3RhcnRJZHggPiBjdXJyZW50SW5wdXQubGVuZ3RoIHx8XG4gICAgZW5kSWR4IDwgMCB8fFxuICAgIGVuZElkeCA+IGN1cnJlbnRJbnB1dC5sZW5ndGggfHxcbiAgICBzdGFydElkeCA+IGVuZElkeFxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kaWNlczogJyArIHN0YXJ0SWR4ICsgJyBhbmQgJyArIGVuZElkeCk7XG4gIH1cblxuICAvLyB1cGRhdGUgaW5wdXRcbiAgdGhpcy5pbnB1dCA9IGN1cnJlbnRJbnB1dC5zbGljZSgwLCBzdGFydElkeCkgKyBzdHIgKyBjdXJyZW50SW5wdXQuc2xpY2UoZW5kSWR4KTtcblxuICAvLyB1cGRhdGUgbWVtbyB0YWJsZSAoc2ltaWxhciB0byB0aGUgYWJvdmUpXG4gIGNvbnN0IHJlc3RPZk1lbW9UYWJsZSA9IHRoaXMubWVtb1RhYmxlLnNsaWNlKGVuZElkeCk7XG4gIHRoaXMubWVtb1RhYmxlLmxlbmd0aCA9IHN0YXJ0SWR4O1xuICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzdHIubGVuZ3RoOyBpZHgrKykge1xuICAgIHRoaXMubWVtb1RhYmxlLnB1c2godW5kZWZpbmVkKTtcbiAgfVxuICByZXN0T2ZNZW1vVGFibGUuZm9yRWFjaChmdW5jdGlvbihwb3NJbmZvKSB7XG4gICAgdGhpcy5tZW1vVGFibGUucHVzaChwb3NJbmZvKTtcbiAgfSwgdGhpcyk7XG5cbiAgLy8gSW52YWxpZGF0ZSBtZW1vUmVjc1xuICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBzdGFydElkeDsgcG9zKyspIHtcbiAgICBjb25zdCBwb3NJbmZvID0gdGhpcy5tZW1vVGFibGVbcG9zXTtcbiAgICBpZiAocG9zSW5mbykge1xuICAgICAgcG9zSW5mby5jbGVhck9ic29sZXRlRW50cmllcyhwb3MsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbk1hdGNoZXIkMS5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbihvcHRTdGFydEFwcGxpY2F0aW9uU3RyKSB7XG4gIHJldHVybiB0aGlzLl9tYXRjaCh0aGlzLl9nZXRTdGFydEV4cHIob3B0U3RhcnRBcHBsaWNhdGlvblN0ciksIGZhbHNlKTtcbn07XG5cbk1hdGNoZXIkMS5wcm90b3R5cGUudHJhY2UgPSBmdW5jdGlvbihvcHRTdGFydEFwcGxpY2F0aW9uU3RyKSB7XG4gIHJldHVybiB0aGlzLl9tYXRjaCh0aGlzLl9nZXRTdGFydEV4cHIob3B0U3RhcnRBcHBsaWNhdGlvblN0ciksIHRydWUpO1xufTtcblxuTWF0Y2hlciQxLnByb3RvdHlwZS5fbWF0Y2ggPSBmdW5jdGlvbihzdGFydEV4cHIsIHRyYWNpbmcsIG9wdFBvc2l0aW9uVG9SZWNvcmRGYWlsdXJlcykge1xuICBjb25zdCBzdGF0ZSA9IG5ldyBNYXRjaFN0YXRlKHRoaXMsIHN0YXJ0RXhwciwgb3B0UG9zaXRpb25Ub1JlY29yZEZhaWx1cmVzKTtcbiAgcmV0dXJuIHRyYWNpbmcgPyBzdGF0ZS5nZXRUcmFjZSgpIDogc3RhdGUuZ2V0TWF0Y2hSZXN1bHQoKTtcbn07XG5cbi8qXG4gIFJldHVybnMgdGhlIHN0YXJ0aW5nIGV4cHJlc3Npb24gZm9yIHRoaXMgTWF0Y2hlcidzIGFzc29jaWF0ZWQgZ3JhbW1hci4gSWYgYG9wdFN0YXJ0QXBwbGljYXRpb25TdHJgXG4gIGlzIHNwZWNpZmllZCwgaXQgaXMgYSBzdHJpbmcgZXhwcmVzc2luZyBhIHJ1bGUgYXBwbGljYXRpb24gaW4gdGhlIGdyYW1tYXIuIElmIG5vdCBzcGVjaWZpZWQsIHRoZVxuICBncmFtbWFyJ3MgZGVmYXVsdCBzdGFydCBydWxlIHdpbGwgYmUgdXNlZC5cbiovXG5NYXRjaGVyJDEucHJvdG90eXBlLl9nZXRTdGFydEV4cHIgPSBmdW5jdGlvbihvcHRTdGFydEFwcGxpY2F0aW9uU3RyKSB7XG4gIGNvbnN0IGFwcGxpY2F0aW9uU3RyID0gb3B0U3RhcnRBcHBsaWNhdGlvblN0ciB8fCB0aGlzLmdyYW1tYXIuZGVmYXVsdFN0YXJ0UnVsZTtcbiAgaWYgKCFhcHBsaWNhdGlvblN0cikge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBzdGFydCBydWxlIGFyZ3VtZW50IC0tIHRoZSBncmFtbWFyIGhhcyBubyBkZWZhdWx0IHN0YXJ0IHJ1bGUuJyk7XG4gIH1cblxuICBjb25zdCBzdGFydEFwcCA9IHRoaXMuZ3JhbW1hci5wYXJzZUFwcGxpY2F0aW9uKGFwcGxpY2F0aW9uU3RyKTtcbiAgcmV0dXJuIG5ldyBwZXhwcnMkNC5TZXEoW3N0YXJ0QXBwLCBwZXhwcnMkNC5lbmRdKTtcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgTWF0Y2hlcl8xID0gTWF0Y2hlciQxO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgSW5wdXRTdHJlYW0kMSA9IElucHV0U3RyZWFtXzE7XG5jb25zdCB7SXRlcmF0aW9uTm9kZX0gPSBub2RlcyQxO1xuY29uc3QgTWF0Y2hSZXN1bHQgPSBNYXRjaFJlc3VsdF8xO1xuY29uc3QgY29tbW9uJDMgPSBjb21tb24kbDtcbmNvbnN0IGVycm9ycyQzID0gZXJyb3JzJDk7XG5jb25zdCB1dGlsJDIgPSB1dGlsJDc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBnbG9iYWxBY3Rpb25TdGFjayA9IFtdO1xuXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICh4LCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgcHJvcCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIFdyYXBwZXJzIC0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIFdyYXBwZXJzIGRlY29yYXRlIENTVCBub2RlcyB3aXRoIGFsbCBvZiB0aGUgZnVuY3Rpb25hbGl0eSAoaS5lLiwgb3BlcmF0aW9ucyBhbmQgYXR0cmlidXRlcylcbi8vIHByb3ZpZGVkIGJ5IGEgU2VtYW50aWNzIChzZWUgYmVsb3cpLiBgV3JhcHBlcmAgaXMgdGhlIGFic3RyYWN0IHN1cGVyY2xhc3Mgb2YgYWxsIHdyYXBwZXJzLiBBXG4vLyBgV3JhcHBlcmAgbXVzdCBoYXZlIGBfbm9kZWAgYW5kIGBfc2VtYW50aWNzYCBpbnN0YW5jZSB2YXJpYWJsZXMsIHdoaWNoIHJlZmVyIHRvIHRoZSBDU1Qgbm9kZSBhbmRcbi8vIFNlbWFudGljcyAocmVzcC4pIGZvciB3aGljaCBpdCB3YXMgY3JlYXRlZCwgYW5kIGEgYF9jaGlsZFdyYXBwZXJzYCBpbnN0YW5jZSB2YXJpYWJsZSB3aGljaCBpc1xuLy8gdXNlZCB0byBjYWNoZSB0aGUgd3JhcHBlciBpbnN0YW5jZXMgdGhhdCBhcmUgY3JlYXRlZCBmb3IgaXRzIGNoaWxkIG5vZGVzLiBTZXR0aW5nIHRoZXNlIGluc3RhbmNlXG4vLyB2YXJpYWJsZXMgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjb25zdHJ1Y3RvciBvZiBlYWNoIFNlbWFudGljcy1zcGVjaWZpYyBzdWJjbGFzcyBvZlxuLy8gYFdyYXBwZXJgLlxuY2xhc3MgV3JhcHBlciB7XG4gIGNvbnN0cnVjdG9yKG5vZGUsIHNvdXJjZUludGVydmFsLCBiYXNlSW50ZXJ2YWwpIHtcbiAgICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZUludGVydmFsO1xuXG4gICAgLy8gVGhlIGludGVydmFsIHRoYXQgdGhlIGNoaWxkT2Zmc2V0cyBvZiBgbm9kZWAgYXJlIHJlbGF0aXZlIHRvLiBJdCBzaG91bGQgYmUgdGhlIHNvdXJjZVxuICAgIC8vIG9mIHRoZSBjbG9zZXN0IE5vbnRlcm1pbmFsIG5vZGUuXG4gICAgdGhpcy5fYmFzZUludGVydmFsID0gYmFzZUludGVydmFsO1xuXG4gICAgaWYgKG5vZGUuaXNOb250ZXJtaW5hbCgpKSB7XG4gICAgICBjb21tb24kMy5hc3NlcnQoc291cmNlSW50ZXJ2YWwgPT09IGJhc2VJbnRlcnZhbCk7XG4gICAgfVxuICAgIHRoaXMuX2NoaWxkV3JhcHBlcnMgPSBbXTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW3NlbWFudGljcyB3cmFwcGVyIGZvciAnICsgdGhpcy5fbm9kZS5ncmFtbWFyLm5hbWUgKyAnXSc7XG4gIH1cblxuICBfZm9yZ2V0TWVtb2l6ZWRSZXN1bHRGb3IoYXR0cmlidXRlTmFtZSkge1xuICAgIC8vIFJlbW92ZSB0aGUgbWVtb2l6ZWQgYXR0cmlidXRlIGZyb20gdGhlIGNzdE5vZGUgYW5kIGFsbCBpdHMgY2hpbGRyZW4uXG4gICAgZGVsZXRlIHRoaXMuX25vZGVbdGhpcy5fc2VtYW50aWNzLmF0dHJpYnV0ZUtleXNbYXR0cmlidXRlTmFtZV1dO1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBjaGlsZC5fZm9yZ2V0TWVtb2l6ZWRSZXN1bHRGb3IoYXR0cmlidXRlTmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBSZXR1cm5zIHRoZSB3cmFwcGVyIG9mIHRoZSBzcGVjaWZpZWQgY2hpbGQgbm9kZS4gQ2hpbGQgd3JhcHBlcnMgYXJlIGNyZWF0ZWQgbGF6aWx5IGFuZFxuICAvLyBjYWNoZWQgaW4gdGhlIHBhcmVudCB3cmFwcGVyJ3MgYF9jaGlsZFdyYXBwZXJzYCBpbnN0YW5jZSB2YXJpYWJsZS5cbiAgY2hpbGQoaWR4KSB7XG4gICAgaWYgKCEoMCA8PSBpZHggJiYgaWR4IDwgdGhpcy5fbm9kZS5udW1DaGlsZHJlbigpKSkge1xuICAgICAgLy8gVE9ETzogQ29uc2lkZXIgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIGhlcmUuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBsZXQgY2hpbGRXcmFwcGVyID0gdGhpcy5fY2hpbGRXcmFwcGVyc1tpZHhdO1xuICAgIGlmICghY2hpbGRXcmFwcGVyKSB7XG4gICAgICBjb25zdCBjaGlsZE5vZGUgPSB0aGlzLl9ub2RlLmNoaWxkQXQoaWR4KTtcbiAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX25vZGUuY2hpbGRPZmZzZXRzW2lkeF07XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuX2Jhc2VJbnRlcnZhbC5zdWJJbnRlcnZhbChvZmZzZXQsIGNoaWxkTm9kZS5tYXRjaExlbmd0aCk7XG4gICAgICBjb25zdCBiYXNlID0gY2hpbGROb2RlLmlzTm9udGVybWluYWwoKSA/IHNvdXJjZSA6IHRoaXMuX2Jhc2VJbnRlcnZhbDtcbiAgICAgIGNoaWxkV3JhcHBlciA9IHRoaXMuX2NoaWxkV3JhcHBlcnNbaWR4XSA9IHRoaXMuX3NlbWFudGljcy53cmFwKGNoaWxkTm9kZSwgc291cmNlLCBiYXNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkV3JhcHBlcjtcbiAgfVxuXG4gIC8vIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgd3JhcHBlcnMgb2YgYWxsIG9mIHRoZSBjaGlsZHJlbiBvZiB0aGUgbm9kZSBhc3NvY2lhdGVkXG4gIC8vIHdpdGggdGhpcyB3cmFwcGVyLlxuICBfY2hpbGRyZW4oKSB7XG4gICAgLy8gRm9yY2UgdGhlIGNyZWF0aW9uIG9mIGFsbCBjaGlsZCB3cmFwcGVyc1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMuX25vZGUubnVtQ2hpbGRyZW4oKTsgaWR4KyspIHtcbiAgICAgIHRoaXMuY2hpbGQoaWR4KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkV3JhcHBlcnM7XG4gIH1cblxuICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgQ1NUIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgd3JhcHBlciBjb3JyZXNwb25kcyB0byBhbiBpdGVyYXRpb25cbiAgLy8gZXhwcmVzc2lvbiwgaS5lLiwgYSBLbGVlbmUtKiwgS2xlZW5lLSssIG9yIGFuIG9wdGlvbmFsLiBSZXR1cm5zIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICBpc0l0ZXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbm9kZS5pc0l0ZXJhdGlvbigpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIENTVCBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHdyYXBwZXIgaXMgYSB0ZXJtaW5hbCBub2RlLCBgZmFsc2VgXG4gIC8vIG90aGVyd2lzZS5cbiAgaXNUZXJtaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbm9kZS5pc1Rlcm1pbmFsKCk7XG4gIH1cblxuICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgQ1NUIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgd3JhcHBlciBpcyBhIG5vbnRlcm1pbmFsIG5vZGUsIGBmYWxzZWBcbiAgLy8gb3RoZXJ3aXNlLlxuICBpc05vbnRlcm1pbmFsKCkge1xuICAgIHJldHVybiB0aGlzLl9ub2RlLmlzTm9udGVybWluYWwoKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgYHRydWVgIGlmIHRoZSBDU1Qgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB3cmFwcGVyIGlzIGEgbm9udGVybWluYWwgbm9kZVxuICAvLyBjb3JyZXNwb25kaW5nIHRvIGEgc3ludGFjdGljIHJ1bGUsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICBpc1N5bnRhY3RpYygpIHtcbiAgICByZXR1cm4gdGhpcy5pc05vbnRlcm1pbmFsKCkgJiYgdGhpcy5fbm9kZS5pc1N5bnRhY3RpYygpO1xuICB9XG5cbiAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIENTVCBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHdyYXBwZXIgaXMgYSBub250ZXJtaW5hbCBub2RlXG4gIC8vIGNvcnJlc3BvbmRpbmcgdG8gYSBsZXhpY2FsIHJ1bGUsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICBpc0xleGljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNOb250ZXJtaW5hbCgpICYmIHRoaXMuX25vZGUuaXNMZXhpY2FsKCk7XG4gIH1cblxuICAvLyBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgQ1NUIG5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgd3JhcHBlciBpcyBhbiBpdGVyYXRvciBub2RlXG4gIC8vIGhhdmluZyBlaXRoZXIgb25lIG9yIG5vIGNoaWxkICg/IG9wZXJhdG9yKSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gIC8vIE90aGVyd2lzZSwgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgaXNPcHRpb25hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbm9kZS5pc09wdGlvbmFsKCk7XG4gIH1cblxuICAvLyBDcmVhdGUgYSBuZXcgX2l0ZXIgd3JhcHBlciBpbiB0aGUgc2FtZSBzZW1hbnRpY3MgYXMgdGhpcyB3cmFwcGVyLlxuICBpdGVyYXRpb24ob3B0Q2hpbGRXcmFwcGVycykge1xuICAgIGNvbnN0IGNoaWxkV3JhcHBlcnMgPSBvcHRDaGlsZFdyYXBwZXJzIHx8IFtdO1xuXG4gICAgY29uc3QgY2hpbGROb2RlcyA9IGNoaWxkV3JhcHBlcnMubWFwKGMgPT4gYy5fbm9kZSk7XG4gICAgY29uc3QgaXRlciA9IG5ldyBJdGVyYXRpb25Ob2RlKGNoaWxkTm9kZXMsIFtdLCAtMSwgZmFsc2UpO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IHRoaXMuX3NlbWFudGljcy53cmFwKGl0ZXIsIG51bGwsIG51bGwpO1xuICAgIHdyYXBwZXIuX2NoaWxkV3JhcHBlcnMgPSBjaGlsZFdyYXBwZXJzO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBjaGlsZHJlbiBvZiB0aGlzIENTVCBub2RlLlxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuKCk7XG4gIH1cblxuICAvLyBSZXR1cm5zIHRoZSBuYW1lIG9mIGdyYW1tYXIgcnVsZSB0aGF0IGNyZWF0ZWQgdGhpcyBDU1Qgbm9kZS5cbiAgZ2V0IGN0b3JOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9ub2RlLmN0b3JOYW1lO1xuICB9XG5cbiAgLy8gVE9ETzogUmVtb3ZlIHRoaXMgZXZlbnR1YWxseSAoZGVwcmVjYXRlZCBpbiB2MC4xMikuXG4gIGdldCBpbnRlcnZhbCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgaW50ZXJ2YWxgIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQgLS0gdXNlIGBzb3VyY2VgIGluc3RlYWQnKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBvZiB0aGlzIENTVCBub2RlLlxuICBnZXQgbnVtQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX25vZGUubnVtQ2hpbGRyZW4oKTtcbiAgfVxuXG4gIC8vIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpbnB1dCBzdHJlYW0gY29uc3VtZWQgYnkgdGhpcyBDU1Qgbm9kZS5cbiAgZ2V0IHNvdXJjZVN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UuY29udGVudHM7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0gU2VtYW50aWNzIC0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEEgU2VtYW50aWNzIGlzIGEgY29udGFpbmVyIGZvciBhIGZhbWlseSBvZiBPcGVyYXRpb25zIGFuZCBBdHRyaWJ1dGVzIGZvciBhIGdpdmVuIGdyYW1tYXIuXG4vLyBTZW1hbnRpY3MgZW5hYmxlIG1vZHVsYXJpdHkgKGRpZmZlcmVudCBjbGllbnRzIG9mIGEgZ3JhbW1hciBjYW4gY3JlYXRlIHRoZWlyIHNldCBvZiBvcGVyYXRpb25zXG4vLyBhbmQgYXR0cmlidXRlcyBpbiBpc29sYXRpb24pIGFuZCBleHRlbnNpYmlsaXR5IGV2ZW4gd2hlbiBvcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzIGFyZSBtdXR1YWxseS1cbi8vIHJlY3Vyc2l2ZS4gVGhpcyBjb25zdHJ1Y3RvciBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseSBleGNlcHQgZnJvbVxuLy8gYFNlbWFudGljcy5jcmVhdGVTZW1hbnRpY3NgLiBUaGUgbm9ybWFsIHdheXMgdG8gY3JlYXRlIGEgU2VtYW50aWNzLCBnaXZlbiBhIGdyYW1tYXIgJ2cnLCBhcmVcbi8vIGBnLmNyZWF0ZVNlbWFudGljcygpYCBhbmQgYGcuZXh0ZW5kU2VtYW50aWNzKHBhcmVudFNlbWFudGljcylgLlxuZnVuY3Rpb24gU2VtYW50aWNzJDIoZ3JhbW1hciwgc3VwZXJTZW1hbnRpY3MpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG4gIHRoaXMuY2hlY2tlZEFjdGlvbkRpY3RzID0gZmFsc2U7XG5cbiAgLy8gQ29uc3RydWN0b3IgZm9yIHdyYXBwZXIgaW5zdGFuY2VzLCB3aGljaCBhcmUgcGFzc2VkIGFzIHRoZSBhcmd1bWVudHMgdG8gdGhlIHNlbWFudGljIGFjdGlvbnNcbiAgLy8gb2YgYW4gb3BlcmF0aW9uIG9yIGF0dHJpYnV0ZS4gT3BlcmF0aW9ucyBhbmQgYXR0cmlidXRlcyByZXF1aXJlIGRvdWJsZSBkaXNwYXRjaDogdGhlIHNlbWFudGljXG4gIC8vIGFjdGlvbiBpcyBjaG9zZW4gYmFzZWQgb24gYm90aCB0aGUgbm9kZSdzIHR5cGUgYW5kIHRoZSBzZW1hbnRpY3MuIFdyYXBwZXJzIGVuc3VyZSB0aGF0XG4gIC8vIHRoZSBgZXhlY3V0ZWAgbWV0aG9kIGlzIGNhbGxlZCB3aXRoIHRoZSBjb3JyZWN0IChtb3N0IHNwZWNpZmljKSBzZW1hbnRpY3Mgb2JqZWN0IGFzIGFuXG4gIC8vIGFyZ3VtZW50LlxuICB0aGlzLldyYXBwZXIgPSBjbGFzcyBleHRlbmRzIChzdXBlclNlbWFudGljcyA/IHN1cGVyU2VtYW50aWNzLldyYXBwZXIgOiBXcmFwcGVyKSB7XG4gICAgY29uc3RydWN0b3Iobm9kZSwgc291cmNlSW50ZXJ2YWwsIGJhc2VJbnRlcnZhbCkge1xuICAgICAgc3VwZXIobm9kZSwgc291cmNlSW50ZXJ2YWwsIGJhc2VJbnRlcnZhbCk7XG4gICAgICBzZWxmLmNoZWNrQWN0aW9uRGljdHNJZkhhdmVudEFscmVhZHkoKTtcbiAgICAgIHRoaXMuX3NlbWFudGljcyA9IHNlbGY7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuc3VwZXIgPSBzdXBlclNlbWFudGljcztcbiAgaWYgKHN1cGVyU2VtYW50aWNzKSB7XG4gICAgaWYgKCEoZ3JhbW1hci5lcXVhbHModGhpcy5zdXBlci5ncmFtbWFyKSB8fCBncmFtbWFyLl9pbmhlcml0c0Zyb20odGhpcy5zdXBlci5ncmFtbWFyKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkNhbm5vdCBleHRlbmQgYSBzZW1hbnRpY3MgZm9yIGdyYW1tYXIgJ1wiICtcbiAgICAgICAgICB0aGlzLnN1cGVyLmdyYW1tYXIubmFtZSArXG4gICAgICAgICAgXCInIGZvciB1c2Ugd2l0aCBncmFtbWFyICdcIiArXG4gICAgICAgICAgZ3JhbW1hci5uYW1lICtcbiAgICAgICAgICBcIicgKG5vdCBhIHN1Yi1ncmFtbWFyKVwiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLm9wZXJhdGlvbnMgPSBPYmplY3QuY3JlYXRlKHRoaXMuc3VwZXIub3BlcmF0aW9ucyk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnN1cGVyLmF0dHJpYnV0ZXMpO1xuICAgIHRoaXMuYXR0cmlidXRlS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAvLyBBc3NpZ24gdW5pcXVlIHN5bWJvbHMgZm9yIGVhY2ggb2YgdGhlIGF0dHJpYnV0ZXMgaW5oZXJpdGVkIGZyb20gdGhlIHN1cGVyLXNlbWFudGljcyBzbyB0aGF0XG4gICAgLy8gdGhleSBhcmUgbWVtb2l6ZWQgaW5kZXBlbmRlbnRseS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGVOYW1lIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuYXR0cmlidXRlS2V5cywgYXR0cmlidXRlTmFtZSwge1xuICAgICAgICB2YWx1ZTogdXRpbCQyLnVuaXF1ZUlkKGF0dHJpYnV0ZU5hbWUpLFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMub3BlcmF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmF0dHJpYnV0ZUtleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG59XG5cblNlbWFudGljcyQyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJ1tzZW1hbnRpY3MgZm9yICcgKyB0aGlzLmdyYW1tYXIubmFtZSArICddJztcbn07XG5cblNlbWFudGljcyQyLnByb3RvdHlwZS5jaGVja0FjdGlvbkRpY3RzSWZIYXZlbnRBbHJlYWR5ID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5jaGVja2VkQWN0aW9uRGljdHMpIHtcbiAgICB0aGlzLmNoZWNrQWN0aW9uRGljdHMoKTtcbiAgICB0aGlzLmNoZWNrZWRBY3Rpb25EaWN0cyA9IHRydWU7XG4gIH1cbn07XG5cbi8vIENoZWNrcyB0aGF0IHRoZSBhY3Rpb24gZGljdGlvbmFyaWVzIGZvciBhbGwgb3BlcmF0aW9ucyBhbmQgYXR0cmlidXRlcyBpbiB0aGlzIHNlbWFudGljcyxcbi8vIGluY2x1ZGluZyB0aGUgb25lcyB0aGF0IHdlcmUgaW5oZXJpdGVkIGZyb20gdGhlIHN1cGVyLXNlbWFudGljcywgYWdyZWUgd2l0aCB0aGUgZ3JhbW1hci5cbi8vIFRocm93cyBhbiBleGNlcHRpb24gaWYgb25lIG9yIG1vcmUgb2YgdGhlbSBkb2Vzbid0LlxuU2VtYW50aWNzJDIucHJvdG90eXBlLmNoZWNrQWN0aW9uRGljdHMgPSBmdW5jdGlvbigpIHtcbiAgbGV0IG5hbWU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgZm9yIChuYW1lIGluIHRoaXMub3BlcmF0aW9ucykge1xuICAgIHRoaXMub3BlcmF0aW9uc1tuYW1lXS5jaGVja0FjdGlvbkRpY3QodGhpcy5ncmFtbWFyKTtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gIGZvciAobmFtZSBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0uY2hlY2tBY3Rpb25EaWN0KHRoaXMuZ3JhbW1hcik7XG4gIH1cbn07XG5cblNlbWFudGljcyQyLnByb3RvdHlwZS50b1JlY2lwZSA9IGZ1bmN0aW9uKHNlbWFudGljc09ubHkpIHtcbiAgZnVuY3Rpb24gaGFzU3VwZXJTZW1hbnRpY3Mocykge1xuICAgIHJldHVybiBzLnN1cGVyICE9PSBTZW1hbnRpY3MkMi5CdWlsdEluU2VtYW50aWNzLl9nZXRTZW1hbnRpY3MoKTtcbiAgfVxuXG4gIGxldCBzdHIgPSAnKGZ1bmN0aW9uKGcpIHtcXG4nO1xuICBpZiAoaGFzU3VwZXJTZW1hbnRpY3ModGhpcykpIHtcbiAgICBzdHIgKz0gJyAgdmFyIHNlbWFudGljcyA9ICcgKyB0aGlzLnN1cGVyLnRvUmVjaXBlKHRydWUpICsgJyhnJztcblxuICAgIGNvbnN0IHN1cGVyU2VtYW50aWNzR3JhbW1hciA9IHRoaXMuc3VwZXIuZ3JhbW1hcjtcbiAgICBsZXQgcmVsYXRlZEdyYW1tYXIgPSB0aGlzLmdyYW1tYXI7XG4gICAgd2hpbGUgKHJlbGF0ZWRHcmFtbWFyICE9PSBzdXBlclNlbWFudGljc0dyYW1tYXIpIHtcbiAgICAgIHN0ciArPSAnLnN1cGVyR3JhbW1hcic7XG4gICAgICByZWxhdGVkR3JhbW1hciA9IHJlbGF0ZWRHcmFtbWFyLnN1cGVyR3JhbW1hcjtcbiAgICB9XG5cbiAgICBzdHIgKz0gJyk7XFxuJztcbiAgICBzdHIgKz0gJyAgcmV0dXJuIGcuZXh0ZW5kU2VtYW50aWNzKHNlbWFudGljcyknO1xuICB9IGVsc2Uge1xuICAgIHN0ciArPSAnICByZXR1cm4gZy5jcmVhdGVTZW1hbnRpY3MoKSc7XG4gIH1cbiAgWydPcGVyYXRpb24nLCAnQXR0cmlidXRlJ10uZm9yRWFjaCh0eXBlID0+IHtcbiAgICBjb25zdCBzZW1hbnRpY09wZXJhdGlvbnMgPSB0aGlzW3R5cGUudG9Mb3dlckNhc2UoKSArICdzJ107XG4gICAgT2JqZWN0LmtleXMoc2VtYW50aWNPcGVyYXRpb25zKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgY29uc3Qge2FjdGlvbkRpY3QsIGZvcm1hbHMsIGJ1aWx0SW5EZWZhdWx0fSA9IHNlbWFudGljT3BlcmF0aW9uc1tuYW1lXTtcblxuICAgICAgbGV0IHNpZ25hdHVyZSA9IG5hbWU7XG4gICAgICBpZiAoZm9ybWFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNpZ25hdHVyZSArPSAnKCcgKyBmb3JtYWxzLmpvaW4oJywgJykgKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIGxldCBtZXRob2Q7XG4gICAgICBpZiAoaGFzU3VwZXJTZW1hbnRpY3ModGhpcykgJiYgdGhpcy5zdXBlclt0eXBlLnRvTG93ZXJDYXNlKCkgKyAncyddW25hbWVdKSB7XG4gICAgICAgIG1ldGhvZCA9ICdleHRlbmQnICsgdHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1ldGhvZCA9ICdhZGQnICsgdHlwZTtcbiAgICAgIH1cbiAgICAgIHN0ciArPSAnXFxuICAgIC4nICsgbWV0aG9kICsgJygnICsgSlNPTi5zdHJpbmdpZnkoc2lnbmF0dXJlKSArICcsIHsnO1xuXG4gICAgICBjb25zdCBzcmNBcnJheSA9IFtdO1xuICAgICAgT2JqZWN0LmtleXMoYWN0aW9uRGljdCkuZm9yRWFjaChhY3Rpb25OYW1lID0+IHtcbiAgICAgICAgaWYgKGFjdGlvbkRpY3RbYWN0aW9uTmFtZV0gIT09IGJ1aWx0SW5EZWZhdWx0KSB7XG4gICAgICAgICAgbGV0IHNvdXJjZSA9IGFjdGlvbkRpY3RbYWN0aW9uTmFtZV0udG9TdHJpbmcoKS50cmltKCk7XG5cbiAgICAgICAgICAvLyBDb252ZXJ0IG1ldGhvZCBzaG9ydGhhbmQgdG8gcGxhaW4gb2xkIGZ1bmN0aW9uIHN5bnRheC5cbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vaGFyYy9vaG0vaXNzdWVzLzI2M1xuICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKC9eLipcXCgvLCAnZnVuY3Rpb24oJyk7XG5cbiAgICAgICAgICBzcmNBcnJheS5wdXNoKCdcXG4gICAgICAnICsgSlNPTi5zdHJpbmdpZnkoYWN0aW9uTmFtZSkgKyAnOiAnICsgc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBzdHIgKz0gc3JjQXJyYXkuam9pbignLCcpICsgJ1xcbiAgICB9KSc7XG4gICAgfSk7XG4gIH0pO1xuICBzdHIgKz0gJztcXG4gIH0pJztcblxuICBpZiAoIXNlbWFudGljc09ubHkpIHtcbiAgICBzdHIgPVxuICAgICAgJyhmdW5jdGlvbigpIHtcXG4nICtcbiAgICAgICcgIHZhciBncmFtbWFyID0gdGhpcy5mcm9tUmVjaXBlKCcgK1xuICAgICAgdGhpcy5ncmFtbWFyLnRvUmVjaXBlKCkgK1xuICAgICAgJyk7XFxuJyArXG4gICAgICAnICB2YXIgc2VtYW50aWNzID0gJyArXG4gICAgICBzdHIgK1xuICAgICAgJyhncmFtbWFyKTtcXG4nICtcbiAgICAgICcgIHJldHVybiBzZW1hbnRpY3M7XFxuJyArXG4gICAgICAnfSk7XFxuJztcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59O1xuXG5mdW5jdGlvbiBwYXJzZVNpZ25hdHVyZSQxKHNpZ25hdHVyZSwgdHlwZSkge1xuICBpZiAoIVNlbWFudGljcyQyLnByb3RvdHlwZUdyYW1tYXIpIHtcbiAgICAvLyBUaGUgT3BlcmF0aW9ucyBhbmQgQXR0cmlidXRlcyBncmFtbWFyIHdvbid0IGJlIGF2YWlsYWJsZSB3aGlsZSBPaG0gaXMgbG9hZGluZyxcbiAgICAvLyBidXQgd2UgY2FuIGdldCBhd2F5IHRoZSBmb2xsb3dpbmcgc2ltcGxpZmljYXRpb24gYi9jIG5vbmUgb2YgdGhlIG9wZXJhdGlvbnNcbiAgICAvLyB0aGF0IGFyZSB1c2VkIHdoaWxlIGxvYWRpbmcgdGFrZSBhcmd1bWVudHMuXG4gICAgY29tbW9uJDMuYXNzZXJ0KHNpZ25hdHVyZS5pbmRleE9mKCcoJykgPT09IC0xKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogc2lnbmF0dXJlLFxuICAgICAgZm9ybWFsczogW10sXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHIgPSBTZW1hbnRpY3MkMi5wcm90b3R5cGVHcmFtbWFyLm1hdGNoKFxuICAgICAgc2lnbmF0dXJlLFxuICAgIHR5cGUgPT09ICdvcGVyYXRpb24nID8gJ09wZXJhdGlvblNpZ25hdHVyZScgOiAnQXR0cmlidXRlU2lnbmF0dXJlJ1xuICApO1xuICBpZiAoci5mYWlsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihyLm1lc3NhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIFNlbWFudGljcyQyLnByb3RvdHlwZUdyYW1tYXJTZW1hbnRpY3MocikucGFyc2UoKTtcbn1cblxuZnVuY3Rpb24gbmV3RGVmYXVsdEFjdGlvbih0eXBlLCBuYW1lLCBkb0l0KSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5jaGlsZHJlbikge1xuICAgIGNvbnN0IHRoaXNUaGluZyA9IHRoaXMuX3NlbWFudGljcy5vcGVyYXRpb25zW25hbWVdIHx8IHRoaXMuX3NlbWFudGljcy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzVGhpbmcuZm9ybWFscy5tYXAoZm9ybWFsID0+IHRoaXMuYXJnc1tmb3JtYWxdKTtcblxuICAgIGlmICghdGhpcy5pc0l0ZXJhdGlvbigpICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gVGhpcyBDU1Qgbm9kZSBjb3JyZXNwb25kcyB0byBhIG5vbi10ZXJtaW5hbCBpbiB0aGUgZ3JhbW1hciAoZS5nLiwgQWRkRXhwcikuIFRoZSBmYWN0IHRoYXRcbiAgICAgIC8vIHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhpcyBhY3Rpb24gZGljdGlvbmFyeSBkb2Vzbid0IGhhdmUgYW4gYWN0aW9uIGZvciB0aGlzIHBhcnRpY3VsYXJcbiAgICAgIC8vIG5vbi10ZXJtaW5hbCBvciBhIGdlbmVyaWMgYF9ub250ZXJtaW5hbGAgYWN0aW9uLlxuICAgICAgLy8gQXMgYSBjb252ZW5pZW5jZSwgaWYgdGhpcyBub2RlIG9ubHkgaGFzIG9uZSBjaGlsZCwgd2UganVzdCByZXR1cm4gdGhlIHJlc3VsdCBvZiBhcHBseWluZ1xuICAgICAgLy8gdGhpcyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUgdG8gdGhlIGNoaWxkIG5vZGUuXG4gICAgICByZXR1cm4gZG9JdC5hcHBseShjaGlsZHJlblswXSwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2UgdGhyb3cgYW4gZXhjZXB0aW9uIHRvIGxldCB0aGUgcHJvZ3JhbW1lciBrbm93IHRoYXQgd2UgZG9uJ3Qga25vdyB3aGF0XG4gICAgICAvLyB0byBkbyB3aXRoIHRoaXMgbm9kZS5cbiAgICAgIHRocm93IGVycm9ycyQzLm1pc3NpbmdTZW1hbnRpY0FjdGlvbih0aGlzLmN0b3JOYW1lLCBuYW1lLCB0eXBlLCBnbG9iYWxBY3Rpb25TdGFjayk7XG4gICAgfVxuICB9O1xufVxuXG5TZW1hbnRpY3MkMi5wcm90b3R5cGUuYWRkT3BlcmF0aW9uT3JBdHRyaWJ1dGUgPSBmdW5jdGlvbih0eXBlLCBzaWduYXR1cmUsIGFjdGlvbkRpY3QpIHtcbiAgY29uc3QgdHlwZVBsdXJhbCA9IHR5cGUgKyAncyc7XG5cbiAgY29uc3QgcGFyc2VkTmFtZUFuZEZvcm1hbEFyZ3MgPSBwYXJzZVNpZ25hdHVyZSQxKHNpZ25hdHVyZSwgdHlwZSk7XG4gIGNvbnN0IHtuYW1lfSA9IHBhcnNlZE5hbWVBbmRGb3JtYWxBcmdzO1xuICBjb25zdCB7Zm9ybWFsc30gPSBwYXJzZWROYW1lQW5kRm9ybWFsQXJncztcblxuICAvLyBUT0RPOiBjaGVjayB0aGF0IHRoZXJlIGFyZSBubyBkdXBsaWNhdGUgZm9ybWFsIGFyZ3VtZW50c1xuXG4gIHRoaXMuYXNzZXJ0TmV3TmFtZShuYW1lLCB0eXBlKTtcblxuICAvLyBDcmVhdGUgdGhlIGFjdGlvbiBkaWN0aW9uYXJ5IGZvciB0aGlzIG9wZXJhdGlvbiAvIGF0dHJpYnV0ZSB0aGF0IGNvbnRhaW5zIGEgYF9kZWZhdWx0YCBhY3Rpb25cbiAgLy8gd2hpY2ggZGVmaW5lcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBpdGVyYXRpb24sIHRlcm1pbmFsLCBhbmQgbm9uLXRlcm1pbmFsIG5vZGVzLi4uXG4gIGNvbnN0IGJ1aWx0SW5EZWZhdWx0ID0gbmV3RGVmYXVsdEFjdGlvbih0eXBlLCBuYW1lLCBkb0l0KTtcbiAgY29uc3QgcmVhbEFjdGlvbkRpY3QgPSB7X2RlZmF1bHQ6IGJ1aWx0SW5EZWZhdWx0fTtcbiAgLy8gLi4uIGFuZCBhZGQgaW4gdGhlIGFjdGlvbnMgc3VwcGxpZWQgYnkgdGhlIHByb2dyYW1tZXIsIHdoaWNoIG1heSBvdmVycmlkZSBzb21lIG9yIGFsbCBvZiB0aGVcbiAgLy8gZGVmYXVsdCBvbmVzLlxuICBPYmplY3Qua2V5cyhhY3Rpb25EaWN0KS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIHJlYWxBY3Rpb25EaWN0W25hbWVdID0gYWN0aW9uRGljdFtuYW1lXTtcbiAgfSk7XG5cbiAgY29uc3QgZW50cnkgPVxuICAgIHR5cGUgPT09ICdvcGVyYXRpb24nID9cbiAgICAgIG5ldyBPcGVyYXRpb24obmFtZSwgZm9ybWFscywgcmVhbEFjdGlvbkRpY3QsIGJ1aWx0SW5EZWZhdWx0KSA6XG4gICAgICBuZXcgQXR0cmlidXRlKG5hbWUsIHJlYWxBY3Rpb25EaWN0LCBidWlsdEluRGVmYXVsdCk7XG5cbiAgLy8gVGhlIGZvbGxvd2luZyBjaGVjayBpcyBub3Qgc3RyaWN0bHkgbmVjZXNzYXJ5IChpdCB3aWxsIGhhcHBlbiBsYXRlciBhbnl3YXkpIGJ1dCBpdCdzIGJldHRlciB0b1xuICAvLyBjYXRjaCBlcnJvcnMgZWFybHkuXG4gIGVudHJ5LmNoZWNrQWN0aW9uRGljdCh0aGlzLmdyYW1tYXIpO1xuXG4gIHRoaXNbdHlwZVBsdXJhbF1bbmFtZV0gPSBlbnRyeTtcblxuICBmdW5jdGlvbiBkb0l0KC4uLmFyZ3MpIHtcbiAgICAvLyBEaXNwYXRjaCB0byBtb3N0IHNwZWNpZmljIHZlcnNpb24gb2YgdGhpcyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUgLS0gaXQgbWF5IGhhdmUgYmVlblxuICAgIC8vIG92ZXJyaWRkZW4gYnkgYSBzdWItc2VtYW50aWNzLlxuICAgIGNvbnN0IHRoaXNUaGluZyA9IHRoaXMuX3NlbWFudGljc1t0eXBlUGx1cmFsXVtuYW1lXTtcblxuICAgIC8vIENoZWNrIHRoYXQgdGhlIGNhbGxlciBwYXNzZWQgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cy5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gdGhpc1RoaW5nLmZvcm1hbHMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ludmFsaWQgbnVtYmVyIG9mIGFyZ3VtZW50cyBwYXNzZWQgdG8gJyArXG4gICAgICAgICAgbmFtZSArXG4gICAgICAgICAgJyAnICtcbiAgICAgICAgICB0eXBlICtcbiAgICAgICAgICAnIChleHBlY3RlZCAnICtcbiAgICAgICAgICB0aGlzVGhpbmcuZm9ybWFscy5sZW5ndGggK1xuICAgICAgICAgICcsIGdvdCAnICtcbiAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoICtcbiAgICAgICAgICAnKSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGFuIFwiYXJndW1lbnRzIG9iamVjdFwiIGZyb20gdGhlIGFyZ3VtZW50cyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoaXNcbiAgICAvLyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUuXG4gICAgY29uc3QgYXJnc09iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBbaWR4LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKGFyZ3MpKSB7XG4gICAgICBjb25zdCBmb3JtYWwgPSB0aGlzVGhpbmcuZm9ybWFsc1tpZHhdO1xuICAgICAgYXJnc09ialtmb3JtYWxdID0gdmFsO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZEFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgdGhpcy5hcmdzID0gYXJnc09iajtcbiAgICBjb25zdCBhbnMgPSB0aGlzVGhpbmcuZXhlY3V0ZSh0aGlzLl9zZW1hbnRpY3MsIHRoaXMpO1xuICAgIHRoaXMuYXJncyA9IG9sZEFyZ3M7XG4gICAgcmV0dXJuIGFucztcbiAgfVxuXG4gIGlmICh0eXBlID09PSAnb3BlcmF0aW9uJykge1xuICAgIHRoaXMuV3JhcHBlci5wcm90b3R5cGVbbmFtZV0gPSBkb0l0O1xuICAgIHRoaXMuV3JhcHBlci5wcm90b3R5cGVbbmFtZV0udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnWycgKyBuYW1lICsgJyBvcGVyYXRpb25dJztcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLldyYXBwZXIucHJvdG90eXBlLCBuYW1lLCB7XG4gICAgICBnZXQ6IGRvSXQsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsIC8vIFNvIHRoZSBwcm9wZXJ0eSBjYW4gYmUgZGVsZXRlZC5cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5hdHRyaWJ1dGVLZXlzLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdXRpbCQyLnVuaXF1ZUlkKG5hbWUpLFxuICAgIH0pO1xuICB9XG59O1xuXG5TZW1hbnRpY3MkMi5wcm90b3R5cGUuZXh0ZW5kT3BlcmF0aW9uT3JBdHRyaWJ1dGUgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBhY3Rpb25EaWN0KSB7XG4gIGNvbnN0IHR5cGVQbHVyYWwgPSB0eXBlICsgJ3MnO1xuXG4gIC8vIE1ha2Ugc3VyZSB0aGF0IGBuYW1lYCByZWFsbHkgaXMganVzdCBhIG5hbWUsIGkuZS4sIHRoYXQgaXQgZG9lc24ndCBhbHNvIGNvbnRhaW4gZm9ybWFscy5cbiAgcGFyc2VTaWduYXR1cmUkMShuYW1lLCAnYXR0cmlidXRlJyk7XG5cbiAgaWYgKCEodGhpcy5zdXBlciAmJiBuYW1lIGluIHRoaXMuc3VwZXJbdHlwZVBsdXJhbF0pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGV4dGVuZCAnICtcbiAgICAgICAgdHlwZSArXG4gICAgICAgIFwiICdcIiArXG4gICAgICAgIG5hbWUgK1xuICAgICAgICBcIic6IGRpZCBub3QgaW5oZXJpdCBhbiBcIiArXG4gICAgICAgIHR5cGUgK1xuICAgICAgICAnIHdpdGggdGhhdCBuYW1lJ1xuICAgICk7XG4gIH1cbiAgaWYgKGhhc093blByb3BlcnR5KHRoaXNbdHlwZVBsdXJhbF0sIG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZXh0ZW5kICcgKyB0eXBlICsgXCIgJ1wiICsgbmFtZSArIFwiJyBhZ2FpblwiKTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBhIG5ldyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUgd2hvc2UgYWN0aW9uRGljdCBkZWxlZ2F0ZXMgdG8gdGhlIHN1cGVyIG9wZXJhdGlvbiAvXG4gIC8vIGF0dHJpYnV0ZSdzIGFjdGlvbkRpY3QsIGFuZCB3aGljaCBoYXMgYWxsIHRoZSBrZXlzIGZyb20gYGluaGVyaXRlZEFjdGlvbkRpY3RgLlxuICBjb25zdCBpbmhlcml0ZWRGb3JtYWxzID0gdGhpc1t0eXBlUGx1cmFsXVtuYW1lXS5mb3JtYWxzO1xuICBjb25zdCBpbmhlcml0ZWRBY3Rpb25EaWN0ID0gdGhpc1t0eXBlUGx1cmFsXVtuYW1lXS5hY3Rpb25EaWN0O1xuICBjb25zdCBuZXdBY3Rpb25EaWN0ID0gT2JqZWN0LmNyZWF0ZShpbmhlcml0ZWRBY3Rpb25EaWN0KTtcbiAgT2JqZWN0LmtleXMoYWN0aW9uRGljdCkuZm9yRWFjaChuYW1lID0+IHtcbiAgICBuZXdBY3Rpb25EaWN0W25hbWVdID0gYWN0aW9uRGljdFtuYW1lXTtcbiAgfSk7XG5cbiAgdGhpc1t0eXBlUGx1cmFsXVtuYW1lXSA9XG4gICAgdHlwZSA9PT0gJ29wZXJhdGlvbicgP1xuICAgICAgbmV3IE9wZXJhdGlvbihuYW1lLCBpbmhlcml0ZWRGb3JtYWxzLCBuZXdBY3Rpb25EaWN0KSA6XG4gICAgICBuZXcgQXR0cmlidXRlKG5hbWUsIG5ld0FjdGlvbkRpY3QpO1xuXG4gIC8vIFRoZSBmb2xsb3dpbmcgY2hlY2sgaXMgbm90IHN0cmljdGx5IG5lY2Vzc2FyeSAoaXQgd2lsbCBoYXBwZW4gbGF0ZXIgYW55d2F5KSBidXQgaXQncyBiZXR0ZXIgdG9cbiAgLy8gY2F0Y2ggZXJyb3JzIGVhcmx5LlxuICB0aGlzW3R5cGVQbHVyYWxdW25hbWVdLmNoZWNrQWN0aW9uRGljdCh0aGlzLmdyYW1tYXIpO1xufTtcblxuU2VtYW50aWNzJDIucHJvdG90eXBlLmFzc2VydE5ld05hbWUgPSBmdW5jdGlvbihuYW1lLCB0eXBlKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eShXcmFwcGVyLnByb3RvdHlwZSwgbmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgJyArIHR5cGUgKyBcIiAnXCIgKyBuYW1lICsgXCInOiB0aGF0J3MgYSByZXNlcnZlZCBuYW1lXCIpO1xuICB9XG4gIGlmIChuYW1lIGluIHRoaXMub3BlcmF0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBhZGQgJyArIHR5cGUgKyBcIiAnXCIgKyBuYW1lICsgXCInOiBhbiBvcGVyYXRpb24gd2l0aCB0aGF0IG5hbWUgYWxyZWFkeSBleGlzdHNcIlxuICAgICk7XG4gIH1cbiAgaWYgKG5hbWUgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2Fubm90IGFkZCAnICsgdHlwZSArIFwiICdcIiArIG5hbWUgKyBcIic6IGFuIGF0dHJpYnV0ZSB3aXRoIHRoYXQgbmFtZSBhbHJlYWR5IGV4aXN0c1wiXG4gICAgKTtcbiAgfVxufTtcblxuLy8gUmV0dXJucyBhIHdyYXBwZXIgZm9yIHRoZSBnaXZlbiBDU1QgYG5vZGVgIGluIHRoaXMgc2VtYW50aWNzLlxuLy8gSWYgYG5vZGVgIGlzIGFscmVhZHkgYSB3cmFwcGVyLCByZXR1cm5zIGBub2RlYCBpdHNlbGYuICAvLyBUT0RPOiB3aHkgaXMgdGhpcyBuZWVkZWQ/XG5TZW1hbnRpY3MkMi5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKG5vZGUsIHNvdXJjZSwgb3B0QmFzZUludGVydmFsKSB7XG4gIGNvbnN0IGJhc2VJbnRlcnZhbCA9IG9wdEJhc2VJbnRlcnZhbCB8fCBzb3VyY2U7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgdGhpcy5XcmFwcGVyID8gbm9kZSA6IG5ldyB0aGlzLldyYXBwZXIobm9kZSwgc291cmNlLCBiYXNlSW50ZXJ2YWwpO1xufTtcblxuLy8gQ3JlYXRlcyBhIG5ldyBTZW1hbnRpY3MgaW5zdGFuY2UgZm9yIGBncmFtbWFyYCwgaW5oZXJpdGluZyBvcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzIGZyb21cbi8vIGBvcHRTdXBlclNlbWFudGljc2AsIGlmIGl0IGlzIHNwZWNpZmllZC4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWN0cyBhcyBhIHByb3h5IGZvciB0aGUgbmV3XG4vLyBTZW1hbnRpY3MgaW5zdGFuY2UuIFdoZW4gdGhhdCBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggYSBDU1Qgbm9kZSBhcyBhbiBhcmd1bWVudCwgaXQgcmV0dXJuc1xuLy8gYSB3cmFwcGVyIGZvciB0aGF0IG5vZGUgd2hpY2ggZ2l2ZXMgYWNjZXNzIHRvIHRoZSBvcGVyYXRpb25zIGFuZCBhdHRyaWJ1dGVzIHByb3ZpZGVkIGJ5IHRoaXNcbi8vIHNlbWFudGljcy5cblNlbWFudGljcyQyLmNyZWF0ZVNlbWFudGljcyA9IGZ1bmN0aW9uKGdyYW1tYXIsIG9wdFN1cGVyU2VtYW50aWNzKSB7XG4gIGNvbnN0IHMgPSBuZXcgU2VtYW50aWNzJDIoXG4gICAgICBncmFtbWFyLFxuICAgIG9wdFN1cGVyU2VtYW50aWNzICE9PSB1bmRlZmluZWQgP1xuICAgICAgb3B0U3VwZXJTZW1hbnRpY3MgOlxuICAgICAgU2VtYW50aWNzJDIuQnVpbHRJblNlbWFudGljcy5fZ2V0U2VtYW50aWNzKClcbiAgKTtcblxuICAvLyBUbyBlbmFibGUgY2xpZW50cyB0byBpbnZva2UgYSBzZW1hbnRpY3MgbGlrZSBhIGZ1bmN0aW9uLCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IGFjdHMgYXMgYSBwcm94eVxuICAvLyBmb3IgYHNgLCB3aGljaCBpcyB0aGUgcmVhbCBgU2VtYW50aWNzYCBpbnN0YW5jZS5cbiAgY29uc3QgcHJveHkgPSBmdW5jdGlvbiBBU2VtYW50aWNzKG1hdGNoUmVzdWx0KSB7XG4gICAgaWYgKCEobWF0Y2hSZXN1bHQgaW5zdGFuY2VvZiBNYXRjaFJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1NlbWFudGljcyBleHBlY3RlZCBhIE1hdGNoUmVzdWx0LCBidXQgZ290ICcgK1xuICAgICAgICAgIGNvbW1vbiQzLnVuZXhwZWN0ZWRPYmpUb1N0cmluZyhtYXRjaFJlc3VsdClcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChtYXRjaFJlc3VsdC5mYWlsZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2Fubm90IGFwcGx5IFNlbWFudGljcyB0byAnICsgbWF0Y2hSZXN1bHQudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgY3N0ID0gbWF0Y2hSZXN1bHQuX2NzdDtcbiAgICBpZiAoY3N0LmdyYW1tYXIgIT09IGdyYW1tYXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkNhbm5vdCB1c2UgYSBNYXRjaFJlc3VsdCBmcm9tIGdyYW1tYXIgJ1wiICtcbiAgICAgICAgICBjc3QuZ3JhbW1hci5uYW1lICtcbiAgICAgICAgICBcIicgd2l0aCBhIHNlbWFudGljcyBmb3IgJ1wiICtcbiAgICAgICAgICBncmFtbWFyLm5hbWUgK1xuICAgICAgICAgIFwiJ1wiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFN0cmVhbSA9IG5ldyBJbnB1dFN0cmVhbSQxKG1hdGNoUmVzdWx0LmlucHV0KTtcbiAgICByZXR1cm4gcy53cmFwKGNzdCwgaW5wdXRTdHJlYW0uaW50ZXJ2YWwobWF0Y2hSZXN1bHQuX2NzdE9mZnNldCwgbWF0Y2hSZXN1bHQuaW5wdXQubGVuZ3RoKSk7XG4gIH07XG5cbiAgLy8gRm9yd2FyZCBwdWJsaWMgbWV0aG9kcyBmcm9tIHRoZSBwcm94eSB0byB0aGUgc2VtYW50aWNzIGluc3RhbmNlLlxuICBwcm94eS5hZGRPcGVyYXRpb24gPSBmdW5jdGlvbihzaWduYXR1cmUsIGFjdGlvbkRpY3QpIHtcbiAgICBzLmFkZE9wZXJhdGlvbk9yQXR0cmlidXRlKCdvcGVyYXRpb24nLCBzaWduYXR1cmUsIGFjdGlvbkRpY3QpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbiAgcHJveHkuZXh0ZW5kT3BlcmF0aW9uID0gZnVuY3Rpb24obmFtZSwgYWN0aW9uRGljdCkge1xuICAgIHMuZXh0ZW5kT3BlcmF0aW9uT3JBdHRyaWJ1dGUoJ29wZXJhdGlvbicsIG5hbWUsIGFjdGlvbkRpY3QpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbiAgcHJveHkuYWRkQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgYWN0aW9uRGljdCkge1xuICAgIHMuYWRkT3BlcmF0aW9uT3JBdHRyaWJ1dGUoJ2F0dHJpYnV0ZScsIG5hbWUsIGFjdGlvbkRpY3QpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbiAgcHJveHkuZXh0ZW5kQXR0cmlidXRlID0gZnVuY3Rpb24obmFtZSwgYWN0aW9uRGljdCkge1xuICAgIHMuZXh0ZW5kT3BlcmF0aW9uT3JBdHRyaWJ1dGUoJ2F0dHJpYnV0ZScsIG5hbWUsIGFjdGlvbkRpY3QpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbiAgcHJveHkuX2dldEFjdGlvbkRpY3QgPSBmdW5jdGlvbihvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWUpIHtcbiAgICBjb25zdCBhY3Rpb24gPVxuICAgICAgcy5vcGVyYXRpb25zW29wZXJhdGlvbk9yQXR0cmlidXRlTmFtZV0gfHwgcy5hdHRyaWJ1dGVzW29wZXJhdGlvbk9yQXR0cmlidXRlTmFtZV07XG4gICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnXCInICtcbiAgICAgICAgICBvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWUgK1xuICAgICAgICAgICdcIiBpcyBub3QgYSB2YWxpZCBvcGVyYXRpb24gb3IgYXR0cmlidXRlICcgK1xuICAgICAgICAgICduYW1lIGluIHRoaXMgc2VtYW50aWNzIGZvciBcIicgK1xuICAgICAgICAgIGdyYW1tYXIubmFtZSArXG4gICAgICAgICAgJ1wiJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGlvbi5hY3Rpb25EaWN0O1xuICB9O1xuICBwcm94eS5fcmVtb3ZlID0gZnVuY3Rpb24ob3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lKSB7XG4gICAgbGV0IHNlbWFudGljO1xuICAgIGlmIChvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWUgaW4gcy5vcGVyYXRpb25zKSB7XG4gICAgICBzZW1hbnRpYyA9IHMub3BlcmF0aW9uc1tvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWVdO1xuICAgICAgZGVsZXRlIHMub3BlcmF0aW9uc1tvcGVyYXRpb25PckF0dHJpYnV0ZU5hbWVdO1xuICAgIH0gZWxzZSBpZiAob3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lIGluIHMuYXR0cmlidXRlcykge1xuICAgICAgc2VtYW50aWMgPSBzLmF0dHJpYnV0ZXNbb3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lXTtcbiAgICAgIGRlbGV0ZSBzLmF0dHJpYnV0ZXNbb3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lXTtcbiAgICB9XG4gICAgZGVsZXRlIHMuV3JhcHBlci5wcm90b3R5cGVbb3BlcmF0aW9uT3JBdHRyaWJ1dGVOYW1lXTtcbiAgICByZXR1cm4gc2VtYW50aWM7XG4gIH07XG4gIHByb3h5LmdldE9wZXJhdGlvbk5hbWVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHMub3BlcmF0aW9ucyk7XG4gIH07XG4gIHByb3h5LmdldEF0dHJpYnV0ZU5hbWVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHMuYXR0cmlidXRlcyk7XG4gIH07XG4gIHByb3h5LmdldEdyYW1tYXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcy5ncmFtbWFyO1xuICB9O1xuICBwcm94eS50b1JlY2lwZSA9IGZ1bmN0aW9uKHNlbWFudGljc09ubHkpIHtcbiAgICByZXR1cm4gcy50b1JlY2lwZShzZW1hbnRpY3NPbmx5KTtcbiAgfTtcblxuICAvLyBNYWtlIHRoZSBwcm94eSdzIHRvU3RyaW5nKCkgd29yay5cbiAgcHJveHkudG9TdHJpbmcgPSBzLnRvU3RyaW5nLmJpbmQocyk7XG5cbiAgLy8gUmV0dXJucyB0aGUgc2VtYW50aWNzIGZvciB0aGUgcHJveHkuXG4gIHByb3h5Ll9nZXRTZW1hbnRpY3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcztcbiAgfTtcblxuICByZXR1cm4gcHJveHk7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLSBPcGVyYXRpb24gLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gQW4gT3BlcmF0aW9uIHJlcHJlc2VudHMgYSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGEgY29uY3JldGUgc3ludGF4IHRyZWUgKENTVCkgLS0gaXQncyB2ZXJ5XG4vLyBzaW1pbGFyIHRvIGEgVmlzaXRvciAoaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WaXNpdG9yX3BhdHRlcm4pLiBBbiBvcGVyYXRpb24gaXMgZXhlY3V0ZWQgYnlcbi8vIHJlY3Vyc2l2ZWx5IHdhbGtpbmcgdGhlIENTVCwgYW5kIGF0IGVhY2ggbm9kZSwgaW52b2tpbmcgdGhlIG1hdGNoaW5nIHNlbWFudGljIGFjdGlvbiBmcm9tXG4vLyBgYWN0aW9uRGljdGAuIFNlZSBgT3BlcmF0aW9uLnByb3RvdHlwZS5leGVjdXRlYCBmb3IgZGV0YWlscyBvZiBob3cgYSBDU1Qgbm9kZSdzIG1hdGNoaW5nIHNlbWFudGljXG4vLyBhY3Rpb24gaXMgZm91bmQuXG5jbGFzcyBPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBmb3JtYWxzLCBhY3Rpb25EaWN0LCBidWlsdEluRGVmYXVsdCkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5mb3JtYWxzID0gZm9ybWFscztcbiAgICB0aGlzLmFjdGlvbkRpY3QgPSBhY3Rpb25EaWN0O1xuICAgIHRoaXMuYnVpbHRJbkRlZmF1bHQgPSBidWlsdEluRGVmYXVsdDtcbiAgfVxuXG4gIGNoZWNrQWN0aW9uRGljdChncmFtbWFyKSB7XG4gICAgZ3JhbW1hci5fY2hlY2tUb3BEb3duQWN0aW9uRGljdCh0aGlzLnR5cGVOYW1lLCB0aGlzLm5hbWUsIHRoaXMuYWN0aW9uRGljdCk7XG4gIH1cblxuICAvLyBFeGVjdXRlIHRoaXMgb3BlcmF0aW9uIG9uIHRoZSBDU1Qgbm9kZSBhc3NvY2lhdGVkIHdpdGggYG5vZGVXcmFwcGVyYCBpbiB0aGUgY29udGV4dCBvZiB0aGVcbiAgLy8gZ2l2ZW4gU2VtYW50aWNzIGluc3RhbmNlLlxuICBleGVjdXRlKHNlbWFudGljcywgbm9kZVdyYXBwZXIpIHtcbiAgICB0cnkge1xuICAgICAgLy8gTG9vayBmb3IgYSBzZW1hbnRpYyBhY3Rpb24gd2hvc2UgbmFtZSBtYXRjaGVzIHRoZSBub2RlJ3MgY29uc3RydWN0b3IgbmFtZSwgd2hpY2ggaXMgZWl0aGVyXG4gICAgICAvLyB0aGUgbmFtZSBvZiBhIHJ1bGUgaW4gdGhlIGdyYW1tYXIsIG9yICdfdGVybWluYWwnIChmb3IgYSB0ZXJtaW5hbCBub2RlKSwgb3IgJ19pdGVyJyAoZm9yIGFuXG4gICAgICAvLyBpdGVyYXRpb24gbm9kZSkuXG4gICAgICBjb25zdCB7Y3Rvck5hbWV9ID0gbm9kZVdyYXBwZXIuX25vZGU7XG4gICAgICBsZXQgYWN0aW9uRm4gPSB0aGlzLmFjdGlvbkRpY3RbY3Rvck5hbWVdO1xuICAgICAgaWYgKGFjdGlvbkZuKSB7XG4gICAgICAgIGdsb2JhbEFjdGlvblN0YWNrLnB1c2goW3RoaXMsIGN0b3JOYW1lXSk7XG4gICAgICAgIHJldHVybiBhY3Rpb25Gbi5hcHBseShub2RlV3JhcHBlciwgbm9kZVdyYXBwZXIuX2NoaWxkcmVuKCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgYWN0aW9uIGRpY3Rpb25hcnkgZG9lcyBub3QgY29udGFpbiBhIHNlbWFudGljIGFjdGlvbiBmb3IgdGhpcyBzcGVjaWZpYyB0eXBlIG9mIG5vZGUuXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgbm9udGVybWluYWwgbm9kZSBhbmQgdGhlIHByb2dyYW1tZXIgaGFzIHByb3ZpZGVkIGEgYF9ub250ZXJtaW5hbGAgc2VtYW50aWNcbiAgICAgIC8vIGFjdGlvbiwgd2UgaW52b2tlIGl0OlxuICAgICAgaWYgKG5vZGVXcmFwcGVyLmlzTm9udGVybWluYWwoKSkge1xuICAgICAgICBhY3Rpb25GbiA9IHRoaXMuYWN0aW9uRGljdC5fbm9udGVybWluYWw7XG4gICAgICAgIGlmIChhY3Rpb25Gbikge1xuICAgICAgICAgIGdsb2JhbEFjdGlvblN0YWNrLnB1c2goW3RoaXMsICdfbm9udGVybWluYWwnLCBjdG9yTmFtZV0pO1xuICAgICAgICAgIHJldHVybiBhY3Rpb25Gbi5hcHBseShub2RlV3JhcHBlciwgbm9kZVdyYXBwZXIuX2NoaWxkcmVuKCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgd2UgaW52b2tlIHRoZSAnX2RlZmF1bHQnIHNlbWFudGljIGFjdGlvbi5cbiAgICAgIGdsb2JhbEFjdGlvblN0YWNrLnB1c2goW3RoaXMsICdkZWZhdWx0IGFjdGlvbicsIGN0b3JOYW1lXSk7XG4gICAgICByZXR1cm4gdGhpcy5hY3Rpb25EaWN0Ll9kZWZhdWx0LmFwcGx5KG5vZGVXcmFwcGVyLCBub2RlV3JhcHBlci5fY2hpbGRyZW4oKSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGdsb2JhbEFjdGlvblN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxufVxuXG5PcGVyYXRpb24ucHJvdG90eXBlLnR5cGVOYW1lID0gJ29wZXJhdGlvbic7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIEF0dHJpYnV0ZSAtLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBBdHRyaWJ1dGVzIGFyZSBPcGVyYXRpb25zIHdob3NlIHJlc3VsdHMgYXJlIG1lbW9pemVkLiBUaGlzIG1lYW5zIHRoYXQsIGZvciBhbnkgZ2l2ZW4gc2VtYW50aWNzLFxuLy8gdGhlIHNlbWFudGljIGFjdGlvbiBmb3IgYSBDU1Qgbm9kZSB3aWxsIGJlIGludm9rZWQgbm8gbW9yZSB0aGFuIG9uY2UuXG5jbGFzcyBBdHRyaWJ1dGUgZXh0ZW5kcyBPcGVyYXRpb24ge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBhY3Rpb25EaWN0LCBidWlsdEluRGVmYXVsdCkge1xuICAgIHN1cGVyKG5hbWUsIFtdLCBhY3Rpb25EaWN0LCBidWlsdEluRGVmYXVsdCk7XG4gIH1cblxuICBleGVjdXRlKHNlbWFudGljcywgbm9kZVdyYXBwZXIpIHtcbiAgICBjb25zdCBub2RlID0gbm9kZVdyYXBwZXIuX25vZGU7XG4gICAgY29uc3Qga2V5ID0gc2VtYW50aWNzLmF0dHJpYnV0ZUtleXNbdGhpcy5uYW1lXTtcbiAgICBpZiAoIWhhc093blByb3BlcnR5KG5vZGUsIGtleSkpIHtcbiAgICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgYSBzdXBlci1zZW5kIC0tIGlzbid0IEpTIGJlYXV0aWZ1bD8gOi9cbiAgICAgIG5vZGVba2V5XSA9IE9wZXJhdGlvbi5wcm90b3R5cGUuZXhlY3V0ZS5jYWxsKHRoaXMsIHNlbWFudGljcywgbm9kZVdyYXBwZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZVtrZXldO1xuICB9XG59XG5cbkF0dHJpYnV0ZS5wcm90b3R5cGUudHlwZU5hbWUgPSAnYXR0cmlidXRlJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBTZW1hbnRpY3NfMSA9IFNlbWFudGljcyQyO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgQ2FzZUluc2Vuc2l0aXZlVGVybWluYWwgPSBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbF8xO1xuY29uc3QgTWF0Y2hlciA9IE1hdGNoZXJfMTtcbmNvbnN0IFNlbWFudGljcyQxID0gU2VtYW50aWNzXzE7XG5jb25zdCBjb21tb24kMiA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzJDIgPSBlcnJvcnMkOTtcbmNvbnN0IHBleHBycyQzID0gcGV4cHJzJDY7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBTUEVDSUFMX0FDVElPTl9OQU1FUyA9IFsnX2l0ZXInLCAnX3Rlcm1pbmFsJywgJ19ub250ZXJtaW5hbCcsICdfZGVmYXVsdCddO1xuXG5mdW5jdGlvbiBnZXRTb3J0ZWRSdWxlVmFsdWVzKGdyYW1tYXIpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGdyYW1tYXIucnVsZXMpXG4gICAgICAuc29ydCgpXG4gICAgICAubWFwKG5hbWUgPT4gZ3JhbW1hci5ydWxlc1tuYW1lXSk7XG59XG5cbi8vIFVudGlsIEVTMjAxOSwgSlNPTiB3YXMgbm90IGEgdmFsaWQgc3Vic2V0IG9mIEphdmFTY3JpcHQgYmVjYXVzZSBVKzIwMjggKGxpbmUgc2VwYXJhdG9yKVxuLy8gYW5kIFUrMjAyOSAocGFyYWdyYXBoIHNlcGFyYXRvcikgYXJlIGFsbG93ZWQgaW4gSlNPTiBzdHJpbmcgbGl0ZXJhbHMsIGJ1dCBub3QgaW4gSlMuXG4vLyBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGVuY29kZXMgdGhvc2UgdHdvIGNoYXJhY3RlcnMgc28gdGhhdCB0aGUgcmVzdWx0aW5nIHN0cmluZyBpc1xuLy8gcmVwcmVzZW50cyBib3RoIHZhbGlkIEpTT04sIGFuZCB2YWxpZCBKYXZhU2NyaXB0IChmb3IgRVMyMDE4IGFuZCBiZWxvdykuXG4vLyBTZWUgaHR0cHM6Ly92OC5kZXYvZmVhdHVyZXMvc3Vic3VtZS1qc29uIGZvciBtb3JlIGRldGFpbHMuXG5jb25zdCBqc29uVG9KUyA9IHN0ciA9PiBzdHIucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JykucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5Jyk7XG5cbmZ1bmN0aW9uIEdyYW1tYXIkNChuYW1lLCBzdXBlckdyYW1tYXIsIHJ1bGVzLCBvcHREZWZhdWx0U3RhcnRSdWxlKSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuc3VwZXJHcmFtbWFyID0gc3VwZXJHcmFtbWFyO1xuICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gIGlmIChvcHREZWZhdWx0U3RhcnRSdWxlKSB7XG4gICAgaWYgKCEob3B0RGVmYXVsdFN0YXJ0UnVsZSBpbiBydWxlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIkludmFsaWQgc3RhcnQgcnVsZTogJ1wiICtcbiAgICAgICAgICBvcHREZWZhdWx0U3RhcnRSdWxlICtcbiAgICAgICAgICBcIicgaXMgbm90IGEgcnVsZSBpbiBncmFtbWFyICdcIiArXG4gICAgICAgICAgbmFtZSArXG4gICAgICAgICAgXCInXCJcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuZGVmYXVsdFN0YXJ0UnVsZSA9IG9wdERlZmF1bHRTdGFydFJ1bGU7XG4gIH1cbn1cblxubGV0IG9obUdyYW1tYXIkMjtcbmxldCBidWlsZEdyYW1tYXIkMTtcblxuLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGZyb20gbWFpbi5qcyBvbmNlIE9obSBoYXMgbG9hZGVkLlxuR3JhbW1hciQ0LmluaXRBcHBsaWNhdGlvblBhcnNlciA9IGZ1bmN0aW9uKGdyYW1tYXIsIGJ1aWxkZXJGbikge1xuICBvaG1HcmFtbWFyJDIgPSBncmFtbWFyO1xuICBidWlsZEdyYW1tYXIkMSA9IGJ1aWxkZXJGbjtcbn07XG5cbkdyYW1tYXIkNC5wcm90b3R5cGUgPSB7XG4gIG1hdGNoZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRjaGVyKHRoaXMpO1xuICB9LFxuXG4gIC8vIFJldHVybiB0cnVlIGlmIHRoZSBncmFtbWFyIGlzIGEgYnVpbHQtaW4gZ3JhbW1hciwgb3RoZXJ3aXNlIGZhbHNlLlxuICAvLyBOT1RFOiBUaGlzIG1pZ2h0IGdpdmUgYW4gdW5leHBlY3RlZCByZXN1bHQgaWYgY2FsbGVkIGJlZm9yZSBCdWlsdEluUnVsZXMgaXMgZGVmaW5lZCFcbiAgaXNCdWlsdEluKCkge1xuICAgIHJldHVybiB0aGlzID09PSBHcmFtbWFyJDQuUHJvdG9CdWlsdEluUnVsZXMgfHwgdGhpcyA9PT0gR3JhbW1hciQ0LkJ1aWx0SW5SdWxlcztcbiAgfSxcblxuICBlcXVhbHMoZykge1xuICAgIGlmICh0aGlzID09PSBnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRG8gdGhlIGNoZWFwZXN0IGNvbXBhcmlzb25zIGZpcnN0LlxuICAgIGlmIChcbiAgICAgIGcgPT0gbnVsbCB8fFxuICAgICAgdGhpcy5uYW1lICE9PSBnLm5hbWUgfHxcbiAgICAgIHRoaXMuZGVmYXVsdFN0YXJ0UnVsZSAhPT0gZy5kZWZhdWx0U3RhcnRSdWxlIHx8XG4gICAgICAhKHRoaXMuc3VwZXJHcmFtbWFyID09PSBnLnN1cGVyR3JhbW1hciB8fCB0aGlzLnN1cGVyR3JhbW1hci5lcXVhbHMoZy5zdXBlckdyYW1tYXIpKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBteVJ1bGVzID0gZ2V0U29ydGVkUnVsZVZhbHVlcyh0aGlzKTtcbiAgICBjb25zdCBvdGhlclJ1bGVzID0gZ2V0U29ydGVkUnVsZVZhbHVlcyhnKTtcbiAgICByZXR1cm4gKFxuICAgICAgbXlSdWxlcy5sZW5ndGggPT09IG90aGVyUnVsZXMubGVuZ3RoICYmXG4gICAgICBteVJ1bGVzLmV2ZXJ5KChydWxlLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcnVsZS5kZXNjcmlwdGlvbiA9PT0gb3RoZXJSdWxlc1tpXS5kZXNjcmlwdGlvbiAmJlxuICAgICAgICAgIHJ1bGUuZm9ybWFscy5qb2luKCcsJykgPT09IG90aGVyUnVsZXNbaV0uZm9ybWFscy5qb2luKCcsJykgJiZcbiAgICAgICAgICBydWxlLmJvZHkudG9TdHJpbmcoKSA9PT0gb3RoZXJSdWxlc1tpXS5ib2R5LnRvU3RyaW5nKClcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfSxcblxuICBtYXRjaChpbnB1dCwgb3B0U3RhcnRBcHBsaWNhdGlvbikge1xuICAgIGNvbnN0IG0gPSB0aGlzLm1hdGNoZXIoKTtcbiAgICBtLnJlcGxhY2VJbnB1dFJhbmdlKDAsIDAsIGlucHV0KTtcbiAgICByZXR1cm4gbS5tYXRjaChvcHRTdGFydEFwcGxpY2F0aW9uKTtcbiAgfSxcblxuICB0cmFjZShpbnB1dCwgb3B0U3RhcnRBcHBsaWNhdGlvbikge1xuICAgIGNvbnN0IG0gPSB0aGlzLm1hdGNoZXIoKTtcbiAgICBtLnJlcGxhY2VJbnB1dFJhbmdlKDAsIDAsIGlucHV0KTtcbiAgICByZXR1cm4gbS50cmFjZShvcHRTdGFydEFwcGxpY2F0aW9uKTtcbiAgfSxcblxuICBjcmVhdGVTZW1hbnRpY3MoKSB7XG4gICAgcmV0dXJuIFNlbWFudGljcyQxLmNyZWF0ZVNlbWFudGljcyh0aGlzKTtcbiAgfSxcblxuICBleHRlbmRTZW1hbnRpY3Moc3VwZXJTZW1hbnRpY3MpIHtcbiAgICByZXR1cm4gU2VtYW50aWNzJDEuY3JlYXRlU2VtYW50aWNzKHRoaXMsIHN1cGVyU2VtYW50aWNzLl9nZXRTZW1hbnRpY3MoKSk7XG4gIH0sXG5cbiAgLy8gQ2hlY2sgdGhhdCBldmVyeSBrZXkgaW4gYGFjdGlvbkRpY3RgIGNvcnJlc3BvbmRzIHRvIGEgc2VtYW50aWMgYWN0aW9uLCBhbmQgdGhhdCBpdCBtYXBzIHRvXG4gIC8vIGEgZnVuY3Rpb24gb2YgdGhlIGNvcnJlY3QgYXJpdHkuIElmIG5vdCwgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICBfY2hlY2tUb3BEb3duQWN0aW9uRGljdCh3aGF0LCBuYW1lLCBhY3Rpb25EaWN0KSB7XG4gICAgY29uc3QgcHJvYmxlbXMgPSBbXTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGNvbnN0IGsgaW4gYWN0aW9uRGljdCkge1xuICAgICAgY29uc3QgdiA9IGFjdGlvbkRpY3Rba107XG4gICAgICBjb25zdCBpc1NwZWNpYWxBY3Rpb24gPSBTUEVDSUFMX0FDVElPTl9OQU1FUy5pbmNsdWRlcyhrKTtcblxuICAgICAgaWYgKCFpc1NwZWNpYWxBY3Rpb24gJiYgIShrIGluIHRoaXMucnVsZXMpKSB7XG4gICAgICAgIHByb2JsZW1zLnB1c2goYCcke2t9JyBpcyBub3QgYSB2YWxpZCBzZW1hbnRpYyBhY3Rpb24gZm9yICcke3RoaXMubmFtZX0nYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb2JsZW1zLnB1c2goYCcke2t9JyBtdXN0IGJlIGEgZnVuY3Rpb24gaW4gYW4gYWN0aW9uIGRpY3Rpb25hcnkgZm9yICcke3RoaXMubmFtZX0nYCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgYWN0dWFsID0gdi5sZW5ndGg7XG4gICAgICBjb25zdCBleHBlY3RlZCA9IHRoaXMuX3RvcERvd25BY3Rpb25Bcml0eShrKTtcbiAgICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICAgIGxldCBkZXRhaWxzO1xuICAgICAgICBpZiAoayA9PT0gJ19pdGVyJyB8fCBrID09PSAnX25vbnRlcm1pbmFsJykge1xuICAgICAgICAgIGRldGFpbHMgPVxuICAgICAgICAgICAgYGl0IHNob3VsZCB1c2UgYSByZXN0IHBhcmFtZXRlciwgZS5nLiBcXGAke2t9KC4uLmNoaWxkcmVuKSB7fVxcYC4gYCArXG4gICAgICAgICAgICAnTk9URTogdGhpcyBpcyBuZXcgaW4gT2htIHYxNiDigJQgc2VlIGh0dHBzOi8vb2htanMub3JnL2QvYXRpIGZvciBkZXRhaWxzLic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGV0YWlscyA9IGBleHBlY3RlZCAke2V4cGVjdGVkfSwgZ290ICR7YWN0dWFsfWA7XG4gICAgICAgIH1cbiAgICAgICAgcHJvYmxlbXMucHVzaChgU2VtYW50aWMgYWN0aW9uICcke2t9JyBoYXMgdGhlIHdyb25nIGFyaXR5OiAke2RldGFpbHN9YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9ibGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwcmV0dHlQcm9ibGVtcyA9IHByb2JsZW1zLm1hcChwcm9ibGVtID0+ICctICcgKyBwcm9ibGVtKTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIGBGb3VuZCBlcnJvcnMgaW4gdGhlIGFjdGlvbiBkaWN0aW9uYXJ5IG9mIHRoZSAnJHtuYW1lfScgJHt3aGF0fTpgLFxuICAgICAgICAgICAgLi4ucHJldHR5UHJvYmxlbXMsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKVxuICAgICAgKTtcbiAgICAgIGVycm9yLnByb2JsZW1zID0gcHJvYmxlbXM7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH0sXG5cbiAgLy8gUmV0dXJuIHRoZSBleHBlY3RlZCBhcml0eSBmb3IgYSBzZW1hbnRpYyBhY3Rpb24gbmFtZWQgYGFjdGlvbk5hbWVgLCB3aGljaFxuICAvLyBpcyBlaXRoZXIgYSBydWxlIG5hbWUgb3IgYSBzcGVjaWFsIGFjdGlvbiBuYW1lIGxpa2UgJ19ub250ZXJtaW5hbCcuXG4gIF90b3BEb3duQWN0aW9uQXJpdHkoYWN0aW9uTmFtZSkge1xuICAgIC8vIEFsbCBzcGVjaWFsIGFjdGlvbnMgaGF2ZSBhbiBleHBlY3RlZCBhcml0eSBvZiAwLCB0aG91Z2ggYWxsIGJ1dCBfdGVybWluYWxcbiAgICAvLyBhcmUgZXhwZWN0ZWQgdG8gdXNlIHRoZSByZXN0IHBhcmFtZXRlciBzeW50YXggKGUuZy4gYF9pdGVyKC4uLmNoaWxkcmVuKWApLlxuICAgIC8vIFRoaXMgaXMgY29uc2lkZXJlZCB0byBoYXZlIGFyaXR5IDAsIGkuZS4gYCgoLi4uYXJncykgPT4ge30pLmxlbmd0aGAgaXMgMC5cbiAgICByZXR1cm4gU1BFQ0lBTF9BQ1RJT05fTkFNRVMuaW5jbHVkZXMoYWN0aW9uTmFtZSkgP1xuICAgICAgMCA6XG4gICAgICB0aGlzLnJ1bGVzW2FjdGlvbk5hbWVdLmJvZHkuZ2V0QXJpdHkoKTtcbiAgfSxcblxuICBfaW5oZXJpdHNGcm9tKGdyYW1tYXIpIHtcbiAgICBsZXQgZyA9IHRoaXMuc3VwZXJHcmFtbWFyO1xuICAgIHdoaWxlIChnKSB7XG4gICAgICBpZiAoZy5lcXVhbHMoZ3JhbW1hciwgdHJ1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBnID0gZy5zdXBlckdyYW1tYXI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICB0b1JlY2lwZShzdXBlckdyYW1tYXJFeHByID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgbWV0YUluZm8gPSB7fTtcbiAgICAvLyBJbmNsdWRlIHRoZSBncmFtbWFyIHNvdXJjZSBpZiBpdCBpcyBhdmFpbGFibGUuXG4gICAgaWYgKHRoaXMuc291cmNlKSB7XG4gICAgICBtZXRhSW5mby5zb3VyY2UgPSB0aGlzLnNvdXJjZS5jb250ZW50cztcbiAgICB9XG5cbiAgICBsZXQgc3RhcnRSdWxlID0gbnVsbDtcbiAgICBpZiAodGhpcy5kZWZhdWx0U3RhcnRSdWxlKSB7XG4gICAgICBzdGFydFJ1bGUgPSB0aGlzLmRlZmF1bHRTdGFydFJ1bGU7XG4gICAgfVxuXG4gICAgY29uc3QgcnVsZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnJ1bGVzKS5mb3JFYWNoKHJ1bGVOYW1lID0+IHtcbiAgICAgIGNvbnN0IHJ1bGVJbmZvID0gdGhpcy5ydWxlc1tydWxlTmFtZV07XG4gICAgICBjb25zdCB7Ym9keX0gPSBydWxlSW5mbztcbiAgICAgIGNvbnN0IGlzRGVmaW5pdGlvbiA9ICF0aGlzLnN1cGVyR3JhbW1hciB8fCAhdGhpcy5zdXBlckdyYW1tYXIucnVsZXNbcnVsZU5hbWVdO1xuXG4gICAgICBsZXQgb3BlcmF0aW9uO1xuICAgICAgaWYgKGlzRGVmaW5pdGlvbikge1xuICAgICAgICBvcGVyYXRpb24gPSAnZGVmaW5lJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wZXJhdGlvbiA9IGJvZHkgaW5zdGFuY2VvZiBwZXhwcnMkMy5FeHRlbmQgPyAnZXh0ZW5kJyA6ICdvdmVycmlkZSc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1ldGFJbmZvID0ge307XG4gICAgICBpZiAocnVsZUluZm8uc291cmNlICYmIHRoaXMuc291cmNlKSB7XG4gICAgICAgIGNvbnN0IGFkanVzdGVkID0gcnVsZUluZm8uc291cmNlLnJlbGF0aXZlVG8odGhpcy5zb3VyY2UpO1xuICAgICAgICBtZXRhSW5mby5zb3VyY2VJbnRlcnZhbCA9IFthZGp1c3RlZC5zdGFydElkeCwgYWRqdXN0ZWQuZW5kSWR4XTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBpc0RlZmluaXRpb24gPyBydWxlSW5mby5kZXNjcmlwdGlvbiA6IG51bGw7XG4gICAgICBjb25zdCBib2R5UmVjaXBlID0gYm9keS5vdXRwdXRSZWNpcGUocnVsZUluZm8uZm9ybWFscywgdGhpcy5zb3VyY2UpO1xuXG4gICAgICBydWxlc1tydWxlTmFtZV0gPSBbXG4gICAgICAgIG9wZXJhdGlvbiwgLy8gXCJkZWZpbmVcIi9cImV4dGVuZFwiL1wib3ZlcnJpZGVcIlxuICAgICAgICBtZXRhSW5mbyxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHJ1bGVJbmZvLmZvcm1hbHMsXG4gICAgICAgIGJvZHlSZWNpcGUsXG4gICAgICBdO1xuICAgIH0pO1xuXG4gICAgLy8gSWYgdGhlIGNhbGxlciBwcm92aWRlZCBhbiBleHByZXNzaW9uIHRvIHVzZSBmb3IgdGhlIHN1cGVyZ3JhbW1hciwgdXNlIHRoYXQuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgc3VwZXJncmFtbWFyIGlzIGEgdXNlciBncmFtbWFyLCB1c2UgaXRzIHJlY2lwZSBpbmxpbmUuXG4gICAgbGV0IHN1cGVyR3JhbW1hck91dHB1dCA9ICdudWxsJztcbiAgICBpZiAoc3VwZXJHcmFtbWFyRXhwcikge1xuICAgICAgc3VwZXJHcmFtbWFyT3V0cHV0ID0gc3VwZXJHcmFtbWFyRXhwcjtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3VwZXJHcmFtbWFyICYmICF0aGlzLnN1cGVyR3JhbW1hci5pc0J1aWx0SW4oKSkge1xuICAgICAgc3VwZXJHcmFtbWFyT3V0cHV0ID0gdGhpcy5zdXBlckdyYW1tYXIudG9SZWNpcGUoKTtcbiAgICB9XG5cbiAgICBjb25zdCByZWNpcGVFbGVtZW50cyA9IFtcbiAgICAgIC4uLlsnZ3JhbW1hcicsIG1ldGFJbmZvLCB0aGlzLm5hbWVdLm1hcChKU09OLnN0cmluZ2lmeSksXG4gICAgICBzdXBlckdyYW1tYXJPdXRwdXQsXG4gICAgICAuLi5bc3RhcnRSdWxlLCBydWxlc10ubWFwKEpTT04uc3RyaW5naWZ5KSxcbiAgICBdO1xuICAgIHJldHVybiBqc29uVG9KUyhgWyR7cmVjaXBlRWxlbWVudHMuam9pbignLCcpfV1gKTtcbiAgfSxcblxuICAvLyBUT0RPOiBDb21lIHVwIHdpdGggYmV0dGVyIG5hbWVzIGZvciB0aGVzZSBtZXRob2RzLlxuICAvLyBUT0RPOiBXcml0ZSB0aGUgYW5hbG9nIG9mIHRoZXNlIG1ldGhvZHMgZm9yIGluaGVyaXRlZCBhdHRyaWJ1dGVzLlxuICB0b09wZXJhdGlvbkFjdGlvbkRpY3Rpb25hcnlUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9PcGVyYXRpb25PckF0dHJpYnV0ZUFjdGlvbkRpY3Rpb25hcnlUZW1wbGF0ZSgpO1xuICB9LFxuICB0b0F0dHJpYnV0ZUFjdGlvbkRpY3Rpb25hcnlUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9PcGVyYXRpb25PckF0dHJpYnV0ZUFjdGlvbkRpY3Rpb25hcnlUZW1wbGF0ZSgpO1xuICB9LFxuXG4gIF90b09wZXJhdGlvbk9yQXR0cmlidXRlQWN0aW9uRGljdGlvbmFyeVRlbXBsYXRlKCkge1xuICAgIC8vIFRPRE86IGFkZCB0aGUgc3VwZXItZ3JhbW1hcidzIHRlbXBsYXRlcyBhdCB0aGUgcmlnaHQgcGxhY2UsIGUuZy4sIGEgY2FzZSBmb3IgQWRkRXhwcl9wbHVzXG4gICAgLy8gc2hvdWxkIGFwcGVhciBuZXh0IHRvIG90aGVyIGNhc2VzIG9mIEFkZEV4cHIuXG5cbiAgICBjb25zdCBzYiA9IG5ldyBjb21tb24kMi5TdHJpbmdCdWZmZXIoKTtcbiAgICBzYi5hcHBlbmQoJ3snKTtcblxuICAgIGxldCBmaXJzdCA9IHRydWU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAoY29uc3QgcnVsZU5hbWUgaW4gdGhpcy5ydWxlcykge1xuICAgICAgY29uc3Qge2JvZHl9ID0gdGhpcy5ydWxlc1tydWxlTmFtZV07XG4gICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNiLmFwcGVuZCgnLCcpO1xuICAgICAgfVxuICAgICAgc2IuYXBwZW5kKCdcXG4nKTtcbiAgICAgIHNiLmFwcGVuZCgnICAnKTtcbiAgICAgIHRoaXMuYWRkU2VtYW50aWNBY3Rpb25UZW1wbGF0ZShydWxlTmFtZSwgYm9keSwgc2IpO1xuICAgIH1cblxuICAgIHNiLmFwcGVuZCgnXFxufScpO1xuICAgIHJldHVybiBzYi5jb250ZW50cygpO1xuICB9LFxuXG4gIGFkZFNlbWFudGljQWN0aW9uVGVtcGxhdGUocnVsZU5hbWUsIGJvZHksIHNiKSB7XG4gICAgc2IuYXBwZW5kKHJ1bGVOYW1lKTtcbiAgICBzYi5hcHBlbmQoJzogZnVuY3Rpb24oJyk7XG4gICAgY29uc3QgYXJpdHkgPSB0aGlzLl90b3BEb3duQWN0aW9uQXJpdHkocnVsZU5hbWUpO1xuICAgIHNiLmFwcGVuZChjb21tb24kMi5yZXBlYXQoJ18nLCBhcml0eSkuam9pbignLCAnKSk7XG4gICAgc2IuYXBwZW5kKCcpIHtcXG4nKTtcbiAgICBzYi5hcHBlbmQoJyAgfScpO1xuICB9LFxuXG4gIC8vIFBhcnNlIGEgc3RyaW5nIHdoaWNoIGV4cHJlc3NlcyBhIHJ1bGUgYXBwbGljYXRpb24gaW4gdGhpcyBncmFtbWFyLCBhbmQgcmV0dXJuIHRoZVxuICAvLyByZXN1bHRpbmcgQXBwbHkgbm9kZS5cbiAgcGFyc2VBcHBsaWNhdGlvbihzdHIpIHtcbiAgICBsZXQgYXBwO1xuICAgIGlmIChzdHIuaW5kZXhPZignPCcpID09PSAtMSkge1xuICAgICAgLy8gc2ltcGxlIGFwcGxpY2F0aW9uXG4gICAgICBhcHAgPSBuZXcgcGV4cHJzJDMuQXBwbHkoc3RyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcGFyYW1ldGVyaXplZCBhcHBsaWNhdGlvblxuICAgICAgY29uc3QgY3N0ID0gb2htR3JhbW1hciQyLm1hdGNoKHN0ciwgJ0Jhc2VfYXBwbGljYXRpb24nKTtcbiAgICAgIGFwcCA9IGJ1aWxkR3JhbW1hciQxKGNzdCwge30pO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBhcHBsaWNhdGlvbiBpcyB2YWxpZC5cbiAgICBpZiAoIShhcHAucnVsZU5hbWUgaW4gdGhpcy5ydWxlcykpIHtcbiAgICAgIHRocm93IGVycm9ycyQyLnVuZGVjbGFyZWRSdWxlKGFwcC5ydWxlTmFtZSwgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgY29uc3Qge2Zvcm1hbHN9ID0gdGhpcy5ydWxlc1thcHAucnVsZU5hbWVdO1xuICAgIGlmIChmb3JtYWxzLmxlbmd0aCAhPT0gYXBwLmFyZ3MubGVuZ3RoKSB7XG4gICAgICBjb25zdCB7c291cmNlfSA9IHRoaXMucnVsZXNbYXBwLnJ1bGVOYW1lXTtcbiAgICAgIHRocm93IGVycm9ycyQyLndyb25nTnVtYmVyT2ZQYXJhbWV0ZXJzKFxuICAgICAgICAgIGFwcC5ydWxlTmFtZSxcbiAgICAgICAgICBmb3JtYWxzLmxlbmd0aCxcbiAgICAgICAgICBhcHAuYXJncy5sZW5ndGgsXG4gICAgICAgICAgc291cmNlXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXBwO1xuICB9LFxufTtcblxuLy8gVGhlIGZvbGxvd2luZyBncmFtbWFyIGNvbnRhaW5zIGEgZmV3IHJ1bGVzIHRoYXQgY291bGRuJ3QgYmUgd3JpdHRlbiAgaW4gXCJ1c2VybGFuZFwiLlxuLy8gQXQgdGhlIGJvdHRvbSBvZiBzcmMvbWFpbi5qcywgd2UgY3JlYXRlIGEgc3ViLWdyYW1tYXIgb2YgdGhpcyBncmFtbWFyIHRoYXQncyBjYWxsZWRcbi8vIGBCdWlsdEluUnVsZXNgLiBUaGF0IGdyYW1tYXIgY29udGFpbnMgc2V2ZXJhbCBjb252ZW5pZW5jZSBydWxlcywgZS5nLiwgYGxldHRlcmAgYW5kXG4vLyBgZGlnaXRgLCBhbmQgaXMgaW1wbGljaXRseSB0aGUgc3VwZXItZ3JhbW1hciBvZiBhbnkgZ3JhbW1hciB3aG9zZSBzdXBlci1ncmFtbWFyXG4vLyBpc24ndCBzcGVjaWZpZWQuXG5HcmFtbWFyJDQuUHJvdG9CdWlsdEluUnVsZXMgPSBuZXcgR3JhbW1hciQ0KFxuICAgICdQcm90b0J1aWx0SW5SdWxlcycsIC8vIG5hbWVcbiAgICB1bmRlZmluZWQsIC8vIHN1cGVyZ3JhbW1hclxuICAgIHtcbiAgICAgIGFueToge1xuICAgICAgICBib2R5OiBwZXhwcnMkMy5hbnksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ2FueSBjaGFyYWN0ZXInLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuICAgICAgZW5kOiB7XG4gICAgICAgIGJvZHk6IHBleHBycyQzLmVuZCxcbiAgICAgICAgZm9ybWFsczogW10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnZW5kIG9mIGlucHV0JyxcbiAgICAgICAgcHJpbWl0aXZlOiB0cnVlLFxuICAgICAgfSxcblxuICAgICAgY2FzZUluc2Vuc2l0aXZlOiB7XG4gICAgICAgIGJvZHk6IG5ldyBDYXNlSW5zZW5zaXRpdmVUZXJtaW5hbChuZXcgcGV4cHJzJDMuUGFyYW0oMCkpLFxuICAgICAgICBmb3JtYWxzOiBbJ3N0ciddLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuICAgICAgbG93ZXI6IHtcbiAgICAgICAgYm9keTogbmV3IHBleHBycyQzLlVuaWNvZGVDaGFyKCdMbCcpLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdhIGxvd2VyY2FzZSBsZXR0ZXInLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuICAgICAgdXBwZXI6IHtcbiAgICAgICAgYm9keTogbmV3IHBleHBycyQzLlVuaWNvZGVDaGFyKCdMdScpLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdhbiB1cHBlcmNhc2UgbGV0dGVyJyxcbiAgICAgICAgcHJpbWl0aXZlOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIC8vIFVuaW9uIG9mIEx0ICh0aXRsZWNhc2UpLCBMbSAobW9kaWZpZXIpLCBhbmQgTG8gKG90aGVyKSwgaS5lLiBhbnkgbGV0dGVyIG5vdCBpbiBMbCBvciBMdS5cbiAgICAgIHVuaWNvZGVMdG1vOiB7XG4gICAgICAgIGJvZHk6IG5ldyBwZXhwcnMkMy5Vbmljb2RlQ2hhcignTHRtbycpLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdhIFVuaWNvZGUgY2hhcmFjdGVyIGluIEx0LCBMbSwgb3IgTG8nLFxuICAgICAgICBwcmltaXRpdmU6IHRydWUsXG4gICAgICB9LFxuXG4gICAgICAvLyBUaGVzZSBydWxlcyBhcmUgbm90IHRydWx5IHByaW1pdGl2ZSAodGhleSBjb3VsZCBiZSB3cml0dGVuIGluIHVzZXJsYW5kKSBidXQgYXJlIGRlZmluZWRcbiAgICAgIC8vIGhlcmUgZm9yIGJvb3RzdHJhcHBpbmcgcHVycG9zZXMuXG4gICAgICBzcGFjZXM6IHtcbiAgICAgICAgYm9keTogbmV3IHBleHBycyQzLlN0YXIobmV3IHBleHBycyQzLkFwcGx5KCdzcGFjZScpKSxcbiAgICAgICAgZm9ybWFsczogW10sXG4gICAgICB9LFxuICAgICAgc3BhY2U6IHtcbiAgICAgICAgYm9keTogbmV3IHBleHBycyQzLlJhbmdlKCdcXHgwMCcsICcgJyksXG4gICAgICAgIGZvcm1hbHM6IFtdLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ2Egc3BhY2UnLFxuICAgICAgfSxcbiAgICB9XG4pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIEdyYW1tYXJfMSA9IEdyYW1tYXIkNDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEdyYW1tYXIkMyA9IEdyYW1tYXJfMTtcbmNvbnN0IElucHV0U3RyZWFtID0gSW5wdXRTdHJlYW1fMTtcbmNvbnN0IGNvbW1vbiQxID0gY29tbW9uJGw7XG5jb25zdCBlcnJvcnMkMSA9IGVycm9ycyQ5O1xuY29uc3QgcGV4cHJzJDIgPSBwZXhwcnMkNjtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgU3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIENvbnN0cnVjdG9yc1xuXG5mdW5jdGlvbiBHcmFtbWFyRGVjbCQxKG5hbWUpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbn1cblxuLy8gSGVscGVyc1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5zb3VyY2VJbnRlcnZhbCA9IGZ1bmN0aW9uKHN0YXJ0SWR4LCBlbmRJZHgpIHtcbiAgcmV0dXJuIHRoaXMuc291cmNlLnN1YkludGVydmFsKHN0YXJ0SWR4LCBlbmRJZHggLSBzdGFydElkeCk7XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5lbnN1cmVTdXBlckdyYW1tYXIgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnN1cGVyR3JhbW1hcikge1xuICAgIHRoaXMud2l0aFN1cGVyR3JhbW1hcihcbiAgICAgIC8vIFRPRE86IFRoZSBjb25kaXRpb25hbCBleHByZXNzaW9uIGJlbG93IGlzIGFuIHVnbHkgaGFjay4gSXQncyBraW5kIG9mIG9rIGJlY2F1c2VcbiAgICAgIC8vIEkgZG91YnQgYW55b25lIHdpbGwgZXZlciB0cnkgdG8gZGVjbGFyZSBhIGdyYW1tYXIgY2FsbGVkIGBCdWlsdEluUnVsZXNgLiBTdGlsbCxcbiAgICAgIC8vIHdlIHNob3VsZCB0cnkgdG8gZmluZCBhIGJldHRlciB3YXkgdG8gZG8gdGhpcy5cbiAgICAgIHRoaXMubmFtZSA9PT0gJ0J1aWx0SW5SdWxlcycgPyBHcmFtbWFyJDMuUHJvdG9CdWlsdEluUnVsZXMgOiBHcmFtbWFyJDMuQnVpbHRJblJ1bGVzXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcy5zdXBlckdyYW1tYXI7XG59O1xuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS5lbnN1cmVTdXBlckdyYW1tYXJSdWxlRm9yT3ZlcnJpZGluZyA9IGZ1bmN0aW9uKG5hbWUsIHNvdXJjZSkge1xuICBjb25zdCBydWxlSW5mbyA9IHRoaXMuZW5zdXJlU3VwZXJHcmFtbWFyKCkucnVsZXNbbmFtZV07XG4gIGlmICghcnVsZUluZm8pIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5jYW5ub3RPdmVycmlkZVVuZGVjbGFyZWRSdWxlKG5hbWUsIHRoaXMuc3VwZXJHcmFtbWFyLm5hbWUsIHNvdXJjZSk7XG4gIH1cbiAgcmV0dXJuIHJ1bGVJbmZvO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUuaW5zdGFsbE92ZXJyaWRkZW5PckV4dGVuZGVkUnVsZSA9IGZ1bmN0aW9uKFxuICAgIG5hbWUsXG4gICAgZm9ybWFscyxcbiAgICBib2R5LFxuICAgIHNvdXJjZVxuKSB7XG4gIGNvbnN0IGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzID0gY29tbW9uJDEuZ2V0RHVwbGljYXRlcyhmb3JtYWxzKTtcbiAgaWYgKGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5kdXBsaWNhdGVQYXJhbWV0ZXJOYW1lcyhuYW1lLCBkdXBsaWNhdGVQYXJhbWV0ZXJOYW1lcywgc291cmNlKTtcbiAgfVxuICBjb25zdCBydWxlSW5mbyA9IHRoaXMuZW5zdXJlU3VwZXJHcmFtbWFyKCkucnVsZXNbbmFtZV07XG4gIGNvbnN0IGV4cGVjdGVkRm9ybWFscyA9IHJ1bGVJbmZvLmZvcm1hbHM7XG4gIGNvbnN0IGV4cGVjdGVkTnVtRm9ybWFscyA9IGV4cGVjdGVkRm9ybWFscyA/IGV4cGVjdGVkRm9ybWFscy5sZW5ndGggOiAwO1xuICBpZiAoZm9ybWFscy5sZW5ndGggIT09IGV4cGVjdGVkTnVtRm9ybWFscykge1xuICAgIHRocm93IGVycm9ycyQxLndyb25nTnVtYmVyT2ZQYXJhbWV0ZXJzKG5hbWUsIGV4cGVjdGVkTnVtRm9ybWFscywgZm9ybWFscy5sZW5ndGgsIHNvdXJjZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuaW5zdGFsbChuYW1lLCBmb3JtYWxzLCBib2R5LCBydWxlSW5mby5kZXNjcmlwdGlvbiwgc291cmNlKTtcbn07XG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLmluc3RhbGwgPSBmdW5jdGlvbihuYW1lLCBmb3JtYWxzLCBib2R5LCBkZXNjcmlwdGlvbiwgc291cmNlKSB7XG4gIHRoaXMucnVsZXNbbmFtZV0gPSB7XG4gICAgYm9keTogYm9keS5pbnRyb2R1Y2VQYXJhbXMoZm9ybWFscyksXG4gICAgZm9ybWFscyxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBzb3VyY2UsXG4gIH07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gU3R1ZmYgdGhhdCB5b3Ugc2hvdWxkIG9ubHkgZG8gb25jZVxuXG5HcmFtbWFyRGVjbCQxLnByb3RvdHlwZS53aXRoU3VwZXJHcmFtbWFyID0gZnVuY3Rpb24oc3VwZXJHcmFtbWFyKSB7XG4gIGlmICh0aGlzLnN1cGVyR3JhbW1hcikge1xuICAgIHRocm93IG5ldyBFcnJvcigndGhlIHN1cGVyIGdyYW1tYXIgb2YgYSBHcmFtbWFyRGVjbCBjYW5ub3QgYmUgc2V0IG1vcmUgdGhhbiBvbmNlJyk7XG4gIH1cbiAgdGhpcy5zdXBlckdyYW1tYXIgPSBzdXBlckdyYW1tYXI7XG4gIHRoaXMucnVsZXMgPSBPYmplY3QuY3JlYXRlKHN1cGVyR3JhbW1hci5ydWxlcyk7XG5cbiAgLy8gR3JhbW1hcnMgd2l0aCBhbiBleHBsaWNpdCBzdXBlcmdyYW1tYXIgaW5oZXJpdCBhIGRlZmF1bHQgc3RhcnQgcnVsZS5cbiAgaWYgKCFzdXBlckdyYW1tYXIuaXNCdWlsdEluKCkpIHtcbiAgICB0aGlzLmRlZmF1bHRTdGFydFJ1bGUgPSBzdXBlckdyYW1tYXIuZGVmYXVsdFN0YXJ0UnVsZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLndpdGhEZWZhdWx0U3RhcnRSdWxlID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgdGhpcy5kZWZhdWx0U3RhcnRSdWxlID0gcnVsZU5hbWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUud2l0aFNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICB0aGlzLnNvdXJjZSA9IG5ldyBJbnB1dFN0cmVhbShzb3VyY2UpLmludGVydmFsKDAsIHNvdXJjZS5sZW5ndGgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIENyZWF0ZXMgYSBHcmFtbWFyIGluc3RhbmNlLCBhbmQgaWYgaXQgcGFzc2VzIHRoZSBzYW5pdHkgY2hlY2tzLCByZXR1cm5zIGl0LlxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZ3JhbW1hciA9IG5ldyBHcmFtbWFyJDMoXG4gICAgICB0aGlzLm5hbWUsXG4gICAgICB0aGlzLmVuc3VyZVN1cGVyR3JhbW1hcigpLFxuICAgICAgdGhpcy5ydWxlcyxcbiAgICAgIHRoaXMuZGVmYXVsdFN0YXJ0UnVsZVxuICApO1xuXG4gIC8vIFRPRE86IGNoYW5nZSB0aGUgcGV4cHIucHJvdG90eXBlLmFzc2VydC4uLiBtZXRob2RzIHRvIG1ha2UgdGhlbSBhZGRcbiAgLy8gZXhjZXB0aW9ucyB0byBhbiBhcnJheSB0aGF0J3MgcHJvdmlkZWQgYXMgYW4gYXJnLiBUaGVuIHdlJ2xsIGJlIGFibGUgdG9cbiAgLy8gc2hvdyBtb3JlIHRoYW4gb25lIGVycm9yIG9mIHRoZSBzYW1lIHR5cGUgYXQgYSB0aW1lLlxuICAvLyBUT0RPOiBpbmNsdWRlIHRoZSBvZmZlbmRpbmcgcGV4cHIgaW4gdGhlIGVycm9ycywgdGhhdCB3YXkgd2UgY2FuIHNob3dcbiAgLy8gdGhlIHBhcnQgb2YgdGhlIHNvdXJjZSB0aGF0IGNhdXNlZCBpdC5cbiAgY29uc3QgZ3JhbW1hckVycm9ycyA9IFtdO1xuICBsZXQgZ3JhbW1hckhhc0ludmFsaWRBcHBsaWNhdGlvbnMgPSBmYWxzZTtcbiAgT2JqZWN0LmtleXMoZ3JhbW1hci5ydWxlcykuZm9yRWFjaChydWxlTmFtZSA9PiB7XG4gICAgY29uc3Qge2JvZHl9ID0gZ3JhbW1hci5ydWxlc1tydWxlTmFtZV07XG4gICAgdHJ5IHtcbiAgICAgIGJvZHkuYXNzZXJ0Q2hvaWNlc0hhdmVVbmlmb3JtQXJpdHkocnVsZU5hbWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGdyYW1tYXJFcnJvcnMucHVzaChlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGJvZHkuYXNzZXJ0QWxsQXBwbGljYXRpb25zQXJlVmFsaWQocnVsZU5hbWUsIGdyYW1tYXIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGdyYW1tYXJFcnJvcnMucHVzaChlKTtcbiAgICAgIGdyYW1tYXJIYXNJbnZhbGlkQXBwbGljYXRpb25zID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIWdyYW1tYXJIYXNJbnZhbGlkQXBwbGljYXRpb25zKSB7XG4gICAgLy8gVGhlIGZvbGxvd2luZyBjaGVjayBjYW4gb25seSBiZSBkb25lIGlmIHRoZSBncmFtbWFyIGhhcyBubyBpbnZhbGlkIGFwcGxpY2F0aW9ucy5cbiAgICBPYmplY3Qua2V5cyhncmFtbWFyLnJ1bGVzKS5mb3JFYWNoKHJ1bGVOYW1lID0+IHtcbiAgICAgIGNvbnN0IHtib2R5fSA9IGdyYW1tYXIucnVsZXNbcnVsZU5hbWVdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYm9keS5hc3NlcnRJdGVyYXRlZEV4cHJzQXJlTm90TnVsbGFibGUoZ3JhbW1hciwgW10pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBncmFtbWFyRXJyb3JzLnB1c2goZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgaWYgKGdyYW1tYXJFcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIGVycm9ycyQxLnRocm93RXJyb3JzKGdyYW1tYXJFcnJvcnMpO1xuICB9XG4gIGlmICh0aGlzLnNvdXJjZSkge1xuICAgIGdyYW1tYXIuc291cmNlID0gdGhpcy5zb3VyY2U7XG4gIH1cblxuICByZXR1cm4gZ3JhbW1hcjtcbn07XG5cbi8vIFJ1bGUgZGVjbGFyYXRpb25zXG5cbkdyYW1tYXJEZWNsJDEucHJvdG90eXBlLmRlZmluZSA9IGZ1bmN0aW9uKG5hbWUsIGZvcm1hbHMsIGJvZHksIGRlc2NyaXB0aW9uLCBzb3VyY2UpIHtcbiAgdGhpcy5lbnN1cmVTdXBlckdyYW1tYXIoKTtcbiAgaWYgKHRoaXMuc3VwZXJHcmFtbWFyLnJ1bGVzW25hbWVdKSB7XG4gICAgdGhyb3cgZXJyb3JzJDEuZHVwbGljYXRlUnVsZURlY2xhcmF0aW9uKG5hbWUsIHRoaXMubmFtZSwgdGhpcy5zdXBlckdyYW1tYXIubmFtZSwgc291cmNlKTtcbiAgfSBlbHNlIGlmICh0aGlzLnJ1bGVzW25hbWVdKSB7XG4gICAgdGhyb3cgZXJyb3JzJDEuZHVwbGljYXRlUnVsZURlY2xhcmF0aW9uKG5hbWUsIHRoaXMubmFtZSwgdGhpcy5uYW1lLCBzb3VyY2UpO1xuICB9XG4gIGNvbnN0IGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzID0gY29tbW9uJDEuZ2V0RHVwbGljYXRlcyhmb3JtYWxzKTtcbiAgaWYgKGR1cGxpY2F0ZVBhcmFtZXRlck5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvdyBlcnJvcnMkMS5kdXBsaWNhdGVQYXJhbWV0ZXJOYW1lcyhuYW1lLCBkdXBsaWNhdGVQYXJhbWV0ZXJOYW1lcywgc291cmNlKTtcbiAgfVxuICByZXR1cm4gdGhpcy5pbnN0YWxsKG5hbWUsIGZvcm1hbHMsIGJvZHksIGRlc2NyaXB0aW9uLCBzb3VyY2UpO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUub3ZlcnJpZGUgPSBmdW5jdGlvbihuYW1lLCBmb3JtYWxzLCBib2R5LCBkZXNjSWdub3JlZCwgc291cmNlKSB7XG4gIHRoaXMuZW5zdXJlU3VwZXJHcmFtbWFyUnVsZUZvck92ZXJyaWRpbmcobmFtZSwgc291cmNlKTtcbiAgdGhpcy5pbnN0YWxsT3ZlcnJpZGRlbk9yRXh0ZW5kZWRSdWxlKG5hbWUsIGZvcm1hbHMsIGJvZHksIHNvdXJjZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhbW1hckRlY2wkMS5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24obmFtZSwgZm9ybWFscywgZnJhZ21lbnQsIGRlc2NJZ25vcmVkLCBzb3VyY2UpIHtcbiAgY29uc3QgcnVsZUluZm8gPSB0aGlzLmVuc3VyZVN1cGVyR3JhbW1hcigpLnJ1bGVzW25hbWVdO1xuICBpZiAoIXJ1bGVJbmZvKSB7XG4gICAgdGhyb3cgZXJyb3JzJDEuY2Fubm90RXh0ZW5kVW5kZWNsYXJlZFJ1bGUobmFtZSwgdGhpcy5zdXBlckdyYW1tYXIubmFtZSwgc291cmNlKTtcbiAgfVxuICBjb25zdCBib2R5ID0gbmV3IHBleHBycyQyLkV4dGVuZCh0aGlzLnN1cGVyR3JhbW1hciwgbmFtZSwgZnJhZ21lbnQpO1xuICBib2R5LnNvdXJjZSA9IGZyYWdtZW50LnNvdXJjZTtcbiAgdGhpcy5pbnN0YWxsT3ZlcnJpZGRlbk9yRXh0ZW5kZWRSdWxlKG5hbWUsIGZvcm1hbHMsIGJvZHksIHNvdXJjZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBHcmFtbWFyRGVjbF8xID0gR3JhbW1hckRlY2wkMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEdyYW1tYXIkMiA9IEdyYW1tYXJfMTtcbmNvbnN0IEdyYW1tYXJEZWNsID0gR3JhbW1hckRlY2xfMTtcbmNvbnN0IHBleHBycyQxID0gcGV4cHJzJDY7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBCdWlsZGVyJDIoKSB7fVxuXG5CdWlsZGVyJDIucHJvdG90eXBlID0ge1xuICBjdXJyZW50RGVjbDogbnVsbCxcbiAgY3VycmVudFJ1bGVOYW1lOiBudWxsLFxuXG4gIG5ld0dyYW1tYXIobmFtZSkge1xuICAgIHJldHVybiBuZXcgR3JhbW1hckRlY2wobmFtZSk7XG4gIH0sXG5cbiAgZ3JhbW1hcihtZXRhSW5mbywgbmFtZSwgc3VwZXJHcmFtbWFyLCBkZWZhdWx0U3RhcnRSdWxlLCBydWxlcykge1xuICAgIGNvbnN0IGdEZWNsID0gbmV3IEdyYW1tYXJEZWNsKG5hbWUpO1xuICAgIGlmIChzdXBlckdyYW1tYXIpIHtcbiAgICAgIC8vIGBzdXBlckdyYW1tYXJgIG1heSBiZSBhIHJlY2lwZSAoaS5lLiBhbiBBcnJheSksIG9yIGFuIGFjdHVhbCBncmFtbWFyIGluc3RhbmNlLlxuICAgICAgZ0RlY2wud2l0aFN1cGVyR3JhbW1hcihcbiAgICAgICAgc3VwZXJHcmFtbWFyIGluc3RhbmNlb2YgR3JhbW1hciQyID8gc3VwZXJHcmFtbWFyIDogdGhpcy5mcm9tUmVjaXBlKHN1cGVyR3JhbW1hcilcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0U3RhcnRSdWxlKSB7XG4gICAgICBnRGVjbC53aXRoRGVmYXVsdFN0YXJ0UnVsZShkZWZhdWx0U3RhcnRSdWxlKTtcbiAgICB9XG4gICAgaWYgKG1ldGFJbmZvICYmIG1ldGFJbmZvLnNvdXJjZSkge1xuICAgICAgZ0RlY2wud2l0aFNvdXJjZShtZXRhSW5mby5zb3VyY2UpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudERlY2wgPSBnRGVjbDtcbiAgICBPYmplY3Qua2V5cyhydWxlcykuZm9yRWFjaChydWxlTmFtZSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRSdWxlTmFtZSA9IHJ1bGVOYW1lO1xuICAgICAgY29uc3QgcnVsZVJlY2lwZSA9IHJ1bGVzW3J1bGVOYW1lXTtcblxuICAgICAgY29uc3QgYWN0aW9uID0gcnVsZVJlY2lwZVswXTsgLy8gZGVmaW5lL2V4dGVuZC9vdmVycmlkZVxuICAgICAgY29uc3QgbWV0YUluZm8gPSBydWxlUmVjaXBlWzFdO1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBydWxlUmVjaXBlWzJdO1xuICAgICAgY29uc3QgZm9ybWFscyA9IHJ1bGVSZWNpcGVbM107XG4gICAgICBjb25zdCBib2R5ID0gdGhpcy5mcm9tUmVjaXBlKHJ1bGVSZWNpcGVbNF0pO1xuXG4gICAgICBsZXQgc291cmNlO1xuICAgICAgaWYgKGdEZWNsLnNvdXJjZSAmJiBtZXRhSW5mbyAmJiBtZXRhSW5mby5zb3VyY2VJbnRlcnZhbCkge1xuICAgICAgICBzb3VyY2UgPSBnRGVjbC5zb3VyY2Uuc3ViSW50ZXJ2YWwoXG4gICAgICAgICAgICBtZXRhSW5mby5zb3VyY2VJbnRlcnZhbFswXSxcbiAgICAgICAgICAgIG1ldGFJbmZvLnNvdXJjZUludGVydmFsWzFdIC0gbWV0YUluZm8uc291cmNlSW50ZXJ2YWxbMF1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGdEZWNsW2FjdGlvbl0ocnVsZU5hbWUsIGZvcm1hbHMsIGJvZHksIGRlc2NyaXB0aW9uLCBzb3VyY2UpO1xuICAgIH0pO1xuICAgIHRoaXMuY3VycmVudFJ1bGVOYW1lID0gdGhpcy5jdXJyZW50RGVjbCA9IG51bGw7XG4gICAgcmV0dXJuIGdEZWNsLmJ1aWxkKCk7XG4gIH0sXG5cbiAgdGVybWluYWwoeCkge1xuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuVGVybWluYWwoeCk7XG4gIH0sXG5cbiAgcmFuZ2UoZnJvbSwgdG8pIHtcbiAgICByZXR1cm4gbmV3IHBleHBycyQxLlJhbmdlKGZyb20sIHRvKTtcbiAgfSxcblxuICBwYXJhbShpbmRleCkge1xuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuUGFyYW0oaW5kZXgpO1xuICB9LFxuXG4gIGFsdCguLi50ZXJtQXJncykge1xuICAgIGxldCB0ZXJtcyA9IFtdO1xuICAgIGZvciAobGV0IGFyZyBvZiB0ZXJtQXJncykge1xuICAgICAgaWYgKCEoYXJnIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICAgIGFyZyA9IHRoaXMuZnJvbVJlY2lwZShhcmcpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIHBleHBycyQxLkFsdCkge1xuICAgICAgICB0ZXJtcyA9IHRlcm1zLmNvbmNhdChhcmcudGVybXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVybXMucHVzaChhcmcpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGVybXMubGVuZ3RoID09PSAxID8gdGVybXNbMF0gOiBuZXcgcGV4cHJzJDEuQWx0KHRlcm1zKTtcbiAgfSxcblxuICBzZXEoLi4uZmFjdG9yQXJncykge1xuICAgIGxldCBmYWN0b3JzID0gW107XG4gICAgZm9yIChsZXQgYXJnIG9mIGZhY3RvckFyZ3MpIHtcbiAgICAgIGlmICghKGFyZyBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByKSkge1xuICAgICAgICBhcmcgPSB0aGlzLmZyb21SZWNpcGUoYXJnKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmcgaW5zdGFuY2VvZiBwZXhwcnMkMS5TZXEpIHtcbiAgICAgICAgZmFjdG9ycyA9IGZhY3RvcnMuY29uY2F0KGFyZy5mYWN0b3JzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnMucHVzaChhcmcpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFjdG9ycy5sZW5ndGggPT09IDEgPyBmYWN0b3JzWzBdIDogbmV3IHBleHBycyQxLlNlcShmYWN0b3JzKTtcbiAgfSxcblxuICBzdGFyKGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICBleHByID0gdGhpcy5mcm9tUmVjaXBlKGV4cHIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyQxLlN0YXIoZXhwcik7XG4gIH0sXG5cbiAgcGx1cyhleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByKSkge1xuICAgICAgZXhwciA9IHRoaXMuZnJvbVJlY2lwZShleHByKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5QbHVzKGV4cHIpO1xuICB9LFxuXG4gIG9wdChleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByKSkge1xuICAgICAgZXhwciA9IHRoaXMuZnJvbVJlY2lwZShleHByKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5PcHQoZXhwcik7XG4gIH0sXG5cbiAgbm90KGV4cHIpIHtcbiAgICBpZiAoIShleHByIGluc3RhbmNlb2YgcGV4cHJzJDEuUEV4cHIpKSB7XG4gICAgICBleHByID0gdGhpcy5mcm9tUmVjaXBlKGV4cHIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IHBleHBycyQxLk5vdChleHByKTtcbiAgfSxcblxuICBsYShleHByKSB7XG4gICAgLy8gVE9ETzogdGVtcG9yYXJ5IHRvIHN0aWxsIGJlIGFibGUgdG8gcmVhZCBvbGQgcmVjaXBlc1xuICAgIHJldHVybiB0aGlzLmxvb2thaGVhZChleHByKTtcbiAgfSxcblxuICBsb29rYWhlYWQoZXhwcikge1xuICAgIGlmICghKGV4cHIgaW5zdGFuY2VvZiBwZXhwcnMkMS5QRXhwcikpIHtcbiAgICAgIGV4cHIgPSB0aGlzLmZyb21SZWNpcGUoZXhwcik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuTG9va2FoZWFkKGV4cHIpO1xuICB9LFxuXG4gIGxleChleHByKSB7XG4gICAgaWYgKCEoZXhwciBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByKSkge1xuICAgICAgZXhwciA9IHRoaXMuZnJvbVJlY2lwZShleHByKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBwZXhwcnMkMS5MZXgoZXhwcik7XG4gIH0sXG5cbiAgYXBwKHJ1bGVOYW1lLCBvcHRQYXJhbXMpIHtcbiAgICBpZiAob3B0UGFyYW1zICYmIG9wdFBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICBvcHRQYXJhbXMgPSBvcHRQYXJhbXMubWFwKGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICAgIHJldHVybiBwYXJhbSBpbnN0YW5jZW9mIHBleHBycyQxLlBFeHByID8gcGFyYW0gOiB0aGlzLmZyb21SZWNpcGUocGFyYW0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgcGV4cHJzJDEuQXBwbHkocnVsZU5hbWUsIG9wdFBhcmFtcyk7XG4gIH0sXG5cbiAgLy8gTm90ZSB0aGF0IHVubGlrZSBvdGhlciBtZXRob2RzIGluIHRoaXMgY2xhc3MsIHRoaXMgbWV0aG9kIGNhbm5vdCBiZSB1c2VkIGFzIGFcbiAgLy8gY29udmVuaWVuY2UgY29uc3RydWN0b3IuIEl0IG9ubHkgd29ya3Mgd2l0aCByZWNpcGVzLCBiZWNhdXNlIGl0IHJlbGllcyBvblxuICAvLyBgdGhpcy5jdXJyZW50RGVjbGAgYW5kIGB0aGlzLmN1cnJlbnRSdWxlTmFtZWAgYmVpbmcgc2V0LlxuICBzcGxpY2UoYmVmb3JlVGVybXMsIGFmdGVyVGVybXMpIHtcbiAgICByZXR1cm4gbmV3IHBleHBycyQxLlNwbGljZShcbiAgICAgICAgdGhpcy5jdXJyZW50RGVjbC5zdXBlckdyYW1tYXIsXG4gICAgICAgIHRoaXMuY3VycmVudFJ1bGVOYW1lLFxuICAgICAgICBiZWZvcmVUZXJtcy5tYXAodGVybSA9PiB0aGlzLmZyb21SZWNpcGUodGVybSkpLFxuICAgICAgICBhZnRlclRlcm1zLm1hcCh0ZXJtID0+IHRoaXMuZnJvbVJlY2lwZSh0ZXJtKSlcbiAgICApO1xuICB9LFxuXG4gIGZyb21SZWNpcGUocmVjaXBlKSB7XG4gICAgLy8gdGhlIG1ldGEtaW5mbyBvZiAnZ3JhbW1hcicgaXMgcHJvY2Vzc2VkIGluIEJ1aWxkZXIuZ3JhbW1hclxuICAgIGNvbnN0IGFyZ3MgPSByZWNpcGVbMF0gPT09ICdncmFtbWFyJyA/IHJlY2lwZS5zbGljZSgxKSA6IHJlY2lwZS5zbGljZSgyKTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzW3JlY2lwZVswXV0oLi4uYXJncyk7XG5cbiAgICBjb25zdCBtZXRhSW5mbyA9IHJlY2lwZVsxXTtcbiAgICBpZiAobWV0YUluZm8pIHtcbiAgICAgIGlmIChtZXRhSW5mby5zb3VyY2VJbnRlcnZhbCAmJiB0aGlzLmN1cnJlbnREZWNsKSB7XG4gICAgICAgIHJlc3VsdC53aXRoU291cmNlKHRoaXMuY3VycmVudERlY2wuc291cmNlSW50ZXJ2YWwoLi4ubWV0YUluZm8uc291cmNlSW50ZXJ2YWwpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbn07XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgQnVpbGRlcl8xID0gQnVpbGRlciQyO1xuXG52YXIgbmFtZSA9IFwib2htLWpzXCI7XG52YXIgdmVyc2lvbiQyID0gXCIxNi4zLjRcIjtcbnZhciBkZXNjcmlwdGlvbiA9IFwiQW4gb2JqZWN0LW9yaWVudGVkIGxhbmd1YWdlIGZvciBwYXJzaW5nIGFuZCBwYXR0ZXJuIG1hdGNoaW5nXCI7XG52YXIgcmVwb3NpdG9yeSA9IFwiaHR0cHM6Ly9naXRodWIuY29tL2hhcmMvb2htXCI7XG52YXIga2V5d29yZHMgPSBbXG5cdFwicGFyc2VyXCIsXG5cdFwiY29tcGlsZXJcIixcblx0XCJwYXR0ZXJuIG1hdGNoaW5nXCIsXG5cdFwicGF0dGVybi1tYXRjaGluZ1wiLFxuXHRcIm9tZXRhXCIsXG5cdFwib21ldGEvanNcIixcblx0XCJvbWV0YS1qc1wiLFxuXHRcIm9tZXRhanNcIixcblx0XCJyYXBpZFwiLFxuXHRcInByb3RvdHlwaW5nXCJcbl07XG52YXIgaG9tZXBhZ2UgPSBcImh0dHBzOi8vb2htanMub3JnXCI7XG52YXIgYnVncyA9IFwiaHR0cHM6Ly9naXRodWIuY29tL2hhcmMvb2htL2lzc3Vlc1wiO1xudmFyIG1haW4gPSBcImluZGV4LmpzXCI7XG52YXIgbW9kdWxlID0gXCJkaXN0L29obS5lc20uanNcIjtcbnZhciBmaWxlcyA9IFtcblx0XCJzcmNcIixcblx0XCJkaXN0XCIsXG5cdFwiZXh0cmFzXCIsXG5cdFwidGhpcmRfcGFydHlcIixcblx0XCJpbmRleC5kLnRzXCJcbl07XG52YXIgdHlwZXMgPSBcImluZGV4LmQudHNcIjtcbnZhciBzY3JpcHRzID0ge1xuXHRwcmVib290c3RyYXA6IFwiYmFzaCBzY3JpcHRzL3ByZWJvb3RzdHJhcFwiLFxuXHRib290c3RyYXA6IFwiYmFzaCBzY3JpcHRzL2Jvb3RzdHJhcCAtLXRlc3QgfHwgKGVjaG8gJ0Jvb3RzdHJhcCBmYWlsZWQuJyAmJiBtdiAtdiBkaXN0L29obS1ncmFtbWFyLmpzLm9sZCBkaXN0L29obS1ncmFtbWFyLmpzICYmIG12IC12IGRpc3QvYnVpbHQtaW4tcnVsZXMuanMub2xkIGRpc3QvYnVpbHQtaW4tcnVsZXMuanMgJiYgbXYgLXYgZGlzdC9vcGVyYXRpb25zLWFuZC1hdHRyaWJ1dGVzLmpzLm9sZCBkaXN0L29wZXJhdGlvbnMtYW5kLWF0dHJpYnV0ZXMuanMpXCIsXG5cdGJ1aWxkOiBcInlhcm4gYnVpbGQtZGVidWcgJiYgd2VicGFjayAtLW1vZGU9cHJvZHVjdGlvblwiLFxuXHRcImJ1aWxkLWRlYnVnXCI6IFwid2VicGFjayAtLW1vZGU9ZGV2ZWxvcG1lbnQgJiYgeWFybiBidWlsZC1lc20gJiYgbm9kZSBzY3JpcHRzL2dlbmVyYXRlLXR5cGVzLm1qc1wiLFxuXHRcImJ1aWxkLWVzbVwiOiBcInJvbGx1cCAtYyByb2xsdXAuY29uZmlnLm1qc1wiLFxuXHRjbGVhbjogXCJybSAtZiBkaXN0L29obS5qcyBkaXN0L29obS5taW4uanNcIixcblx0bGludDogXCJlc2xpbnQgLiAtLWlnbm9yZS1wYXRoIC4uLy5lc2xpbnRpZ25vcmVcIixcblx0Zm9ybWF0OiBcInByZXR0aWVyIC4gLS13cml0ZSAtLWlnbm9yZS1wYXRoIC4uLy5wcmV0dGllcmlnbm9yZSAtLWNvbmZpZyAuLi8ucHJldHRpZXJyYyAmJiBlc2xpbnQgLiAtLWlnbm9yZS1wYXRoIC4uLy5lc2xpbnRpZ25vcmUgLS1maXhcIixcblx0dGVzdDogXCJhdmEgJiYgYXZhIC0tY29uZmlnIGF2YS10cy5jb25maWcuanMgdGVzdC90ZXN0LXR5cGluZ3MudHNcIixcblx0XCJ0ZXN0LXdhdGNoXCI6IFwiYXZhIC0td2F0Y2hcIixcblx0XCJwcmUtY29tbWl0XCI6IFwieWFybiBydW4gbGludCAmJiB5YXJuIHJ1biBidWlsZCAmJiB5YXJuIHJ1biB0ZXN0XCIsXG5cdHByZXB1Ymxpc2hPbmx5OiBcImJhc2ggc2NyaXB0cy9wcmVwdWJsaXNoT25seVwiLFxuXHRwcmVwYWNrOiBcImNwIC4uLy4uL1JFQURNRS5tZCAuICYmIHlhcm4gYnVpbGRcIixcblx0cG9zdHBhY2s6IFwicm0gUkVBRE1FLm1kXCIsXG5cdHBvc3RwdWJsaXNoOiBcImVjaG8gJ/CfkYkgIE5vdyBnbyB0byBodHRwczovL2dpdGh1Yi5jb20vaGFyYy9vaG0vcmVsZWFzZXMgYW5kIGNyZWF0ZSBhIHJlbGVhc2UuJ1wiLFxuXHRcInVuc2FmZS1ib290c3RyYXBcIjogXCJiYXNoIHNjcmlwdHMvYm9vdHN0cmFwXCIsXG5cdFwidXBkYXRlLWNvbnRyaWJ1dG9yc1wiOiBcImJhc2ggc2NyaXB0cy91cGRhdGUtY29udHJpYnV0b3JzXCIsXG5cdHdhdGNoOiBcIndlYnBhY2sgLS1tb2RlPWRldmVsb3BtZW50IC0td2F0Y2hcIlxufTtcbnZhciBsaWNlbnNlID0gXCJNSVRcIjtcbnZhciBhdXRob3IgPSBcIkFsZXggV2FydGggPGFsZXh3YXJ0aEBnbWFpbC5jb20+IChodHRwOi8vdGlubGl6emllLm9yZy9+YXdhcnRoKVwiO1xudmFyIGNvbnRyaWJ1dG9ycyA9IFtcblx0XCJQYXRyaWNrIER1YnJveSA8cGR1YnJveUBnbWFpbC5jb20+XCIsXG5cdFwiTWVpeGlhbiBMaSA8bG1laXhpYW5AZ21haWwuY29tPlwiLFxuXHRcIk1hcmtvIFLDtmRlciA8bS5yb2VkZXJAcGhvdG9uLXNvZnR3YXJlLmRlPlwiLFxuXHRcIlRvbnkgR2Fybm9jay1Kb25lcyA8dG9ueWdhcm5vY2tqb25lc0BnbWFpbC5jb20+XCIsXG5cdFwiU2FrZXRoIEthc2liYXRsYSA8c2FrZS5rYXNpQGdtYWlsLmNvbT5cIixcblx0XCJMaW9uZWwgTGFuZHdlcmxpbiA8bGxhbmR3ZXJsaW5AZ21haWwuY29tPlwiLFxuXHRcIlJheSBUb2FsIDxydG9hbEBsbXUuZWR1PlwiLFxuXHRcIkphc29uIE1lcnJpbGwgPGp3bWVycmlsbEBnbWFpbC5jb20+XCIsXG5cdFwiWW9zaGlraSBPaHNoaW1hIDxZb3NoaWtpLk9oc2hpbWFAYWNtLm9yZz5cIixcblx0XCJtZWdhYnV6IDwzMjk5ODg5K21lZ2FidXpAdXNlcnMubm9yZXBseS5naXRodWIuY29tPlwiLFxuXHRcIk1pbGFuIExhanRvxaEgPG1pbGFuLmxhanRvc0BtZS5jb20+XCIsXG5cdFwiTmVpbCBKZXdlcnMgPG5qamV3ZXJzQHV3YXRlcmxvby5jYT5cIixcblx0XCJKb25hdGhhbiBFZHdhcmRzIDxKb25hdGhhbk1FZHdhcmRzQGdtYWlsLmNvbT5cIixcblx0XCJzdGFnYXMgPGdzdGFnYXNAZ21haWwuY29tPlwiLFxuXHRcIkRhbmllbCBUb21saW5zb24gPERhbmllbFRvbWxpbnNvbkBtZS5jb20+XCIsXG5cdFwiUGllcnJlIERvbmlhcyA8cGllcnJlLmRvbmlhc0BnbWFpbC5jb20+XCIsXG5cdFwiQ2FzZXkgT2xzb24gPGNhc2V5Lm0ub2xzb25AZ21haWwuY29tPlwiLFxuXHRcIkFydGh1ciBDYXJhYm90dCA8YXJ0aHVyY0BnbWFpbC5jb20+XCIsXG5cdFwiU3RhbiBSb3plbnJhdWtoIDxzdGFuQHN0YW5pc3Rhbi5jb20+XCIsXG5cdFwiU3RlcGhhbiBTZWlkdCA8c3RlcGhhbi5zZWlkdEBnbWFpbC5jb20+XCIsXG5cdFwiTGVzbGllIFlpbmcgPGFjZXRvcGhvcmVAdXNlcnMubm9yZXBseS5naXRodWIuY29tPlwiLFxuXHRcIlN6eW1vbiBLYWxpc2tpIDxrYWxpc2tpc3p5bW9uQGdtYWlsLmNvbT5cIixcblx0XCJUaG9tYXMgTnliZXJnIDx0b21ueWJlcmdAZ21haWwuY29tPlwiLFxuXHRcIkFuZ3J5UG93bWFuIDxhbmdyeXBvd21hbkBxcS5jb20+XCIsXG5cdFwiVnNlIE1vemhldCBCeXQgPHZzZW1vemhldGJ5dEBnbWFpbC5jb20+XCIsXG5cdFwiV2lsIENodW5nIDwxMDQ0NitpYW13aWxoZWxtQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbT5cIixcblx0XCJaYWNoYXJ5IFNha293aXR6IDx6c2Frb3dpdHpAZ21haWwuY29tPlwiLFxuXHRcImFiZWdvIDx1YkBhYmVnby1zb2Z0d2FyZS5kZT5cIixcblx0XCJhY3NsayA8ZF92ZDQxNUBob3RtYWlsLmNvbT5cIixcblx0XCJjb2RlWmVpbGVuIDxjb2RlWmVpbGVuQHVzZXJzLm5vcmVwbHkuZ2l0aHViLmNvbT5cIixcblx0XCJrYXNzYWRpbiA8a2Fzc2FkaW5AZm94bWFpbC5jb20+XCIsXG5cdFwib3djaCA8Ym93ZW5yYWlueWRheUBnbWFpbC5jb20+XCIsXG5cdFwic2Zpbm5pZSA8c2NvdHQuZmlubmllQGdtYWlsLmNvbT5cIixcblx0XCJTdGV2ZSBQaGlsbGlwcyA8c3RldmVAdHJ5aW5ndG9iZWF3ZXNvbWUuY29tPlwiLFxuXHRcIkp1c3RpbiBDaGFzZSA8anVzdGluLm0uY2hhc2VAZ21haWwuY29tPlwiLFxuXHRcIkx1Y2EgR3V6em9uIDxsdWNhLmd1enpvbkBnbWFpbC5jb20+XCIsXG5cdFwiSWFuIEhhcnJpcyA8aWFuQGZvZmdvZi54eXo+XCIsXG5cdFwiTWlrZSBOaWVibGluZyA8KG5vbmUpPlwiLFxuXHRcIlBhdHJpY2sgRHVicm95IDxwYXRyaWNrQHNvdXJjZWdyYXBoLmNvbT5cIlxuXTtcbnZhciBkZXBlbmRlbmNpZXMgPSB7XG59O1xudmFyIGRldkRlcGVuZGVuY2llcyA9IHtcblx0XCJAb2htLWpzL2NsaVwiOiBcIl4xLjAuMFwiLFxuXHRcIkByb2xsdXAvcGx1Z2luLWNvbW1vbmpzXCI6IFwiXjIxLjAuMVwiLFxuXHRcIkByb2xsdXAvcGx1Z2luLWpzb25cIjogXCJeNC4xLjBcIixcblx0XCJAcm9sbHVwL3BsdWdpbi1ub2RlLXJlc29sdmVcIjogXCJeMTMuMS4zXCIsXG5cdGF2YTogXCJeMy4xNS4wXCIsXG5cdFwiYXZhLXNwZWNcIjogXCJeMS4xLjFcIixcblx0ZGVkZW50OiBcIl4wLjcuMFwiLFxuXHRlc2xpbnQ6IFwiXjcuOS4wXCIsXG5cdFwiZXNsaW50LWNvbmZpZy1nb29nbGVcIjogXCJeMC4xNC4wXCIsXG5cdFwiZXNsaW50LXBsdWdpbi1hdmFcIjogXCJeMTEuMC4wXCIsXG5cdFwiZXNsaW50LXBsdWdpbi1jYW1lbGNhc2Utb2htXCI6IFwiXjAuMi4xXCIsXG5cdFwiZXNsaW50LXBsdWdpbi1uby1leHRlbnNpb24taW4tcmVxdWlyZVwiOiBcIl4wLjIuMFwiLFxuXHRodXNreTogXCJeNC4yLjVcIixcblx0anNkb206IFwiXjkuOS4xXCIsXG5cdGpzb246IFwiXjkuMC42XCIsXG5cdG1hcmtzY3JpcHQ6IFwiXjAuNS4wXCIsXG5cdFwibm9kZS1zdGF0aWNcIjogXCJeMC43LjExXCIsXG5cdFwib2htLWdyYW1tYXItZWNtYXNjcmlwdFwiOiBcIl4xLjAuMFwiLFxuXHRyb2xsdXA6IFwiXjIuNjMuMFwiLFxuXHRcInRzLWxvYWRlclwiOiBcIl44LjAuNFwiLFxuXHRcInRzLW5vZGVcIjogXCJeOS4wLjBcIixcblx0dHlwZXNjcmlwdDogXCJeNC4wLjNcIixcblx0XCJ3YWxrLXN5bmNcIjogXCJeMi4yLjBcIixcblx0d2VicGFjazogXCJeNC40NC4yXCIsXG5cdFwid2VicGFjay1jbGlcIjogXCJeMy4zLjEyXCJcbn07XG52YXIgZW5naW5lcyA9IHtcblx0bm9kZTogXCI+PTAuMTIuMVwiXG59O1xudmFyIHJlcXVpcmUkJDAgPSB7XG5cdG5hbWU6IG5hbWUsXG5cdHZlcnNpb246IHZlcnNpb24kMixcblx0ZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuXHRyZXBvc2l0b3J5OiByZXBvc2l0b3J5LFxuXHRrZXl3b3Jkczoga2V5d29yZHMsXG5cdGhvbWVwYWdlOiBob21lcGFnZSxcblx0YnVnczogYnVncyxcblx0bWFpbjogbWFpbixcblx0bW9kdWxlOiBtb2R1bGUsXG5cdGZpbGVzOiBmaWxlcyxcblx0dHlwZXM6IHR5cGVzLFxuXHRzY3JpcHRzOiBzY3JpcHRzLFxuXHRsaWNlbnNlOiBsaWNlbnNlLFxuXHRhdXRob3I6IGF1dGhvcixcblx0Y29udHJpYnV0b3JzOiBjb250cmlidXRvcnMsXG5cdGRlcGVuZGVuY2llczogZGVwZW5kZW5jaWVzLFxuXHRkZXZEZXBlbmRlbmNpZXM6IGRldkRlcGVuZGVuY2llcyxcblx0ZW5naW5lczogZW5naW5lc1xufTtcblxuLyogZ2xvYmFsIF9fR0xPQkFMX09ITV9WRVJTSU9OX18gKi9cblxuLy8gV2hlbiBydW5uaW5nIHVuZGVyIE5vZGUsIHJlYWQgdGhlIHZlcnNpb24gZnJvbSBwYWNrYWdlLmpzb24uIEZvciB0aGUgYnJvd3Nlcixcbi8vIHVzZSBhIHNwZWNpYWwgZ2xvYmFsIHZhcmlhYmxlIGRlZmluZWQgaW4gdGhlIGJ1aWxkIHByb2Nlc3MgKHNlZSB3ZWJwYWNrLmNvbmZpZy5qcykuXG52YXIgdmVyc2lvbiQxID1cbiAgdHlwZW9mIF9fR0xPQkFMX09ITV9WRVJTSU9OX18gPT09ICdzdHJpbmcnID9cbiAgICBfX0dMT0JBTF9PSE1fVkVSU0lPTl9fIDpcbiAgICByZXF1aXJlJCQwLnZlcnNpb247XG5cbnZhciBtYWtlUmVjaXBlJDUgPSB7fTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IEJ1aWxkZXIkMSA9IEJ1aWxkZXJfMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgc3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIG1ha2VSZWNpcGUkNChyZWNpcGUpIHtcbiAgaWYgKHR5cGVvZiByZWNpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcmVjaXBlLmNhbGwobmV3IEJ1aWxkZXIkMSgpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIHJlY2lwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIHN0cmluZ2lmaWVkIEpTT04gcmVjaXBlXG4gICAgICByZWNpcGUgPSBKU09OLnBhcnNlKHJlY2lwZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQnVpbGRlciQxKCkuZnJvbVJlY2lwZShyZWNpcGUpO1xuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBFeHBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5tYWtlUmVjaXBlJDUubWFrZVJlY2lwZSA9IG1ha2VSZWNpcGUkNDtcblxudmFyIHttYWtlUmVjaXBlOiBtYWtlUmVjaXBlJDN9ID0gbWFrZVJlY2lwZSQ1O1xudmFyIGJ1aWx0SW5SdWxlcyA9IG1ha2VSZWNpcGUkMyhbXCJncmFtbWFyXCIse1wic291cmNlXCI6XCJCdWlsdEluUnVsZXMge1xcblxcbiAgYWxudW0gIChhbiBhbHBoYS1udW1lcmljIGNoYXJhY3RlcilcXG4gICAgPSBsZXR0ZXJcXG4gICAgfCBkaWdpdFxcblxcbiAgbGV0dGVyICAoYSBsZXR0ZXIpXFxuICAgID0gbG93ZXJcXG4gICAgfCB1cHBlclxcbiAgICB8IHVuaWNvZGVMdG1vXFxuXFxuICBkaWdpdCAgKGEgZGlnaXQpXFxuICAgID0gXFxcIjBcXFwiLi5cXFwiOVxcXCJcXG5cXG4gIGhleERpZ2l0ICAoYSBoZXhhZGVjaW1hbCBkaWdpdClcXG4gICAgPSBkaWdpdFxcbiAgICB8IFxcXCJhXFxcIi4uXFxcImZcXFwiXFxuICAgIHwgXFxcIkFcXFwiLi5cXFwiRlxcXCJcXG5cXG4gIExpc3RPZjxlbGVtLCBzZXA+XFxuICAgID0gTm9uZW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcbiAgICB8IEVtcHR5TGlzdE9mPGVsZW0sIHNlcD5cXG5cXG4gIE5vbmVtcHR5TGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgPSBlbGVtIChzZXAgZWxlbSkqXFxuXFxuICBFbXB0eUxpc3RPZjxlbGVtLCBzZXA+XFxuICAgID0gLyogbm90aGluZyAqL1xcblxcbiAgbGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgPSBub25lbXB0eUxpc3RPZjxlbGVtLCBzZXA+XFxuICAgIHwgZW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcblxcbiAgbm9uZW1wdHlMaXN0T2Y8ZWxlbSwgc2VwPlxcbiAgICA9IGVsZW0gKHNlcCBlbGVtKSpcXG5cXG4gIGVtcHR5TGlzdE9mPGVsZW0sIHNlcD5cXG4gICAgPSAvKiBub3RoaW5nICovXFxuXFxuICAvLyBBbGxvd3MgYSBzeW50YWN0aWMgcnVsZSBhcHBsaWNhdGlvbiB3aXRoaW4gYSBsZXhpY2FsIGNvbnRleHQuXFxuICBhcHBseVN5bnRhY3RpYzxhcHA+ID0gYXBwXFxufVwifSxcIkJ1aWx0SW5SdWxlc1wiLG51bGwsbnVsbCx7XCJhbG51bVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4LDc4XX0sXCJhbiBhbHBoYS1udW1lcmljIGNoYXJhY3RlclwiLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzYwLDc4XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjAsNjZdfSxcImxldHRlclwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3Myw3OF19LFwiZGlnaXRcIixbXV1dXSxcImxldHRlclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzgyLDE0Ml19LFwiYSBsZXR0ZXJcIixbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDcsMTQyXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA3LDExMl19LFwibG93ZXJcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTE5LDEyNF19LFwidXBwZXJcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxLDE0Ml19LFwidW5pY29kZUx0bW9cIixbXV1dXSxcImRpZ2l0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ2LDE3N119LFwiYSBkaWdpdFwiLFtdLFtcInJhbmdlXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTY5LDE3N119LFwiMFwiLFwiOVwiXV0sXCJoZXhEaWdpdFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4MSwyNTRdfSxcImEgaGV4YWRlY2ltYWwgZGlnaXRcIixbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTksMjU0XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjE5LDIyNF19LFwiZGlnaXRcIixbXV0sW1wicmFuZ2VcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzEsMjM5XX0sXCJhXCIsXCJmXCJdLFtcInJhbmdlXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ2LDI1NF19LFwiQVwiLFwiRlwiXV1dLFwiTGlzdE9mXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU4LDMzNl19LG51bGwsW1wiZWxlbVwiLFwic2VwXCJdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI4MiwzMzZdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyODIsMzA3XX0sXCJOb25lbXB0eUxpc3RPZlwiLFtbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI5NywzMDFdfSwwXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzMwMywzMDZdfSwxXV1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzMxNCwzMzZdfSxcIkVtcHR5TGlzdE9mXCIsW1tcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzI2LDMzMF19LDBdLFtcInBhcmFtXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzMyLDMzNV19LDFdXV1dXSxcIk5vbmVtcHR5TGlzdE9mXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzQwLDM4OF19LG51bGwsW1wiZWxlbVwiLFwic2VwXCJdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM3MiwzODhdfSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM3MiwzNzZdfSwwXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzc3LDM4OF19LFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM3OCwzODZdfSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM3OCwzODFdfSwxXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4MiwzODZdfSwwXV1dXV0sXCJFbXB0eUxpc3RPZlwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM5Miw0MzRdfSxudWxsLFtcImVsZW1cIixcInNlcFwiXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0MzgsNDM4XX1dXSxcImxpc3RPZlwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQzOCw1MTZdfSxudWxsLFtcImVsZW1cIixcInNlcFwiXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NjIsNTE2XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNDYyLDQ4N119LFwibm9uZW1wdHlMaXN0T2ZcIixbW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NzcsNDgxXX0sMF0sW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0ODMsNDg2XX0sMV1dXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0OTQsNTE2XX0sXCJlbXB0eUxpc3RPZlwiLFtbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzUwNiw1MTBdfSwwXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzUxMiw1MTVdfSwxXV1dXV0sXCJub25lbXB0eUxpc3RPZlwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzUyMCw1NjhdfSxudWxsLFtcImVsZW1cIixcInNlcFwiXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NTIsNTY4XX0sW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NTIsNTU2XX0sMF0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzU1Nyw1NjhdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NTgsNTY2XX0sW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NTgsNTYxXX0sMV0sW1wicGFyYW1cIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NjIsNTY2XX0sMF1dXV1dLFwiZW1wdHlMaXN0T2ZcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NzIsNjgyXX0sbnVsbCxbXCJlbGVtXCIsXCJzZXBcIl0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjg1LDY4NV19XV0sXCJhcHBseVN5bnRhY3RpY1wiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzY4NSw3MTBdfSxudWxsLFtcImFwcFwiXSxbXCJwYXJhbVwiLHtcInNvdXJjZUludGVydmFsXCI6WzcwNyw3MTBdfSwwXV19XSk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJbXBvcnRzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBHcmFtbWFyJDEgPSBHcmFtbWFyXzE7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5HcmFtbWFyJDEuQnVpbHRJblJ1bGVzID0gYnVpbHRJblJ1bGVzO1xuXG52YXIge21ha2VSZWNpcGU6IG1ha2VSZWNpcGUkMn0gPSBtYWtlUmVjaXBlJDU7XG52YXIgb3BlcmF0aW9uc0FuZEF0dHJpYnV0ZXMgPSBtYWtlUmVjaXBlJDIoW1wiZ3JhbW1hclwiLHtcInNvdXJjZVwiOlwiT3BlcmF0aW9uc0FuZEF0dHJpYnV0ZXMge1xcblxcbiAgQXR0cmlidXRlU2lnbmF0dXJlID1cXG4gICAgbmFtZVxcblxcbiAgT3BlcmF0aW9uU2lnbmF0dXJlID1cXG4gICAgbmFtZSBGb3JtYWxzP1xcblxcbiAgRm9ybWFsc1xcbiAgICA9IFxcXCIoXFxcIiBMaXN0T2Y8bmFtZSwgXFxcIixcXFwiPiBcXFwiKVxcXCJcXG5cXG4gIG5hbWUgIChhIG5hbWUpXFxuICAgID0gbmFtZUZpcnN0IG5hbWVSZXN0KlxcblxcbiAgbmFtZUZpcnN0XFxuICAgID0gXFxcIl9cXFwiXFxuICAgIHwgbGV0dGVyXFxuXFxuICBuYW1lUmVzdFxcbiAgICA9IFxcXCJfXFxcIlxcbiAgICB8IGFsbnVtXFxuXFxufVwifSxcIk9wZXJhdGlvbnNBbmRBdHRyaWJ1dGVzXCIsbnVsbCxcIkF0dHJpYnV0ZVNpZ25hdHVyZVwiLHtcIkF0dHJpYnV0ZVNpZ25hdHVyZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI5LDU4XX0sbnVsbCxbXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NCw1OF19LFwibmFtZVwiLFtdXV0sXCJPcGVyYXRpb25TaWduYXR1cmVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2MiwxMDBdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg3LDEwMF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzg3LDkxXX0sXCJuYW1lXCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkyLDEwMF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkyLDk5XX0sXCJGb3JtYWxzXCIsW11dXV1dLFwiRm9ybWFsc1wiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwNCwxNDNdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzExOCwxNDNdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExOCwxMjFdfSxcIihcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTIyLDEzOV19LFwiTGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOSwxMzNdfSxcIm5hbWVcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzUsMTM4XX0sXCIsXCJdXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDAsMTQzXX0sXCIpXCJdXV0sXCJuYW1lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ3LDE4N119LFwiYSBuYW1lXCIsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTY4LDE4N119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2OCwxNzddfSxcIm5hbWVGaXJzdFwiLFtdXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTc4LDE4N119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3OCwxODZdfSxcIm5hbWVSZXN0XCIsW11dXV1dLFwibmFtZUZpcnN0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTkxLDIyM119LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjA3LDIyM119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjA3LDIxMF19LFwiX1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTcsMjIzXX0sXCJsZXR0ZXJcIixbXV1dXSxcIm5hbWVSZXN0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI3LDI1N119LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQyLDI1N119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQyLDI0NV19LFwiX1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTIsMjU3XX0sXCJhbG51bVwiLFtdXV1dfV0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgU2VtYW50aWNzID0gU2VtYW50aWNzXzE7XG5jb25zdCB1dGlsJDEgPSB1dGlsJDc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tIERlZmVycmVkIGluaXRpYWxpemF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tXG5cbnV0aWwkMS5hd2FpdEJ1aWx0SW5SdWxlcyhidWlsdEluUnVsZXMgPT4ge1xuICBjb25zdCBvcGVyYXRpb25zQW5kQXR0cmlidXRlc0dyYW1tYXIgPSBvcGVyYXRpb25zQW5kQXR0cmlidXRlcztcbiAgaW5pdEJ1aWx0SW5TZW1hbnRpY3MoYnVpbHRJblJ1bGVzKTtcbiAgaW5pdFByb3RvdHlwZVBhcnNlcihvcGVyYXRpb25zQW5kQXR0cmlidXRlc0dyYW1tYXIpOyAvLyByZXF1aXJlcyBCdWlsdEluU2VtYW50aWNzXG59KTtcblxuZnVuY3Rpb24gaW5pdEJ1aWx0SW5TZW1hbnRpY3MoYnVpbHRJblJ1bGVzKSB7XG4gIGNvbnN0IGFjdGlvbnMgPSB7XG4gICAgZW1wdHkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVyYXRpb24oKTtcbiAgICB9LFxuICAgIG5vbkVtcHR5KGZpcnN0LCBfLCByZXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5pdGVyYXRpb24oW2ZpcnN0XS5jb25jYXQocmVzdC5jaGlsZHJlbikpO1xuICAgIH0sXG4gIH07XG5cbiAgU2VtYW50aWNzLkJ1aWx0SW5TZW1hbnRpY3MgPSBTZW1hbnRpY3MuY3JlYXRlU2VtYW50aWNzKGJ1aWx0SW5SdWxlcywgbnVsbCkuYWRkT3BlcmF0aW9uKFxuICAgICAgJ2FzSXRlcmF0aW9uJyxcbiAgICAgIHtcbiAgICAgICAgZW1wdHlMaXN0T2Y6IGFjdGlvbnMuZW1wdHksXG4gICAgICAgIG5vbmVtcHR5TGlzdE9mOiBhY3Rpb25zLm5vbkVtcHR5LFxuICAgICAgICBFbXB0eUxpc3RPZjogYWN0aW9ucy5lbXB0eSxcbiAgICAgICAgTm9uZW1wdHlMaXN0T2Y6IGFjdGlvbnMubm9uRW1wdHksXG4gICAgICB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIGluaXRQcm90b3R5cGVQYXJzZXIoZ3JhbW1hcikge1xuICBTZW1hbnRpY3MucHJvdG90eXBlR3JhbW1hclNlbWFudGljcyA9IGdyYW1tYXIuY3JlYXRlU2VtYW50aWNzKCkuYWRkT3BlcmF0aW9uKCdwYXJzZScsIHtcbiAgICBBdHRyaWJ1dGVTaWduYXR1cmUobmFtZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmFtZS5wYXJzZSgpLFxuICAgICAgICBmb3JtYWxzOiBbXSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBPcGVyYXRpb25TaWduYXR1cmUobmFtZSwgb3B0Rm9ybWFscykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmFtZS5wYXJzZSgpLFxuICAgICAgICBmb3JtYWxzOiBvcHRGb3JtYWxzLmNoaWxkcmVuLm1hcChjID0+IGMucGFyc2UoKSlbMF0gfHwgW10sXG4gICAgICB9O1xuICAgIH0sXG4gICAgRm9ybWFscyhvcGFyZW4sIGZzLCBjcGFyZW4pIHtcbiAgICAgIHJldHVybiBmcy5hc0l0ZXJhdGlvbigpLmNoaWxkcmVuLm1hcChjID0+IGMucGFyc2UoKSk7XG4gICAgfSxcbiAgICBuYW1lKGZpcnN0LCByZXN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgfSxcbiAgfSk7XG4gIFNlbWFudGljcy5wcm90b3R5cGVHcmFtbWFyID0gZ3JhbW1hcjtcbn1cblxudmFyIHttYWtlUmVjaXBlOiBtYWtlUmVjaXBlJDF9ID0gbWFrZVJlY2lwZSQ1O1xudmFyIG9obUdyYW1tYXIkMSA9IG1ha2VSZWNpcGUkMShbXCJncmFtbWFyXCIse1wic291cmNlXCI6XCJPaG0ge1xcblxcbiAgR3JhbW1hcnNcXG4gICAgPSBHcmFtbWFyKlxcblxcbiAgR3JhbW1hclxcbiAgICA9IGlkZW50IFN1cGVyR3JhbW1hcj8gXFxcIntcXFwiIFJ1bGUqIFxcXCJ9XFxcIlxcblxcbiAgU3VwZXJHcmFtbWFyXFxuICAgID0gXFxcIjw6XFxcIiBpZGVudFxcblxcbiAgUnVsZVxcbiAgICA9IGlkZW50IEZvcm1hbHM/IHJ1bGVEZXNjcj8gXFxcIj1cXFwiICBSdWxlQm9keSAgLS0gZGVmaW5lXFxuICAgIHwgaWRlbnQgRm9ybWFscz8gICAgICAgICAgICBcXFwiOj1cXFwiIE92ZXJyaWRlUnVsZUJvZHkgIC0tIG92ZXJyaWRlXFxuICAgIHwgaWRlbnQgRm9ybWFscz8gICAgICAgICAgICBcXFwiKz1cXFwiIFJ1bGVCb2R5ICAtLSBleHRlbmRcXG5cXG4gIFJ1bGVCb2R5XFxuICAgID0gXFxcInxcXFwiPyBOb25lbXB0eUxpc3RPZjxUb3BMZXZlbFRlcm0sIFxcXCJ8XFxcIj5cXG5cXG4gIFRvcExldmVsVGVybVxcbiAgICA9IFNlcSBjYXNlTmFtZSAgLS0gaW5saW5lXFxuICAgIHwgU2VxXFxuXFxuICBPdmVycmlkZVJ1bGVCb2R5XFxuICAgID0gXFxcInxcXFwiPyBOb25lbXB0eUxpc3RPZjxPdmVycmlkZVRvcExldmVsVGVybSwgXFxcInxcXFwiPlxcblxcbiAgT3ZlcnJpZGVUb3BMZXZlbFRlcm1cXG4gICAgPSBcXFwiLi4uXFxcIiAgLS0gc3VwZXJTcGxpY2VcXG4gICAgfCBUb3BMZXZlbFRlcm1cXG5cXG4gIEZvcm1hbHNcXG4gICAgPSBcXFwiPFxcXCIgTGlzdE9mPGlkZW50LCBcXFwiLFxcXCI+IFxcXCI+XFxcIlxcblxcbiAgUGFyYW1zXFxuICAgID0gXFxcIjxcXFwiIExpc3RPZjxTZXEsIFxcXCIsXFxcIj4gXFxcIj5cXFwiXFxuXFxuICBBbHRcXG4gICAgPSBOb25lbXB0eUxpc3RPZjxTZXEsIFxcXCJ8XFxcIj5cXG5cXG4gIFNlcVxcbiAgICA9IEl0ZXIqXFxuXFxuICBJdGVyXFxuICAgID0gUHJlZCBcXFwiKlxcXCIgIC0tIHN0YXJcXG4gICAgfCBQcmVkIFxcXCIrXFxcIiAgLS0gcGx1c1xcbiAgICB8IFByZWQgXFxcIj9cXFwiICAtLSBvcHRcXG4gICAgfCBQcmVkXFxuXFxuICBQcmVkXFxuICAgID0gXFxcIn5cXFwiIExleCAgLS0gbm90XFxuICAgIHwgXFxcIiZcXFwiIExleCAgLS0gbG9va2FoZWFkXFxuICAgIHwgTGV4XFxuXFxuICBMZXhcXG4gICAgPSBcXFwiI1xcXCIgQmFzZSAgLS0gbGV4XFxuICAgIHwgQmFzZVxcblxcbiAgQmFzZVxcbiAgICA9IGlkZW50IFBhcmFtcz8gfihydWxlRGVzY3I/IFxcXCI9XFxcIiB8IFxcXCI6PVxcXCIgfCBcXFwiKz1cXFwiKSAgLS0gYXBwbGljYXRpb25cXG4gICAgfCBvbmVDaGFyVGVybWluYWwgXFxcIi4uXFxcIiBvbmVDaGFyVGVybWluYWwgICAgICAgICAgIC0tIHJhbmdlXFxuICAgIHwgdGVybWluYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSB0ZXJtaW5hbFxcbiAgICB8IFxcXCIoXFxcIiBBbHQgXFxcIilcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gcGFyZW5cXG5cXG4gIHJ1bGVEZXNjciAgKGEgcnVsZSBkZXNjcmlwdGlvbilcXG4gICAgPSBcXFwiKFxcXCIgcnVsZURlc2NyVGV4dCBcXFwiKVxcXCJcXG5cXG4gIHJ1bGVEZXNjclRleHRcXG4gICAgPSAoflxcXCIpXFxcIiBhbnkpKlxcblxcbiAgY2FzZU5hbWVcXG4gICAgPSBcXFwiLS1cXFwiICh+XFxcIlxcXFxuXFxcIiBzcGFjZSkqIG5hbWUgKH5cXFwiXFxcXG5cXFwiIHNwYWNlKSogKFxcXCJcXFxcblxcXCIgfCAmXFxcIn1cXFwiKVxcblxcbiAgbmFtZSAgKGEgbmFtZSlcXG4gICAgPSBuYW1lRmlyc3QgbmFtZVJlc3QqXFxuXFxuICBuYW1lRmlyc3RcXG4gICAgPSBcXFwiX1xcXCJcXG4gICAgfCBsZXR0ZXJcXG5cXG4gIG5hbWVSZXN0XFxuICAgID0gXFxcIl9cXFwiXFxuICAgIHwgYWxudW1cXG5cXG4gIGlkZW50ICAoYW4gaWRlbnRpZmllcilcXG4gICAgPSBuYW1lXFxuXFxuICB0ZXJtaW5hbFxcbiAgICA9IFxcXCJcXFxcXFxcIlxcXCIgdGVybWluYWxDaGFyKiBcXFwiXFxcXFxcXCJcXFwiXFxuXFxuICBvbmVDaGFyVGVybWluYWxcXG4gICAgPSBcXFwiXFxcXFxcXCJcXFwiIHRlcm1pbmFsQ2hhciBcXFwiXFxcXFxcXCJcXFwiXFxuXFxuICB0ZXJtaW5hbENoYXJcXG4gICAgPSBlc2NhcGVDaGFyXFxuICAgICAgfCB+XFxcIlxcXFxcXFxcXFxcIiB+XFxcIlxcXFxcXFwiXFxcIiB+XFxcIlxcXFxuXFxcIiBcXFwiXFxcXHV7MH1cXFwiLi5cXFwiXFxcXHV7MTBGRkZGfVxcXCJcXG5cXG4gIGVzY2FwZUNoYXIgIChhbiBlc2NhcGUgc2VxdWVuY2UpXFxuICAgID0gXFxcIlxcXFxcXFxcXFxcXFxcXFxcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIGJhY2tzbGFzaFxcbiAgICB8IFxcXCJcXFxcXFxcXFxcXFxcXFwiXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBkb3VibGVRdW90ZVxcbiAgICB8IFxcXCJcXFxcXFxcXFxcXFwnXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBzaW5nbGVRdW90ZVxcbiAgICB8IFxcXCJcXFxcXFxcXGJcXFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBiYWNrc3BhY2VcXG4gICAgfCBcXFwiXFxcXFxcXFxuXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gbGluZUZlZWRcXG4gICAgfCBcXFwiXFxcXFxcXFxyXFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gY2FycmlhZ2VSZXR1cm5cXG4gICAgfCBcXFwiXFxcXFxcXFx0XFxcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gdGFiXFxuICAgIHwgXFxcIlxcXFxcXFxcdXtcXFwiIGhleERpZ2l0IGhleERpZ2l0PyBoZXhEaWdpdD9cXG4gICAgICAgICAgICAgaGV4RGlnaXQ/IGhleERpZ2l0PyBoZXhEaWdpdD8gXFxcIn1cXFwiICAgLS0gdW5pY29kZUNvZGVQb2ludFxcbiAgICB8IFxcXCJcXFxcXFxcXHVcXFwiIGhleERpZ2l0IGhleERpZ2l0IGhleERpZ2l0IGhleERpZ2l0ICAtLSB1bmljb2RlRXNjYXBlXFxuICAgIHwgXFxcIlxcXFxcXFxceFxcXCIgaGV4RGlnaXQgaGV4RGlnaXQgICAgICAgICAgICAgICAgICAgIC0tIGhleEVzY2FwZVxcblxcbiAgc3BhY2VcXG4gICArPSBjb21tZW50XFxuXFxuICBjb21tZW50XFxuICAgID0gXFxcIi8vXFxcIiAoflxcXCJcXFxcblxcXCIgYW55KSogJihcXFwiXFxcXG5cXFwiIHwgZW5kKSAgLS0gc2luZ2xlTGluZVxcbiAgICB8IFxcXCIvKlxcXCIgKH5cXFwiKi9cXFwiIGFueSkqIFxcXCIqL1xcXCIgIC0tIG11bHRpTGluZVxcblxcbiAgdG9rZW5zID0gdG9rZW4qXFxuXFxuICB0b2tlbiA9IGNhc2VOYW1lIHwgY29tbWVudCB8IGlkZW50IHwgb3BlcmF0b3IgfCBwdW5jdHVhdGlvbiB8IHRlcm1pbmFsIHwgYW55XFxuXFxuICBvcGVyYXRvciA9IFxcXCI8OlxcXCIgfCBcXFwiPVxcXCIgfCBcXFwiOj1cXFwiIHwgXFxcIis9XFxcIiB8IFxcXCIqXFxcIiB8IFxcXCIrXFxcIiB8IFxcXCI/XFxcIiB8IFxcXCJ+XFxcIiB8IFxcXCImXFxcIlxcblxcbiAgcHVuY3R1YXRpb24gPSBcXFwiPFxcXCIgfCBcXFwiPlxcXCIgfCBcXFwiLFxcXCIgfCBcXFwiLS1cXFwiXFxufVwifSxcIk9obVwiLG51bGwsXCJHcmFtbWFyc1wiLHtcIkdyYW1tYXJzXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOSwzMl19LG51bGwsW10sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0LDMyXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQsMzFdfSxcIkdyYW1tYXJcIixbXV1dXSxcIkdyYW1tYXJcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszNiw4M119LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTAsODNdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1MCw1NV19LFwiaWRlbnRcIixbXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbNTYsNjldfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1Niw2OF19LFwiU3VwZXJHcmFtbWFyXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzcwLDczXX0sXCJ7XCJdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NCw3OV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc0LDc4XX0sXCJSdWxlXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzgwLDgzXX0sXCJ9XCJdXV0sXCJTdXBlckdyYW1tYXJcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NywxMTZdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwNiwxMTZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwNiwxMTBdfSxcIjw6XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMSwxMTZdfSxcImlkZW50XCIsW11dXV0sXCJSdWxlX2RlZmluZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMSwxODFdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMSwxNzBdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzEsMTM2XX0sXCJpZGVudFwiLFtdXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzcsMTQ1XX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTM3LDE0NF19LFwiRm9ybWFsc1wiLFtdXV0sW1wib3B0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQ2LDE1Nl19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0NiwxNTVdfSxcInJ1bGVEZXNjclwiLFtdXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTcsMTYwXX0sXCI9XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MiwxNzBdfSxcIlJ1bGVCb2R5XCIsW11dXV0sXCJSdWxlX292ZXJyaWRlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTg4LDI0OF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTg4LDIzNV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4OCwxOTNdfSxcImlkZW50XCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE5NCwyMDJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxOTQsMjAxXX0sXCJGb3JtYWxzXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxNCwyMThdfSxcIjo9XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxOSwyMzVdfSxcIk92ZXJyaWRlUnVsZUJvZHlcIixbXV1dXSxcIlJ1bGVfZXh0ZW5kXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU1LDMwNV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU1LDI5NF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1NSwyNjBdfSxcImlkZW50XCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MSwyNjldfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjEsMjY4XX0sXCJGb3JtYWxzXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI4MSwyODVdfSxcIis9XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI4NiwyOTRdfSxcIlJ1bGVCb2R5XCIsW11dXV0sXCJSdWxlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTIwLDMwNV19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMxLDMwNV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMSwxNzBdfSxcIlJ1bGVfZGVmaW5lXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4OCwyMzVdfSxcIlJ1bGVfb3ZlcnJpZGVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU1LDI5NF19LFwiUnVsZV9leHRlbmRcIixbXV1dXSxcIlJ1bGVCb2R5XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzA5LDM2Ml19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzI0LDM2Ml19LFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzMyNCwzMjhdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzMyNCwzMjddfSxcInxcIl1dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzMyOSwzNjJdfSxcIk5vbmVtcHR5TGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzM0NCwzNTZdfSxcIlRvcExldmVsVGVybVwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzM1OCwzNjFdfSxcInxcIl1dXV1dLFwiVG9wTGV2ZWxUZXJtX2lubGluZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4NSw0MDhdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4NSwzOTddfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszODUsMzg4XX0sXCJTZXFcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMzg5LDM5N119LFwiY2FzZU5hbWVcIixbXV1dXSxcIlRvcExldmVsVGVybVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzM2Niw0MThdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzM4NSw0MThdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlszODUsMzk3XX0sXCJUb3BMZXZlbFRlcm1faW5saW5lXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQxNSw0MThdfSxcIlNlcVwiLFtdXV1dLFwiT3ZlcnJpZGVSdWxlQm9keVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQyMiw0OTFdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ0NSw0OTFdfSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NDUsNDQ5XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NDUsNDQ4XX0sXCJ8XCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NTAsNDkxXX0sXCJOb25lbXB0eUxpc3RPZlwiLFtbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls0NjUsNDg1XX0sXCJPdmVycmlkZVRvcExldmVsVGVybVwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ4Nyw0OTBdfSxcInxcIl1dXV1dLFwiT3ZlcnJpZGVUb3BMZXZlbFRlcm1fc3VwZXJTcGxpY2VcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1MjIsNTQzXX0sbnVsbCxbXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzUyMiw1MjddfSxcIi4uLlwiXV0sXCJPdmVycmlkZVRvcExldmVsVGVybVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzQ5NSw1NjJdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzUyMiw1NjJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1MjIsNTI3XX0sXCJPdmVycmlkZVRvcExldmVsVGVybV9zdXBlclNwbGljZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NTAsNTYyXX0sXCJUb3BMZXZlbFRlcm1cIixbXV1dXSxcIkZvcm1hbHNcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1NjYsNjA2XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1ODAsNjA2XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1ODAsNTgzXX0sXCI8XCJdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU4NCw2MDJdfSxcIkxpc3RPZlwiLFtbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls1OTEsNTk2XX0sXCJpZGVudFwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzU5OCw2MDFdfSxcIixcIl1dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzYwMyw2MDZdfSxcIj5cIl1dXSxcIlBhcmFtc1wiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzYxMCw2NDddfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzYyMyw2NDddfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzYyMyw2MjZdfSxcIjxcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjI3LDY0M119LFwiTGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzYzNCw2MzddfSxcIlNlcVwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzYzOSw2NDJdfSxcIixcIl1dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzY0NCw2NDddfSxcIj5cIl1dXSxcIkFsdFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzY1MSw2ODVdfSxudWxsLFtdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzY2MSw2ODVdfSxcIk5vbmVtcHR5TGlzdE9mXCIsW1tcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzY3Niw2NzldfSxcIlNlcVwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzY4MSw2ODRdfSxcInxcIl1dXV0sXCJTZXFcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls2ODksNzA0XX0sbnVsbCxbXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNjk5LDcwNF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzY5OSw3MDNdfSxcIkl0ZXJcIixbXV1dXSxcIkl0ZXJfc3RhclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzcxOSw3MzZdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzcxOSw3MjddfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3MTksNzIzXX0sXCJQcmVkXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzI0LDcyN119LFwiKlwiXV1dLFwiSXRlcl9wbHVzXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzQzLDc2MF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzQzLDc1MV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc0Myw3NDddfSxcIlByZWRcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NDgsNzUxXX0sXCIrXCJdXV0sXCJJdGVyX29wdFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc2Nyw3ODNdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc2Nyw3NzVdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3NjcsNzcxXX0sXCJQcmVkXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzcyLDc3NV19LFwiP1wiXV1dLFwiSXRlclwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzcwOCw3OTRdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzcxOSw3OTRdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3MTksNzI3XX0sXCJJdGVyX3N0YXJcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbNzQzLDc1MV19LFwiSXRlcl9wbHVzXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc2Nyw3NzVdfSxcIkl0ZXJfb3B0XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzc5MCw3OTRdfSxcIlByZWRcIixbXV1dXSxcIlByZWRfbm90XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODA5LDgyNF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODA5LDgxNl19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODA5LDgxMl19LFwiflwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MTMsODE2XX0sXCJMZXhcIixbXV1dXSxcIlByZWRfbG9va2FoZWFkXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODMxLDg1Ml19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODMxLDgzOF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODMxLDgzNF19LFwiJlwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MzUsODM4XX0sXCJMZXhcIixbXV1dXSxcIlByZWRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls3OTgsODYyXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4MDksODYyXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODA5LDgxNl19LFwiUHJlZF9ub3RcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODMxLDgzOF19LFwiUHJlZF9sb29rYWhlYWRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODU5LDg2Ml19LFwiTGV4XCIsW11dXV0sXCJMZXhfbGV4XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODc2LDg5Ml19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODc2LDg4NF19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODc2LDg3OV19LFwiI1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4ODAsODg0XX0sXCJCYXNlXCIsW11dXV0sXCJMZXhcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NjYsOTAzXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4NzYsOTAzXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbODc2LDg4NF19LFwiTGV4X2xleFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls4OTksOTAzXX0sXCJCYXNlXCIsW11dXV0sXCJCYXNlX2FwcGxpY2F0aW9uXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTE4LDk3OV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTE4LDk2M119LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkxOCw5MjNdfSxcImlkZW50XCIsW11dLFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkyNCw5MzFdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MjQsOTMwXX0sXCJQYXJhbXNcIixbXV1dLFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkzMiw5NjNdfSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MzQsOTYyXX0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTM0LDk0OF19LFtcIm9wdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkzNCw5NDRdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MzQsOTQzXX0sXCJydWxlRGVzY3JcIixbXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTQ1LDk0OF19LFwiPVwiXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5NTEsOTU1XX0sXCI6PVwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6Wzk1OCw5NjJdfSxcIis9XCJdXV1dXSxcIkJhc2VfcmFuZ2VcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5ODYsMTA0MV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTg2LDEwMjJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5ODYsMTAwMV19LFwib25lQ2hhclRlcm1pbmFsXCIsW11dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTAwMiwxMDA2XX0sXCIuLlwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMDA3LDEwMjJdfSxcIm9uZUNoYXJUZXJtaW5hbFwiLFtdXV1dLFwiQmFzZV90ZXJtaW5hbFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEwNDgsMTEwNl19LG51bGwsW10sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA0OCwxMDU2XX0sXCJ0ZXJtaW5hbFwiLFtdXV0sXCJCYXNlX3BhcmVuXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTExMywxMTY4XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMTEzLDExMjRdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMTMsMTExNl19LFwiKFwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMTE3LDExMjBdfSxcIkFsdFwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMjEsMTEyNF19LFwiKVwiXV1dLFwiQmFzZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzkwNywxMTY4XX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOls5MTgsMTE2OF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzkxOCw5NjNdfSxcIkJhc2VfYXBwbGljYXRpb25cIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbOTg2LDEwMjJdfSxcIkJhc2VfcmFuZ2VcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTA0OCwxMDU2XX0sXCJCYXNlX3Rlcm1pbmFsXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzExMTMsMTEyNF19LFwiQmFzZV9wYXJlblwiLFtdXV1dLFwicnVsZURlc2NyXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTE3MiwxMjMxXX0sXCJhIHJ1bGUgZGVzY3JpcHRpb25cIixbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjEwLDEyMzFdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyMTAsMTIxM119LFwiKFwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjE0LDEyMjddfSxcInJ1bGVEZXNjclRleHRcIixbXV0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjI4LDEyMzFdfSxcIilcIl1dXSxcInJ1bGVEZXNjclRleHRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjM1LDEyNjZdfSxudWxsLFtdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjU1LDEyNjZdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjU2LDEyNjRdfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjU2LDEyNjBdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyNTcsMTI2MF19LFwiKVwiXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI2MSwxMjY0XX0sXCJhbnlcIixbXV1dXV0sXCJjYXNlTmFtZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyNzAsMTMzOF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTI4NSwxMzM4XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjg1LDEyODldfSxcIi0tXCJdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjkwLDEzMDRdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjkxLDEzMDJdfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjkxLDEyOTZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEyOTIsMTI5Nl19LFwiXFxuXCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMjk3LDEzMDJdfSxcInNwYWNlXCIsW11dXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMwNSwxMzA5XX0sXCJuYW1lXCIsW11dLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzEwLDEzMjRdfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzExLDEzMjJdfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzExLDEzMTZdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMTIsMTMxNl19LFwiXFxuXCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzE3LDEzMjJdfSxcInNwYWNlXCIsW11dXV0sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTMyNiwxMzM3XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzI2LDEzMzBdfSxcIlxcblwiXSxbXCJsb29rYWhlYWRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzMzLDEzMzddfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzMzQsMTMzN119LFwifVwiXV1dXV0sXCJuYW1lXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTM0MiwxMzgyXX0sXCJhIG5hbWVcIixbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzYzLDEzODJdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxMzYzLDEzNzJdfSxcIm5hbWVGaXJzdFwiLFtdXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTM3MywxMzgyXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTM3MywxMzgxXX0sXCJuYW1lUmVzdFwiLFtdXV1dXSxcIm5hbWVGaXJzdFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzEzODYsMTQxOF19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQwMiwxNDE4XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDAyLDE0MDVdfSxcIl9cIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQxMiwxNDE4XX0sXCJsZXR0ZXJcIixbXV1dXSxcIm5hbWVSZXN0XCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTQyMiwxNDUyXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDM3LDE0NTJdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0MzcsMTQ0MF19LFwiX1wiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNDQ3LDE0NTJdfSxcImFsbnVtXCIsW11dXV0sXCJpZGVudFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0NTYsMTQ4OV19LFwiYW4gaWRlbnRpZmllclwiLFtdLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0ODUsMTQ4OV19LFwibmFtZVwiLFtdXV0sXCJ0ZXJtaW5hbFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE0OTMsMTUzMV19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTUwOCwxNTMxXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTA4LDE1MTJdfSxcIlxcXCJcIl0sW1wic3RhclwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1MTMsMTUyNl19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1MTMsMTUyNV19LFwidGVybWluYWxDaGFyXCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1MjcsMTUzMV19LFwiXFxcIlwiXV1dLFwib25lQ2hhclRlcm1pbmFsXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTUzNSwxNTc5XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTU3LDE1NzldfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1NTcsMTU2MV19LFwiXFxcIlwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNTYyLDE1NzRdfSxcInRlcm1pbmFsQ2hhclwiLFtdXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE1NzUsMTU3OV19LFwiXFxcIlwiXV1dLFwidGVybWluYWxDaGFyXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTU4MywxNjYwXX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjAyLDE2NjBdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjAyLDE2MTJdfSxcImVzY2FwZUNoYXJcIixbXV0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYyMSwxNjYwXX0sW1wibm90XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYyMSwxNjI2XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjIyLDE2MjZdfSxcIlxcXFxcIl1dLFtcIm5vdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MjcsMTYzMl19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTYyOCwxNjMyXX0sXCJcXFwiXCJdXSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjMzLDE2MzhdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MzQsMTYzOF19LFwiXFxuXCJdXSxbXCJyYW5nZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE2MzksMTY2MF19LFwiXFx1MDAwMFwiLFwi9I+/v1wiXV1dXSxcImVzY2FwZUNoYXJfYmFja3NsYXNoXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTcwMywxNzU4XX0sbnVsbCxbXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3MDMsMTcwOV19LFwiXFxcXFxcXFxcIl1dLFwiZXNjYXBlQ2hhcl9kb3VibGVRdW90ZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3NjUsMTgyMl19LG51bGwsW10sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNzY1LDE3NzFdfSxcIlxcXFxcXFwiXCJdXSxcImVzY2FwZUNoYXJfc2luZ2xlUXVvdGVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODI5LDE4ODZdfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTgyOSwxODM1XX0sXCJcXFxcJ1wiXV0sXCJlc2NhcGVDaGFyX2JhY2tzcGFjZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4OTMsMTk0OF19LG51bGwsW10sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODkzLDE4OThdfSxcIlxcXFxiXCJdXSxcImVzY2FwZUNoYXJfbGluZUZlZWRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxOTU1LDIwMDldfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTk1NSwxOTYwXX0sXCJcXFxcblwiXV0sXCJlc2NhcGVDaGFyX2NhcnJpYWdlUmV0dXJuXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjAxNiwyMDc2XX0sbnVsbCxbXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIwMTYsMjAyMV19LFwiXFxcXHJcIl1dLFwiZXNjYXBlQ2hhcl90YWJcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDgzLDIxMzJdfSxudWxsLFtdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjA4MywyMDg4XX0sXCJcXFxcdFwiXV0sXCJlc2NhcGVDaGFyX3VuaWNvZGVDb2RlUG9pbnRcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTM5LDIyNDNdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIxMzksMjIyMV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjEzOSwyMTQ1XX0sXCJcXFxcdXtcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjE0NiwyMTU0XX0sXCJoZXhEaWdpdFwiLFtdXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTU1LDIxNjRdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTU1LDIxNjNdfSxcImhleERpZ2l0XCIsW11dXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTY1LDIxNzRdfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTY1LDIxNzNdfSxcImhleERpZ2l0XCIsW11dXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTg4LDIxOTddfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTg4LDIxOTZdfSxcImhleERpZ2l0XCIsW11dXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTk4LDIyMDddfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTk4LDIyMDZdfSxcImhleERpZ2l0XCIsW11dXSxbXCJvcHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjA4LDIyMTddfSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjA4LDIyMTZdfSxcImhleERpZ2l0XCIsW11dXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyMTgsMjIyMV19LFwifVwiXV1dLFwiZXNjYXBlQ2hhcl91bmljb2RlRXNjYXBlXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI1MCwyMzA5XX0sbnVsbCxbXSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjUwLDIyOTFdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyNTAsMjI1NV19LFwiXFxcXHVcIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI1NiwyMjY0XX0sXCJoZXhEaWdpdFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjY1LDIyNzNdfSxcImhleERpZ2l0XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIyNzQsMjI4Ml19LFwiaGV4RGlnaXRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjI4MywyMjkxXX0sXCJoZXhEaWdpdFwiLFtdXV1dLFwiZXNjYXBlQ2hhcl9oZXhFc2NhcGVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzE2LDIzNzFdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMTYsMjMzOV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjMxNiwyMzIxXX0sXCJcXFxceFwiXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzIyLDIzMzBdfSxcImhleERpZ2l0XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzMzEsMjMzOV19LFwiaGV4RGlnaXRcIixbXV1dXSxcImVzY2FwZUNoYXJcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxNjY0LDIzNzFdfSxcImFuIGVzY2FwZSBzZXF1ZW5jZVwiLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3MDMsMjM3MV19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE3MDMsMTcwOV19LFwiZXNjYXBlQ2hhcl9iYWNrc2xhc2hcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMTc2NSwxNzcxXX0sXCJlc2NhcGVDaGFyX2RvdWJsZVF1b3RlXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE4MjksMTgzNV19LFwiZXNjYXBlQ2hhcl9zaW5nbGVRdW90ZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsxODkzLDE4OThdfSxcImVzY2FwZUNoYXJfYmFja3NwYWNlXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzE5NTUsMTk2MF19LFwiZXNjYXBlQ2hhcl9saW5lRmVlZFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMDE2LDIwMjFdfSxcImVzY2FwZUNoYXJfY2FycmlhZ2VSZXR1cm5cIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjA4MywyMDg4XX0sXCJlc2NhcGVDaGFyX3RhYlwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMTM5LDIyMjFdfSxcImVzY2FwZUNoYXJfdW5pY29kZUNvZGVQb2ludFwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMjUwLDIyOTFdfSxcImVzY2FwZUNoYXJfdW5pY29kZUVzY2FwZVwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyMzE2LDIzMzldfSxcImVzY2FwZUNoYXJfaGV4RXNjYXBlXCIsW11dXV0sXCJzcGFjZVwiOltcImV4dGVuZFwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzNzUsMjM5NF19LG51bGwsW10sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjM4NywyMzk0XX0sXCJjb21tZW50XCIsW11dXSxcImNvbW1lbnRfc2luZ2xlTGluZVwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTIsMjQ1OF19LG51bGwsW10sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQxMiwyNDQzXX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDEyLDI0MTZdfSxcIi8vXCJdLFtcInN0YXJcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDE3LDI0MjldfSxbXCJzZXFcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDE4LDI0MjddfSxbXCJub3RcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDE4LDI0MjNdfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MTksMjQyM119LFwiXFxuXCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDI0LDI0MjddfSxcImFueVwiLFtdXV1dLFtcImxvb2thaGVhZFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MzAsMjQ0M119LFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0MzIsMjQ0Ml19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQzMiwyNDM2XX0sXCJcXG5cIl0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQzOSwyNDQyXX0sXCJlbmRcIixbXV1dXV1dLFwiY29tbWVudF9tdWx0aUxpbmVcIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDY1LDI1MDFdfSxudWxsLFtdLFtcInNlcVwiLHtcInNvdXJjZUludGVydmFsXCI6WzI0NjUsMjQ4N119LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ2NSwyNDY5XX0sXCIvKlwiXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ3MCwyNDgyXX0sW1wic2VxXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ3MSwyNDgwXX0sW1wibm90XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ3MSwyNDc2XX0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDcyLDI0NzZdfSxcIiovXCJdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNDc3LDI0ODBdfSxcImFueVwiLFtdXV1dLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ4MywyNDg3XX0sXCIqL1wiXV1dLFwiY29tbWVudFwiOltcImRlZmluZVwiLHtcInNvdXJjZUludGVydmFsXCI6WzIzOTgsMjUwMV19LG51bGwsW10sW1wiYWx0XCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQxMiwyNTAxXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQxMiwyNDQzXX0sXCJjb21tZW50X3NpbmdsZUxpbmVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjQ2NSwyNDg3XX0sXCJjb21tZW50X211bHRpTGluZVwiLFtdXV1dLFwidG9rZW5zXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjUwNSwyNTIwXX0sbnVsbCxbXSxbXCJzdGFyXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjUxNCwyNTIwXX0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjUxNCwyNTE5XX0sXCJ0b2tlblwiLFtdXV1dLFwidG9rZW5cIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTI0LDI2MDBdfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1MzIsMjYwMF19LFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1MzIsMjU0MF19LFwiY2FzZU5hbWVcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU0MywyNTUwXX0sXCJjb21tZW50XCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1NTMsMjU1OF19LFwiaWRlbnRcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU2MSwyNTY5XX0sXCJvcGVyYXRvclwiLFtdXSxbXCJhcHBcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNTcyLDI1ODNdfSxcInB1bmN0dWF0aW9uXCIsW11dLFtcImFwcFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI1ODYsMjU5NF19LFwidGVybWluYWxcIixbXV0sW1wiYXBwXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjU5NywyNjAwXX0sXCJhbnlcIixbXV1dXSxcIm9wZXJhdG9yXCI6W1wiZGVmaW5lXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjYwNCwyNjY5XX0sbnVsbCxbXSxbXCJhbHRcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjE1LDI2NjldfSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2MTUsMjYxOV19LFwiPDpcIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjIyLDI2MjVdfSxcIj1cIl0sW1widGVybWluYWxcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjI4LDI2MzJdfSxcIjo9XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjYzNSwyNjM5XX0sXCIrPVwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NDIsMjY0NV19LFwiKlwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NDgsMjY1MV19LFwiK1wiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NTQsMjY1N119LFwiP1wiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NjAsMjY2M119LFwiflwiXSxbXCJ0ZXJtaW5hbFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2NjYsMjY2OV19LFwiJlwiXV1dLFwicHVuY3R1YXRpb25cIjpbXCJkZWZpbmVcIix7XCJzb3VyY2VJbnRlcnZhbFwiOlsyNjczLDI3MDldfSxudWxsLFtdLFtcImFsdFwiLHtcInNvdXJjZUludGVydmFsXCI6WzI2ODcsMjcwOV19LFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY4NywyNjkwXX0sXCI8XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY5MywyNjk2XX0sXCI+XCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjY5OSwyNzAyXX0sXCIsXCJdLFtcInRlcm1pbmFsXCIse1wic291cmNlSW50ZXJ2YWxcIjpbMjcwNSwyNzA5XX0sXCItLVwiXV1dfV0pO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gSW1wb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgQnVpbGRlciA9IEJ1aWxkZXJfMTtcbmNvbnN0IEdyYW1tYXIgPSBHcmFtbWFyXzE7XG5jb25zdCBOYW1lc3BhY2UgPSBOYW1lc3BhY2VfMTtcbmNvbnN0IGNvbW1vbiA9IGNvbW1vbiRsO1xuY29uc3QgZXJyb3JzID0gZXJyb3JzJDk7XG5jb25zdCBwZXhwcnMgPSBwZXhwcnMkNjtcbmNvbnN0IHV0aWwgPSB1dGlsJDc7XG5jb25zdCB2ZXJzaW9uID0gdmVyc2lvbiQxO1xuY29uc3Qge21ha2VSZWNpcGV9ID0gbWFrZVJlY2lwZSQ1O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gVGhlIG1ldGFncmFtbWFyLCBpLmUuIHRoZSBncmFtbWFyIGZvciBPaG0gZ3JhbW1hcnMuIEluaXRpYWxpemVkIGF0IHRoZVxuLy8gYm90dG9tIG9mIHRoaXMgZmlsZSBiZWNhdXNlIGxvYWRpbmcgdGhlIGdyYW1tYXIgcmVxdWlyZXMgT2htIGl0c2VsZi5cbmxldCBvaG1HcmFtbWFyO1xuXG5jb25zdCBzdXBlclNwbGljZVBsYWNlaG9sZGVyID0gT2JqZWN0LmNyZWF0ZShwZXhwcnMuUEV4cHIucHJvdG90eXBlKTtcblxuY29uc3QgaXNCdWZmZXIgPSBvYmogPT5cbiAgISFvYmouY29uc3RydWN0b3IgJiZcbiAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJlxuICBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKTtcblxuLy8gUmV0dXJucyBhIEdyYW1tYXIgaW5zdGFuY2UgKGkuZS4sIGFuIG9iamVjdCB3aXRoIGEgYG1hdGNoYCBtZXRob2QpIGZvclxuLy8gYHRyZWVgLCB3aGljaCBpcyB0aGUgY29uY3JldGUgc3ludGF4IHRyZWUgb2YgYSB1c2VyLXdyaXR0ZW4gZ3JhbW1hci5cbi8vIFRoZSBncmFtbWFyIHdpbGwgYmUgYXNzaWduZWQgaW50byBgbmFtZXNwYWNlYCB1bmRlciB0aGUgbmFtZSBvZiB0aGUgZ3JhbW1hclxuLy8gYXMgc3BlY2lmaWVkIGluIHRoZSBzb3VyY2UuXG5mdW5jdGlvbiBidWlsZEdyYW1tYXIobWF0Y2gsIG5hbWVzcGFjZSwgb3B0T2htR3JhbW1hckZvclRlc3RpbmcpIHtcbiAgY29uc3QgYnVpbGRlciA9IG5ldyBCdWlsZGVyKCk7XG4gIGxldCBkZWNsO1xuICBsZXQgY3VycmVudFJ1bGVOYW1lO1xuICBsZXQgY3VycmVudFJ1bGVGb3JtYWxzO1xuICBsZXQgb3ZlcnJpZGluZyA9IGZhbHNlO1xuICBjb25zdCBtZXRhR3JhbW1hciA9IG9wdE9obUdyYW1tYXJGb3JUZXN0aW5nIHx8IG9obUdyYW1tYXI7XG5cbiAgLy8gQSB2aXNpdG9yIHRoYXQgcHJvZHVjZXMgYSBHcmFtbWFyIGluc3RhbmNlIGZyb20gdGhlIENTVC5cbiAgY29uc3QgaGVscGVycyA9IG1ldGFHcmFtbWFyLmNyZWF0ZVNlbWFudGljcygpLmFkZE9wZXJhdGlvbigndmlzaXQnLCB7XG4gICAgR3JhbW1hcnMoZ3JhbW1hckl0ZXIpIHtcbiAgICAgIHJldHVybiBncmFtbWFySXRlci5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpO1xuICAgIH0sXG4gICAgR3JhbW1hcihpZCwgcywgX29wZW4sIHJ1bGVzLCBfY2xvc2UpIHtcbiAgICAgIGNvbnN0IGdyYW1tYXJOYW1lID0gaWQudmlzaXQoKTtcbiAgICAgIGRlY2wgPSBidWlsZGVyLm5ld0dyYW1tYXIoZ3JhbW1hck5hbWUsIG5hbWVzcGFjZSk7XG4gICAgICBzLmNoaWxkKDApICYmIHMuY2hpbGQoMCkudmlzaXQoKTtcbiAgICAgIHJ1bGVzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSk7XG4gICAgICBjb25zdCBnID0gZGVjbC5idWlsZCgpO1xuICAgICAgZy5zb3VyY2UgPSB0aGlzLnNvdXJjZS50cmltbWVkKCk7XG4gICAgICBpZiAoZ3JhbW1hck5hbWUgaW4gbmFtZXNwYWNlKSB7XG4gICAgICAgIHRocm93IGVycm9ycy5kdXBsaWNhdGVHcmFtbWFyRGVjbGFyYXRpb24oZywgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICAgIG5hbWVzcGFjZVtncmFtbWFyTmFtZV0gPSBnO1xuICAgICAgcmV0dXJuIGc7XG4gICAgfSxcblxuICAgIFN1cGVyR3JhbW1hcihfLCBuKSB7XG4gICAgICBjb25zdCBzdXBlckdyYW1tYXJOYW1lID0gbi52aXNpdCgpO1xuICAgICAgaWYgKHN1cGVyR3JhbW1hck5hbWUgPT09ICdudWxsJykge1xuICAgICAgICBkZWNsLndpdGhTdXBlckdyYW1tYXIobnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIW5hbWVzcGFjZSB8fCAhKHN1cGVyR3JhbW1hck5hbWUgaW4gbmFtZXNwYWNlKSkge1xuICAgICAgICAgIHRocm93IGVycm9ycy51bmRlY2xhcmVkR3JhbW1hcihzdXBlckdyYW1tYXJOYW1lLCBuYW1lc3BhY2UsIG4uc291cmNlKTtcbiAgICAgICAgfVxuICAgICAgICBkZWNsLndpdGhTdXBlckdyYW1tYXIobmFtZXNwYWNlW3N1cGVyR3JhbW1hck5hbWVdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgUnVsZV9kZWZpbmUobiwgZnMsIGQsIF8sIGIpIHtcbiAgICAgIGN1cnJlbnRSdWxlTmFtZSA9IG4udmlzaXQoKTtcbiAgICAgIGN1cnJlbnRSdWxlRm9ybWFscyA9IGZzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSlbMF0gfHwgW107XG4gICAgICAvLyBJZiB0aGVyZSBpcyBubyBkZWZhdWx0IHN0YXJ0IHJ1bGUgeWV0LCBzZXQgaXQgbm93LiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdmlzaXRpbmdcbiAgICAgIC8vIHRoZSBib2R5LCBiZWNhdXNlIGl0IG1pZ2h0IGNvbnRhaW4gYW4gaW5saW5lIHJ1bGUgZGVmaW5pdGlvbi5cbiAgICAgIGlmICghZGVjbC5kZWZhdWx0U3RhcnRSdWxlICYmIGRlY2wuZW5zdXJlU3VwZXJHcmFtbWFyKCkgIT09IEdyYW1tYXIuUHJvdG9CdWlsdEluUnVsZXMpIHtcbiAgICAgICAgZGVjbC53aXRoRGVmYXVsdFN0YXJ0UnVsZShjdXJyZW50UnVsZU5hbWUpO1xuICAgICAgfVxuICAgICAgY29uc3QgYm9keSA9IGIudmlzaXQoKTtcbiAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZC5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpWzBdO1xuICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5zb3VyY2UudHJpbW1lZCgpO1xuICAgICAgcmV0dXJuIGRlY2wuZGVmaW5lKGN1cnJlbnRSdWxlTmFtZSwgY3VycmVudFJ1bGVGb3JtYWxzLCBib2R5LCBkZXNjcmlwdGlvbiwgc291cmNlKTtcbiAgICB9LFxuICAgIFJ1bGVfb3ZlcnJpZGUobiwgZnMsIF8sIGIpIHtcbiAgICAgIGN1cnJlbnRSdWxlTmFtZSA9IG4udmlzaXQoKTtcbiAgICAgIGN1cnJlbnRSdWxlRm9ybWFscyA9IGZzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSlbMF0gfHwgW107XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuc291cmNlLnRyaW1tZWQoKTtcbiAgICAgIGRlY2wuZW5zdXJlU3VwZXJHcmFtbWFyUnVsZUZvck92ZXJyaWRpbmcoY3VycmVudFJ1bGVOYW1lLCBzb3VyY2UpO1xuXG4gICAgICBvdmVycmlkaW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGJvZHkgPSBiLnZpc2l0KCk7XG4gICAgICBvdmVycmlkaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gZGVjbC5vdmVycmlkZShjdXJyZW50UnVsZU5hbWUsIGN1cnJlbnRSdWxlRm9ybWFscywgYm9keSwgbnVsbCwgc291cmNlKTtcbiAgICB9LFxuICAgIFJ1bGVfZXh0ZW5kKG4sIGZzLCBfLCBiKSB7XG4gICAgICBjdXJyZW50UnVsZU5hbWUgPSBuLnZpc2l0KCk7XG4gICAgICBjdXJyZW50UnVsZUZvcm1hbHMgPSBmcy5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpWzBdIHx8IFtdO1xuICAgICAgY29uc3QgYm9keSA9IGIudmlzaXQoKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuc291cmNlLnRyaW1tZWQoKTtcbiAgICAgIHJldHVybiBkZWNsLmV4dGVuZChjdXJyZW50UnVsZU5hbWUsIGN1cnJlbnRSdWxlRm9ybWFscywgYm9keSwgbnVsbCwgc291cmNlKTtcbiAgICB9LFxuICAgIFJ1bGVCb2R5KF8sIHRlcm1zKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5hbHQoLi4udGVybXMudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcbiAgICBPdmVycmlkZVJ1bGVCb2R5KF8sIHRlcm1zKSB7XG4gICAgICBjb25zdCBhcmdzID0gdGVybXMudmlzaXQoKTtcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN1cGVyLXNwbGljZSBvcGVyYXRvciAoYC4uLmApIGFwcGVhcnMgaW4gdGhlIHRlcm1zLlxuICAgICAgY29uc3QgZXhwYW5zaW9uUG9zID0gYXJncy5pbmRleE9mKHN1cGVyU3BsaWNlUGxhY2Vob2xkZXIpO1xuICAgICAgaWYgKGV4cGFuc2lvblBvcyA+PSAwKSB7XG4gICAgICAgIGNvbnN0IGJlZm9yZVRlcm1zID0gYXJncy5zbGljZSgwLCBleHBhbnNpb25Qb3MpO1xuICAgICAgICBjb25zdCBhZnRlclRlcm1zID0gYXJncy5zbGljZShleHBhbnNpb25Qb3MgKyAxKTtcblxuICAgICAgICAvLyBFbnN1cmUgaXQgYXBwZWFycyBubyBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgYWZ0ZXJUZXJtcy5mb3JFYWNoKHQgPT4ge1xuICAgICAgICAgIGlmICh0ID09PSBzdXBlclNwbGljZVBsYWNlaG9sZGVyKSB0aHJvdyBlcnJvcnMubXVsdGlwbGVTdXBlclNwbGljZXModCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgcGV4cHJzLlNwbGljZShcbiAgICAgICAgICAgIGRlY2wuc3VwZXJHcmFtbWFyLFxuICAgICAgICAgICAgY3VycmVudFJ1bGVOYW1lLFxuICAgICAgICAgICAgYmVmb3JlVGVybXMsXG4gICAgICAgICAgICBhZnRlclRlcm1zXG4gICAgICAgICkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYnVpbGRlci5hbHQoLi4uYXJncykud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBGb3JtYWxzKG9wb2ludHksIGZzLCBjcG9pbnR5KSB7XG4gICAgICByZXR1cm4gZnMudmlzaXQoKTtcbiAgICB9LFxuXG4gICAgUGFyYW1zKG9wb2ludHksIHBzLCBjcG9pbnR5KSB7XG4gICAgICByZXR1cm4gcHMudmlzaXQoKTtcbiAgICB9LFxuXG4gICAgQWx0KHNlcXMpIHtcbiAgICAgIHJldHVybiBidWlsZGVyLmFsdCguLi5zZXFzLnZpc2l0KCkpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG5cbiAgICBUb3BMZXZlbFRlcm1faW5saW5lKGIsIG4pIHtcbiAgICAgIGNvbnN0IGlubGluZVJ1bGVOYW1lID0gY3VycmVudFJ1bGVOYW1lICsgJ18nICsgbi52aXNpdCgpO1xuICAgICAgY29uc3QgYm9keSA9IGIudmlzaXQoKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IHRoaXMuc291cmNlLnRyaW1tZWQoKTtcbiAgICAgIGNvbnN0IGlzTmV3UnVsZURlY2xhcmF0aW9uID0gIShcbiAgICAgICAgZGVjbC5zdXBlckdyYW1tYXIgJiYgZGVjbC5zdXBlckdyYW1tYXIucnVsZXNbaW5saW5lUnVsZU5hbWVdXG4gICAgICApO1xuICAgICAgaWYgKG92ZXJyaWRpbmcgJiYgIWlzTmV3UnVsZURlY2xhcmF0aW9uKSB7XG4gICAgICAgIGRlY2wub3ZlcnJpZGUoaW5saW5lUnVsZU5hbWUsIGN1cnJlbnRSdWxlRm9ybWFscywgYm9keSwgbnVsbCwgc291cmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlY2wuZGVmaW5lKGlubGluZVJ1bGVOYW1lLCBjdXJyZW50UnVsZUZvcm1hbHMsIGJvZHksIG51bGwsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJhbXMgPSBjdXJyZW50UnVsZUZvcm1hbHMubWFwKGZvcm1hbCA9PiBidWlsZGVyLmFwcChmb3JtYWwpKTtcbiAgICAgIHJldHVybiBidWlsZGVyLmFwcChpbmxpbmVSdWxlTmFtZSwgcGFyYW1zKS53aXRoU291cmNlKGJvZHkuc291cmNlKTtcbiAgICB9LFxuICAgIE92ZXJyaWRlVG9wTGV2ZWxUZXJtX3N1cGVyU3BsaWNlKF8pIHtcbiAgICAgIHJldHVybiBzdXBlclNwbGljZVBsYWNlaG9sZGVyO1xuICAgIH0sXG5cbiAgICBTZXEoZXhwcikge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIuc2VxKC4uLmV4cHIuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcblxuICAgIEl0ZXJfc3Rhcih4LCBfKSB7XG4gICAgICByZXR1cm4gYnVpbGRlci5zdGFyKHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcbiAgICBJdGVyX3BsdXMoeCwgXykge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIucGx1cyh4LnZpc2l0KCkpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG4gICAgSXRlcl9vcHQoeCwgXykge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIub3B0KHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcblxuICAgIFByZWRfbm90KF8sIHgpIHtcbiAgICAgIHJldHVybiBidWlsZGVyLm5vdCh4LnZpc2l0KCkpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG4gICAgUHJlZF9sb29rYWhlYWQoXywgeCkge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIubG9va2FoZWFkKHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcblxuICAgIExleF9sZXgoXywgeCkge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIubGV4KHgudmlzaXQoKSkud2l0aFNvdXJjZSh0aGlzLnNvdXJjZSk7XG4gICAgfSxcblxuICAgIEJhc2VfYXBwbGljYXRpb24ocnVsZSwgcHMpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHBzLmNoaWxkcmVuLm1hcChjID0+IGMudmlzaXQoKSlbMF0gfHwgW107XG4gICAgICByZXR1cm4gYnVpbGRlci5hcHAocnVsZS52aXNpdCgpLCBwYXJhbXMpLndpdGhTb3VyY2UodGhpcy5zb3VyY2UpO1xuICAgIH0sXG4gICAgQmFzZV9yYW5nZShmcm9tLCBfLCB0bykge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIucmFuZ2UoZnJvbS52aXNpdCgpLCB0by52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuICAgIEJhc2VfdGVybWluYWwoZXhwcikge1xuICAgICAgcmV0dXJuIGJ1aWxkZXIudGVybWluYWwoZXhwci52aXNpdCgpKS53aXRoU291cmNlKHRoaXMuc291cmNlKTtcbiAgICB9LFxuICAgIEJhc2VfcGFyZW4ob3BlbiwgeCwgY2xvc2UpIHtcbiAgICAgIHJldHVybiB4LnZpc2l0KCk7XG4gICAgfSxcblxuICAgIHJ1bGVEZXNjcihvcGVuLCB0LCBjbG9zZSkge1xuICAgICAgcmV0dXJuIHQudmlzaXQoKTtcbiAgICB9LFxuICAgIHJ1bGVEZXNjclRleHQoXykge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlU3RyaW5nLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgY2FzZU5hbWUoXywgc3BhY2UxLCBuLCBzcGFjZTIsIGVuZCkge1xuICAgICAgcmV0dXJuIG4udmlzaXQoKTtcbiAgICB9LFxuXG4gICAgbmFtZShmaXJzdCwgcmVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMuc291cmNlU3RyaW5nO1xuICAgIH0sXG4gICAgbmFtZUZpcnN0KGV4cHIpIHt9LFxuICAgIG5hbWVSZXN0KGV4cHIpIHt9LFxuXG4gICAgdGVybWluYWwob3BlbiwgY3MsIGNsb3NlKSB7XG4gICAgICByZXR1cm4gY3MuY2hpbGRyZW4ubWFwKGMgPT4gYy52aXNpdCgpKS5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgb25lQ2hhclRlcm1pbmFsKG9wZW4sIGMsIGNsb3NlKSB7XG4gICAgICByZXR1cm4gYy52aXNpdCgpO1xuICAgIH0sXG5cbiAgICBlc2NhcGVDaGFyKGMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjb21tb24udW5lc2NhcGVDb2RlUG9pbnQodGhpcy5zb3VyY2VTdHJpbmcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSYW5nZUVycm9yICYmIGVyci5tZXNzYWdlLnN0YXJ0c1dpdGgoJ0ludmFsaWQgY29kZSBwb2ludCAnKSkge1xuICAgICAgICAgIHRocm93IGVycm9ycy5pbnZhbGlkQ29kZVBvaW50KGMpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycjsgLy8gUmV0aHJvd1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBOb25lbXB0eUxpc3RPZih4LCBfLCB4cykge1xuICAgICAgcmV0dXJuIFt4LnZpc2l0KCldLmNvbmNhdCh4cy5jaGlsZHJlbi5tYXAoYyA9PiBjLnZpc2l0KCkpKTtcbiAgICB9LFxuICAgIEVtcHR5TGlzdE9mKCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG5cbiAgICBfdGVybWluYWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBoZWxwZXJzKG1hdGNoKS52aXNpdCgpO1xufVxuXG5mdW5jdGlvbiBjb21waWxlQW5kTG9hZChzb3VyY2UsIG5hbWVzcGFjZSkge1xuICBjb25zdCBtID0gb2htR3JhbW1hci5tYXRjaChzb3VyY2UsICdHcmFtbWFycycpO1xuICBpZiAobS5mYWlsZWQoKSkge1xuICAgIHRocm93IGVycm9ycy5ncmFtbWFyU3ludGF4RXJyb3IobSk7XG4gIH1cbiAgcmV0dXJuIGJ1aWxkR3JhbW1hcihtLCBuYW1lc3BhY2UpO1xufVxuXG5mdW5jdGlvbiBncmFtbWFyKHNvdXJjZSwgb3B0TmFtZXNwYWNlKSB7XG4gIGNvbnN0IG5zID0gZ3JhbW1hcnMoc291cmNlLCBvcHROYW1lc3BhY2UpO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHRoZSBzb3VyY2UgY29udGFpbmVkIG5vIG1vcmUgdGhhbiBvbmUgZ3JhbW1hciBkZWZpbml0aW9uLlxuICBjb25zdCBncmFtbWFyTmFtZXMgPSBPYmplY3Qua2V5cyhucyk7XG4gIGlmIChncmFtbWFyTmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGdyYW1tYXIgZGVmaW5pdGlvbicpO1xuICB9IGVsc2UgaWYgKGdyYW1tYXJOYW1lcy5sZW5ndGggPiAxKSB7XG4gICAgY29uc3Qgc2Vjb25kR3JhbW1hciA9IG5zW2dyYW1tYXJOYW1lc1sxXV07XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBzZWNvbmRHcmFtbWFyLnNvdXJjZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIHV0aWwuZ2V0TGluZUFuZENvbHVtbk1lc3NhZ2UoaW50ZXJ2YWwuc291cmNlU3RyaW5nLCBpbnRlcnZhbC5zdGFydElkeCkgK1xuICAgICAgICAnRm91bmQgbW9yZSB0aGFuIG9uZSBncmFtbWFyIGRlZmluaXRpb24gLS0gdXNlIG9obS5ncmFtbWFycygpIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIG5zW2dyYW1tYXJOYW1lc1swXV07IC8vIFJldHVybiB0aGUgb25lIGFuZCBvbmx5IGdyYW1tYXIuXG59XG5cbmZ1bmN0aW9uIGdyYW1tYXJzKHNvdXJjZSwgb3B0TmFtZXNwYWNlKSB7XG4gIGNvbnN0IG5zID0gTmFtZXNwYWNlLmV4dGVuZChOYW1lc3BhY2UuYXNOYW1lc3BhY2Uob3B0TmFtZXNwYWNlKSk7XG4gIGlmICh0eXBlb2Ygc291cmNlICE9PSAnc3RyaW5nJykge1xuICAgIC8vIEZvciBjb252ZW5pZW5jZSwgZGV0ZWN0IE5vZGUuanMgQnVmZmVyIG9iamVjdHMgYW5kIGF1dG9tYXRpY2FsbHkgY2FsbCB0b1N0cmluZygpLlxuICAgIGlmIChpc0J1ZmZlcihzb3VyY2UpKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2UudG9TdHJpbmcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnRXhwZWN0ZWQgc3RyaW5nIGFzIGZpcnN0IGFyZ3VtZW50LCBnb3QgJyArIGNvbW1vbi51bmV4cGVjdGVkT2JqVG9TdHJpbmcoc291cmNlKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29tcGlsZUFuZExvYWQoc291cmNlLCBucyk7XG4gIHJldHVybiBucztcbn1cblxuZnVuY3Rpb24gZ3JhbW1hckZyb21TY3JpcHRFbGVtZW50KG9wdE5vZGUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2dyYW1tYXJGcm9tU2NyaXB0RWxlbWVudCB3YXMgcmVtb3ZlZCBpbiBPaG0gdjE2LjAuIFNlZSBodHRwczovL29obWpzLm9yZy9kL2dmcyBmb3IgbW9yZSBpbmZvLidcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ3JhbW1hcnNGcm9tU2NyaXB0RWxlbWVudHMob3B0Tm9kZU9yTm9kZUxpc3QpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2dyYW1tYXJzRnJvbVNjcmlwdEVsZW1lbnRzIHdhcyByZW1vdmVkIGluIE9obSB2MTYuMC4gU2VlIGh0dHBzOi8vb2htanMub3JnL2QvZ2ZzIGZvciBtb3JlIGluZm8uJ1xuICApO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gU3R1ZmYgdGhhdCB1c2VycyBzaG91bGQga25vdyBhYm91dFxubWFpbiQxLmV4cG9ydHMgPSB7XG4gIGNyZWF0ZU5hbWVzcGFjZTogTmFtZXNwYWNlLmNyZWF0ZU5hbWVzcGFjZSxcbiAgZ3JhbW1hcixcbiAgZ3JhbW1hcnMsXG4gIGdyYW1tYXJGcm9tU2NyaXB0RWxlbWVudCxcbiAgZ3JhbW1hcnNGcm9tU2NyaXB0RWxlbWVudHMsXG4gIG1ha2VSZWNpcGUsXG4gIG9obUdyYW1tYXI6IG51bGwsIC8vIEluaXRpYWxpemVkIGJlbG93LCBhZnRlciBHcmFtbWFyLkJ1aWx0SW5SdWxlcy5cbiAgcGV4cHJzLFxuICB1dGlsLFxuICB2ZXJzaW9uLFxufTtcblxuLy8gU3R1ZmYgZm9yIHRlc3RpbmcsIGV0Yy5cbm1haW4kMS5leHBvcnRzLl9idWlsZEdyYW1tYXIgPSBidWlsZEdyYW1tYXI7XG5cbi8vIExhdGUgaW5pdGlhbGl6YXRpb24gZm9yIHN0dWZmIHRoYXQgaXMgYm9vdHN0cmFwcGVkLlxuXG5cbnV0aWwuYW5ub3VuY2VCdWlsdEluUnVsZXMoR3JhbW1hci5CdWlsdEluUnVsZXMpO1xuXG5tYWluJDEuZXhwb3J0cy5vaG1HcmFtbWFyID0gb2htR3JhbW1hciA9IG9obUdyYW1tYXIkMTtcbkdyYW1tYXIuaW5pdEFwcGxpY2F0aW9uUGFyc2VyKG9obUdyYW1tYXIsIGJ1aWxkR3JhbW1hcik7XG5cbnZhciBvaG0gPSBtYWluJDEuZXhwb3J0cztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IHthc3NlcnR9ID0gY29tbW9uJGw7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBQcml2YXRlIHN0dWZmXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBIZWxwZXJzXG5cbmZ1bmN0aW9uIGdldFByb3AobmFtZSwgdGhpbmcsIGZuKSB7XG4gIHJldHVybiBmbih0aGluZ1tuYW1lXSk7XG59XG5cbmZ1bmN0aW9uIG1hcFByb3AobmFtZSwgdGhpbmcsIGZuKSB7XG4gIHJldHVybiB0aGluZ1tuYW1lXS5tYXAoZm4pO1xufVxuXG4vLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHdhbGsgYSBzaW5nbGUgcHJvcGVydHkgb2YgYSBub2RlLlxuLy8gYGRlc2NyaXB0b3JgIGlzIGEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHByb3BlcnR5IG5hbWUsIG9wdGlvbmFsbHkgZW5kaW5nXG4vLyB3aXRoICdbXScgKGUuZy4sICdjaGlsZHJlbltdJykuXG5mdW5jdGlvbiBnZXRQcm9wV2Fsa0ZuKGRlc2NyaXB0b3IpIHtcbiAgY29uc3QgcGFydHMgPSBkZXNjcmlwdG9yLnNwbGl0KC8gP1xcW1xcXS8pO1xuICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIG1hcFByb3AuYmluZChudWxsLCBwYXJ0c1swXSk7XG4gIH1cbiAgcmV0dXJuIGdldFByb3AuYmluZChudWxsLCBkZXNjcmlwdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcHMod2Fsa0ZucywgdGhpbmcsIGZuKSB7XG4gIHJldHVybiB3YWxrRm5zLm1hcCh3YWxrRm4gPT4gd2Fsa0ZuKHRoaW5nLCBmbikpO1xufVxuXG5mdW5jdGlvbiBnZXRXYWxrRm4oc2hhcGUpIHtcbiAgaWYgKHR5cGVvZiBzaGFwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZ2V0UHJvcHMuYmluZChudWxsLCBbZ2V0UHJvcFdhbGtGbihzaGFwZSldKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNoYXBlKSkge1xuICAgIHJldHVybiBnZXRQcm9wcy5iaW5kKG51bGwsIHNoYXBlLm1hcChnZXRQcm9wV2Fsa0ZuKSk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBzaGFwZSA9PT0gJ2Z1bmN0aW9uJywgJ0V4cGVjdGVkIGEgc3RyaW5nLCBBcnJheSwgb3IgZnVuY3Rpb24nKTtcbiAgICBhc3NlcnQoc2hhcGUubGVuZ3RoID09PSAyLCAnRXhwZWN0ZWQgYSBmdW5jdGlvbiBvZiBhcml0eSAyLCBnb3QgJyArIHNoYXBlLmxlbmd0aCk7XG4gICAgcmV0dXJuIHNoYXBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUmVzdHJpY3RlZElkZW50aWZpZXIoc3RyKSB7XG4gIHJldHVybiAvXlthLXpBLVpfXVswLTlhLXpBLVpfXSokLy50ZXN0KHN0cik7XG59XG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICByZXR1cm4gcy50cmltKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lnbmF0dXJlKHNpZykge1xuICBjb25zdCBwYXJ0cyA9IHNpZy5zcGxpdCgvWygpXS8pLm1hcCh0cmltKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMyAmJiBwYXJ0c1syXSA9PT0gJycpIHtcbiAgICBjb25zdCBuYW1lID0gcGFydHNbMF07XG4gICAgbGV0IHBhcmFtcyA9IFtdO1xuICAgIGlmIChwYXJ0c1sxXS5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJhbXMgPSBwYXJ0c1sxXS5zcGxpdCgnLCcpLm1hcCh0cmltKTtcbiAgICB9XG4gICAgaWYgKGlzUmVzdHJpY3RlZElkZW50aWZpZXIobmFtZSkgJiYgcGFyYW1zLmV2ZXJ5KGlzUmVzdHJpY3RlZElkZW50aWZpZXIpKSB7XG4gICAgICByZXR1cm4ge25hbWUsIGZvcm1hbHM6IHBhcmFtc307XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBvcGVyYXRpb24gc2lnbmF0dXJlOiAnICsgc2lnKTtcbn1cblxuLypcbiAgQSBWaXNpdG9yRmFtaWx5IGNvbnRhaW5zIGEgc2V0IG9mIHJlY3Vyc2l2ZSBvcGVyYXRpb25zIHRoYXQgYXJlIGRlZmluZWQgb3ZlciBzb21lIGtpbmQgb2ZcbiAgdHJlZSBzdHJ1Y3R1cmUuIFRoZSBgY29uZmlnYCBwYXJhbWV0ZXIgc3BlY2lmaWVzIGhvdyB0byB3YWxrIHRoZSB0cmVlOlxuICAtICdnZXRUYWcnIGlzIGZ1bmN0aW9uIHdoaWNoLCBnaXZlbiBhIG5vZGUgaW4gdGhlIHRyZWUsIHJldHVybnMgdGhlIG5vZGUncyAndGFnJyAodHlwZSlcbiAgLSAnc2hhcGVzJyBhbiBvYmplY3QgdGhhdCBtYXBzIGZyb20gYSB0YWcgdG8gYSB2YWx1ZSB0aGF0IGRlc2NyaWJlcyBob3cgdG8gcmVjdXJzaXZlbHlcbiAgICBldmFsdWF0ZSB0aGUgb3BlcmF0aW9uIGZvciBub2RlcyBvZiB0aGF0IHR5cGUuIFRoZSB2YWx1ZSBjYW4gYmU6XG4gICAgKiBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwcm9wZXJ0eSBuYW1lIHRoYXQgaG9sZHMgdGhhdCBub2RlJ3Mgb25seSBjaGlsZFxuICAgICogYW4gQXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgKG9yIGFuIGVtcHR5IGFycmF5IGluZGljYXRpbmcgYSBsZWFmIHR5cGUpLCBvclxuICAgICogYSBmdW5jdGlvbiB0YWtpbmcgdHdvIGFyZ3VtZW50cyAobm9kZSwgZm4pLCBhbmQgcmV0dXJuaW5nIGFuIEFycmF5IHdoaWNoIGlzIHRoZSByZXN1bHRcbiAgICAgIG9mIGFwcGx5IGBmbmAgdG8gZWFjaCBvZiB0aGUgbm9kZSdzIGNoaWxkcmVuLlxuICovXG5mdW5jdGlvbiBWaXNpdG9yRmFtaWx5KGNvbmZpZykge1xuICB0aGlzLl9zaGFwZXMgPSBjb25maWcuc2hhcGVzO1xuICB0aGlzLl9nZXRUYWcgPSBjb25maWcuZ2V0VGFnO1xuXG4gIHRoaXMuQWRhcHRlciA9IGZ1bmN0aW9uKHRoaW5nLCBmYW1pbHkpIHtcbiAgICB0aGlzLl9hZGFwdGVlID0gdGhpbmc7XG4gICAgdGhpcy5fZmFtaWx5ID0gZmFtaWx5O1xuICB9O1xuICB0aGlzLkFkYXB0ZXIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlZWV5IScpO1xuICB9O1xuICB0aGlzLm9wZXJhdGlvbnMgPSB7fTtcblxuICB0aGlzLl9hcml0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZ2V0Q2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIE9iamVjdC5rZXlzKHRoaXMuX3NoYXBlcykuZm9yRWFjaChrID0+IHtcbiAgICBjb25zdCBzaGFwZSA9IHRoaXMuX3NoYXBlc1trXTtcbiAgICB0aGlzLl9nZXRDaGlsZHJlbltrXSA9IGdldFdhbGtGbihzaGFwZSk7XG5cbiAgICAvLyBBIGZ1bmN0aW9uIG1lYW5zIHRoZSBhcml0eSBpc24ndCBmaXhlZCwgc28gZG9uJ3QgcHV0IGFuIGVudHJ5IGluIHRoZSBhcml0eSBtYXAuXG4gICAgaWYgKHR5cGVvZiBzaGFwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fYXJpdGllc1trXSA9IEFycmF5LmlzQXJyYXkoc2hhcGUpID8gc2hhcGUubGVuZ3RoIDogMTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLl93cmFwID0gdGhpbmcgPT4gbmV3IHRoaXMuQWRhcHRlcih0aGluZywgdGhpcyk7XG59XG5cblZpc2l0b3JGYW1pbHkucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbih0aGluZykge1xuICByZXR1cm4gdGhpcy5fd3JhcCh0aGluZyk7XG59O1xuXG5WaXNpdG9yRmFtaWx5LnByb3RvdHlwZS5fY2hlY2tBY3Rpb25EaWN0ID0gZnVuY3Rpb24oZGljdCkge1xuICBPYmplY3Qua2V5cyhkaWN0KS5mb3JFYWNoKGsgPT4ge1xuICAgIGFzc2VydChrIGluIHRoaXMuX2dldENoaWxkcmVuLCBcIlVucmVjb2duaXplZCBhY3Rpb24gbmFtZSAnXCIgKyBrICsgXCInXCIpO1xuICAgIGNvbnN0IGFjdGlvbiA9IGRpY3Rba107XG4gICAgYXNzZXJ0KHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicsIFwiS2V5ICdcIiArIGsgKyBcIic6IGV4cGVjdGVkIGZ1bmN0aW9uLCBnb3QgXCIgKyBhY3Rpb24pO1xuICAgIGlmIChrIGluIHRoaXMuX2FyaXRpZXMpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0gdGhpcy5fYXJpdGllc1trXTtcbiAgICAgIGNvbnN0IGFjdHVhbCA9IGRpY3Rba10ubGVuZ3RoO1xuICAgICAgYXNzZXJ0KFxuICAgICAgICAgIGFjdHVhbCA9PT0gZXhwZWN0ZWQsXG4gICAgICAgICAgXCJBY3Rpb24gJ1wiICsgayArIFwiJyBoYXMgdGhlIHdyb25nIGFyaXR5OiBleHBlY3RlZCBcIiArIGV4cGVjdGVkICsgJywgZ290ICcgKyBhY3R1YWxcbiAgICAgICk7XG4gICAgfVxuICB9KTtcbn07XG5cblZpc2l0b3JGYW1pbHkucHJvdG90eXBlLmFkZE9wZXJhdGlvbiA9IGZ1bmN0aW9uKHNpZ25hdHVyZSwgYWN0aW9ucykge1xuICBjb25zdCBzaWcgPSBwYXJzZVNpZ25hdHVyZShzaWduYXR1cmUpO1xuICBjb25zdCB7bmFtZX0gPSBzaWc7XG4gIHRoaXMuX2NoZWNrQWN0aW9uRGljdChhY3Rpb25zKTtcbiAgdGhpcy5vcGVyYXRpb25zW25hbWVdID0ge1xuICAgIG5hbWUsXG4gICAgZm9ybWFsczogc2lnLmZvcm1hbHMsXG4gICAgYWN0aW9ucyxcbiAgfTtcblxuICBjb25zdCBmYW1pbHkgPSB0aGlzO1xuICB0aGlzLkFkYXB0ZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHRhZyA9IGZhbWlseS5fZ2V0VGFnKHRoaXMuX2FkYXB0ZWUpO1xuICAgIGFzc2VydCh0YWcgaW4gZmFtaWx5Ll9nZXRDaGlsZHJlbiwgXCJnZXRUYWcgcmV0dXJuZWQgdW5yZWNvZ25pemVkIHRhZyAnXCIgKyB0YWcgKyBcIidcIik7XG4gICAgYXNzZXJ0KHRhZyBpbiBhY3Rpb25zLCBcIk5vIGFjdGlvbiBmb3IgJ1wiICsgdGFnICsgXCInIGluIG9wZXJhdGlvbiAnXCIgKyBuYW1lICsgXCInXCIpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIFwiYXJndW1lbnRzIG9iamVjdFwiIGZyb20gdGhlIGFyZ3VtZW50cyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoaXNcbiAgICAvLyBvcGVyYXRpb24gLyBhdHRyaWJ1dGUuXG4gICAgY29uc3QgYXJnc09iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChjb25zdCBbaSwgdmFsXSBvZiBPYmplY3QuZW50cmllcyhhcmdzKSkge1xuICAgICAgYXJnc09ialtzaWcuZm9ybWFsc1tpXV0gPSB2YWw7XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkQXJncyA9IHRoaXMuYXJncztcbiAgICB0aGlzLmFyZ3MgPSBhcmdzT2JqO1xuICAgIGNvbnN0IGFucyA9IGFjdGlvbnNbdGFnXS5hcHBseShcbiAgICAgICAgdGhpcyxcbiAgICAgICAgZmFtaWx5Ll9nZXRDaGlsZHJlblt0YWddKHRoaXMuX2FkYXB0ZWUsIGZhbWlseS5fd3JhcClcbiAgICApO1xuICAgIHRoaXMuYXJncyA9IG9sZEFyZ3M7XG4gICAgcmV0dXJuIGFucztcbiAgfTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIFZpc2l0b3JGYW1pbHlfMSA9IFZpc2l0b3JGYW1pbHk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBkZWZhdWx0T3BlcmF0aW9uID0ge1xuICBfdGVybWluYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlU3RyaW5nO1xuICB9LFxuXG4gIF9ub250ZXJtaW5hbCguLi5jaGlsZHJlbikge1xuICAgIGNvbnN0IHtjdG9yTmFtZX0gPSB0aGlzLl9ub2RlO1xuICAgIGNvbnN0IHttYXBwaW5nfSA9IHRoaXMuYXJncztcblxuICAgIC8vIHdpdGhvdXQgY3VzdG9taXphdGlvblxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcHBpbmcsIGN0b3JOYW1lKSkge1xuICAgICAgLy8gbGV4aWNhbCBydWxlXG4gICAgICBpZiAodGhpcy5pc0xleGljYWwoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIC8vIHNpbmd1bGFyIG5vZGUgKGUuZy4gb25seSBzdXJyb3VuZGVkIGJ5IGxpdGVyYWxzIG9yIGxvb2thaGVhZHMpXG4gICAgICBjb25zdCByZWFsQ2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoY2hpbGQgPT4gIWNoaWxkLmlzVGVybWluYWwoKSk7XG4gICAgICBpZiAocmVhbENoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVhbENoaWxkcmVuWzBdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyByZXN0OiB0ZXJtcyB3aXRoIG11bHRpcGxlIGNoaWxkcmVuXG4gICAgfVxuXG4gICAgLy8gZGlyZWN0IGZvcndhcmRcbiAgICBpZiAodHlwZW9mIG1hcHBpbmdbY3Rvck5hbWVdID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW21hcHBpbmdbY3Rvck5hbWVdXS50b0FTVChtYXBwaW5nKTtcbiAgICB9XG5cbiAgICAvLyBuYW1lZC9tYXBwZWQgY2hpbGRyZW4gb3IgdW5uYW1lZCBjaGlsZHJlbiAoJzAnLCAnMScsICcyJywgLi4uKVxuICAgIGNvbnN0IHByb3BNYXAgPSBtYXBwaW5nW2N0b3JOYW1lXSB8fCBjaGlsZHJlbjtcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgdHlwZTogY3Rvck5hbWUsXG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BNYXApIHtcbiAgICAgIGNvbnN0IG1hcHBlZFByb3AgPSBtYXBwaW5nW2N0b3JOYW1lXSAmJiBtYXBwaW5nW2N0b3JOYW1lXVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gZGlyZWN0IGZvcndhcmRcbiAgICAgICAgbm9kZVtwcm9wXSA9IGNoaWxkcmVuW21hcHBlZFByb3BdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG1hcHBlZFByb3AgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgIHR5cGVvZiBtYXBwZWRQcm9wID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgbWFwcGVkUHJvcCA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vIHByaW1pdGl2ZSB2YWx1ZVxuICAgICAgICBub2RlW3Byb3BdID0gbWFwcGVkUHJvcDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hcHBlZFByb3AgPT09ICdvYmplY3QnICYmIG1hcHBlZFByb3AgaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgLy8gcHJpbWl0aXZlIG51bWJlciAobXVzdCBiZSB1bmJveGVkKVxuICAgICAgICBub2RlW3Byb3BdID0gTnVtYmVyKG1hcHBlZFByb3ApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBjb21wdXRlZCB2YWx1ZVxuICAgICAgICBub2RlW3Byb3BdID0gbWFwcGVkUHJvcC5jYWxsKHRoaXMsIGNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwcGVkUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltwcm9wXSAmJiAhY2hpbGRyZW5bcHJvcF0uaXNUZXJtaW5hbCgpKSB7XG4gICAgICAgICAgbm9kZVtwcm9wXSA9IGNoaWxkcmVuW3Byb3BdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlbGV0ZSBwcmVkZWZpbmVkICd0eXBlJyBwcm9wZXJ0aWVzLCBsaWtlICd0eXBlJywgaWYgZXhwbGljaXRlbHkgcmVtb3ZlZFxuICAgICAgICAgIGRlbGV0ZSBub2RlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9LFxuXG4gIF9pdGVyKC4uLmNoaWxkcmVuKSB7XG4gICAgaWYgKHRoaXMuX25vZGUuaXNPcHRpb25hbCgpKSB7XG4gICAgICBpZiAodGhpcy5udW1DaGlsZHJlbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlblswXS50b0FTVCh0aGlzLmFyZ3MubWFwcGluZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKTtcbiAgICB9LCB0aGlzKTtcbiAgfSxcblxuICBOb25lbXB0eUxpc3RPZihmaXJzdCwgc2VwLCByZXN0KSB7XG4gICAgcmV0dXJuIFtmaXJzdC50b0FTVCh0aGlzLmFyZ3MubWFwcGluZyldLmNvbmNhdChyZXN0LnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKSk7XG4gIH0sXG5cbiAgRW1wdHlMaXN0T2YoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxufTtcblxuLy8gUmV0dXJucyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IHRoYXQgaW5jbHVkZXMgYW4gYWJzdHJhY3Qgc3ludGF4IHRyZWUgKEFTVClcbi8vIGZvciB0aGUgZ2l2ZW4gbWF0Y2ggcmVzdWx0IGByZXNgIGNvbnRhaW5nIGEgY29uY3JldGUgc3ludGF4IHRyZWUgKENTVCkgYW5kIGdyYW1tYXIuXG4vLyBUaGUgb3B0aW9uYWwgYG1hcHBpbmdgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgaG93IHRoZSBub2RlcyBvZiB0aGUgQ1NUXG4vLyBhcmUgbWFwcGVkIHRvIHRoZSBBU1QgKHNlZSAvZG9jL2V4dHJhcy5tZCN0b2FzdG1hdGNocmVzdWx0LW1hcHBpbmcpLlxuZnVuY3Rpb24gdG9BU1QocmVzLCBtYXBwaW5nKSB7XG4gIGlmICh0eXBlb2YgcmVzLmZhaWxlZCAhPT0gJ2Z1bmN0aW9uJyB8fCByZXMuZmFpbGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvQVNUKCkgZXhwZWN0cyBhIHN1Y2Nlc2Z1bCBNYXRjaFJlc3VsdCBhcyBmaXJzdCBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIG1hcHBpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBtYXBwaW5nKTtcbiAgY29uc3Qgb3BlcmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wZXJhdGlvbik7XG4gIGZvciAoY29uc3QgdGVybU5hbWUgaW4gbWFwcGluZykge1xuICAgIGlmICh0eXBlb2YgbWFwcGluZ1t0ZXJtTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wZXJhdGlvblt0ZXJtTmFtZV0gPSBtYXBwaW5nW3Rlcm1OYW1lXTtcbiAgICAgIGRlbGV0ZSBtYXBwaW5nW3Rlcm1OYW1lXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZyA9IHJlcy5fY3N0LmdyYW1tYXI7XG4gIGNvbnN0IHMgPSBnLmNyZWF0ZVNlbWFudGljcygpLmFkZE9wZXJhdGlvbigndG9BU1QobWFwcGluZyknLCBvcGVyYXRpb24pO1xuICByZXR1cm4gcyhyZXMpLnRvQVNUKG1hcHBpbmcpO1xufVxuXG4vLyBSZXR1cm5zIGEgc2VtYW50aWNzIGNvbnRhaW5nIHRoZSB0b0FTVChtYXBwaW5nKSBvcGVyYXRpb24gZm9yIHRoZSBnaXZlbiBncmFtbWFyIGcuXG5mdW5jdGlvbiBzZW1hbnRpY3NGb3JUb0FTVChnKSB7XG4gIGlmICh0eXBlb2YgZy5jcmVhdGVTZW1hbnRpY3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlbWFudGljc1RvQVNUKCkgZXhwZWN0cyBhIEdyYW1tYXIgYXMgcGFyYW1ldGVyJyk7XG4gIH1cblxuICByZXR1cm4gZy5jcmVhdGVTZW1hbnRpY3MoKS5hZGRPcGVyYXRpb24oJ3RvQVNUKG1hcHBpbmcpJywgZGVmYXVsdE9wZXJhdGlvbik7XG59XG5cbnZhciBzZW1hbnRpY3NUb0FTVCA9IHtcbiAgaGVscGVyOiB0b0FTVCxcbiAgc2VtYW50aWNzOiBzZW1hbnRpY3NGb3JUb0FTVCxcbn07XG5cbnZhciBleHRyYXMgPSB7XG4gIFZpc2l0b3JGYW1pbHk6IFZpc2l0b3JGYW1pbHlfMSxcbiAgc2VtYW50aWNzRm9yVG9BU1Q6IHNlbWFudGljc1RvQVNULnNlbWFudGljcyxcbiAgdG9BU1Q6IHNlbWFudGljc1RvQVNULmhlbHBlcixcbn07XG5cbmV4cG9ydCB7IG9obSBhcyBkZWZhdWx0LCBleHRyYXMgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEltcG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IHthc3NlcnR9ID0gcmVxdWlyZSgnLi4vc3JjL2NvbW1vbicpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUHJpdmF0ZSBzdHVmZlxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gSGVscGVyc1xuXG5mdW5jdGlvbiBnZXRQcm9wKG5hbWUsIHRoaW5nLCBmbikge1xuICByZXR1cm4gZm4odGhpbmdbbmFtZV0pO1xufVxuXG5mdW5jdGlvbiBtYXBQcm9wKG5hbWUsIHRoaW5nLCBmbikge1xuICByZXR1cm4gdGhpbmdbbmFtZV0ubWFwKGZuKTtcbn1cblxuLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCB3YWxrIGEgc2luZ2xlIHByb3BlcnR5IG9mIGEgbm9kZS5cbi8vIGBkZXNjcmlwdG9yYCBpcyBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwcm9wZXJ0eSBuYW1lLCBvcHRpb25hbGx5IGVuZGluZ1xuLy8gd2l0aCAnW10nIChlLmcuLCAnY2hpbGRyZW5bXScpLlxuZnVuY3Rpb24gZ2V0UHJvcFdhbGtGbihkZXNjcmlwdG9yKSB7XG4gIGNvbnN0IHBhcnRzID0gZGVzY3JpcHRvci5zcGxpdCgvID9cXFtcXF0vKTtcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHJldHVybiBtYXBQcm9wLmJpbmQobnVsbCwgcGFydHNbMF0pO1xuICB9XG4gIHJldHVybiBnZXRQcm9wLmJpbmQobnVsbCwgZGVzY3JpcHRvcik7XG59XG5cbmZ1bmN0aW9uIGdldFByb3BzKHdhbGtGbnMsIHRoaW5nLCBmbikge1xuICByZXR1cm4gd2Fsa0Zucy5tYXAod2Fsa0ZuID0+IHdhbGtGbih0aGluZywgZm4pKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2Fsa0ZuKHNoYXBlKSB7XG4gIGlmICh0eXBlb2Ygc2hhcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGdldFByb3BzLmJpbmQobnVsbCwgW2dldFByb3BXYWxrRm4oc2hhcGUpXSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShzaGFwZSkpIHtcbiAgICByZXR1cm4gZ2V0UHJvcHMuYmluZChudWxsLCBzaGFwZS5tYXAoZ2V0UHJvcFdhbGtGbikpO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydCh0eXBlb2Ygc2hhcGUgPT09ICdmdW5jdGlvbicsICdFeHBlY3RlZCBhIHN0cmluZywgQXJyYXksIG9yIGZ1bmN0aW9uJyk7XG4gICAgYXNzZXJ0KHNoYXBlLmxlbmd0aCA9PT0gMiwgJ0V4cGVjdGVkIGEgZnVuY3Rpb24gb2YgYXJpdHkgMiwgZ290ICcgKyBzaGFwZS5sZW5ndGgpO1xuICAgIHJldHVybiBzaGFwZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1Jlc3RyaWN0ZWRJZGVudGlmaWVyKHN0cikge1xuICByZXR1cm4gL15bYS16QS1aX11bMC05YS16QS1aX10qJC8udGVzdChzdHIpO1xufVxuXG5mdW5jdGlvbiB0cmltKHMpIHtcbiAgcmV0dXJuIHMudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNpZ25hdHVyZShzaWcpIHtcbiAgY29uc3QgcGFydHMgPSBzaWcuc3BsaXQoL1soKV0vKS5tYXAodHJpbSk7XG4gIGlmIChwYXJ0cy5sZW5ndGggPT09IDMgJiYgcGFydHNbMl0gPT09ICcnKSB7XG4gICAgY29uc3QgbmFtZSA9IHBhcnRzWzBdO1xuICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICBpZiAocGFydHNbMV0ubGVuZ3RoID4gMCkge1xuICAgICAgcGFyYW1zID0gcGFydHNbMV0uc3BsaXQoJywnKS5tYXAodHJpbSk7XG4gICAgfVxuICAgIGlmIChpc1Jlc3RyaWN0ZWRJZGVudGlmaWVyKG5hbWUpICYmIHBhcmFtcy5ldmVyeShpc1Jlc3RyaWN0ZWRJZGVudGlmaWVyKSkge1xuICAgICAgcmV0dXJuIHtuYW1lLCBmb3JtYWxzOiBwYXJhbXN9O1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgb3BlcmF0aW9uIHNpZ25hdHVyZTogJyArIHNpZyk7XG59XG5cbi8qXG4gIEEgVmlzaXRvckZhbWlseSBjb250YWlucyBhIHNldCBvZiByZWN1cnNpdmUgb3BlcmF0aW9ucyB0aGF0IGFyZSBkZWZpbmVkIG92ZXIgc29tZSBraW5kIG9mXG4gIHRyZWUgc3RydWN0dXJlLiBUaGUgYGNvbmZpZ2AgcGFyYW1ldGVyIHNwZWNpZmllcyBob3cgdG8gd2FsayB0aGUgdHJlZTpcbiAgLSAnZ2V0VGFnJyBpcyBmdW5jdGlvbiB3aGljaCwgZ2l2ZW4gYSBub2RlIGluIHRoZSB0cmVlLCByZXR1cm5zIHRoZSBub2RlJ3MgJ3RhZycgKHR5cGUpXG4gIC0gJ3NoYXBlcycgYW4gb2JqZWN0IHRoYXQgbWFwcyBmcm9tIGEgdGFnIHRvIGEgdmFsdWUgdGhhdCBkZXNjcmliZXMgaG93IHRvIHJlY3Vyc2l2ZWx5XG4gICAgZXZhbHVhdGUgdGhlIG9wZXJhdGlvbiBmb3Igbm9kZXMgb2YgdGhhdCB0eXBlLiBUaGUgdmFsdWUgY2FuIGJlOlxuICAgICogYSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcHJvcGVydHkgbmFtZSB0aGF0IGhvbGRzIHRoYXQgbm9kZSdzIG9ubHkgY2hpbGRcbiAgICAqIGFuIEFycmF5IG9mIHByb3BlcnR5IG5hbWVzIChvciBhbiBlbXB0eSBhcnJheSBpbmRpY2F0aW5nIGEgbGVhZiB0eXBlKSwgb3JcbiAgICAqIGEgZnVuY3Rpb24gdGFraW5nIHR3byBhcmd1bWVudHMgKG5vZGUsIGZuKSwgYW5kIHJldHVybmluZyBhbiBBcnJheSB3aGljaCBpcyB0aGUgcmVzdWx0XG4gICAgICBvZiBhcHBseSBgZm5gIHRvIGVhY2ggb2YgdGhlIG5vZGUncyBjaGlsZHJlbi5cbiAqL1xuZnVuY3Rpb24gVmlzaXRvckZhbWlseShjb25maWcpIHtcbiAgdGhpcy5fc2hhcGVzID0gY29uZmlnLnNoYXBlcztcbiAgdGhpcy5fZ2V0VGFnID0gY29uZmlnLmdldFRhZztcblxuICB0aGlzLkFkYXB0ZXIgPSBmdW5jdGlvbih0aGluZywgZmFtaWx5KSB7XG4gICAgdGhpcy5fYWRhcHRlZSA9IHRoaW5nO1xuICAgIHRoaXMuX2ZhbWlseSA9IGZhbWlseTtcbiAgfTtcbiAgdGhpcy5BZGFwdGVyLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdoZWVleSEnKTtcbiAgfTtcbiAgdGhpcy5vcGVyYXRpb25zID0ge307XG5cbiAgdGhpcy5fYXJpdGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX2dldENoaWxkcmVuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBPYmplY3Qua2V5cyh0aGlzLl9zaGFwZXMpLmZvckVhY2goayA9PiB7XG4gICAgY29uc3Qgc2hhcGUgPSB0aGlzLl9zaGFwZXNba107XG4gICAgdGhpcy5fZ2V0Q2hpbGRyZW5ba10gPSBnZXRXYWxrRm4oc2hhcGUpO1xuXG4gICAgLy8gQSBmdW5jdGlvbiBtZWFucyB0aGUgYXJpdHkgaXNuJ3QgZml4ZWQsIHNvIGRvbid0IHB1dCBhbiBlbnRyeSBpbiB0aGUgYXJpdHkgbWFwLlxuICAgIGlmICh0eXBlb2Ygc2hhcGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2FyaXRpZXNba10gPSBBcnJheS5pc0FycmF5KHNoYXBlKSA/IHNoYXBlLmxlbmd0aCA6IDE7XG4gICAgfVxuICB9KTtcbiAgdGhpcy5fd3JhcCA9IHRoaW5nID0+IG5ldyB0aGlzLkFkYXB0ZXIodGhpbmcsIHRoaXMpO1xufVxuXG5WaXNpdG9yRmFtaWx5LnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24odGhpbmcpIHtcbiAgcmV0dXJuIHRoaXMuX3dyYXAodGhpbmcpO1xufTtcblxuVmlzaXRvckZhbWlseS5wcm90b3R5cGUuX2NoZWNrQWN0aW9uRGljdCA9IGZ1bmN0aW9uKGRpY3QpIHtcbiAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrID0+IHtcbiAgICBhc3NlcnQoayBpbiB0aGlzLl9nZXRDaGlsZHJlbiwgXCJVbnJlY29nbml6ZWQgYWN0aW9uIG5hbWUgJ1wiICsgayArIFwiJ1wiKTtcbiAgICBjb25zdCBhY3Rpb24gPSBkaWN0W2tdO1xuICAgIGFzc2VydCh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nLCBcIktleSAnXCIgKyBrICsgXCInOiBleHBlY3RlZCBmdW5jdGlvbiwgZ290IFwiICsgYWN0aW9uKTtcbiAgICBpZiAoayBpbiB0aGlzLl9hcml0aWVzKSB7XG4gICAgICBjb25zdCBleHBlY3RlZCA9IHRoaXMuX2FyaXRpZXNba107XG4gICAgICBjb25zdCBhY3R1YWwgPSBkaWN0W2tdLmxlbmd0aDtcbiAgICAgIGFzc2VydChcbiAgICAgICAgICBhY3R1YWwgPT09IGV4cGVjdGVkLFxuICAgICAgICAgIFwiQWN0aW9uICdcIiArIGsgKyBcIicgaGFzIHRoZSB3cm9uZyBhcml0eTogZXhwZWN0ZWQgXCIgKyBleHBlY3RlZCArICcsIGdvdCAnICsgYWN0dWFsXG4gICAgICApO1xuICAgIH1cbiAgfSk7XG59O1xuXG5WaXNpdG9yRmFtaWx5LnByb3RvdHlwZS5hZGRPcGVyYXRpb24gPSBmdW5jdGlvbihzaWduYXR1cmUsIGFjdGlvbnMpIHtcbiAgY29uc3Qgc2lnID0gcGFyc2VTaWduYXR1cmUoc2lnbmF0dXJlKTtcbiAgY29uc3Qge25hbWV9ID0gc2lnO1xuICB0aGlzLl9jaGVja0FjdGlvbkRpY3QoYWN0aW9ucyk7XG4gIHRoaXMub3BlcmF0aW9uc1tuYW1lXSA9IHtcbiAgICBuYW1lLFxuICAgIGZvcm1hbHM6IHNpZy5mb3JtYWxzLFxuICAgIGFjdGlvbnMsXG4gIH07XG5cbiAgY29uc3QgZmFtaWx5ID0gdGhpcztcbiAgdGhpcy5BZGFwdGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0YWcgPSBmYW1pbHkuX2dldFRhZyh0aGlzLl9hZGFwdGVlKTtcbiAgICBhc3NlcnQodGFnIGluIGZhbWlseS5fZ2V0Q2hpbGRyZW4sIFwiZ2V0VGFnIHJldHVybmVkIHVucmVjb2duaXplZCB0YWcgJ1wiICsgdGFnICsgXCInXCIpO1xuICAgIGFzc2VydCh0YWcgaW4gYWN0aW9ucywgXCJObyBhY3Rpb24gZm9yICdcIiArIHRhZyArIFwiJyBpbiBvcGVyYXRpb24gJ1wiICsgbmFtZSArIFwiJ1wiKTtcblxuICAgIC8vIENyZWF0ZSBhbiBcImFyZ3VtZW50cyBvYmplY3RcIiBmcm9tIHRoZSBhcmd1bWVudHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGlzXG4gICAgLy8gb3BlcmF0aW9uIC8gYXR0cmlidXRlLlxuICAgIGNvbnN0IGFyZ3NPYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgW2ksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMoYXJncykpIHtcbiAgICAgIGFyZ3NPYmpbc2lnLmZvcm1hbHNbaV1dID0gdmFsO1xuICAgIH1cblxuICAgIGNvbnN0IG9sZEFyZ3MgPSB0aGlzLmFyZ3M7XG4gICAgdGhpcy5hcmdzID0gYXJnc09iajtcbiAgICBjb25zdCBhbnMgPSBhY3Rpb25zW3RhZ10uYXBwbHkoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZhbWlseS5fZ2V0Q2hpbGRyZW5bdGFnXSh0aGlzLl9hZGFwdGVlLCBmYW1pbHkuX3dyYXApXG4gICAgKTtcbiAgICB0aGlzLmFyZ3MgPSBvbGRBcmdzO1xuICAgIHJldHVybiBhbnM7XG4gIH07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbm1vZHVsZS5leHBvcnRzID0gVmlzaXRvckZhbWlseTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFZpc2l0b3JGYW1pbHk6IHJlcXVpcmUoJy4vVmlzaXRvckZhbWlseScpLFxuICBzZW1hbnRpY3NGb3JUb0FTVDogcmVxdWlyZSgnLi9zZW1hbnRpY3MtdG9BU1QnKS5zZW1hbnRpY3MsXG4gIHRvQVNUOiByZXF1aXJlKCcuL3NlbWFudGljcy10b0FTVCcpLmhlbHBlcixcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBPcGVyYXRpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb25zdCBkZWZhdWx0T3BlcmF0aW9uID0ge1xuICBfdGVybWluYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlU3RyaW5nO1xuICB9LFxuXG4gIF9ub250ZXJtaW5hbCguLi5jaGlsZHJlbikge1xuICAgIGNvbnN0IHtjdG9yTmFtZX0gPSB0aGlzLl9ub2RlO1xuICAgIGNvbnN0IHttYXBwaW5nfSA9IHRoaXMuYXJncztcblxuICAgIC8vIHdpdGhvdXQgY3VzdG9taXphdGlvblxuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcHBpbmcsIGN0b3JOYW1lKSkge1xuICAgICAgLy8gbGV4aWNhbCBydWxlXG4gICAgICBpZiAodGhpcy5pc0xleGljYWwoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VTdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIC8vIHNpbmd1bGFyIG5vZGUgKGUuZy4gb25seSBzdXJyb3VuZGVkIGJ5IGxpdGVyYWxzIG9yIGxvb2thaGVhZHMpXG4gICAgICBjb25zdCByZWFsQ2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoY2hpbGQgPT4gIWNoaWxkLmlzVGVybWluYWwoKSk7XG4gICAgICBpZiAocmVhbENoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmVhbENoaWxkcmVuWzBdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICAvLyByZXN0OiB0ZXJtcyB3aXRoIG11bHRpcGxlIGNoaWxkcmVuXG4gICAgfVxuXG4gICAgLy8gZGlyZWN0IGZvcndhcmRcbiAgICBpZiAodHlwZW9mIG1hcHBpbmdbY3Rvck5hbWVdID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW21hcHBpbmdbY3Rvck5hbWVdXS50b0FTVChtYXBwaW5nKTtcbiAgICB9XG5cbiAgICAvLyBuYW1lZC9tYXBwZWQgY2hpbGRyZW4gb3IgdW5uYW1lZCBjaGlsZHJlbiAoJzAnLCAnMScsICcyJywgLi4uKVxuICAgIGNvbnN0IHByb3BNYXAgPSBtYXBwaW5nW2N0b3JOYW1lXSB8fCBjaGlsZHJlbjtcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgdHlwZTogY3Rvck5hbWUsXG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BNYXApIHtcbiAgICAgIGNvbnN0IG1hcHBlZFByb3AgPSBtYXBwaW5nW2N0b3JOYW1lXSAmJiBtYXBwaW5nW2N0b3JOYW1lXVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gZGlyZWN0IGZvcndhcmRcbiAgICAgICAgbm9kZVtwcm9wXSA9IGNoaWxkcmVuW21hcHBlZFByb3BdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG1hcHBlZFByb3AgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgIHR5cGVvZiBtYXBwZWRQcm9wID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgbWFwcGVkUHJvcCA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vIHByaW1pdGl2ZSB2YWx1ZVxuICAgICAgICBub2RlW3Byb3BdID0gbWFwcGVkUHJvcDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1hcHBlZFByb3AgPT09ICdvYmplY3QnICYmIG1hcHBlZFByb3AgaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgLy8gcHJpbWl0aXZlIG51bWJlciAobXVzdCBiZSB1bmJveGVkKVxuICAgICAgICBub2RlW3Byb3BdID0gTnVtYmVyKG1hcHBlZFByb3ApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWFwcGVkUHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBjb21wdXRlZCB2YWx1ZVxuICAgICAgICBub2RlW3Byb3BdID0gbWFwcGVkUHJvcC5jYWxsKHRoaXMsIGNoaWxkcmVuKTtcbiAgICAgIH0gZWxzZSBpZiAobWFwcGVkUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChjaGlsZHJlbltwcm9wXSAmJiAhY2hpbGRyZW5bcHJvcF0uaXNUZXJtaW5hbCgpKSB7XG4gICAgICAgICAgbm9kZVtwcm9wXSA9IGNoaWxkcmVuW3Byb3BdLnRvQVNUKG1hcHBpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlbGV0ZSBwcmVkZWZpbmVkICd0eXBlJyBwcm9wZXJ0aWVzLCBsaWtlICd0eXBlJywgaWYgZXhwbGljaXRlbHkgcmVtb3ZlZFxuICAgICAgICAgIGRlbGV0ZSBub2RlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9LFxuXG4gIF9pdGVyKC4uLmNoaWxkcmVuKSB7XG4gICAgaWYgKHRoaXMuX25vZGUuaXNPcHRpb25hbCgpKSB7XG4gICAgICBpZiAodGhpcy5udW1DaGlsZHJlbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlblswXS50b0FTVCh0aGlzLmFyZ3MubWFwcGluZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgcmV0dXJuIGNoaWxkLnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKTtcbiAgICB9LCB0aGlzKTtcbiAgfSxcblxuICBOb25lbXB0eUxpc3RPZihmaXJzdCwgc2VwLCByZXN0KSB7XG4gICAgcmV0dXJuIFtmaXJzdC50b0FTVCh0aGlzLmFyZ3MubWFwcGluZyldLmNvbmNhdChyZXN0LnRvQVNUKHRoaXMuYXJncy5tYXBwaW5nKSk7XG4gIH0sXG5cbiAgRW1wdHlMaXN0T2YoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxufTtcblxuLy8gUmV0dXJucyBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0IHRoYXQgaW5jbHVkZXMgYW4gYWJzdHJhY3Qgc3ludGF4IHRyZWUgKEFTVClcbi8vIGZvciB0aGUgZ2l2ZW4gbWF0Y2ggcmVzdWx0IGByZXNgIGNvbnRhaW5nIGEgY29uY3JldGUgc3ludGF4IHRyZWUgKENTVCkgYW5kIGdyYW1tYXIuXG4vLyBUaGUgb3B0aW9uYWwgYG1hcHBpbmdgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgaG93IHRoZSBub2RlcyBvZiB0aGUgQ1NUXG4vLyBhcmUgbWFwcGVkIHRvIHRoZSBBU1QgKHNlZSAvZG9jL2V4dHJhcy5tZCN0b2FzdG1hdGNocmVzdWx0LW1hcHBpbmcpLlxuZnVuY3Rpb24gdG9BU1QocmVzLCBtYXBwaW5nKSB7XG4gIGlmICh0eXBlb2YgcmVzLmZhaWxlZCAhPT0gJ2Z1bmN0aW9uJyB8fCByZXMuZmFpbGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvQVNUKCkgZXhwZWN0cyBhIHN1Y2Nlc2Z1bCBNYXRjaFJlc3VsdCBhcyBmaXJzdCBwYXJhbWV0ZXInKTtcbiAgfVxuXG4gIG1hcHBpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBtYXBwaW5nKTtcbiAgY29uc3Qgb3BlcmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wZXJhdGlvbik7XG4gIGZvciAoY29uc3QgdGVybU5hbWUgaW4gbWFwcGluZykge1xuICAgIGlmICh0eXBlb2YgbWFwcGluZ1t0ZXJtTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wZXJhdGlvblt0ZXJtTmFtZV0gPSBtYXBwaW5nW3Rlcm1OYW1lXTtcbiAgICAgIGRlbGV0ZSBtYXBwaW5nW3Rlcm1OYW1lXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZyA9IHJlcy5fY3N0LmdyYW1tYXI7XG4gIGNvbnN0IHMgPSBnLmNyZWF0ZVNlbWFudGljcygpLmFkZE9wZXJhdGlvbigndG9BU1QobWFwcGluZyknLCBvcGVyYXRpb24pO1xuICByZXR1cm4gcyhyZXMpLnRvQVNUKG1hcHBpbmcpO1xufVxuXG4vLyBSZXR1cm5zIGEgc2VtYW50aWNzIGNvbnRhaW5nIHRoZSB0b0FTVChtYXBwaW5nKSBvcGVyYXRpb24gZm9yIHRoZSBnaXZlbiBncmFtbWFyIGcuXG5mdW5jdGlvbiBzZW1hbnRpY3NGb3JUb0FTVChnKSB7XG4gIGlmICh0eXBlb2YgZy5jcmVhdGVTZW1hbnRpY3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NlbWFudGljc1RvQVNUKCkgZXhwZWN0cyBhIEdyYW1tYXIgYXMgcGFyYW1ldGVyJyk7XG4gIH1cblxuICByZXR1cm4gZy5jcmVhdGVTZW1hbnRpY3MoKS5hZGRPcGVyYXRpb24oJ3RvQVNUKG1hcHBpbmcpJywgZGVmYXVsdE9wZXJhdGlvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBoZWxwZXI6IHRvQVNULFxuICBzZW1hbnRpY3M6IHNlbWFudGljc0ZvclRvQVNULFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFByaXZhdGUgU3R1ZmZcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIEhlbHBlcnNcblxuY29uc3QgZXNjYXBlU3RyaW5nRm9yID0ge307XG5mb3IgKGxldCBjID0gMDsgYyA8IDEyODsgYysrKSB7XG4gIGVzY2FwZVN0cmluZ0ZvcltjXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG59XG5lc2NhcGVTdHJpbmdGb3JbXCInXCIuY2hhckNvZGVBdCgwKV0gPSBcIlxcXFwnXCI7XG5lc2NhcGVTdHJpbmdGb3JbJ1wiJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcXCInO1xuZXNjYXBlU3RyaW5nRm9yWydcXFxcJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcXFxcXCc7XG5lc2NhcGVTdHJpbmdGb3JbJ1xcYicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXGInO1xuZXNjYXBlU3RyaW5nRm9yWydcXGYnLmNoYXJDb2RlQXQoMCldID0gJ1xcXFxmJztcbmVzY2FwZVN0cmluZ0ZvclsnXFxuJy5jaGFyQ29kZUF0KDApXSA9ICdcXFxcbic7XG5lc2NhcGVTdHJpbmdGb3JbJ1xccicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXHInO1xuZXNjYXBlU3RyaW5nRm9yWydcXHQnLmNoYXJDb2RlQXQoMCldID0gJ1xcXFx0JztcbmVzY2FwZVN0cmluZ0ZvclsnXFx1MDAwYicuY2hhckNvZGVBdCgwKV0gPSAnXFxcXHYnO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRXhwb3J0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0cy5hYnN0cmFjdCA9IGZ1bmN0aW9uKG9wdE1ldGhvZE5hbWUpIHtcbiAgY29uc3QgbWV0aG9kTmFtZSA9IG9wdE1ldGhvZE5hbWUgfHwgJyc7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICd0aGlzIG1ldGhvZCAnICtcbiAgICAgICAgbWV0aG9kTmFtZSArXG4gICAgICAgICcgaXMgYWJzdHJhY3QhICcgK1xuICAgICAgICAnKGl0IGhhcyBubyBpbXBsZW1lbnRhdGlvbiBpbiBjbGFzcyAnICtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICtcbiAgICAgICAgJyknXG4gICAgKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuYXNzZXJ0ID0gZnVuY3Rpb24oY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG59O1xuXG4vLyBEZWZpbmUgYSBsYXppbHktY29tcHV0ZWQsIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVkIGBwcm9wTmFtZWBcbi8vIG9uIHRoZSBvYmplY3QgYG9iamAuIGBnZXR0ZXJGbmAgd2lsbCBiZSBjYWxsZWQgdG8gY29tcHV0ZSB0aGUgdmFsdWUgdGhlXG4vLyBmaXJzdCB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC5cbmV4cG9ydHMuZGVmaW5lTGF6eVByb3BlcnR5ID0gZnVuY3Rpb24ob2JqLCBwcm9wTmFtZSwgZ2V0dGVyRm4pIHtcbiAgbGV0IG1lbW87XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3BOYW1lLCB7XG4gICAgZ2V0KCkge1xuICAgICAgaWYgKCFtZW1vKSB7XG4gICAgICAgIG1lbW8gPSBnZXR0ZXJGbi5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSxcbiAgfSk7XG59O1xuXG5leHBvcnRzLmNsb25lID0gZnVuY3Rpb24ob2JqKSB7XG4gIGlmIChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcblxuZXhwb3J0cy5yZXBlYXRGbiA9IGZ1bmN0aW9uKGZuLCBuKSB7XG4gIGNvbnN0IGFyciA9IFtdO1xuICB3aGlsZSAobi0tID4gMCkge1xuICAgIGFyci5wdXNoKGZuKCkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG5leHBvcnRzLnJlcGVhdFN0ciA9IGZ1bmN0aW9uKHN0ciwgbikge1xuICByZXR1cm4gbmV3IEFycmF5KG4gKyAxKS5qb2luKHN0cik7XG59O1xuXG5leHBvcnRzLnJlcGVhdCA9IGZ1bmN0aW9uKHgsIG4pIHtcbiAgcmV0dXJuIGV4cG9ydHMucmVwZWF0Rm4oKCkgPT4geCwgbik7XG59O1xuXG5leHBvcnRzLmdldER1cGxpY2F0ZXMgPSBmdW5jdGlvbihhcnJheSkge1xuICBjb25zdCBkdXBsaWNhdGVzID0gW107XG4gIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGFycmF5Lmxlbmd0aDsgaWR4KyspIHtcbiAgICBjb25zdCB4ID0gYXJyYXlbaWR4XTtcbiAgICBpZiAoYXJyYXkubGFzdEluZGV4T2YoeCkgIT09IGlkeCAmJiBkdXBsaWNhdGVzLmluZGV4T2YoeCkgPCAwKSB7XG4gICAgICBkdXBsaWNhdGVzLnB1c2goeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkdXBsaWNhdGVzO1xufTtcblxuZXhwb3J0cy5jb3B5V2l0aG91dER1cGxpY2F0ZXMgPSBmdW5jdGlvbihhcnJheSkge1xuICBjb25zdCBub0R1cGxpY2F0ZXMgPSBbXTtcbiAgYXJyYXkuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgaWYgKG5vRHVwbGljYXRlcy5pbmRleE9mKGVudHJ5KSA8IDApIHtcbiAgICAgIG5vRHVwbGljYXRlcy5wdXNoKGVudHJ5KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbm9EdXBsaWNhdGVzO1xufTtcblxuZXhwb3J0cy5pc1N5bnRhY3RpYyA9IGZ1bmN0aW9uKHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGZpcnN0Q2hhciA9IHJ1bGVOYW1lWzBdO1xuICByZXR1cm4gZmlyc3RDaGFyID09PSBmaXJzdENoYXIudG9VcHBlckNhc2UoKTtcbn07XG5cbmV4cG9ydHMuaXNMZXhpY2FsID0gZnVuY3Rpb24ocnVsZU5hbWUpIHtcbiAgcmV0dXJuICFleHBvcnRzLmlzU3ludGFjdGljKHJ1bGVOYW1lKTtcbn07XG5cbmV4cG9ydHMucGFkTGVmdCA9IGZ1bmN0aW9uKHN0ciwgbGVuLCBvcHRDaGFyKSB7XG4gIGNvbnN0IGNoID0gb3B0Q2hhciB8fCAnICc7XG4gIGlmIChzdHIubGVuZ3RoIDwgbGVuKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMucmVwZWF0U3RyKGNoLCBsZW4gLSBzdHIubGVuZ3RoKSArIHN0cjtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuLy8gU3RyaW5nQnVmZmVyXG5cbmV4cG9ydHMuU3RyaW5nQnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc3RyaW5ncyA9IFtdO1xufTtcblxuZXhwb3J0cy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uKHN0cikge1xuICB0aGlzLnN0cmluZ3MucHVzaChzdHIpO1xufTtcblxuZXhwb3J0cy5TdHJpbmdCdWZmZXIucHJvdG90eXBlLmNvbnRlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnN0cmluZ3Muam9pbignJyk7XG59O1xuXG5jb25zdCBlc2NhcGVVbmljb2RlID0gc3RyID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KHN0ciwgMTYpKTtcblxuZXhwb3J0cy51bmVzY2FwZUNvZGVQb2ludCA9IGZ1bmN0aW9uKHMpIHtcbiAgaWYgKHMuY2hhckF0KDApID09PSAnXFxcXCcpIHtcbiAgICBzd2l0Y2ggKHMuY2hhckF0KDEpKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgICAgcmV0dXJuICdcXGInO1xuICAgICAgY2FzZSAnZic6XG4gICAgICAgIHJldHVybiAnXFxmJztcbiAgICAgIGNhc2UgJ24nOlxuICAgICAgICByZXR1cm4gJ1xcbic7XG4gICAgICBjYXNlICdyJzpcbiAgICAgICAgcmV0dXJuICdcXHInO1xuICAgICAgY2FzZSAndCc6XG4gICAgICAgIHJldHVybiAnXFx0JztcbiAgICAgIGNhc2UgJ3YnOlxuICAgICAgICByZXR1cm4gJ1xcdic7XG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGVzY2FwZVVuaWNvZGUocy5zbGljZSgyLCA0KSk7XG4gICAgICBjYXNlICd1JzpcbiAgICAgICAgcmV0dXJuIHMuY2hhckF0KDIpID09PSAneycgP1xuICAgICAgICAgIGVzY2FwZVVuaWNvZGUocy5zbGljZSgzLCAtMSkpIDpcbiAgICAgICAgICBlc2NhcGVVbmljb2RlKHMuc2xpY2UoMiwgNikpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHMuY2hhckF0KDEpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufTtcblxuLy8gSGVscGVyIGZvciBwcm9kdWNpbmcgYSBkZXNjcmlwdGlvbiBvZiBhbiB1bmtub3duIG9iamVjdCBpbiBhIHNhZmUgd2F5LlxuLy8gRXNwZWNpYWxseSB1c2VmdWwgZm9yIGVycm9yIG1lc3NhZ2VzIHdoZXJlIGFuIHVuZXhwZWN0ZWQgdHlwZSBvZiBvYmplY3Qgd2FzIGVuY291bnRlcmVkLlxuZXhwb3J0cy51bmV4cGVjdGVkT2JqVG9TdHJpbmcgPSBmdW5jdGlvbihvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xuICB9XG4gIGNvbnN0IGJhc2VUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuICB0cnkge1xuICAgIGxldCB0eXBlTmFtZTtcbiAgICBpZiAob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICB0eXBlTmFtZSA9IG9iai5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH0gZWxzZSBpZiAoYmFzZVRvU3RyaW5nLmluZGV4T2YoJ1tvYmplY3QgJykgPT09IDApIHtcbiAgICAgIHR5cGVOYW1lID0gYmFzZVRvU3RyaW5nLnNsaWNlKDgsIC0xKTsgLy8gRXh0cmFjdCBlLmcuIFwiQXJyYXlcIiBmcm9tIFwiW29iamVjdCBBcnJheV1cIi5cbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZU5hbWUgPSB0eXBlb2Ygb2JqO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZU5hbWUgKyAnOiAnICsgSlNPTi5zdHJpbmdpZnkoU3RyaW5nKG9iaikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGJhc2VUb1N0cmluZztcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9wcmV0dGllcl9fOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9kaXN0L2luZGV4LmpzXCIpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9