LiquidHTML {
  Node
    = yamlFrontmatter? (HtmlNode | liquidNode | TextNode)*

  yamlFrontmatter =
    "---" newline anyExceptStar<"---"> "---" newline

  HtmlNode =
    | HtmlComment
    | HtmlRawTag
    | HtmlVoidElement
    | HtmlSelfClosingElement
    | HtmlTagClose
    | HtmlTagOpen

  HtmlComment = "<!--" #(anyExceptStar<"-->"> "-->")

  // These are black holes, we'll ignore what's in them
  HtmlRawTag =
    | HtmlRawTagImpl<"script">
    | HtmlRawTagImpl<"style">
    | HtmlRawTagImpl<"svg">

  HtmlRawTagImpl<name> =
    #("<" name) AttrList ">" #(anyExceptStar<endTag<name>> endTag<name>)

  endTag<name> =
    "</" name space* ">"

  HtmlVoidElement =
    #("<" voidElementName &(space | "/" | ">")) AttrList "/"? ">"

  HtmlSelfClosingElement =
    #("<" tagNameOrLiquidDrop) AttrList "/>"

  HtmlTagOpen =
    #("<" tagNameOrLiquidDrop) AttrList ">"

  HtmlTagClose =
    #("</" tagNameOrLiquidDrop) ">"

  tagNameOrLiquidDrop =
    | tagName
    | liquidDrop

  tagName =
    letter (alnum | "-" | ":")*

  liquidTagName =
    letter (alnum | "_")*

  AttrList = Attr*

  Attr =
    liquidNode | AttrSingleQuoted | AttrDoubleQuoted | AttrUnquoted | attrEmpty

  attrEmpty = attrName

  AttrUnquoted = attrName "=" attrUnquotedValue
  AttrSingleQuoted = attrName "=" "'" #(attrSingleQuotedValue "'")
  AttrDoubleQuoted = attrName "=" "\"" #(attrDoubleQuotedValue "\"")

  // https://html.spec.whatwg.org/#attributes-2
  attrName = anyExceptPlus<(space | quotes | "=" | ">" | "/" | "{{" | "{%" | controls | noncharacters)>
  attrUnquotedValue = (attrUnquotedTextNode)*
  attrSingleQuotedValue = (liquidNode | attrSingleQuotedTextNode)*
  attrDoubleQuotedValue = (liquidNode | attrDoubleQuotedTextNode)*

  attrUnquotedTextNode = anyExceptPlus<(space | quotes | "=" | "<" | ">" | "`" | "{{" | "{%")>
  attrSingleQuotedTextNode = anyExceptPlus<("'" | "{{" | "{%")>
  attrDoubleQuotedTextNode = anyExceptPlus<("\""| "{{" | "{%")>

  quotes =  "'" | "\""

  LiquidNode = liquidNode
  liquidNode = liquidRawTag | liquidDrop | liquidTagClose | liquidTagOpen | liquidTag | liquidInlineComment

  liquidTagOpen = "{%" "-"? space* blockName space* tagMarkup "-"? "%}"
  liquidTagClose = "{%" "-"? space* "end" blockName space* tagMarkup "-"? "%}"
  liquidTag = "{%" "-"? space* liquidTagName space? tagMarkup "-"? "%}"
  liquidDrop = "{{" "-"? space* liquidDropCases "-"? "}}"
  liquidDropCases = liquidVariable | liquidDropBaseCase
  liquidDropBaseCase = anyExceptStar<("-}}" | "}}")>
  liquidInlineComment = "{%" "-"? space* "#" space? tagMarkup "-"? "%}"

  liquidRawTag =
    | liquidRawTagImpl<"raw">
    | liquidRawTagImpl<"comment">
    | liquidRawTagImpl<"javascript">
    | liquidRawTagImpl<"schema">
    | liquidRawTagImpl<"style">
  liquidRawTagImpl<name> =
    "{%" "-"? space* name space* "-"? "%}"
    anyExceptStar<liquidRawTagClose<name>>
    "{%" "-"? space* "end" name space* "-"? "%}"
  liquidRawTagClose<name> =
    "{%" "-"? space* "end" name space* "-"? "%}"

  // In order for the grammar to "fallback" to the base case, this
  // rule must pass if and only if we support what we parse. This
  // implies that—since we don't support filters yet—we have a
  // positive lookahead on "-}}" or "}}" in the rule. We do this
  // because we'd otherwise positively match the following string
  // instead of falling back to the other rule:
  // {{ 'string' | some_filter }}
  liquidVariable = liquidExpression liquidFilter* space* &("-}}" | "}}")

  liquidExpression =
    | liquidString
    | liquidNumber
    | liquidLiteral
    | liquidRange
    | liquidVariableLookup

  liquidString = liquidSingleQuotedString | liquidDoubleQuotedString
  liquidSingleQuotedString = "'" anyExceptStar<("'"| "%}" | "}}")> "'"
  liquidDoubleQuotedString = "\"" anyExceptStar<("\""| "%}" | "}}")> "\""

  liquidNumber = liquidFloat | liquidInteger
  liquidInteger = "-"? digit+
  liquidFloat = "-"? digit+ "." digit+

  liquidLiteral =
    ( "true"
    | "false"
    | "blank"
    | "empty"
    | "nil"
    | "null"
    ) ~identifierCharacter

  liquidRange =
    "(" space* liquidExpression space* ".." space* liquidExpression space* ")"

  liquidVariableLookup = variableSegment? lookup*
  lookup =
    | indexLookup
    | dotLookup
  indexLookup = space* "[" space* liquidExpression space* "]"
  dotLookup = space* "." space* identifier

  liquidFilter = space* "|" space* identifier (space* ":" space* filterArguments)?
  filterSeparator = space* "," space*
  filterArguments = listOf<filterArgument, filterSeparator>
  filterArgument = namedArgument | positionalArgument
  positionalArgument = liquidExpression
  namedArgument = variableSegment space* ":" space* liquidExpression

  variableSegment = (letter | "_") identifierCharacter*
  identifier = variableSegment "?"?

  // https://www.w3.org/TR/2011/WD-html-markup-20110113/syntax.html#void-element
  // Cheating a bit with by stretching it to the doctype
  voidElementName =
    ( caseInsensitive<"!doctype">
    | caseInsensitive<"area">
    | caseInsensitive<"base">
    | caseInsensitive<"br">
    | caseInsensitive<"col">
    | caseInsensitive<"command">
    | caseInsensitive<"embed">
    | caseInsensitive<"hr">
    | caseInsensitive<"img">
    | caseInsensitive<"input">
    | caseInsensitive<"keygen">
    | caseInsensitive<"link">
    | caseInsensitive<"meta">
    | caseInsensitive<"param">
    | caseInsensitive<"source">
    | caseInsensitive<"track">
    | caseInsensitive<"wbr">
    ) ~identifierCharacter

  blockName =
    // Shopify blocks
    ( "style"
    | "form"
    | "paginate"
    // Base blocks
    | "capture"
    | "case"
    | "for"
    | "ifchanged"
    | "if"
    | "unless"
    | "raw"
    | "tablerow"
    ) ~identifierCharacter

  tagMarkup = anyExceptStar<("-%}"| "%}")>

  anyExcept<lit> = (~ lit any)
  anyExceptStar<lit> = (~ lit any)*
  anyExceptPlus<lit> = (~ lit any)+
  AnyExcept<lit> = (~ lit any)
  AnyExceptPlus<lit> = (~ lit any)+
  AnyExceptStar<lit> = (~ lit any)*
  identifierCharacter = alnum | "_" | "-"

  TextNode = AnyExceptPlus<openControl>
  openControl = "<" | "{{" | "{%"
  controls = "\u{007F}".."\u{009F}"
  noncharacters = "\u{FDD0}".."\u{FDEF}"
  newline = "\r"? "\n"
}
